!function () {
    "use strict";
    var auto = false;
    var heroinfo = {};
    var npcinfo = {};
    var npcid = 0;
    var startgame = false;
    var endgame = false;
    var blockinfo = {};
    var blockIddd = 0;
    var HerosEnter = {};
    var blocklen = 0;
    var blockindex = 0;
    var mapindex = 0;
    var skillid = 0;
    var lose = false;
	var closegame = false;
    class c {}
    c.GAME_LOCKED = "onGameLockChange",
    c.DATA_LOADED = "onDataLoaded",
    c.ENTER_GAME = "onEnterGame",
    c.FIGHT_INITED = "onFightInited",
    c.DISPLAY_CHANGE = "onDisplayChange",
    c.NET_DISCONNECTED = "onNetDisconnected",
    c.NET_RECONNECTED = "onNetReconnected",
    c.NET_RESTARTGAME = "onNetRestartGame",
    c.NET_TYPE_CHANGE = "onNetTypeChanged",
    c.REENTER_GAME = "onReEnterGame",
    c.COPPER_CHANGE = "onCopperChange",
    c.TAP_TOKEN_CHANGE = "onTapTokenChange",
    c.DIAMOND_CHANGE = "onDiamondChange",
    c.LOGIN_REGISTER = "onLoginRegister",
    c.HOME_MAP_CHANGE = "onHomeMapChange",
    c.HOME_CARD_CHANGE = "onHomeCardChange",
    c.HOME_BAG_CHANGE = "onHomeBagChange",
    c.HOME_ClUB_CHANGE = "onHomeClubChange",
    c.HOME_CHANGE = "onHomeChange",
    c.ARENA_SHOW_CHANGE = "onArenaShowChange",
    c.BATTLE_ALLDIE = "onBattleAllDie",
    c.BATTLE_KILL_PLAYER = "onBattleKillPlayer",
    c.BATTLE_UILOADED = "onBattleUILoaded",
    c.BATTLE_UPDATE_LIST = "onBattleUpdateList",
    c.HERO_SKIN_CHANGE = "onHeroSkinChange",
    c.HERO_SKIN_CHANGE_OVER = "onHeroSkinChangeOver",
    c.MOVE_EQUIP = "onMoveEquip",
    c.ITEM_CHANGE = "onItemChange",
    c.COUNT_CHANGE = "onCountChange",
    c.CREATE_FOOD = "onCreateFood",
    c.HERO_CHANGE = "onHeroChange",
    c.HERO_NEW_SKINSKILL = "onHeroNewSkinSKill",
    c.JUMP_HERO_SKILL = "onJumpHeroSkill",
    c.HERO_EQUIP_CHANGE = "onHeroEquipChange",
    c.RESET_HERO_SKIN_VIEW = "onJResetHeroSkinView",
    c.SKIN_DETAIL_CHANGE = "onSkinDetailChange",
    c.UNLOCK_FOOD = "onUnlockFood",
    c.UPDATE_UP_SELL = "onUpdataUpSell",
    c.EQUIP_MATCH = "onEquipMatch",
    c.SELECT_HERO = "onSelectHero",
    c.SHAKE_EQUIP = "onShakeEquip",
    c.SCALE_EQUIP = "onScaleEquip",
    c.HERO_PROP_ANI = "onHeroPropAni",
    c.UPDATE_SALE = "onUpdateSale",
    c.ARENA_RANK = "onArenaRank",
    c.QUIT_CLUB = "onQuitClub",
    c.OPERATE_APPLY = "onPerateApply",
    c.LOAD_ARENA = "onLoadArena",
    c.LOAD_CLUB = "onLoadClub",
    c.CLUB_CHANGE = "onClubChange",
    c.CLUB_APPLY = "onClubApply",
    c.DRAW_ONE_TIME = "onDrawOneTime",
    c.DRAW_NEXT_TIME = "onDrawNEXTTime",
    c.CHANGE_ONE_CARD = "onChangeOneCard",
    c.REWARD_BOX_CLOSE = "onChangeOneCard",
    c.REWARD_GET_RARE = "onRewardGetRare",
    c.CLUB_RANK = "onClubRank",
    c.UPDATE_CHAT_HEIGHT = "onUpdateChatHeight",
    c.CHAT_FOCUS = "onChatFocus",
    c.ARENA_BATTLE = "onArenaBattle",
    c.CHAR_TOKEN = "onChatToken",
    c.CHAT_BLUR = "onChatBlur",
    c.CONVEY_MAP = "onConveyMap",
    c.PASS_LV_CHANGE = "onChangePassLv",
    c.PASS_UPDATE = "onPassUpdate",
    c.PASS_BUY = "onPassBuy",
    c.PASS_UNLOCK = "onPassUnlock",
    c.PASS_GEN = "onPassGen",
    c.VIT_CHANGE = "onChangeVit",
    c.GUILD_LAND = "onGuildLand",
    c.CHANGE_ENV = "onChangeEnv",
    c.TRANSANI = "onTransAni",
    c.GEN_ANI = "onGenAni",
    c.BLOCK_CHANGE = "onBlockChange",
    c.STOP_AUTO = "onStopAuto",
    c.UPDATE_BLIND = "onUpdateBlind",
    c.MAP_CHANGE = "onMapChange",
    c.MAIL_CHANGE = "onMailChange",
    c.FISH_EX = "onFishEx",
    c.INVITE_CHANGE = "onInviteChange",
    c.CHAT_RESET = "onChatReset",
    c.BUY_ARENA = "onBuyArena",
    c.REMEMBER_END = "onRememberEnd",
    c.UPDATE_TRADE_SYS = "onUpdateTradeSys",
    c.UPDATE_GAMEMENU = "onUpdateGameMenu",
    c.UPDATE_FISH_SYS = "onUpdateFishSys",
    c.UPDATE_STATISTICAL = "onUpdateStatistical",
    c.UPDATE_TREASURE = "onUpdateTreasure",
    c.REMEMBER_START = "onRememberStart",
    c.REMEMBER_OPEN = "onRememberOpen",
    c.REMEMBER_CLOSE = "onRememberClose",
    c.UPDATE_RED_SELL = "onUpdateRedSell",
    c.UPDATE_STORE_LIST = "onUpdateStoreList";
    class N {
        constructor(e = 0) {
            this._delay = 0,
            this._queue = [],
            this._timerEnabled = !1,
            this._delay = e
        }
        static create(e) {
            e = new N(e);
            return this._queues.pushOnce(e),
            e
        }
        add(e, t) {
            this._queue.push({
                item: e,
                cb: t
            }),
            this._timerEnabled || (Laya.timer.loop(this._delay, this, this.onTimer), this._timerEnabled = !0)
        }
        onTimer() {
            let t = this._queue;
            if (0 < t.length) {
                let e = t.shift();
                e.cb(e.item)
            }
            0 == t.length && (Laya.timer.clear(this, this.onTimer), this._timerEnabled = !1)
        }
        remove(t) {
            var e = this._queue.findIndex(e => e.item == t);
            -1 != e && this._queue.splice(e, 1)
        }
        clear() {
            Laya.timer.clear(this, this.onTimer),
            N._queues.remove(this),
            this._queue = []
        }
    }
    N._queues = [];
    const P = {};
    let q = {};
    var U,
    H,
    V,
    d;
    const F = N.create(1e3);
    class G {
        static get(e, t, i) {
            return i ? Laya.Pool.getItemByCreateFun(e, i) : Laya.Pool.getItemByClass(e, t)
        }
        static put(e, t) {
            t && Laya.Pool.recover(e, t)
        }
    }
    class W {
        constructor() {
            this.finished = !1,
            this.defaultTimeOut = 2e4,
            this.transId = 0,
            this._timeOutNum = 0,
            this.timeoutMax = 5
        }
        static create() {
            return G.get(W._sign, W)
        }
        get timeout() {
            let e = this.defaultTimeOut;
            var t = this.opt;
            return e = t && t.timeout ? t.timeout : e
        }
        open(e, t, i, s) {
            this.resolve = e,
            this.reject = t,
            this.onClearHandler = i,
            !(this.opt = s) || 0 != s.noLoading && 0 != s.silent || this.showLoading(),
            Laya.timer.once(this.timeout, this, this.onTimeOut)
        }
        clear() {
            Laya.timer.clear(this, this.onTimeOut),
            this.finished = !0,
            this._timeOutNum = 0,
            this.loadingCloser && this.loadingCloser(),
            this.onClearHandler && this.onClearHandler.run(),
            F.remove(this),
            G.put(W._sign, this)
        }
        showLoading() {
            F.add(this, e => {
                e.finished
            })
        }
        onTimeOut() {
            var e = {
                code: 7,
                message: this.name + "请求超时!transId:" + this.transId,
                handled: !1
            };
            console.error(e),
            this.opt && this.opt.popTimeOut || (this.reject(e), this.clear())
        }
        resetTimeOut() {
            this._timeOutNum >= this.timeoutMax || (this._timeOutNum++, Laya.timer.clear(this, this.onTimeOut), Laya.timer.once(this.timeout, this, this.onTimeOut))
        }
        reset() {
            this.onClearHandler.recover(),
            this.onClearHandler = null,
            this.loadingCloser = null,
            this.resolve = null,
            this.reject = null,
            this.finished = !1,
            this.name = "",
            this._timeOutNum = 0,
            this.transId = 0,
            Laya.timer.clearAll(this)
        }
    }
    W._sign = "p_PendingReqItem",
    (e = U = U || {})[e.NoneType = 0] = "NoneType",
    e[e.ErrorAck = 1] = "ErrorAck",
    e[e.ServerStateNtf = 4] = "ServerStateNtf",
    e[e.CreateRoleReq = 11] = "CreateRoleReq",
    e[e.CreateRoleAck = 12] = "CreateRoleAck",
    e[e.EnterGameReq = 13] = "EnterGameReq",
    e[e.EnterGameAck = 14] = "EnterGameAck",
    e[e.CommandReq = 15] = "CommandReq",
    e[e.CommandAck = 16] = "CommandAck",
    e[e.UserInfoNtf = 18] = "UserInfoNtf",
    e[e.UserInfoChangeNtf = 19] = "UserInfoChangeNtf",
    e[e.AccountInfoChangeNtf = 20] = "AccountInfoChangeNtf",
    e[e.UseItemReq = 21] = "UseItemReq",
    e[e.UseItemAck = 22] = "UseItemAck",
    e[e.SellItemReq = 23] = "SellItemReq",
    e[e.SellItemAck = 24] = "SellItemAck",
    e[e.ItemChangeNtf = 26] = "ItemChangeNtf",
    e[e.EatFoodReq = 27] = "EatFoodReq",
    e[e.EatFoodAck = 28] = "EatFoodAck",
    e[e.WearEquipReq = 29] = "WearEquipReq",
    e[e.WearEquipAck = 30] = "WearEquipAck",
    e[e.EquipMergeReq = 31] = "EquipMergeReq",
    e[e.EquipMergeAck = 32] = "EquipMergeAck",
    e[e.WearSkinReq = 33] = "WearSkinReq",
    e[e.WearSkinAck = 34] = "WearSkinAck",
    e[e.UnWearSkinReq = 35] = "UnWearSkinReq",
    e[e.UnWearSkinAck = 36] = "UnWearSkinAck",
    e[e.MakeFoodReq = 37] = "MakeFoodReq",
    e[e.MakeFoodAck = 38] = "MakeFoodAck",
    e[e.EquipBookReq = 39] = "EquipBookReq",
    e[e.EquipBookAck = 40] = "EquipBookAck",
    e[e.CookBookReq = 41] = "CookBookReq",
    e[e.CookBookAck = 42] = "CookBookAck",
    e[e.QuickMakeCookReq = 43] = "QuickMakeCookReq",
    e[e.QuickMakeCookAck = 44] = "QuickMakeCookAck",
    e[e.ActHeroNtf = 46] = "ActHeroNtf",
    e[e.UseRandBoxReq = 47] = "UseRandBoxReq",
    e[e.UseRandBoxAck = 48] = "UseRandBoxAck",
    e[e.SwapRandBoxReq = 49] = "SwapRandBoxReq",
    e[e.SwapRandBoxAck = 50] = "SwapRandBoxAck",
    e[e.ReceiveRandBoxReq = 51] = "ReceiveRandBoxReq",
    e[e.ReceiveRandBoxAck = 52] = "ReceiveRandBoxAck",
    e[e.UseChooseBoxReq = 53] = "UseChooseBoxReq",
    e[e.UseChooseBoxAck = 54] = "UseChooseBoxAck",
    e[e.BuyItemReq = 55] = "BuyItemReq",
    e[e.BuyItemAck = 56] = "BuyItemAck",
    e[e.UpgradeSkinReq = 57] = "UpgradeSkinReq",
    e[e.UpgradeSkinAck = 58] = "UpgradeSkinAck",
    e[e.SkinsChangeNtf = 60] = "SkinsChangeNtf",
    e[e.SkinTokenInfoReq = 61] = "SkinTokenInfoReq",
    e[e.SkinTokenInfoAck = 62] = "SkinTokenInfoAck",
    e[e.SkinBuyMcTokenReq = 63] = "SkinBuyMcTokenReq",
    e[e.SkinBuyMcTokenAck = 64] = "SkinBuyMcTokenAck",
    e[e.SkillProduceReq = 81] = "SkillProduceReq",
    e[e.SkillProduceAck = 82] = "SkillProduceAck",
    e[e.VitChangeNtf = 84] = "VitChangeNtf",
    e[e.BuyVitReq = 85] = "BuyVitReq",
    e[e.BuyVitAck = 86] = "BuyVitAck",
    e[e.OpenBlindBoxReq = 87] = "OpenBlindBoxReq",
    e[e.OpenBlindBoxAck = 88] = "OpenBlindBoxAck",
    e[e.GetBlindBoxInfoReq = 89] = "GetBlindBoxInfoReq",
    e[e.GetBlindBoxInfoAck = 90] = "GetBlindBoxInfoAck",
    e[e.BuyStarPassReq = 91] = "BuyStarPassReq",
    e[e.BuyStarPassAck = 92] = "BuyStarPassAck",
    e[e.StarPassRewardReq = 93] = "StarPassRewardReq",
    e[e.StarPassRewardAck = 94] = "StarPassRewardAck",
    e[e.StarPassBoxRewardReq = 95] = "StarPassBoxRewardReq",
    e[e.StarPassBoxRewardAck = 96] = "StarPassBoxRewardAck",
    e[e.SyncRechargeNtf = 98] = "SyncRechargeNtf",
    e[e.ReceiveRechargeReq = 99] = "ReceiveRechargeReq",
    e[e.ReceiveRechargeAck = 100] = "ReceiveRechargeAck",
    e[e.ReNameReq = 101] = "ReNameReq",
    e[e.ReNameAck = 102] = "ReNameAck",
    e[e.ChangeAvatarReq = 103] = "ChangeAvatarReq",
    e[e.ChangeAvatarAck = 104] = "ChangeAvatarAck",
    e[e.GetMailListReq = 105] = "GetMailListReq",
    e[e.GetMailListAck = 106] = "GetMailListAck",
    e[e.ReadMailReq = 107] = "ReadMailReq",
    e[e.ReadMailAck = 108] = "ReadMailAck",
    e[e.PickMailItemsReq = 109] = "PickMailItemsReq",
    e[e.PickMailItemsAck = 110] = "PickMailItemsAck",
    e[e.NewMailNtf = 112] = "NewMailNtf",
    e[e.UnWearEquipReq = 113] = "UnWearEquipReq",
    e[e.UnWearEquipAck = 114] = "UnWearEquipAck",
    e[e.AdRewardReq = 115] = "AdRewardReq",
    e[e.AdRewardAck = 116] = "AdRewardAck",
    e[e.UseCouponReq = 121] = "UseCouponReq",
    e[e.UseCouponAck = 122] = "UseCouponAck",
    e[e.ChangeBubbleReq = 123] = "ChangeBubbleReq",
    e[e.ChangeBubbleAck = 124] = "ChangeBubbleAck",
    e[e.PricesReq = 125] = "PricesReq",
    e[e.PricesAck = 126] = "PricesAck",
    e[e.PricesNtf = 128] = "PricesNtf",
    e[e.GetArenaInfoReq = 131] = "GetArenaInfoReq",
    e[e.GetArenaInfoAck = 132] = "GetArenaInfoAck",
    e[e.ArenaMatchRivalReq = 133] = "ArenaMatchRivalReq",
    e[e.ArenaMatchRivalAck = 134] = "ArenaMatchRivalAck",
    e[e.ArenaSetSquadReq = 135] = "ArenaSetSquadReq",
    e[e.ArenaSetSquadAck = 136] = "ArenaSetSquadAck",
    e[e.ArenaEndFightReq = 137] = "ArenaEndFightReq",
    e[e.ArenaEndFightAck = 138] = "ArenaEndFightAck",
    e[e.ArenaCupAwardReq = 139] = "ArenaCupAwardReq",
    e[e.ArenaCupAwardAck = 140] = "ArenaCupAwardAck",
    e[e.ArenaRecordReq = 141] = "ArenaRecordReq",
    e[e.ArenaRecordAck = 142] = "ArenaRecordAck",
    e[e.ArenaUserRankReq = 143] = "ArenaUserRankReq",
    e[e.ArenaUserRankAck = 144] = "ArenaUserRankAck",
    e[e.ArenaShopBuyReq = 147] = "ArenaShopBuyReq",
    e[e.ArenaShopBuyAck = 148] = "ArenaShopBuyAck",
    e[e.BuyArenaCountReq = 149] = "BuyArenaCountReq",
    e[e.BuyArenaCountAck = 150] = "BuyArenaCountAck",
    e[e.GetClubInfoReq = 151] = "GetClubInfoReq",
    e[e.GetClubInfoAck = 152] = "GetClubInfoAck",
    e[e.ClubListReq = 153] = "ClubListReq",
    e[e.ClubListAck = 154] = "ClubListAck",
    e[e.QueryClubReq = 155] = "QueryClubReq",
    e[e.QueryClubAck = 156] = "QueryClubAck",
    e[e.CreateClubReq = 157] = "CreateClubReq",
    e[e.CreateClubAck = 158] = "CreateClubAck",
    e[e.JoinClubReq = 159] = "JoinClubReq",
    e[e.JoinClubAck = 160] = "JoinClubAck",
    e[e.ClubMemberOperReq = 161] = "ClubMemberOperReq",
    e[e.ClubMemberOperAck = 162] = "ClubMemberOperAck",
    e[e.ChangeClubNameReq = 163] = "ChangeClubNameReq",
    e[e.ChangeClubNameAck = 164] = "ChangeClubNameAck",
    e[e.ChangeClubIconReq = 165] = "ChangeClubIconReq",
    e[e.ChangeClubIconAck = 166] = "ChangeClubIconAck",
    e[e.ChangeClubJoinLvlReq = 167] = "ChangeClubJoinLvlReq",
    e[e.ChangeClubJoinLvlAck = 168] = "ChangeClubJoinLvlAck",
    e[e.ChangeClubCheckJoinReq = 169] = "ChangeClubCheckJoinReq",
    e[e.ChangeClubCheckJoinAck = 170] = "ChangeClubCheckJoinAck",
    e[e.ChangeClubSettingReq = 171] = "ChangeClubSettingReq",
    e[e.ChangeClubSettingAck = 172] = "ChangeClubSettingAck",
    e[e.ChangeClubNoticeReq = 173] = "ChangeClubNoticeReq",
    e[e.ChangeClubNoticeAck = 174] = "ChangeClubNoticeAck",
    e[e.ClubAppliedMembersReq = 175] = "ClubAppliedMembersReq",
    e[e.ClubAppliedMembersAck = 176] = "ClubAppliedMembersAck",
    e[e.OperAppliedMembersReq = 177] = "OperAppliedMembersReq",
    e[e.OperAppliedMembersAck = 178] = "OperAppliedMembersAck",
    e[e.ExitClubReq = 179] = "ExitClubReq",
    e[e.ExitClubAck = 180] = "ExitClubAck",
    e[e.KickClubMemberReq = 181] = "KickClubMemberReq",
    e[e.KickClubMemberAck = 182] = "KickClubMemberAck",
    e[e.ClubRankReq = 183] = "ClubRankReq",
    e[e.ClubRankAck = 184] = "ClubRankAck",
    e[e.ClubSeasonListReq = 185] = "ClubSeasonListReq",
    e[e.ClubSeasonListAck = 186] = "ClubSeasonListAck",
    e[e.SignInfoReq = 201] = "SignInfoReq",
    e[e.SignInfoAck = 202] = "SignInfoAck",
    e[e.BindWalletReq = 203] = "BindWalletReq",
    e[e.BindWalletAck = 204] = "BindWalletAck",
    e[e.DrawCoinReq = 205] = "DrawCoinReq",
    e[e.DrawCoinAck = 206] = "DrawCoinAck",
    e[e.DrawTapReq = 207] = "DrawTapReq",
    e[e.DrawTapAck = 208] = "DrawTapAck",
    e[e.DrawMCTokenReq = 209] = "DrawMCTokenReq",
    e[e.DrawMCTokenAck = 210] = "DrawMCTokenAck",
    e[e.DrawNFTSkinReq = 211] = "DrawNFTSkinReq",
    e[e.DrawNFTSkinAck = 212] = "DrawNFTSkinAck",
    e[e.DrawPvpCoinReq = 213] = "DrawPvpCoinReq",
    e[e.DrawPvpCoinAck = 214] = "DrawPvpCoinAck",
    e[e.GetMailCodeReq = 215] = "GetMailCodeReq",
    e[e.GetMailCodeAck = 216] = "GetMailCodeAck",
    e[e.BindMailReq = 217] = "BindMailReq",
    e[e.BindMailAck = 218] = "BindMailAck",
    e[e.FishingReq = 251] = "FishingReq",
    e[e.FishingAck = 252] = "FishingAck",
    e[e.MyFishInfoReq = 253] = "MyFishInfoReq",
    e[e.MyFishInfoAck = 254] = "MyFishInfoAck",
    e[e.FishRankListReq = 255] = "FishRankListReq",
    e[e.FishRankListAck = 256] = "FishRankListAck",
    e[e.FishInfoReq = 257] = "FishInfoReq",
    e[e.FishInfoAck = 258] = "FishInfoAck",
    e[e.FishSellInfoReq = 259] = "FishSellInfoReq",
    e[e.FishSellInfoAck = 260] = "FishSellInfoAck",
    e[e.FishSellReq = 261] = "FishSellReq",
    e[e.FishSellAck = 262] = "FishSellAck",
    e[e.FishRewardPoolReq = 263] = "FishRewardPoolReq",
    e[e.FishRewardPoolAck = 264] = "FishRewardPoolAck",
    e[e.FishHistoryReq = 265] = "FishHistoryReq",
    e[e.FishHistoryAck = 266] = "FishHistoryAck",
    e[e.InviteInfoReq = 271] = "InviteInfoReq",
    e[e.InviteInfoAck = 272] = "InviteInfoAck",
    e[e.InviteAwardReq = 273] = "InviteAwardReq",
    e[e.InviteAwardAck = 274] = "InviteAwardAck",
    e[e.InviteBoxInfoReq = 275] = "InviteBoxInfoReq",
    e[e.InviteBoxInfoAck = 276] = "InviteBoxInfoAck",
    e[e.OpenInviteBoxReq = 277] = "OpenInviteBoxReq",
    e[e.OpenInviteBoxAck = 278] = "OpenInviteBoxAck",
    e[e.GetInviteListReq = 279] = "GetInviteListReq",
    e[e.GetInviteListAck = 280] = "GetInviteListAck",
    e[e.GetTileMapReq = 301] = "GetTileMapReq",
    e[e.GetTileMapAck = 302] = "GetTileMapAck",
    e[e.TileMapMoveReq = 303] = "TileMapMoveReq",
    e[e.TileMapMoveAck = 304] = "TileMapMoveAck",
    e[e.TileMapSwitchReq = 305] = "TileMapSwitchReq",
    e[e.TileMapSwitchAck = 306] = "TileMapSwitchAck",
    e[e.TileMapConveyReq = 307] = "TileMapConveyReq",
    e[e.TileMapConveyAck = 308] = "TileMapConveyAck",
    e[e.TileMapUnlockReq = 309] = "TileMapUnlockReq",
    e[e.TileMapUnlockAck = 310] = "TileMapUnlockAck",
    e[e.EnterEleMisteryReq = 311] = "EnterEleMisteryReq",
    e[e.EnterEleMisteryAck = 312] = "EnterEleMisteryAck",
    e[e.SellGoodsReq = 401] = "SellGoodsReq",
    e[e.SellGoodsAck = 402] = "SellGoodsAck",
    e[e.BuyGoodsReq = 403] = "BuyGoodsReq",
    e[e.BuyGoodsAck = 404] = "BuyGoodsAck",
    e[e.CancelGoodsReq = 405] = "CancelGoodsReq",
    e[e.CancelGoodsAck = 406] = "CancelGoodsAck",
    e[e.QuerySelfGoodsListReq = 407] = "QuerySelfGoodsListReq",
    e[e.QuerySelfGoodsListAck = 408] = "QuerySelfGoodsListAck",
    e[e.QueryGoodsByIdReq = 409] = "QueryGoodsByIdReq",
    e[e.QueryGoodsByIdAck = 410] = "QueryGoodsByIdAck",
    e[e.QueryGoodsListReq = 411] = "QueryGoodsListReq",
    e[e.QueryGoodsListAck = 412] = "QueryGoodsListAck",
    e[e.QueryGoodsCataNumReq = 415] = "QueryGoodsCataNumReq",
    e[e.QueryGoodsCataNumAck = 416] = "QueryGoodsCataNumAck",
    e[e.RecvTradeRewardReq = 417] = "RecvTradeRewardReq",
    e[e.RecvTradeRewardAck = 418] = "RecvTradeRewardAck",
    e[e.QueryGoodsByKeyReq = 421] = "QueryGoodsByKeyReq",
    e[e.QueryGoodsByKeyAck = 422] = "QueryGoodsByKeyAck",
    e[e.QueryGoodsNumByLvReq = 423] = "QueryGoodsNumByLvReq",
    e[e.QueryGoodsNumByLvAck = 424] = "QueryGoodsNumByLvAck",
    e[e.EnterMapReq = 501] = "EnterMapReq",
    e[e.EnterMapAck = 502] = "EnterMapAck",
    e[e.LeaveMapReq = 503] = "LeaveMapReq",
    e[e.LeaveMapAck = 504] = "LeaveMapAck",
    e[e.MovePathReq = 505] = "MovePathReq",
    e[e.MovePathNtf = 506] = "MovePathNtf",
    e[e.FovHerosEnterNtf = 507] = "FovHerosEnterNtf",
    e[e.FovHerosLeaveNtf = 508] = "FovHerosLeaveNtf",
    e[e.FovHerosPropertyNtf = 509] = "FovHerosPropertyNtf",
    e[e.FovHerosMoveNtf = 510] = "FovHerosMoveNtf",
    e[e.FovHerosHPChangeNtf = 511] = "FovHerosHPChangeNtf",
    e[e.FovHerosBuffNtf = 512] = "FovHerosBuffNtf",
    e[e.SyncLocationReq = 513] = "SyncLocationReq",
    e[e.SyncHeroInfoNtf = 514] = "SyncHeroInfoNtf",
    e[e.FovHerosInfoChangeNtf = 516] = "FovHerosInfoChangeNtf",
    e[e.FovPlayersEnterNtf = 517] = "FovPlayersEnterNtf",
    e[e.FovPlayersLeaveNtf = 518] = "FovPlayersLeaveNtf",
    e[e.FovPlayersHPChangeNtf = 519] = "FovPlayersHPChangeNtf",
    e[e.FovPlayersPropertyNtf = 520] = "FovPlayersPropertyNtf",
    e[e.FovNpcsEnterNtf = 521] = "FovNpcsEnterNtf",
    e[e.FovNpcsLeaveNtf = 522] = "FovNpcsLeaveNtf",
    e[e.FovNpcsMoveNtf = 523] = "FovNpcsMoveNtf",
    e[e.FovNpcsHPChangeNtf = 524] = "FovNpcsHPChangeNtf",
    e[e.FovNpcsPropertyNtf = 525] = "FovNpcsPropertyNtf",
    e[e.FovNpcsBuffNtf = 526] = "FovNpcsBuffNtf",
    e[e.FovChestsEnterNtf = 527] = "FovChestsEnterNtf",
    e[e.FovChestsLeaveNtf = 528] = "FovChestsLeaveNtf",
    e[e.FovChestsPropertyNtf = 529] = "FovChestsPropertyNtf",
    e[e.ExecuteSkillReq = 531] = "ExecuteSkillReq",
    e[e.ExecuteSkillAck = 532] = "ExecuteSkillAck",
    e[e.ExecuteSkillNtf = 534] = "ExecuteSkillNtf",
    e[e.SkillRecoverNtf = 535] = "SkillRecoverNtf",
    e[e.SkillDamageNtf = 536] = "SkillDamageNtf",
    e[e.SkillEventNtf = 537] = "SkillEventNtf",
    e[e.SkillBeInterruptNtf = 538] = "SkillBeInterruptNtf",
    e[e.HeroDieNtf = 541] = "HeroDieNtf",
    e[e.NPCDieNtf = 542] = "NPCDieNtf",
    e[e.DropItemsNtf = 544] = "DropItemsNtf",
    e[e.BattleMapInfoNtf = 546] = "BattleMapInfoNtf",
    e[e.BattleEventNtf = 548] = "BattleEventNtf",
    e[e.EnterWorldBossReq = 551] = "EnterWorldBossReq",
    e[e.EnterWorldBossAck = 552] = "EnterWorldBossAck",
    e[e.LeaveWorldBossReq = 553] = "LeaveWorldBossReq",
    e[e.LeaveWorldBossAck = 554] = "LeaveWorldBossAck",
    e[e.EnterMapNtf = 556] = "EnterMapNtf",
    e[e.LockTargetReq = 557] = "LockTargetReq",
    e[e.LockTargetNtf = 558] = "LockTargetNtf",
    e[e.PickChestReq = 559] = "PickChestReq",
    e[e.PickChestAck = 560] = "PickChestAck",
    e[e.CancelPickChestReq = 561] = "CancelPickChestReq",
    e[e.CancelPickChestAck = 562] = "CancelPickChestAck",
    e[e.ReviveReq = 563] = "ReviveReq",
    e[e.ReviveAck = 564] = "ReviveAck",
    e[e.ReviveNtf = 565] = "ReviveNtf",
    e[e.ClearWorldBossCDReq = 567] = "ClearWorldBossCDReq",
    e[e.ClearWorldBossCDAck = 568] = "ClearWorldBossCDAck",
    e[e.RequestPayReq = 569] = "RequestPayReq",
    e[e.RequestPayAck = 570] = "RequestPayAck",
    e[e.CheckPayReq = 571] = "CheckPayReq",
    e[e.CheckPayAck = 572] = "CheckPayAck",
    e[e.BuyStarPassDiamondReq = 573] = "BuyStarPassDiamondReq",
    e[e.BuyStarPassDiamondAck = 574] = "BuyStarPassDiamondAck",
    e[e.BuyVitDiamondReq = 575] = "BuyVitDiamondReq",
    e[e.BuyVitDiamondAck = 576] = "BuyVitDiamondAck",
    e[e.BattleEndNtf = 600] = "BattleEndNtf",
    e[e.SysMsgNtf = 602] = "SysMsgNtf",
    e[e.TradeStatisticalReq = 603] = "TradeStatisticalReq",
    e[e.TradeStatisticalAck = 604] = "TradeStatisticalAck",
    e[e.TradeHistoryReq = 605] = "TradeHistoryReq",
    e[e.TradeHistoryAck = 606] = "TradeHistoryAck",
    e[e.WatchMsgReq = 607] = "WatchMsgReq",
    e[e.WatchMsgAck = 608] = "WatchMsgAck",
    e[e.UnWatchMsgReq = 609] = "UnWatchMsgReq",
    e[e.UnWatchMsgAck = 610] = "UnWatchMsgAck",
    e[e.TradeStatisticalNtf = 612] = "TradeStatisticalNtf",
    e[e.ReportBlockReq = 701] = "ReportBlockReq",
    e[e.ReportBlockAck = 702] = "ReportBlockAck",
    e[e.TeamListReq = 801] = "TeamListReq",
    e[e.TeamListAck = 802] = "TeamListAck",
    e[e.TeamMemberNumNtf = 804] = "TeamMemberNumNtf",
    e[e.CreateTeamReq = 805] = "CreateTeamReq",
    e[e.CreateTeamAck = 806] = "CreateTeamAck",
    e[e.CreateTeamNtf = 808] = "CreateTeamNtf",
    e[e.JoinTeamReq = 809] = "JoinTeamReq",
    e[e.JoinTeamAck = 810] = "JoinTeamAck",
    e[e.JoinTeamNtf = 812] = "JoinTeamNtf",
    e[e.ChangeTeamSquadReq = 813] = "ChangeTeamSquadReq",
    e[e.ChangeTeamSquadAck = 814] = "ChangeTeamSquadAck",
    e[e.ChangeTeamSquadNtf = 816] = "ChangeTeamSquadNtf",
    e[e.ExitTeamReq = 817] = "ExitTeamReq",
    e[e.ExitTeamAck = 818] = "ExitTeamAck",
    e[e.ExitTeamNtf = 820] = "ExitTeamNtf",
    e[e.KickTeamReq = 821] = "KickTeamReq",
    e[e.KickTeamAck = 822] = "KickTeamAck",
    e[e.KickTeamNtf = 824] = "KickTeamNtf",
    e[e.DelTeamNtf = 826] = "DelTeamNtf",
    e[e.BlockActionReq = 1001] = "BlockActionReq",
    e[e.BlockActionAck = 1002] = "BlockActionAck",
    e[e.SetSquadReq = 1003] = "SetSquadReq",
    e[e.SetSquadAck = 1004] = "SetSquadAck",
    e[e.TalkRewardReq = 1005] = "TalkRewardReq",
    e[e.TalkRewardAck = 1006] = "TalkRewardAck",
    e[e.TalkHeroReq = 1007] = "TalkHeroReq",
    e[e.TalkHeroAck = 1008] = "TalkHeroAck",
    e[e.OpenGameplayReq = 1009] = "OpenGameplayReq",
    e[e.OpenGameplayAck = 1010] = "OpenGameplayAck",
    e[e.TalkGoddessReq = 1011] = "TalkGoddessReq",
    e[e.TalkGoddessAck = 1012] = "TalkGoddessAck",
    e[e.BlockNormalChestReq = 1013] = "BlockNormalChestReq",
    e[e.BlockNormalChestAck = 1014] = "BlockNormalChestAck",
    e[e.BlockInfoReq = 1015] = "BlockInfoReq",
    e[e.BlockInfoAck = 1016] = "BlockInfoAck",
    e[e.EleMisteryLootIncrsReq = 1017] = "EleMisteryLootIncrsReq",
    e[e.EleMisteryLootIncrsAck = 1018] = "EleMisteryLootIncrsAck",
    e[e.BlockMemoryCardStartReq = 1019] = "BlockMemoryCardStartReq",
    e[e.BlockMemoryCardStartAck = 1020] = "BlockMemoryCardStartAck",
    e[e.BlockMemoryCardOpenReq = 1021] = "BlockMemoryCardOpenReq",
    e[e.BlockMemoryCardOpenAck = 1022] = "BlockMemoryCardOpenAck",
    e[e.BuyBlockMemoryCardCountReq = 1023] = "BuyBlockMemoryCardCountReq",
    e[e.BuyBlockMemoryCardCountAck = 1024] = "BuyBlockMemoryCardCountAck",
    e[e.OpenTreasureReq = 1025] = "OpenTreasureReq",
    e[e.OpenTreasureAck = 1026] = "OpenTreasureAck",
    e[e.TreasurePointRewardReq = 1027] = "TreasurePointRewardReq",
    e[e.TreasurePointRewardAck = 1028] = "TreasurePointRewardAck",
    e[e.TreasureFinalRewardReq = 1029] = "TreasureFinalRewardReq",
    e[e.TreasureFinalRewardAck = 1030] = "TreasureFinalRewardAck",
    e[e.WorldBossInfoReq = 1031] = "WorldBossInfoReq",
    e[e.WorldBossInfoAck = 1032] = "WorldBossInfoAck",
    e[e.BlockOverNtf = 1034] = "BlockOverNtf",
    e[e.ArenaPlayerInfoReq = 1035] = "ArenaPlayerInfoReq",
    e[e.ArenaPlayerInfoAck = 1036] = "ArenaPlayerInfoAck",
    e[e.MemoryCardRankListReq = 1037] = "MemoryCardRankListReq",
    e[e.MemoryCardRankListAck = 1038] = "MemoryCardRankListAck",
    e[e.BlockAppearNtf = 1040] = "BlockAppearNtf",
    e[e.MemoryBoxInfoReq = 1041] = "MemoryBoxInfoReq",
    e[e.MemoryBoxInfoAck = 1042] = "MemoryBoxInfoAck",
    e[e.OpenMemoryBoxReq = 1043] = "OpenMemoryBoxReq",
    e[e.OpenMemoryBoxAck = 1044] = "OpenMemoryBoxAck",
    e[e.BlockMemoryCardInfoReq = 1045] = "BlockMemoryCardInfoReq",
    e[e.BlockMemoryCardInfoAck = 1046] = "BlockMemoryCardInfoAck",
    e[e.GetCommentTokenReq = 9997] = "GetCommentTokenReq",
    e[e.GetCommentTokenAck = 9998] = "GetCommentTokenAck",
    e[e.ChatInfoNtf = 9999] = "ChatInfoNtf";
    class Y extends Laya.EventDispatcher {
        constructor() {
            super(...arguments),
            this._pendingReq = {},
            this._transId = 0,
            this._reconnectcount = 0,
            this._autoReconnect = !0,
            this._isConnected = !1,
            this._handled = !1,
            this.sockeTimeoutEnable = !0,
            this._debugLog = !1
        }
        get addr() {
            return this._addr
        }
        get autoReconnect() {
            return this._autoReconnect
        }
        get reconnectcount() {
            return this._reconnectcount
        }
        get isConnected() {
            return this._isConnected
        }
        set reconnectcount(e) {
            this._reconnectcount = e
        }
        set messageHandler(e) {
            this._messageHandler = e
        }
        addMessageHandler(e) {
            this._messageHandler = Object.assign(this._messageHandler, e)
        }
        connect(e) {
            this._autoReconnect = !0,
            this._isConnected = !1,
            this._addr = e;
            let t = new window.WebSocket(e);
            t.binaryType = "arraybuffer",
            t.onerror = this.onError.bind(this),
            t.onopen = this.onOpen.bind(this),
            t.onclose = this.onClose.bind(this),
            t.onmessage = this.onMessage.bind(this),
            this.ws = t,
            this.clean()
        }
        disconnect(e) {
            this._autoReconnect = !!e,
            this._isConnected && (this._isConnected = !1, this.ws.close(), this.clean())
        }
        onOpen(e) {
            this._isConnected = !0,
            this.ws.binaryType = "arraybuffer",
            this.event(Laya.Event.OPEN, e)
        }
        actionac() {
            console.log('战斗状态:' + T.m_isFighting);
        }
        actiona() {
            this.actionac();
            if (blocklen <= 0) {
                blockindex = 0;
                return
            }
            console.log('战斗即将开始,请勿乱动');
            var t = {
                "title": "魔物",
                "mapId": 7,
                "logicMapType": 3,
                "logicMapId": 0,
                "blockId": 6002,
                "blockSpawnId": 22106,
                "squad": [6030, 6110, 6020]
            }
            let e = blockinfo['blocks'][blockindex].blockId;
            var i = Data.getBlock(e);
            console.log('怪物:' + JSON.stringify(i));
            i = Data.getBlock_worldBoss(e);
            console.log('世界BOSS:' + JSON.stringify(i));
            t.blockId = e;
            t.blockSpawnId = blockinfo['blocks'][blockindex].blockSpawnId;
            t.squad = R.squad;
            this.BlockAction(e);
            O.report.enter();
            setTimeout(function () {
                T.start(t)
            }, 10000);
            blockindex = blockindex + 1;
			if(blockindex >= blocklen){
				blocklen = 0;
				closegame = true;
			}
        }
        LeaveMa() {
            let r = pb.LeaveMapReq.create();
            A(r, undefined, undefined);
        }
        BlockAction(e) {
            let i = new pb.BlockActionReq;
            return i.mapId = O.tileMap.mapId,
            i.blockId = e,
            i.actionType = 3,
            A(i, pb.IBlockActionAck)
        }
        checkkk(s, t) {
            if (s.search('GetTileMapAck') == 0 || s.search('TileMapSwitchAck') == 0) {
                blockinfo = t;
                blocklen = blockinfo['blocks'].length;
                blockindex = 0;
                mapindex = blockinfo["mapId"];
                console.log('地图ID:' + mapindex);
				closegame = false;
            }
            if (s.search('ReportBlockAck') == 0) {
				setTimeout(function () {A(pb.LeaveMapReq.create(), undefined, undefined)}, 8000);
				setTimeout(function () {A(pb.GetCommentTokenReq.create(), pb.IGetCommentTokenAck)},9000);
            }
			if (s.search('ExecuteSkillAck') == 0 && endgame == true) {
				this.LeaveMa();
				
            }
            if (s.search('GetCommentTokenAck') == 0) {
                this.actionac();
				if(closegame == true){
					return
				}
                if (endgame == true || auto == false) {
                    endgame = false;
                    auto = true;
                    T.m_battle = false;
                    T.m_isFighting = false;
                    T.end();
                    this.actiona();

                }

            }
            if (s.search('ErrorAck') == 0) {
				if(closegame == true){
					return
				}
                console.log('战斗异常,重新开始');
                endgame = false;
                auto = true;
                T.m_battle = false;
                T.m_isFighting = false;
                T.end();
                blockindex = blockindex - 1;
                this.actiona();

            }
            if (s.search('EnterMapAck') == 0) {
				if(closegame == true){
					return
				}
                if (JSON.stringify(t).search('retCode') == 0) {
                    console.log('战斗异常,重新开始');
                    endgame = false;
                    auto = true;
                    T.m_battle = false;
                    T.m_isFighting = false;
                    T.end();
                    blockindex = blockindex - 1;
                    this.actiona();
                }

            }

            if (s.search('BattleEndNtf') == 0) {
                endgame = true;
                console.log('战斗结束');
				if (JSON.stringify(t).search('isWin') == -1) {
                    console.log('战斗失败');
                    
                }
				A(pb.GetCommentTokenReq.create(), pb.IGetCommentTokenAck);
            }
        }
        onMessage(e) {
            var t,
            i,
            e = protobuf.util.newBuffer(e.data),
            e = pb.CSMessage.decode(e),
            s = U[e.cmdId];
            let a = pb[s];
            a ? (t = a.decode(e.body), i = e.transId, this._debugLog && console.log(`net ack/ntf :  ${s}, ${e.cmdId}, ${e.transId}, ` + JSON.stringify(t)), console.log('message:' + s + JSON.stringify(t)), this.handlerMessage(i, s, t)) : console.warn(s + " not find in pb");
            setTimeout(this.checkkk(s, t), 1000);
        }
        handlerMessage(t, i, s) {
            let a = this._pendingReq[t];
            if (a) {
                if ("ErrorAck" == s.constructor.name && 0 != s.code) {
                    let e = {
                        code: s.code,
                        langId: s.langId,
                        handled: !1
                    };
                    a.reject(e),
                    Laya.timer.callLater(this, () => {
                        e.handled || (q.errorSpawnImpl(e.code, e.langId), e.handled = !0)
                    })
                } else
                    a.resolve(s);
                a.clear()
            } else {
                let e = this._messageHandler["on" + i];
                e ? Promise.resolve().then(() => e(s, t)) : this._messageHandler.onUnknownPacket && this._messageHandler.onUnknownPacket(s, t)
            }
        }
        onClose(e) {
            this._isConnected = !1,
            this.clean(),
            this.event(Laya.Event.CLOSE, e)
        }
        onError(e) {
            this._isConnected = !1,
            this.clean(),
            this.event(Laya.Event.ERROR, e)
        }
        send(e) {
            if (!this._isConnected || 1 < this.ws.readyState)
                return 0;
            var t = e.constructor.name;
            let i = pb.CSMessage.create(),
            s = (i.cmdId = U[t], i.transId = this._transId, i.body = e, console.log('send:' + t + JSON.stringify(i)), i.body = pb[t].encode(e).finish(), pb.CSMessage.encode(i).finish());
            return Laya.Browser.onWeiXin ? this.ws.send(s.slice().buffer) : this.ws.send(s),
            this._debugLog && console.log("net req :", t, i.cmdId, i.transId, e),
            this._transId
        }
        sendAndWait(r, e, n) {
            return new Promise((t, i) => {
                var s = ++this._transId,
                a = this.send(r);
                if (0 == a)
                    i({
                        code: 6,
                        message: "连接已断开"
                    });
                else {
                    if (-1 == a)
                        return q.errorSpawnImpl(5, "数据长度过长"), void i({
                            code: 5,
                            message: "数据长度过长"
                        });
                    a = r.constructor.name;
                    let e = W.create();
                    e.transId = s,
                    e.name = a,
                    e.open(t, i, Laya.Handler.create(this, this.clearPendingReq, [s]), n),
                    this._pendingReq[s] = e
                }
            })
        }
        clearPendingReq(e) {
            delete this._pendingReq[e]
        }
        clean(t = !0) {
            for (var i in this._transId = 0, this._pendingReq) {
                let e = this._pendingReq[i];
                e && (i = {
                        code: 6,
                        message: e.name + "服务器断开连接"
                    }, console.error(i), t && e.reject(i), e.clear())
            }
            this._pendingReq = {}
        }
        reset() {
            this.offAll(),
            this.disconnect(),
            this._autoReconnect = !0,
            this._isConnected = !1,
            this._handled = !1,
            this.sockeTimeoutEnable = !0
        }
    }
    const X = N.create(200);
    class j extends Laya.EventDispatcher {
        constructor() {
            super(...arguments),
            this._http = new Laya.Browser.window.XMLHttpRequest
        }
        static create(e) {
            let t = G.get(j._sign, j);
            return null == e.noLoading && (e.noLoading = !0),
            e.noLoading || e.silent || !q.loadingImpl || (t._showLoadingItem = {
                    finished: !1
                }, X.add(t._showLoadingItem, e => {
                    e.finished || (e.loadingCloser = q.loadingImpl())
                })),
            t._retryTimes = e.retryTimes || 0,
            t._opt = e || P,
            t
        }
        get status() {
            return this._http.status
        }
        send(e, t = null, i = "get", s = "text", a = null) {
            this._requestInfo = {
                url: e,
                data: t,
                method: i,
                responseType: s,
                headers: a
            },
            this.doSend()
        }
        doSend() {
            let {
                url: e,
                data: t,
                method: i,
                responseType: s,
                headers: a
            } = this._requestInfo,
            r = (this._responseType = s, this._data = null, this._http);
            if ("get" == i && (e += "?" + t), r.open(i, e, !0), a)
                for (let e = 0; e < a.length - 1; e += 2)
                    r.setRequestHeader(a[e], a[e + 1]);
            else
                t && "string" != typeof t ? r.setRequestHeader("Content-Type", "application/json") : r.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            r.responseType = "arraybuffer" !== s ? "text" : "arraybuffer",
            r.onerror = e => this.onError(e),
            r.onload = e => this.onLoad(e),
            "get" == i ? r.send() : r.send(t)
        }
        onLoad(e) {
            var t = this._http,
            i = void 0 !== t.status ? t.status : 200;
            200 === i || 204 === i || 266 === i || 0 === i ? this.complete() : this.error("[" + t.status + "]" + t.statusText + ":" + t.responseURL)
        }
        onError(e) {
            if (0 < this._retryTimes)
                return this._retryTimes--, void Laya.timer.once(this._opt.retryInterval || 1e3, this, this.doSend);
            this.error("Request failed Status:" + this._http.status + " text:" + this._http.statusText)
        }
        complete() {
            this.clear();
            let t = !0;
            try {
                var e = this._http;
                "json" === this._responseType ? this._data = JSON.parse(e.responseText) : "xml" === this._responseType ? this._data = Laya.Utils.parseXMLFromString(e.responseText) : this._data = e.response || e.responseText
            } catch (e) {
                t = !1,
                this.error(e.message)
            }
            t && this.event(Laya.Event.COMPLETE, Array.isArray(this._data) ? [this._data] : this._data)
        }
        error(e) {
            this.clear(),
            this.event(Laya.Event.ERROR, e)
        }
        clear() {
            let e = this._http,
            t = this._showLoadingItem;
            t && (t.finished = !0, t.loadingCloser && t.loadingCloser()),
            this._showLoadingItem = null,
            e.onerror = e.onload = null
        }
        reset() {
            this.offAll(),
            Laya.timer.clear(this, this.doSend),
            this._requestInfo = null,
            this._responseType = null,
            this._data = null,
            this._showLoadingItem = null,
            this._opt = null,
            this._retryTimes = 0
        }
        release() {
            0 < this._retryTimes || G.put(j._sign, this)
        }
    }
    j._sign = "p_HttpRequest";
    class K {
        constructor() {
            this._urls = [],
            this._reference = 0,
            this._activeTime = 0
        }
        static create(e) {
            let t = G.get(K._sign, K);
            return t.setData(e),
            t
        }
        setData(e) {
            this._urls = e
        }
        destroy() {
            this._urls.forEach(e => {
                Laya.loader.clearRes(e)
            }),
            this._urls = [],
            this._reference = 0,
            this._activeTime = 0,
            G.put(K._sign, this)
        }
        canDestroy(e) {
            return !(0 < this._reference) && !(e - this._activeTime < 3e5)
        }
        addReference() {
            this._reference += 1,
            this._activeTime = Date.newDate().getTime()
        }
        removeReference() {
            --this._reference
        }
    }
    K._sign = "p_ResInfo";
    class z extends Laya.Animation {
        static registerTimer() {
            Laya.timer.loop(6e4, null, z.checkUnusedRes)
        }
        static checkUnusedRes() {
            if (z._resRef.size) {
                var t,
                i,
                s = Date.newDate().getTime();
                let e = z._resRef;
                for ([t, i]of e)
                    i.canDestroy(s) && (i.destroy(), e.delete(t))
            }
        }
        static addResRef(e) {
            let t = z._resRef.get(e);
            t || (t = K.create([e]), z._resRef.set(e, t)),
            t.addReference()
        }
        static removeResRef(e) {
            let t = z._resRef.get(e);
            t && t.removeReference()
        }
        static create() {
            return G.get(z._sign, z)
        }
        loadAtlas(e, t = null, i = "") {
            return z.addResRef(e),
            this._skin = e,
            super.loadAtlas(e, t, i),
            this
        }
        recover() {
            z.removeResRef(this._skin),
            this.destroyed || (this.clear(), this.offAll(), this.removeSelf(), this._skin = null, G.put(z._sign, this))
        }
        destroy(e) {
            z.removeResRef(this._skin),
            super.destroy(e)
        }
    }
    z._resRef = new Map,
    z._sign = "p_Animation",
    z.registerTimer();
    class $ extends Laya.UIComponent {
        constructor(e = !1) {
            super(),
            this._autoPlay = !1,
            this._loopCount = 0,
            this._completedLoop = 0,
            this._autoRemove = !1,
            this._noAdjustSize = !1,
            this._baseScaleX = 1,
            this._baseScaleY = 1,
            this._aniScaleX = 1,
            this._aniScaleY = 1,
            this._initBaseScale = !1,
            this._noAdjustSize = e;
            this.ani = new z;
            this.addChild(this.ani)
        }
        get loopCount() {
            return this._loopCount
        }
        set loopCount(e) {
            this._completedLoop = 0,
            this.ani.off(Laya.Event.COMPLETE, this, this.onLoopComplete),
            0 < e && this.ani.on(Laya.Event.COMPLETE, this, this.onLoopComplete),
            this._loopCount = e
        }
        get autoRemove() {
            return this._autoRemove
        }
        set autoRemove(e) {
            this._autoRemove = e
        }
        get autoPlay() {
            return this._autoPlay
        }
        set autoPlay(e) {
            this._autoPlay != e && (this._autoPlay = e, (this.ani.autoPlay = e) || (this.ani.graphics = null))
        }
        get isPlaying() {
            return this.ani.isPlaying
        }
        get skin() {
            return this._skin
        }
        set skin(e) {
            this._skin != e && (this._removeAsset(this._skin), "" != (this._skin = e) && (this._addAsset(e), Laya.loader.loadP(e, null, Laya.Loader.ATLAS, 2).then(() => {
                        this.setAtlas(e)
                    })))
        }
        get miniAniScaleX() {
            return this._aniScaleX
        }
        get miniAniScaleY() {
            return this._aniScaleY
        }
        set scaleAniX(e) {
            this._baseScaleX = e,
            this.scaleX = this._aniScaleX * this._baseScaleX
        }
        get scaleAniX() {
            return this._baseScaleX
        }
        set scaleAniY(e) {
            this._baseScaleY = e,
            this.scaleY = this._aniScaleY * this._baseScaleY
        }
        get scaleAniY() {
            return this._baseScaleY
        }
        _addAsset(e) {}
        _removeAsset(e) {}
        setAtlas(t) {
            if (!this.destroyed) {
                var i = Laya.Loader.getRes(t);
                if (i) {
                    let e = 1;
                    for (var s in i.mc) {
                        s = i.mc[s];
                        this.ani.interval = 1e3 / s.frameRate,
                        s.scale && (e = parseFloat(s.scale));
                        break
                    }
                    this._aniScaleX = this._aniScaleY = e,
                    this._initBaseScale || (this._baseScaleX = this.scaleX, this._baseScaleY = this.scaleY, this._initBaseScale = !0),
                    this.scaleAniX = this._baseScaleX,
                    this.scaleAniY = this._baseScaleY,
                    this._noAdjustSize || this.adjustBoundSize(i),
                    this.ani.frames = z.createFrames(t, ""),
                    this.autoPlay || (this.ani.graphics = null),
                    this.event(Laya.Event.LOADED)
                }
            }
        }
        adjustBoundSize(e) {
            let t = 0,
            i = 0;
            for (var s in e.res) {
                s = e.res[s];
                t = Math.max(t, s.w),
                i = Math.max(i, s.h)
            }
            this.width = this.width || t,
            this.height = this.height || i,
            this.ani.x = this.width / 2,
            this.ani.y = this.height / 2
        }
        play(e) {
            this.ani.play(e)
        }
        gotoAndStop(e) {
            this.ani.gotoAndStop(e)
        }
        stop() {
            this.ani.stop(),
            this.ani.graphics = null
        }
        clear() {
            this._skin = "",
            this.ani.clear()
        }
        onLoopComplete() {
            this._completedLoop++,
            0 < this._loopCount && this._completedLoop >= this._loopCount && Laya.timer.callLater(this, () => {
                this.stop(),
                this.event(Laya.Event.COMPLETE),
                this._autoRemove && this.removeSelf()
            })
        }
        get animation() {
            return this.ani
        }
        destroy(e = !0) {
            this.scaleX = 1,
            this.scaleY = 1,
            this._aniScaleX = 1,
            this._aniScaleY = 1,
            this._baseScaleX = 1,
            this._baseScaleY = 1,
            this._initBaseScale = !1,
            this.offAll(),
            this.clear(),
            super.destroy(e)
        }
    }
    class Q {
        constructor(e) {
            this._downMode = !1,
            this._clicked = !1,
            this.outed = !1,
            this.canceled = !1,
            this.scale = .9,
            this.button = e
        }
        static create(e) {
            return new Q(e)
        }
        onEvent(e) {
            let t = e.type;
            t === Laya.Event.MOUSE_DOWN ? this.promise = this.scaleDown().then(() => {}) : t === Laya.Event.MOUSE_OUT || t === Laya.Event.MOUSE_UP ? (this.outed = !0, this.promise && this.promise.then(() => this.scaleUp())) : t === Laya.Event.CLICK && (this._clicked = !0, this.promise && this.promise.then(() => !this.outed && this.scaleUp()).then(() => {
                        this._clicked = !1,
                        this.doClick()
                    })),
            this.promise && this.promise.then(() => {
                if (!this.canceled) {
                    let e = this.button;
                    e.selected || e.setState(Laya.Button.stateMap[t])
                }
            })
        }
        scaleDown() {
            return this.downMode = !0,
            Promise.resolve(void 0)
        }
        scaleUp() {
            return this.downMode = !1,
            Promise.resolve(void 0)
        }
        get downMode() {
            return this._downMode
        }
        set downMode(e) {
            let t = this.button;
            var i,
            s,
            a,
            r,
            n,
            o,
            l;
            t.parent && this._downMode != e && (this._downMode = e, t.parent, i = t.left, s = t.right, a = t.top, r = t.bottom, t.top = t.bottom = t.left = t.right = NaN, e ? (this._oldPivotX = t.pivotX, this._oldPivotY = t.pivotY, e = .5 * t.width, l = .5 * t.height, n = (e - this._oldPivotX) * t.scaleX, o = (l - this._oldPivotY) * t.scaleY, t.pivot(e, l), t.pos(t.x + n, t.y + o), t.set_scaleX(t.scaleX * this.scale), t.set_scaleY(t.scaleY * this.scale)) : (t.set_scaleX(t.scaleX / this.scale), t.set_scaleY(t.scaleY / this.scale), e = (this._oldPivotX - t.pivotX) * t.scaleX, l = (this._oldPivotY - t.pivotY) * t.scaleY, t.pivot(this._oldPivotX, this._oldPivotY), t.pos(t.x + e, t.y + l), t.left = i, t.right = s, t.top = a, t.bottom = r))
        }
        cancel() {
            this.downMode && (this._clicked && this.doClick(), this.downMode = !1)
        }
        doClick() {
            if (!this.downMode) {
                let e = this.button;
                e.toggle && (e.selected = !e.selected),
                e.clickHandler && e.clickHandler.run()
            }
        }
    }
    class J extends Laya.Button {
        constructor() {
            super(...arguments),
            this._enableAnimating = !0,
            this._reversed = !1,
            this._reverseDirection = J.REVERSE_HORIZONTAL,
            this.enableLongPress = !1
        }
        onAwake() {
            super.onAwake(),
            this.text.wordWrap = !0
        }
        get enableAnimating() {
            return this._enableAnimating
        }
        set enableAnimating(e) {
            this._enableAnimating = e
        }
        set image(e) {
            if (this._imageSkin != e) {
                if (!this._image) {
                    let e = this._image = new Laya.Image;
                    e.anchorX = e.anchorY = .5,
                    e.centerX = -0,
                    e.centerY = -8,
                    this.addChild(e)
                }
                this._imageSkin = e,
                this._image.skin = e,
                Laya.timer.callLater(this, this.changeImages)
            }
        }
        get image() {
            return this._imageSkin
        }
        get imageItem() {
            return this._image
        }
        get effectOn() {
            return this._effectOn
        }
        set effectOn(e) {
            this._effectOn != e && (this._effectOn = e, Laya.timer.callLater(this, this.updateEffect))
        }
        get effect() {
            return this._effect
        }
        set effect(e) {
            this._effect != e && (this._effect = e, Laya.timer.callLater(this, this.updateEffect))
        }
        get effectAutoScale() {
            return this._effectAutoScale
        }
        set effectAutoScale(e) {
            this._effectAutoScale = e
        }
        get effectLayer() {
            return this._effectLayer
        }
        set effectLayer(e) {
            this._effectLayer != e && (this._effectLayer = e, Laya.timer.callLater(this, this.updateEffect))
        }
        get reverseDirection() {
            return this._reverseDirection
        }
        set reverseDirection(e) {
            this._reverseDirection != e && (this._reverseDirection = e)
        }
        get reversed() {
            return this._reversed
        }
        set reversed(e) {
            this._reversed != e && (this._reversed = e)
        }
        updateEffect() {
            if (this._effect)
                if (this._effectOn) {
                    var t = this._effectLayer || J.LAYER_BOTTOM;
                    let e = this._effectAni;
                    e || ((e = this._effectAni = new $).centerX = e.centerY = 0, t == J.LAYER_TOP ? this.addChild(e) : t == J.LAYER_BOTTOM && this.addChildAt(e, 0)),
                    e.autoPlay = !0,
                    e.skin != this._effect && (e.skin = this._effect, this._effectAutoScale && e.once(Laya.Event.LOADED, this, () => {
                            e.scaleX = this.width / e.width,
                            e.scaleY = this.height / e.height
                        }))
                } else {
                    let e = this._effectAni;
                    e && (e.autoPlay = !1)
                }
            else
                this._effectAni && (this._effectAni.autoPlay = !1)
        }
        onMouse(e) {
            this.enableAnimating ? !1 === this.toggle && this._selected || (this._mouseClick || (this._mouseClick = Q.create(this)), e.type !== Laya.Event.MOUSE_DOWN && e.type !== Laya.Event.MOUSE_OVER || this._mouseClick.cancel(), this._mouseClick.onEvent(e), this.enableLongPress && e.type == Laya.Event.MOUSE_DOWN && e.stopPropagation()) : super.onMouse(e)
        }
        changeImages() {
            if (!this.destroyed) {
                let e = Laya.Loader.getRes(this._imageSkin);
                var t,
                i,
                s;
                e && (e.$_GID || (e.$_GID = Laya.Utils.getGID()), t = e.$_GID, (i = Laya.WeakObject.I.get(t)) ? this._imageSources = i : (this._imageSources = [e], i = Laya.Loader.getRes(this.getStateRes(this._imageSkin, "down")), s = Laya.Loader.getRes(this.getStateRes(this._imageSkin, "select")), i && this._imageSources.push(i), s && (i || this._imageSources.push(e), this._imageSources.push(s)), Laya.WeakObject.I.set(t, this._imageSources)))
            }
        }
        changeClips() {
            if (!this.destroyed && this._skin) {
                let e = Laya.Loader.getRes(this._skin);
                var t,
                i,
                s,
                a,
                r;
                e && (t = e.sourceWidth, i = e.sourceHeight, e.$_GID || (e.$_GID = Laya.Utils.getGID()), s = e.$_GID, (a = Laya.WeakObject.I.get(s)) ? this._sources = a : (this._sources = [e], a = Laya.Loader.getRes(this.getStateRes(this._skin, "down")), r = Laya.Loader.getRes(this.getStateRes(this._skin, "select")), a && this._sources.push(a), r && (a || this._sources.push(e), this._sources.push(r)), Laya.WeakObject.I.set(s, this._sources)), this._autoSize ? (this._bitmap.width = this.width || t, this._bitmap.height = this.height || i, this._text && (this._text.width = this._bitmap.width, this._text.height = this._bitmap.height)) : this._text && (this._text.x = t))
            }
        }
        setState(e) {
            this.state = e
        }
        changeState() {
            var e;
            this.destroyed || (this._stateChanged = !1, this.runCallLater(this.changeClips), this._sources && (e = this._sources.length, e = this._state < e ? this._state : e - 1, e = this._sources[e], this._bitmap.source = e), this.runCallLater(this.changeImages), this._imageSources && this._image && (e = this._imageSources.length, e = this._state < e ? this._state : e - 1, e = this._imageSources[e], this._image.source = e), this.label && this._sources && (e = this._sources.length, e = this._state < e ? this._state : e - 1, this._text.color = this._labelColors[e], this._strokeColors && (this._text.strokeColor = this._strokeColors[e])))
        }
        getStateRes(e, t) {
            var i = e.lastIndexOf(".");
            return i < 0 ? e : e.substr(0, i) + "$" + t + e.substr(i)
        }
        destroy(e = !0) {
            Laya.timer.clearAll(this),
            super.destroy(e)
        }
    }
    J.REVERSE_HORIZONTAL = "horizontal",
    J.REVERSE_VERTICAL = "vertical",
    J.LAYER_TOP = "top",
    J.LAYER_BOTTOM = "bottom";
    class Z extends Laya.CheckBox {}
    class ee extends Laya.ComboBox {}
    class te extends Laya.HBox {
        constructor() {
            super(),
            this.filterVisible = !1,
            this.enable = !0,
            this.filterHandler = new Laya.Handler(this, this._defaultFilter)
        }
        sortItem(e) {
            this.sortHandler && this.sortHandler.runWith([e])
        }
        _defaultFilter(e) {
            return !!e && !(this.filterVisible && !e.visible)
        }
        changeItems() {
            if (this.enable) {
                this._itemChanged = !1;
                let i = [],
                s = 0;
                for (let e = 0, t = this.numChildren; e < t; e++) {
                    var r = this.getChildAt(e);
                    this.filterHandler.runWith(r) && (i.push(r), s = this.height || Math.max(s, r.height * r.scaleY))
                }
                this.sortItem(i);
                let a = 0;
                for (let t = 0, e = i.length; t < e; t++) {
                    let e = i[t];
                    e.x = a,
                    a += e.width * e.scaleX + this._space,
                    this._align == te.TOP ? e.y = 0 : this._align == te.MIDDLE ? e.y = .5 * (s - e.height * e.scaleY) : this._align == te.BOTTOM && (e.y = s - e.height * e.scaleY)
                }
                this.event(Laya.Event.RESIZE),
                this.onCompResize()
            }
        }
        get contentWidth() {
            return this.measureWidth
        }
        get contentHeight() {
            return this.measureHeight
        }
        commitMeasure() {
            super.commitMeasure(),
            this.runCallLater(this.changeItems)
        }
    }
    class ie extends Laya.VBox {
        constructor() {
            super(),
            this.filterVisible = !1,
            this.enable = !0,
            this.filterHandler = new Laya.Handler(this, this._defaultFilter)
        }
        sortItem(e) {
            this.sortHandler && this.sortHandler.runWith([e])
        }
        _defaultFilter(e) {
            return !!e && !(this.filterVisible && !e.visible)
        }
        changeItems() {
            if (this.enable) {
                this._itemChanged = !1;
                let i = [],
                s = 0;
                for (let e = 0, t = this.numChildren; e < t; e++) {
                    var a = this.getChildAt(e);
                    this.filterHandler.runWith(a) && (i.push(a), s = this.width || Math.max(s, a.width * a.scaleX))
                }
                this.sortItem(i);
                var r = 0;
                for (let t = 0, e = i.length; t < e; t++) {
                    let e = i[t];
                    e.y = r,
                    r += e.height * e.scaleY + this._space,
                    this._align == ie.LEFT ? e.x = 0 : this._align == ie.CENTER ? e.x = .5 * (s - e.width * e.scaleX) : this._align == ie.RIGHT && (e.x = s - e.width * e.scaleX)
                }
                this.event(Laya.Event.RESIZE),
                this.onCompResize()
            }
        }
        get contentWidth() {
            return this.measureWidth
        }
        get contentHeight() {
            return this.measureHeight
        }
        commitMeasure() {
            super.commitMeasure(),
            this.runCallLater(this.changeItems)
        }
    }
    function se(s) {
        for (var t in s.on(Laya.Event.CLICK, s, (t, i) => {
                var s = i.target.name;
                if (s) {
                    let e = t["onClick" + s];
                    e && e.call(t, i)
                }
            }, [s]), s)
            if (s.hasOwnProperty(t)) {
                if (t.includes("m_chb_")) {
                    let e = s[t];
                    var i = t.replace("m_chb_", ""),
                    i = s["onSelect" + i];
                    i && (e.clickHandler = Laya.Handler.create(s, i, [e], !1))
                }
                if (t.includes("m_cob_")) {
                    let e = s[t];
                    var i = t.replace("m_cob_", ""),
                    a = s["onSelect" + i];
                    a && (e.selectHandler = Laya.Handler.create(s, a, null, !1))
                }
                if (t.includes("m_lst_")) {
                    let e = s[t];
                    a = t.replace("m_lst_", "");
                    let i = s["onSelect" + a];
                    i && (e.selectHandler = Laya.Handler.create(s, i, null, !1)),
                    e.renderHandler = Laya.Handler.create(s, (e, t) => {
                        e.dataChanged && e.dataChanged(t)
                    }, null, !1),
                    (i = s["onClick" + a]) && (e.mouseHandler = Laya.Handler.create(s, (e, t) => {
                            e.type == Laya.Event.CLICK && i && i.apply(s, [e, t])
                        }, null, !1)),
                    e.scrollBar && (e.scrollBar.elasticDistance = 100, e.scrollBar.elasticBackTime = 200, e.scrollBar.hide = !0)
                }
                if (t.includes("m_sli_")) {
                    let e = s[t];
                    var r = t.replace("m_sli_", ""),
                    r = s["onChange" + r];
                    r && (e.changeHandler = Laya.Handler.create(s, r, null, !1))
                }
                if (t.includes("m_rg_")) {
                    let e = s[t];
                    var r = t.replace("m_rg_", ""),
                    n = s["onSelect" + r];
                    n && (e.selectHandler = Laya.Handler.create(s, n, null, !1))
                }
                if (t.includes("m_tab_")) {
                    let e = s[t];
                    var n = t.replace("m_tab_", ""),
                    o = s["onSelect" + n];
                    o && (e.selectHandler = Laya.Handler.create(s, o, null, !1))
                }
                if (t.includes("m_pan_")) {
                    let e = s[t];
                    e.vScrollBar && (e.vScrollBar.elasticDistance = 100, e.vScrollBar.elasticBackTime = 200, e.vScrollBar.hide = !0),
                    e.hScrollBar && (e.hScrollBar.elasticDistance = 100, e.hScrollBar.elasticBackTime = 200, e.hScrollBar.hide = !0)
                }
            }
    }
    function ae(t) {
        for (var i in t)
            if (t.hasOwnProperty(i)) {
                if (i.includes("m_chb_")) {
                    let e = t[i];
                    e.clickHandler && (e.clickHandler.recover(), e.clickHandler = null)
                }
                if (i.includes("m_cob_")) {
                    let e = t[i];
                    e.selectHandler && (e.selectHandler.recover(), e.selectHandler = null)
                }
                if (i.includes("m_lst_")) {
                    let e = t[i];
                    e.renderHandler && (e.renderHandler.recover(), e.renderHandler = null),
                    e.selectHandler && (e.selectHandler.recover(), e.selectHandler = null),
                    e.mouseHandler && (e.mouseHandler.recover(), e.mouseHandler = null)
                }
                if (i.includes("m_sli_")) {
                    let e = t[i];
                    e.changeHandler && (e.changeHandler.recover(), e.changeHandler = null)
                }
                if (i.includes("m_rg_")) {
                    let e = t[i];
                    e.selectHandler && (e.selectHandler.recover(), e.selectHandler = null)
                }
                if (i.includes("m_tab_")) {
                    let e = t[i];
                    e.selectHandler && (e.selectHandler.recover(), e.selectHandler = null)
                }
            }
    }
    let re = new Laya.EventDispatcher;
    class ne extends Laya.Scene {
        onAwake() {
            super.onAwake(),
            this.registerModelEvents(!0),
            se(this)
        }
        onDestroy() {
            super.onDestroy(),
            this.registerModelEvents(!1),
            ae(this)
        }
        registerModelEvents(t) {
            this._modelEvents && this._modelEvents.length && this._modelEvents.forEach(e => {
                t ? re.on(e.eventType, this, e.handler) : re.off(e.eventType, this, e.handler)
            })
        }
    }
    class oe extends Laya.View {
        constructor() {
            super(...arguments),
            this._preFuncs = [],
            this._preUrls = []
        }
        get assetCollector() {
            return this._assetCollector
        }
        set assetCollector(e) {
            this._assetCollector = e
        }
        onAwake() {
            super.onAwake(),
            this.adaptBg(),
            this.registerModelEvents(!0),
            se(this)
        }
        onDestroy() {
            super.onDestroy(),
            this.registerModelEvents(!1),
            this.cancelLoadRes(),
            Laya.Tween.clearAll(this),
            ae(this)
        }
        openView() {
            return new Promise((e, t) => {
                this.addPreFunc(() => this.loadViewComplete()),
                this.addPreFunc(() => this.loadPreRes());
                let i = [];
                this._preFuncs.forEach(e => i.push(e())),
                Promise.all(i).then(() => {
                    this.destroyed ? t(void 0) : e()
                }).catch(e => {
                    console.error(e)
                })
            })
        }
        loadP(e, t, i, s, a) {
            return Laya.loader.loadP(e, null, t, i, s, a)
        }
        registerModelEvents(t) {
            this._modelEvents && this._modelEvents.length && this._modelEvents.forEach(e => {
                t ? re.on(e.eventType, this, e.handler) : re.off(e.eventType, this, e.handler)
            })
        }
        addPreRes(e) {
            Array.isArray(e) ? this._preUrls = e : this._preUrls.push(e)
        }
        addPreFunc(e) {
            this._preFuncs.pushOnce(e)
        }
        loadViewComplete() {
            return this._viewCreated ? Promise.resolve(this) : new Promise((e, t) => {
                this.once("onViewCreated", this, () => e(this))
            })
        }
        loadPreRes() {
            return this._preUrls.length ? new Promise((e, t) => {
                this.loadP(this._preUrls, null, 0).then(() => {
                    this._preUrls = null,
                    e()
                })
            }) : Promise.resolve()
        }
        cancelLoadRes() {
            this._preUrls && (Laya.loader.cancelLoadByUrls(this._preUrls), this._preUrls = null)
        }
        adaptBg() {
            let e = this.m_img_AdaptBg;
            var t;
            e && (t = Mmobay.Utils.getScreenInfo(), e.size(t.stageWidth, t.stageHeight), e.centerX = e.centerY = 0, e.mouseEnabled = !0, e.mouseThrough = !1)
        }
    }
    const le = {};
    (e = H = H || {})[e.Fight = 0] = "Fight",
    e[e.Main = 1] = "Main",
    e[e.Secondary = 2] = "Secondary",
    e[e.Fixui = 3] = "Fixui",
    e[e.Popup = 4] = "Popup",
    e[e.Effect = 5] = "Effect",
    e[e.Toast = 6] = "Toast",
    e[e.Loading = 7] = "Loading",
    e[e.System = 8] = "System",
    (e = V = V || {})[e.Yes = 1] = "Yes",
    e[e.No = 2] = "No",
    e[e.YesNo = 3] = "YesNo",
    (e = d = d || {})[e.None = 0] = "None",
    e[e.Yes = 1] = "Yes",
    e[e.No = 2] = "No",
    e[e.Skip = 3] = "Skip";
    class he extends Laya.UIComponent {
        constructor(e) {
            super(),
            this.size(560, 1120),
            this.centerX = this.centerY = 0,
            this.name = e.name,
            this.zOrder = e.zOrder,
            this.mouseThrough = !0,
            this._layer = e.layer
        }
        get layer() {
            return this._layer
        }
    }
    class me {
        constructor() {
            this._mainDlgs = [],
            this._secondaryDlgs = [],
            this._popupDlgs = []
        }
        static get instance() {
            return me._instance
        }
        static init() {
            let e = [{
                    name: "fight",
                    layer: H.Fight,
                    zOrder: 1100
                }, {
                    name: "main",
                    layer: H.Main,
                    zOrder: 1200
                }, {
                    name: "secondary",
                    layer: H.Secondary,
                    zOrder: 1300
                }, {
                    name: "fixui",
                    layer: H.Fixui,
                    zOrder: 1400
                }, {
                    name: "popup",
                    layer: H.Popup,
                    zOrder: 1500
                }, {
                    name: "effect",
                    layer: H.Effect,
                    zOrder: 1600
                }, {
                    name: "toast",
                    layer: H.Toast,
                    zOrder: 1700
                }, {
                    name: "loading",
                    layer: H.Loading,
                    zOrder: 1800
                }, {
                    name: "system",
                    layer: H.System,
                    zOrder: 1900
                }
            ],
            t = (e.forEach(e => {
                    var t = new he(e);
                    Laya.stage.addChild(t),
                    this._containers[e.layer] = t
                }), me._instance = new me);
            t.createMask(),
            t.crateFixui()
        }
        static add2Container(e, t) {
            let i = me._containers[t];
            i && i.addChild(e)
        }
        get fightLayer() {
            return me._containers[H.Fight]
        }
        get mainLayer() {
            return me._containers[H.Main]
        }
        get secondaryLayer() {
            return me._containers[H.Secondary]
        }
        get fixuiLayer() {
            return me._containers[H.Fixui]
        }
        get popupLayer() {
            return me._containers[H.Popup]
        }
        get effectLayer() {
            return me._containers[H.Effect]
        }
        get systemLayer() {
            return me._containers[H.System]
        }
        enableShield(e) {
            if (e) {
                if (!this._boxShield) {
                    let e = this._boxShield = new Laya.Box;
                    e.zOrder = 2e3,
                    e.size(Laya.stage.width, Laya.stage.height),
                    e.centerX = e.centerY = 0,
                    e.mouseEnabled = !0
                }
                Laya.stage.addChild(this._boxShield)
            } else
                this._boxShield && this._boxShield.removeSelf()
        }
        show(t, i = H.Popup, e = le) {
            if (t && !t.destroyed)
                if (i == H.Main)
                    this.add2Main(t, e);
                else if (i == H.Secondary)
                    this.add2Secondary(t, e);
                else if (i == H.Popup)
                    this.add2Popup(t, e);
                else {
                    let e = me._containers[i];
                    e.addChild(t)
                }
        }
        close(e, t = d.None, i) {
            var s;
            e && !e.destroyed && ("secondary" == (s = e.parent).name ? this.checkSecondary(e) : "popup" == s.name && this.checkPopub(e), e.event(Laya.Event.CLOSE, i ? [t, i] : t), e.destroy())
        }
        clearMain() {
            let e = this._mainDlgs;
            e.forEach(e => {
                e.destroy()
            }),
            this._mainDlgs.length = 0
        }
        add2Main(e, t) {
            let i = this._mainDlgs.pop();
            i && i.destroy(),
            this.mainLayer.addChild(e),
            this._mainDlgs.push(e)
        }
        add2Secondary(e, t) {
            if (e.hitTestPrior = !1, t.hideCurrent) {
                t = this._secondaryDlgs.length;
                let e = this._secondaryDlgs[t - 1];
                e && e.removeSelf()
            }
            this.secondaryLayer.addChild(e),
            this._secondaryDlgs.push(e),
            this.mainLayer.removeSelf()
        }
        add2Popup(e, t) {
            if (e.hitTestPrior = !1, t.clearPopup)
                this._popupDlgs.forEach(e => {
                    e.event(Laya.Event.CLOSE, d.None),
                    e.destroy()
                }), this._popupDlgs = [];
            else {
                var i = this._popupDlgs.length;
                let e = this._popupDlgs[i - 1];
                e && e.removeSelf()
            }
            this.popupLayer.addChild(e),
            this._popupDlgs.push(e),
            t.showEffect && Laya.Tween.from(e, {
                alpha: 0,
                scaleX: .8,
                scaleY: .8
            }, 200, Laya.Ease.backOut),
            this._boxMask.visible = !0
        }
        checkSecondary(t) {
            for (let e = 0; e < this._secondaryDlgs.length; e++)
                if (t == this._secondaryDlgs[e]) {
                    this._secondaryDlgs.splice(e, 1);
                    break
                }
            var e = this._secondaryDlgs.length,
            e = this._secondaryDlgs[e - 1];
            e && this.secondaryLayer.addChild(e),
            0 != this._secondaryDlgs.length || this.mainLayer.parent || Laya.stage.addChild(this.mainLayer)
        }
        checkPopub(t) {
            for (let e = 0; e < this._popupDlgs.length; e++)
                if (t == this._popupDlgs[e]) {
                    this._popupDlgs.splice(e, 1);
                    break
                }
            var e = this._popupDlgs.length;
            e ? (e = this._popupDlgs[e - 1], this.popupLayer.addChild(e)) : this._boxMask.visible = !1
        }
        removeTopPopup() {
            var e = this._popupDlgs.length,
            e = this._popupDlgs[e - 1];
            e.closeOnSide && this.close(e)
        }
        removeAllPopUp() {
            this._popupDlgs.forEach(e => {
                e.event(Laya.Event.CLOSE, d.None),
                e.destroy()
            }),
            this._popupDlgs = [],
            this._boxMask.visible = !1
        }
        createMask() {
            let e = new Laya.Box;
            e.size(Laya.stage.width + 2, Laya.stage.height),
            e.bgColor = "#000000",
            e.zOrder = -1,
            e.alpha = .7,
            e.centerX = e.centerY = 0,
            e.visible = !1,
            e.mouseThrough = !1,
            e.mouseEnabled = !0,
            e.on(Laya.Event.CLICK, this, this.removeTopPopup),
            this._boxMask = e,
            this.popupLayer.addChild(e)
        }
        crateFixui() {
            if (!(Mmobay.adaptOffsetHeight <= 0)) {
                let e = .5 * Mmobay.adaptOffsetHeight,
                t = (e < 80 && (e = 80), new Laya.Box),
                i = (t.size(560, e), t.centerX = 0, t.top = -e, t.on(Laya.Event.CLICK, this, () => {
                        console.log("click top fixui")
                    }), this.fixuiLayer.addChild(t), new Laya.Image("hunt/ui_comm/s9_po8.png")),
                s = (i.sizeGrid = "1,1,1,1", i.left = i.right = 0, i.top = i.bottom = -1, t.addChild(i), new Laya.Image("hunt/ui_comm/fix_flower.png")),
                a = (s.top = s.left = 0, t.addChild(s), new Laya.Image("hunt/ui_comm/fix_flower.png")),
                r = (a.top = 0, a.right = 280, a.scaleX = -1, t.addChild(a), new Laya.Box);
                r.size(560, e),
                r.centerX = 0,
                r.bottom = -e,
                r.on(Laya.Event.CLICK, this, () => {
                    console.log("click bottom fixui")
                }),
                this.fixuiLayer.addChild(r),
                (i = new Laya.Image("hunt/ui_comm/s9_po9.png")).sizeGrid = "1,1,1,1",
                i.left = i.right = 0,
                i.top = i.bottom = -1,
                r.addChild(i),
                (s = new Laya.Image("hunt/ui_comm/fix_flower.png")).scaleY = -1,
                s.bottom = 80,
                s.left = 0,
                r.addChild(s),
                (a = new Laya.Image("hunt/ui_comm/fix_flower.png")).scaleX = a.scaleY = -1,
                a.bottom = 80,
                a.right = 280,
                r.addChild(a)
            }
        }
    }
    me._containers = {};
    class ce extends Laya.UIComponent {
        constructor(e, t = !1) {
            super();
            let i = 560,
            s = (0 < Mmobay.adaptOffsetWidth && (i += Mmobay.adaptOffsetWidth), this.size(i, 72), this.top = 0, this.centerX = 0, new Laya.Image("hunt/ui_comm/s9_bg9.png")),
            a = (s.sizeGrid = "1,1,1,1", s.size(i + 2, 68), s.centerX = 0, this.addChild(s), new Laya.Image("hunt/ui_comm/s9_bg15.png")),
            r = (a.sizeGrid = "8,1,1,1", a.size(i + 2, 10), a.centerX = 0, a.bottom = 4, this.addChild(a), new J("hunt/ui_comm/btn_back.png")),
            n = (r.stateNum = 1, r.left = 0, r.centerY = 0, r.name = "Back", this.addChild(r), (r = new J("hunt/ui_comm/btn_help.png")).stateNum = 1, r.right = 0, r.centerY = 0, r.name = "Help", this.addChild(r), r.visible = t, new Laya.Label(e));
            n.fontSize = 24,
            n.x += 10,
            n.color = "#ffffff",
            n.centerX = n.centerY = 0,
            n.bold = !0,
            n.wordWrap = !0,
            n.width = 390,
            n.align = "center",
            this.addChild(n),
            this._txtInfo = n
        }
        update(e) {
            this._txtInfo.text = e
        }
    }
    class de extends oe {
        constructor() {
            super(...arguments),
            this.m_closeOnSide = !0
        }
        static get manager() {
            return me.instance
        }
        get closeOnSide() {
            return this.m_closeOnSide
        }
        set closeOnSide(e) {
            this.m_closeOnSide = e
        }
        showDialog(e, t) {
            this.closeOnSide = t.closeOnSide,
            de.manager.show(this, e, t)
        }
        closeDialog(e = d.No, t) {
            de.manager.close(this, e, t)
        }
        wait() {
            return new Promise((i, e) => {
                this.once(Laya.Event.CLOSE, this, (e, t) => {
                    i({
                        type: e,
                        data: t
                    })
                })
            })
        }
        checkOpen() {
            return !0
        }
        addTitle(e, t) {
            this._title || (e = new ce(e, !!t), this._title = e, this.addChild(e))
        }
        updateTitle(e) {
            this._title && this._title.update(e)
        }
        onClickClose(e) {
            this.closeDialog()
        }
        onClickBack(e) {
            this.closeDialog()
        }
        onClickHelp(e) {}
    }
    var t,
    e = oe,
    i = de,
    s = Laya.ClassUtils.regClass,
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.arena || (a.arena = {});
        class dh extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/arena/ArenaBoxEnterDlg")
            }
        }
        a.ArenaBoxEnterDlgUI = dh,
        s("ui.hunt.views.arena.ArenaBoxEnterDlgUI", dh);
        class uh extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/arena/ArenaBuyDlg")
            }
        }
        a.ArenaBuyDlgUI = uh,
        s("ui.hunt.views.arena.ArenaBuyDlgUI", uh);
        class _h extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/arena/ArenaDlg")
            }
        }
        a.ArenaDlgUI = _h,
        s("ui.hunt.views.arena.ArenaDlgUI", _h);
        class ph extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/arena/ArenaExchangeDlg")
            }
        }
        a.ArenaExchangeDlgUI = ph,
        s("ui.hunt.views.arena.ArenaExchangeDlgUI", ph);
        class gh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/arena/ArenaExchangeItem")
            }
        }
        a.ArenaExchangeItemUI = gh,
        s("ui.hunt.views.arena.ArenaExchangeItemUI", gh);
        class yh extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/arena/ArenaExchangeItemDlg")
            }
        }
        a.ArenaExchangeItemDlgUI = yh,
        s("ui.hunt.views.arena.ArenaExchangeItemDlgUI", yh);
        class vh extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/arena/ArenaHelpDlg")
            }
        }
        a.ArenaHelpDlgUI = vh,
        s("ui.hunt.views.arena.ArenaHelpDlgUI", vh);
        class kh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/arena/ArenaMainView")
            }
        }
        a.ArenaMainViewUI = kh,
        s("ui.hunt.views.arena.ArenaMainViewUI", kh);
        class fh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/arena/ArenaRankCellView")
            }
        }
        a.ArenaRankCellViewUI = fh,
        s("ui.hunt.views.arena.ArenaRankCellViewUI", fh);
        class Ih extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/arena/ArenaRankDetailCellView")
            }
        }
        a.ArenaRankDetailCellViewUI = Ih,
        s("ui.hunt.views.arena.ArenaRankDetailCellViewUI", Ih);
        class bh extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/arena/ArenaRankDetailDlg")
            }
        }
        a.ArenaRankDetailDlgUI = bh,
        s("ui.hunt.views.arena.ArenaRankDetailDlgUI", bh);
        class wh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/arena/ArenaRankRewardCellView")
            }
        }
        a.ArenaRankRewardCellViewUI = wh,
        s("ui.hunt.views.arena.ArenaRankRewardCellViewUI", wh);
        class Ch extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/arena/ArenaRankRewardDlg")
            }
        }
        a.ArenaRankRewardDlgUI = Ch,
        s("ui.hunt.views.arena.ArenaRankRewardDlgUI", Ch);
        class xh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/arena/ArenaRankView")
            }
        }
        a.ArenaRankViewUI = xh,
        s("ui.hunt.views.arena.ArenaRankViewUI", xh);
        class Sh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/arena/ArenaRecordCellView")
            }
        }
        a.ArenaRecordCellViewUI = Sh,
        s("ui.hunt.views.arena.ArenaRecordCellViewUI", Sh);
        class Ah extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/arena/ArenaRecordDlg")
            }
        }
        a.ArenaRecordDlgUI = Ah,
        s("ui.hunt.views.arena.ArenaRecordDlgUI", Ah)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.bag || (a.bag = {});
        class Dh extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/bag/BagDlg")
            }
        }
        a.BagDlgUI = Dh,
        s("ui.hunt.views.bag.BagDlgUI", Dh);
        class Lh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/bag/BagEquipView")
            }
        }
        a.BagEquipViewUI = Lh,
        s("ui.hunt.views.bag.BagEquipViewUI", Lh);
        class Th extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/bag/BagFoodCellView")
            }
        }
        a.BagFoodCellViewUI = Th,
        s("ui.hunt.views.bag.BagFoodCellViewUI", Th);
        class Eh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/bag/BagFoodView")
            }
        }
        a.BagFoodViewUI = Eh,
        s("ui.hunt.views.bag.BagFoodViewUI", Eh);
        class Mh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/bag/BagItemView")
            }
        }
        a.BagItemViewUI = Mh,
        s("ui.hunt.views.bag.BagItemViewUI", Mh)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.block || (a.block = {});
        class Rh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/block/AuthorItem")
            }
        }
        a.AuthorItemUI = Rh,
        s("ui.hunt.views.block.AuthorItemUI", Rh);
        class Bh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/block/AuthorView")
            }
        }
        a.AuthorViewUI = Bh,
        s("ui.hunt.views.block.AuthorViewUI", Bh);
        class Nh extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/block/BlockChestDlg")
            }
        }
        a.BlockChestDlgUI = Nh,
        s("ui.hunt.views.block.BlockChestDlgUI", Nh);
        class Ph extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/block/BlockChestResult")
            }
        }
        a.BlockChestResultUI = Ph,
        s("ui.hunt.views.block.BlockChestResultUI", Ph);
        class qh extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/block/BlockEnterDlg")
            }
        }
        a.BlockEnterDlgUI = qh,
        s("ui.hunt.views.block.BlockEnterDlgUI", qh);
        class Uh extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/block/BlockInfoDlg")
            }
        }
        a.BlockInfoDlgUI = Uh,
        s("ui.hunt.views.block.BlockInfoDlgUI", Uh);
        class Hh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/block/BlockInfoView")
            }
        }
        a.BlockInfoViewUI = Hh,
        s("ui.hunt.views.block.BlockInfoViewUI", Hh);
        class Oh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/block/CommentView")
            }
        }
        a.CommentViewUI = Oh,
        s("ui.hunt.views.block.CommentViewUI", Oh);
        class Vh extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/block/HeroBlockDlg")
            }
        }
        a.HeroBlockDlgUI = Vh,
        s("ui.hunt.views.block.HeroBlockDlgUI", Vh);
        class Fh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/block/LikeView")
            }
        }
        a.LikeViewUI = Fh,
        s("ui.hunt.views.block.LikeViewUI", Fh)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.callMonster || (a.callMonster = {});
        class Gh extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/callMonster/callMonsterDlg")
            }
        }
        a.callMonsterDlgUI = Gh,
        s("ui.hunt.views.callMonster.callMonsterDlgUI", Gh);
        class Wh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/callMonster/callMonsterExChangeView")
            }
        }
        a.callMonsterExChangeViewUI = Wh,
        s("ui.hunt.views.callMonster.callMonsterExChangeViewUI", Wh);
        class Yh extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/callMonster/callMonsterInfoDlg")
            }
        }
        a.callMonsterInfoDlgUI = Yh,
        s("ui.hunt.views.callMonster.callMonsterInfoDlgUI", Yh);
        class Xh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/callMonster/callMonsterItem")
            }
        }
        a.callMonsterItemUI = Xh,
        s("ui.hunt.views.callMonster.callMonsterItemUI", Xh);
        class jh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/callMonster/callMonsterRankView")
            }
        }
        a.callMonsterRankViewUI = jh,
        s("ui.hunt.views.callMonster.callMonsterRankViewUI", jh);
        class Kh extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/callMonster/callMonsterResultDlg")
            }
        }
        a.callMonsterResultDlgUI = Kh,
        s("ui.hunt.views.callMonster.callMonsterResultDlgUI", Kh);
        class zh extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/callMonster/callMonsterRuleDlg")
            }
        }
        a.callMonsterRuleDlgUI = zh,
        s("ui.hunt.views.callMonster.callMonsterRuleDlgUI", zh);
        class $h extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/callMonster/callMonsterVIew")
            }
        }
        a.callMonsterVIewUI = $h,
        s("ui.hunt.views.callMonster.callMonsterVIewUI", $h)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.card || (a.card = {});
        class Qh extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/ChangeEquipDlg")
            }
        }
        a.ChangeEquipDlgUI = Qh,
        s("ui.hunt.views.card.ChangeEquipDlgUI", Qh);
        class Jh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/EatSmileView")
            }
        }
        a.EatSmileViewUI = Jh,
        s("ui.hunt.views.card.EatSmileViewUI", Jh);
        class Zh extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/HeroCardItem")
            }
        }
        a.HeroCardItemUI = Zh,
        s("ui.hunt.views.card.HeroCardItemUI", Zh);
        class em extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/HeroCardsDlg")
            }
        }
        a.HeroCardsDlgUI = em,
        s("ui.hunt.views.card.HeroCardsDlgUI", em);
        class tm extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/HeroEquipPropDlg")
            }
        }
        a.HeroEquipPropDlgUI = tm,
        s("ui.hunt.views.card.HeroEquipPropDlgUI", tm);
        class im extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/HeroEquipView")
            }
        }
        a.HeroEquipViewUI = im,
        s("ui.hunt.views.card.HeroEquipViewUI", im);
        class sm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/HeroGrowItem")
            }
        }
        a.HeroGrowItemUI = sm,
        s("ui.hunt.views.card.HeroGrowItemUI", sm);
        class am extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/HeroInfoDlg")
            }
        }
        a.HeroInfoDlgUI = am,
        s("ui.hunt.views.card.HeroInfoDlgUI", am);
        class rm extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/HeroLvlUpDlg")
            }
        }
        a.HeroLvlUpDlgUI = rm,
        s("ui.hunt.views.card.HeroLvlUpDlgUI", rm);
        class nm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/HeroPropGrow")
            }
        }
        a.HeroPropGrowUI = nm,
        s("ui.hunt.views.card.HeroPropGrowUI", nm);
        class om extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/HeroPropGrowDlg")
            }
        }
        a.HeroPropGrowDlgUI = om,
        s("ui.hunt.views.card.HeroPropGrowDlgUI", om);
        class lm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/HeroPropUpItem")
            }
        }
        a.HeroPropUpItemUI = lm,
        s("ui.hunt.views.card.HeroPropUpItemUI", lm);
        class hm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/HeroPropView")
            }
        }
        a.HeroPropViewUI = hm,
        s("ui.hunt.views.card.HeroPropViewUI", hm);
        class mm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/HeroSkillView")
            }
        }
        a.HeroSkillViewUI = mm,
        s("ui.hunt.views.card.HeroSkillViewUI", mm);
        class cm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/HeroSkinItem")
            }
        }
        a.HeroSkinItemUI = cm,
        s("ui.hunt.views.card.HeroSkinItemUI", cm);
        class dm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/HeroSkinView")
            }
        }
        a.HeroSkinViewUI = dm,
        s("ui.hunt.views.card.HeroSkinViewUI", dm);
        class um extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/SkinBuyMcDlg")
            }
        }
        a.SkinBuyMcDlgUI = um,
        s("ui.hunt.views.card.SkinBuyMcDlgUI", um);
        class _m extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/SkinDetailDlg")
            }
        }
        a.SkinDetailDlgUI = _m,
        s("ui.hunt.views.card.SkinDetailDlgUI", _m);
        class pm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/SkinEleBigView")
            }
        }
        a.SkinEleBigViewUI = pm,
        s("ui.hunt.views.card.SkinEleBigViewUI", pm);
        class gm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/SkinEleSmallView")
            }
        }
        a.SkinEleSmallViewUI = gm,
        s("ui.hunt.views.card.SkinEleSmallViewUI", gm);
        class ym extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/SkinListDlg")
            }
        }
        a.SkinListDlgUI = ym,
        s("ui.hunt.views.card.SkinListDlgUI", ym);
        class vm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/SkinListItem")
            }
        }
        a.SkinListItemUI = vm,
        s("ui.hunt.views.card.SkinListItemUI", vm);
        class km extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/SkinUpgradeDlg")
            }
        }
        a.SkinUpgradeDlgUI = km,
        s("ui.hunt.views.card.SkinUpgradeDlgUI", km);
        class fm extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/SkinUpgradeResultDlg")
            }
        }
        a.SkinUpgradeResultDlgUI = fm,
        s("ui.hunt.views.card.SkinUpgradeResultDlgUI", fm);
        class Im extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/TasteFoodDlg")
            }
        }
        a.TasteFoodDlgUI = Im,
        s("ui.hunt.views.card.TasteFoodDlgUI", Im);
        class bm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/VitCellView")
            }
        }
        a.VitCellViewUI = bm,
        s("ui.hunt.views.card.VitCellViewUI", bm);
        class wm extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/card/VitDlg")
            }
        }
        a.VitDlgUI = wm,
        s("ui.hunt.views.card.VitDlgUI", wm)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.chat || (a.chat = {});
        class Cm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/chat/BubbleItem")
            }
        }
        a.BubbleItemUI = Cm,
        s("ui.hunt.views.chat.BubbleItemUI", Cm);
        class xm extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/chat/ChangeBubbleDlg")
            }
        }
        a.ChangeBubbleDlgUI = xm,
        s("ui.hunt.views.chat.ChangeBubbleDlgUI", xm);
        class Sm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/chat/ChatChildView")
            }
        }
        a.ChatChildViewUI = Sm,
        s("ui.hunt.views.chat.ChatChildViewUI", Sm);
        class Am extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/chat/ChatDlg")
            }
        }
        a.ChatDlgUI = Am,
        s("ui.hunt.views.chat.ChatDlgUI", Am);
        class Dm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/chat/ChatView")
            }
        }
        a.ChatViewUI = Dm,
        s("ui.hunt.views.chat.ChatViewUI", Dm)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.club || (a.club = {});
        class Lm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubApplyCellView")
            }
        }
        a.ClubApplyCellViewUI = Lm,
        s("ui.hunt.views.club.ClubApplyCellViewUI", Lm);
        class Tm extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubApplyDlg")
            }
        }
        a.ClubApplyDlgUI = Tm,
        s("ui.hunt.views.club.ClubApplyDlgUI", Tm);
        class Em extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubChangeNameDlg")
            }
        }
        a.ClubChangeNameDlgUI = Em,
        s("ui.hunt.views.club.ClubChangeNameDlgUI", Em);
        class Mm extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubCreateDlg")
            }
        }
        a.ClubCreateDlgUI = Mm,
        s("ui.hunt.views.club.ClubCreateDlgUI", Mm);
        class Rm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubHallView")
            }
        }
        a.ClubHallViewUI = Rm,
        s("ui.hunt.views.club.ClubHallViewUI", Rm);
        class Bm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubHeadView")
            }
        }
        a.ClubHeadViewUI = Bm,
        s("ui.hunt.views.club.ClubHeadViewUI", Bm);
        class Nm extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubHornorDlg")
            }
        }
        a.ClubHornorDlgUI = Nm,
        s("ui.hunt.views.club.ClubHornorDlgUI", Nm);
        class Pm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubHornorView")
            }
        }
        a.ClubHornorViewUI = Pm,
        s("ui.hunt.views.club.ClubHornorViewUI", Pm);
        class qm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubIconCellView")
            }
        }
        a.ClubIconCellViewUI = qm,
        s("ui.hunt.views.club.ClubIconCellViewUI", qm);
        class Um extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubIconDlg")
            }
        }
        a.ClubIconDlgUI = Um,
        s("ui.hunt.views.club.ClubIconDlgUI", Um);
        class Hm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubIntroduceCellView")
            }
        }
        a.ClubIntroduceCellViewUI = Hm,
        s("ui.hunt.views.club.ClubIntroduceCellViewUI", Hm);
        class Om extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubIntroduceDlg")
            }
        }
        a.ClubIntroduceDlgUI = Om,
        s("ui.hunt.views.club.ClubIntroduceDlgUI", Om);
        class Vm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubListCellView")
            }
        }
        a.ClubListCellViewUI = Vm,
        s("ui.hunt.views.club.ClubListCellViewUI", Vm);
        class Fm extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubListDlg")
            }
        }
        a.ClubListDlgUI = Fm,
        s("ui.hunt.views.club.ClubListDlgUI", Fm);
        class Gm extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubMainDlg")
            }
        }
        a.ClubMainDlgUI = Gm,
        s("ui.hunt.views.club.ClubMainDlgUI", Gm);
        class Wm extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubManagerDlg")
            }
        }
        a.ClubManagerDlgUI = Wm,
        s("ui.hunt.views.club.ClubManagerDlgUI", Wm);
        class Ym extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubNoticeDlg")
            }
        }
        a.ClubNoticeDlgUI = Ym,
        s("ui.hunt.views.club.ClubNoticeDlgUI", Ym);
        class Xm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubPlayerCellView")
            }
        }
        a.ClubPlayerCellViewUI = Xm,
        s("ui.hunt.views.club.ClubPlayerCellViewUI", Xm);
        class jm extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubPlayerInfoDlg")
            }
        }
        a.ClubPlayerInfoDlgUI = jm,
        s("ui.hunt.views.club.ClubPlayerInfoDlgUI", jm);
        class Km extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubSearchDlg")
            }
        }
        a.ClubSearchDlgUI = Km,
        s("ui.hunt.views.club.ClubSearchDlgUI", Km);
        class zm extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubSetView")
            }
        }
        a.ClubSetViewUI = zm,
        s("ui.hunt.views.club.ClubSetViewUI", zm);
        class $m extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubTitleCellView")
            }
        }
        a.ClubTitleCellViewUI = $m,
        s("ui.hunt.views.club.ClubTitleCellViewUI", $m);
        class Qm extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubTitleEditDlg")
            }
        }
        a.ClubTitleEditDlgUI = Qm,
        s("ui.hunt.views.club.ClubTitleEditDlgUI", Qm);
        class Jm extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/club/ClubTitleSetDlg")
            }
        }
        a.ClubTitleSetDlgUI = Jm,
        s("ui.hunt.views.club.ClubTitleSetDlgUI", Jm)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.common || (a.common = {});
        class Zm extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/BindWalletDlg")
            }
        }
        a.BindWalletDlgUI = Zm,
        s("ui.hunt.views.common.BindWalletDlgUI", Zm);
        class ec extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/BindWalletResultDlg")
            }
        }
        a.BindWalletResultDlgUI = ec,
        s("ui.hunt.views.common.BindWalletResultDlgUI", ec);
        class tc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/BoxShowView")
            }
        }
        a.BoxShowViewUI = tc,
        s("ui.hunt.views.common.BoxShowViewUI", tc);
        class ic extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/BuyItemDlg")
            }
        }
        a.BuyItemDlgUI = ic,
        s("ui.hunt.views.common.BuyItemDlgUI", ic);
        class sc extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/CommRewardDlg")
            }
        }
        a.CommRewardDlgUI = sc,
        s("ui.hunt.views.common.CommRewardDlgUI", sc);
        class ac extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/CommonBoxDlg")
            }
        }
        a.CommonBoxDlgUI = ac,
        s("ui.hunt.views.common.CommonBoxDlgUI", ac);
        class rc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/CostVView")
            }
        }
        a.CostVViewUI = rc,
        s("ui.hunt.views.common.CostVViewUI", rc);
        class nc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/CostView")
            }
        }
        a.CostViewUI = nc,
        s("ui.hunt.views.common.CostViewUI", nc);
        class oc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/CountView")
            }
        }
        a.CountViewUI = oc,
        s("ui.hunt.views.common.CountViewUI", oc);
        class lc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/FingerView")
            }
        }
        a.FingerViewUI = lc,
        s("ui.hunt.views.common.FingerViewUI", lc);
        class hc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/HeadView")
            }
        }
        a.HeadViewUI = hc,
        s("ui.hunt.views.common.HeadViewUI", hc);
        class mc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/HeroPropTip")
            }
        }
        a.HeroPropTipUI = mc,
        s("ui.hunt.views.common.HeroPropTipUI", mc);
        class cc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/HeroView")
            }
        }
        a.HeroViewUI = cc,
        s("ui.hunt.views.common.HeroViewUI", cc);
        class dc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/InfoTip")
            }
        }
        a.InfoTipUI = dc,
        s("ui.hunt.views.common.InfoTipUI", dc);
        class uc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/ItemArrow")
            }
        }
        a.ItemArrowUI = uc,
        s("ui.hunt.views.common.ItemArrowUI", uc);
        class _c extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/ItemDetailDlg")
            }
        }
        a.ItemDetailDlgUI = _c,
        s("ui.hunt.views.common.ItemDetailDlgUI", _c);
        class pc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/ItemDetailView")
            }
        }
        a.ItemDetailViewUI = pc,
        s("ui.hunt.views.common.ItemDetailViewUI", pc);
        class gc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/ItemIcon")
            }
        }
        a.ItemIconUI = gc,
        s("ui.hunt.views.common.ItemIconUI", gc);
        class yc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/ItemSelect")
            }
        }
        a.ItemSelectUI = yc,
        s("ui.hunt.views.common.ItemSelectUI", yc);
        class vc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.createView(vc.uiView)
            }
        }
        vc.uiView = {
            type: "View",
            props: {
                width: 560,
                runtime: "logic/views/common/LoadingView.ts",
                height: 1120,
                centerY: 0,
                centerX: 0
            },
            compId: 2,
            child: [{
                    type: "Image",
                    props: {
                        y: 560,
                        x: 280,
                        skin: "hunt/ui_comm/loading.png",
                        anchorY: .5,
                        anchorX: .5
                    },
                    compId: 4
                }
            ],
            animations: [{
                    nodes: [{
                            target: 4,
                            keyframes: {
                                rotation: [{
                                        value: 0,
                                        tweenMethod: "linearNone",
                                        tween: !0,
                                        target: 4,
                                        key: "rotation",
                                        index: 0
                                    }, {
                                        value: 360,
                                        tweenMethod: "linearNone",
                                        tween: !0,
                                        target: 4,
                                        key: "rotation",
                                        index: 24
                                    }
                                ]
                            }
                        }
                    ],
                    name: "ani1",
                    id: 1,
                    frameRate: 24,
                    action: 0
                }
            ],
            loadList: ["hunt/ui_comm/loading.png"],
            loadList3D: []
        },
        a.LoadingViewUI = vc,
        s("ui.hunt.views.common.LoadingViewUI", vc);
        class kc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/MoneyIcon")
            }
        }
        a.MoneyIconUI = kc,
        s("ui.hunt.views.common.MoneyIconUI", kc);
        class fc extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/MsgBox")
            }
        }
        a.MsgBoxUI = fc,
        s("ui.hunt.views.common.MsgBoxUI", fc);
        class Ic extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/NewImageView")
            }
        }
        a.NewImageViewUI = Ic,
        s("ui.hunt.views.common.NewImageViewUI", Ic);
        class bc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/NpcTalkItem")
            }
        }
        a.NpcTalkItemUI = bc,
        s("ui.hunt.views.common.NpcTalkItemUI", bc);
        class wc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/NpcTalkSelItem")
            }
        }
        a.NpcTalkSelItemUI = wc,
        s("ui.hunt.views.common.NpcTalkSelItemUI", wc);
        class Cc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/NpcTalkView")
            }
        }
        a.NpcTalkViewUI = Cc,
        s("ui.hunt.views.common.NpcTalkViewUI", Cc);
        class xc extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/OpenRewardBox")
            }
        }
        a.OpenRewardBoxUI = xc,
        s("ui.hunt.views.common.OpenRewardBoxUI", xc);
        class Sc extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/ProduceDetailDlg")
            }
        }
        a.ProduceDetailDlgUI = Sc,
        s("ui.hunt.views.common.ProduceDetailDlgUI", Sc);
        class Ac extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/PropView")
            }
        }
        a.PropViewUI = Ac,
        s("ui.hunt.views.common.PropViewUI", Ac);
        class Dc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/PropViewAni")
            }
        }
        a.PropViewAniUI = Dc,
        s("ui.hunt.views.common.PropViewAniUI", Dc);
        class Lc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/RewardBoxItem")
            }
        }
        a.RewardBoxItemUI = Lc,
        s("ui.hunt.views.common.RewardBoxItemUI", Lc);
        class Tc extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/SettingDlg")
            }
        }
        a.SettingDlgUI = Tc,
        s("ui.hunt.views.common.SettingDlgUI", Tc);
        class Ec extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/SkillActive")
            }
        }
        a.SkillActiveUI = Ec,
        s("ui.hunt.views.common.SkillActiveUI", Ec);
        class Mc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/SkillTips")
            }
        }
        a.SkillTipsUI = Mc,
        s("ui.hunt.views.common.SkillTipsUI", Mc);
        class Rc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/SkillView")
            }
        }
        a.SkillViewUI = Rc,
        s("ui.hunt.views.common.SkillViewUI", Rc);
        class Bc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/SortCellView")
            }
        }
        a.SortCellViewUI = Bc,
        s("ui.hunt.views.common.SortCellViewUI", Bc);
        class Nc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/SortView")
            }
        }
        a.SortViewUI = Nc,
        s("ui.hunt.views.common.SortViewUI", Nc);
        class Pc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/StoryInfoView")
            }
        }
        a.StoryInfoViewUI = Pc,
        s("ui.hunt.views.common.StoryInfoViewUI", Pc);
        class qc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/SystemNotice")
            }
        }
        a.SystemNoticeUI = qc,
        s("ui.hunt.views.common.SystemNoticeUI", qc);
        class Uc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/ToastView")
            }
        }
        a.ToastViewUI = Uc,
        s("ui.hunt.views.common.ToastViewUI", Uc);
        class Hc extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/UnlockHero")
            }
        }
        a.UnlockHeroUI = Hc,
        s("ui.hunt.views.common.UnlockHeroUI", Hc);
        class Oc extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/VitBuyDlg")
            }
        }
        a.VitBuyDlgUI = Oc,
        s("ui.hunt.views.common.VitBuyDlgUI", Oc);
        class Vc extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/WithdrawalDetailDlg")
            }
        }
        a.WithdrawalDetailDlgUI = Vc,
        s("ui.hunt.views.common.WithdrawalDetailDlgUI", Vc);
        class Fc extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/common/WithdrawalTradeDlg")
            }
        }
        a.WithdrawalTradeDlgUI = Fc,
        s("ui.hunt.views.common.WithdrawalTradeDlgUI", Fc)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.equip || (a.equip = {});
        class Gc extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/equip/EquipHandBookDlg")
            }
        }
        a.EquipHandBookDlgUI = Gc,
        s("ui.hunt.views.equip.EquipHandBookDlgUI", Gc);
        class Wc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/equip/EquipHandView")
            }
        }
        a.EquipHandViewUI = Wc,
        s("ui.hunt.views.equip.EquipHandViewUI", Wc);
        class Yc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/equip/EquipPutCellView")
            }
        }
        a.EquipPutCellViewUI = Yc,
        s("ui.hunt.views.equip.EquipPutCellViewUI", Yc);
        class Xc extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/equip/EquipPutDlg")
            }
        }
        a.EquipPutDlgUI = Xc,
        s("ui.hunt.views.equip.EquipPutDlgUI", Xc);
        class jc extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/equip/EquipShareDlg")
            }
        }
        a.EquipShareDlgUI = jc,
        s("ui.hunt.views.equip.EquipShareDlgUI", jc);
        class Kc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/equip/EquipSortCellView")
            }
        }
        a.EquipSortCellViewUI = Kc,
        s("ui.hunt.views.equip.EquipSortCellViewUI", Kc);
        class zc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/equip/EquipSumView")
            }
        }
        a.EquipSumViewUI = zc,
        s("ui.hunt.views.equip.EquipSumViewUI", zc);
        class $c extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/equip/EquipUnlockDlg")
            }
        }
        a.EquipUnlockDlgUI = $c,
        s("ui.hunt.views.equip.EquipUnlockDlgUI", $c)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.fight || (a.fight = {});
        class Qc extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/ArenaBattleResult")
            }
        }
        a.ArenaBattleResultUI = Qc,
        s("ui.hunt.views.fight.ArenaBattleResultUI", Qc);
        class Jc extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/BattleBagView")
            }
        }
        a.BattleBagViewUI = Jc,
        s("ui.hunt.views.fight.BattleBagViewUI", Jc);
        class Zc extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/BattleFailDlg")
            }
        }
        a.BattleFailDlgUI = Zc,
        s("ui.hunt.views.fight.BattleFailDlgUI", Zc);
        class ed extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/BattleHurtItem")
            }
        }
        a.BattleHurtItemUI = ed,
        s("ui.hunt.views.fight.BattleHurtItemUI", ed);
        class td extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/BattleHurtRecord")
            }
        }
        a.BattleHurtRecordUI = td,
        s("ui.hunt.views.fight.BattleHurtRecordUI", td);
        class id extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/BattleRankItem")
            }
        }
        a.BattleRankItemUI = id,
        s("ui.hunt.views.fight.BattleRankItemUI", id);
        class sd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/BattleResult")
            }
        }
        a.BattleResultUI = sd,
        s("ui.hunt.views.fight.BattleResultUI", sd);
        class ad extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/BattleRewardBagDlg")
            }
        }
        a.BattleRewardBagDlgUI = ad,
        s("ui.hunt.views.fight.BattleRewardBagDlgUI", ad);
        class rd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.createView(rd.uiView)
            }
        }
        rd.uiView = {
            type: "View",
            props: {
                width: 146,
                runtime: "logic/views/fight/BattleRewardItem.ts",
                height: 252
            },
            compId: 2,
            child: [{
                    type: "Box",
                    props: {
                        y: 126,
                        x: 73,
                        width: 146,
                        var: "m_box_Con",
                        scaleX: 1,
                        name: "Con",
                        mouseEnabled: !0,
                        height: 252,
                        anchorY: .5,
                        anchorX: .5
                    },
                    compId: 8,
                    child: [{
                            type: "Image",
                            props: {
                                y: 0,
                                x: 0,
                                var: "m_img_Bg",
                                centerY: 0,
                                centerX: 0
                            },
                            compId: 4
                        }, {
                            type: "Image",
                            props: {
                                var: "m_img_Reward",
                                centerY: -15,
                                centerX: 0
                            },
                            compId: 5
                        }, {
                            type: "Image",
                            props: {
                                y: 3,
                                x: 2,
                                skin: "hunt/ui_card/img_card2.png",
                                centerY: 0,
                                centerX: 0
                            },
                            compId: 3
                        }, {
                            type: "Label",
                            props: {
                                wordWrap: !0,
                                width: 130,
                                var: "m_txt_Item",
                                valign: "middle",
                                height: 29,
                                fontSize: 14,
                                color: "#51413B",
                                centerX: 0,
                                bottom: 7,
                                bold: !0,
                                align: "center"
                            },
                            compId: 6
                        }, {
                            type: "Label",
                            props: {
                                var: "m_txt_Num",
                                scaleY: .8,
                                scaleX: .8,
                                right: 35,
                                font: "1",
                                bottom: 100,
                                align: "center"
                            },
                            compId: 7
                        }, {
                            type: "Image",
                            props: {
                                y: 12,
                                x: 12,
                                visible: !1,
                                var: "m_img_Star",
                                skin: "hunt/ui_comm/star.png",
                                scaleY: .7,
                                scaleX: .7
                            },
                            compId: 21,
                            child: [{
                                    type: "Label",
                                    props: {
                                        var: "m_txt_StarLv",
                                        left: 40,
                                        font: "1",
                                        centerY: 0
                                    },
                                    compId: 23
                                }
                            ]
                        }, {
                            type: "Image",
                            props: {
                                y: 12,
                                x: 12,
                                visible: !1,
                                var: "m_img_FoodLv",
                                skin: "hunt/ui_comm/food.png",
                                scaleY: .7,
                                scaleX: .7
                            },
                            compId: 22,
                            child: [{
                                    type: "Label",
                                    props: {
                                        var: "m_txt_Lvl",
                                        left: 40,
                                        font: "1",
                                        centerY: 0
                                    },
                                    compId: 24
                                }
                            ]
                        }
                    ]
                }
            ],
            animations: [{
                    nodes: [{
                            target: 8,
                            keyframes: {
                                rotation: [{
                                        value: 1,
                                        tweenMethod: "linearNone",
                                        tween: !0,
                                        target: 8,
                                        key: "rotation",
                                        index: 0
                                    }, {
                                        value: 0,
                                        tweenMethod: "linearNone",
                                        tween: !0,
                                        target: 8,
                                        key: "rotation",
                                        index: 2
                                    }, {
                                        value: -1,
                                        tweenMethod: "linearNone",
                                        tween: !0,
                                        target: 8,
                                        key: "rotation",
                                        index: 4
                                    }
                                ]
                            }
                        }
                    ],
                    name: "ani1",
                    id: 1,
                    frameRate: 24,
                    action: 0
                }
            ],
            loadList: ["hunt/ui_card/img_card2.png", "hunt/ui_comm/star.png", "hunt/ui_comm/food.png"],
            loadList3D: []
        },
        a.BattleRewardItemUI = rd,
        s("ui.hunt.views.fight.BattleRewardItemUI", rd);
        class nd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/BattleVsBar")
            }
        }
        a.BattleVsBarUI = nd,
        s("ui.hunt.views.fight.BattleVsBarUI", nd);
        class od extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/BossBattleView")
            }
        }
        a.BossBattleViewUI = od,
        s("ui.hunt.views.fight.BossBattleViewUI", od);
        class ld extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/BossEnterCheckDlg")
            }
        }
        a.BossEnterCheckDlgUI = ld,
        s("ui.hunt.views.fight.BossEnterCheckDlgUI", ld);
        class hd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/BossKilledLoseChestDlg")
            }
        }
        a.BossKilledLoseChestDlgUI = hd,
        s("ui.hunt.views.fight.BossKilledLoseChestDlgUI", hd);
        class md extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/BossReviveDlg")
            }
        }
        a.BossReviveDlgUI = md,
        s("ui.hunt.views.fight.BossReviveDlgUI", md);
        class cd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/BossWarning")
            }
        }
        a.BossWarningUI = cd,
        s("ui.hunt.views.fight.BossWarningUI", cd);
        class dd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/BoxPickInBattle")
            }
        }
        a.BoxPickInBattleUI = dd,
        s("ui.hunt.views.fight.BoxPickInBattleUI", dd);
        class ud extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/ChangeHeroCellView")
            }
        }
        a.ChangeHeroCellViewUI = ud,
        s("ui.hunt.views.fight.ChangeHeroCellViewUI", ud);
        class _d extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/ChangeHeroDetailDlg")
            }
        }
        a.ChangeHeroDetailDlgUI = _d,
        s("ui.hunt.views.fight.ChangeHeroDetailDlgUI", _d);
        class pd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/ChangeHeroDlg")
            }
        }
        a.ChangeHeroDlgUI = pd,
        s("ui.hunt.views.fight.ChangeHeroDlgUI", pd);
        class gd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/ChangeHeroView")
            }
        }
        a.ChangeHeroViewUI = gd,
        s("ui.hunt.views.fight.ChangeHeroViewUI", gd);
        class yd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/CommonBattleView")
            }
        }
        a.CommonBattleViewUI = yd,
        s("ui.hunt.views.fight.CommonBattleViewUI", yd);
        class vd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/EnterAni")
            }
        }
        a.EnterAniUI = vd,
        s("ui.hunt.views.fight.EnterAniUI", vd);
        class kd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/HeroKillAnime")
            }
        }
        a.HeroKillAnimeUI = kd,
        s("ui.hunt.views.fight.HeroKillAnimeUI", kd);
        class fd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/KillBossGetReward")
            }
        }
        a.KillBossGetRewardUI = fd,
        s("ui.hunt.views.fight.KillBossGetRewardUI", fd);
        class Id extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/KillPlayer")
            }
        }
        a.KillPlayerUI = Id,
        s("ui.hunt.views.fight.KillPlayerUI", Id);
        class bd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.createView(bd.uiView)
            }
        }
        bd.uiView = {
            type: "View",
            props: {
                width: 560,
                height: 150
            },
            compId: 2,
            child: [{
                    type: "Image",
                    props: {
                        width: 520,
                        skin: "hunt/ui_fight/fight_title.png",
                        height: 66,
                        centerY: 0,
                        centerX: 0,
                        sizeGrid: "0,45,0,45"
                    },
                    compId: 3
                }, {
                    type: "Image",
                    props: {
                        y: 75,
                        x: 108,
                        width: 383,
                        skin: "hunt/ui_comm/s9_bg17.png",
                        height: 21,
                        sizeGrid: "7,7,7,7"
                    },
                    compId: 4
                }, {
                    type: "Box",
                    props: {
                        y: 78,
                        x: 110,
                        width: 380,
                        var: "m_box_Hp",
                        height: 14
                    },
                    compId: 6,
                    child: [{
                            type: "Image",
                            props: {
                                width: 382,
                                top: 0,
                                skin: "hunt/ui_fight/boss_hp5.png",
                                left: 0,
                                bottom: 0,
                                sizeGrid: "1,1,1,1"
                            },
                            compId: 9
                        }, {
                            type: "Image",
                            props: {
                                y: 0,
                                x: 0,
                                width: 382,
                                top: 0,
                                skin: "hunt/ui_fight/boss_hp1.png",
                                left: 0,
                                bottom: 0,
                                sizeGrid: "1,1,1,1"
                            },
                            compId: 17
                        }, {
                            type: "Image",
                            props: {
                                y: 0,
                                x: 0,
                                width: 382,
                                top: 0,
                                skin: "hunt/ui_fight/boss_hp2.png",
                                left: 0,
                                bottom: 0,
                                sizeGrid: "1,1,1,1"
                            },
                            compId: 18
                        }, {
                            type: "Image",
                            props: {
                                y: 0,
                                x: 0,
                                width: 382,
                                top: 0,
                                skin: "hunt/ui_fight/boss_hp3.png",
                                left: 0,
                                bottom: 0,
                                sizeGrid: "1,1,1,1"
                            },
                            compId: 19
                        }, {
                            type: "Image",
                            props: {
                                y: 0,
                                x: 0,
                                width: 382,
                                top: 0,
                                skin: "hunt/ui_fight/boss_hp4.png",
                                left: 0,
                                bottom: 0,
                                sizeGrid: "1,1,1,1"
                            },
                            compId: 20
                        }, {
                            type: "Image",
                            props: {
                                y: 0,
                                x: 0,
                                width: 382,
                                top: 0,
                                skin: "hunt/ui_fight/boss_hp5.png",
                                left: 0,
                                bottom: 0,
                                sizeGrid: "1,1,1,1"
                            },
                            compId: 21
                        }
                    ]
                }, {
                    type: "Image",
                    props: {
                        y: 73,
                        x: 105,
                        width: 390,
                        skin: "hunt/ui_fight/boss_hp_bg1.png",
                        sizeGrid: "0,21,0,6"
                    },
                    compId: 5
                }, {
                    type: "Box",
                    props: {
                        y: 27,
                        x: 15,
                        width: 90,
                        height: 90
                    },
                    compId: 7,
                    child: [{
                            type: "Image",
                            props: {
                                y: 7,
                                x: 7,
                                top: 7,
                                skin: "hunt/ui_fight/boss_bg2.png",
                                right: 7,
                                left: 7,
                                bottom: 7
                            },
                            compId: 11
                        }, {
                            type: "Image",
                            props: {
                                width: 70,
                                var: "m_img_Head",
                                height: 70,
                                centerY: 0,
                                centerX: 0
                            },
                            compId: 12,
                            child: [{
                                    type: "Image",
                                    props: {
                                        y: -2,
                                        x: -2,
                                        width: 74,
                                        skin: "hunt/ui_fight/boss_bg2.png",
                                        renderType: "mask",
                                        height: 74
                                    },
                                    compId: 14
                                }
                            ]
                        }, {
                            type: "Image",
                            props: {
                                width: 90,
                                skin: "hunt/ui_fight/boss_bg1.png",
                                height: 90,
                                centerY: 0,
                                centerX: 0
                            },
                            compId: 10
                        }
                    ]
                }, {
                    type: "Image",
                    props: {
                        y: 3,
                        x: 22,
                        skin: "hunt/ui_fight/boss_crown.png",
                        scaleY: .8,
                        scaleX: .8
                    },
                    compId: 22
                }, {
                    type: "HBox",
                    props: {
                        y: 52,
                        x: 110,
                        align: "middle"
                    },
                    compId: 30,
                    child: [{
                            type: "Label",
                            props: {
                                y: 0,
                                x: 0,
                                var: "m_txt_Name",
                                padding: "0,10,0,0",
                                fontSize: 18,
                                color: "#ffffff",
                                bold: !0
                            },
                            compId: 8
                        }, {
                            type: "Image",
                            props: {
                                y: 0,
                                x: 0,
                                width: 20,
                                skin: "hunt/ui_comm/star.png",
                                height: 20
                            },
                            compId: 31
                        }, {
                            type: "Label",
                            props: {
                                y: 0,
                                x: 0,
                                var: "m_txt_Lv",
                                scaleY: .6,
                                scaleX: .6,
                                font: "1"
                            },
                            compId: 32
                        }
                    ]
                }, {
                    type: "Label",
                    props: {
                        y: 75,
                        x: 460,
                        var: "m_txt_Num",
                        text: "x6",
                        stroke: 2,
                        fontSize: 18,
                        color: "#ffffff",
                        bold: !0
                    },
                    compId: 16
                }, {
                    type: "Label",
                    props: {
                        y: 77,
                        x: 262,
                        visible: !1,
                        var: "m_txt_Killed",
                        text: "已击杀",
                        stroke: 2,
                        fontSize: 16,
                        color: "#ffffff",
                        bold: !0
                    },
                    compId: 28
                }, {
                    type: "Box",
                    props: {
                        y: 78,
                        x: 110,
                        width: 380,
                        var: "m_box_Line",
                        height: 15
                    },
                    compId: 29
                }, {
                    type: "Box",
                    props: {
                        y: 80,
                        x: 110,
                        width: 380,
                        var: "m_box_Reward",
                        height: 25
                    },
                    compId: 23
                }
            ],
            loadList: ["hunt/ui_fight/fight_title.png", "hunt/ui_comm/s9_bg17.png", "hunt/ui_fight/boss_hp5.png", "hunt/ui_fight/boss_hp1.png", "hunt/ui_fight/boss_hp2.png", "hunt/ui_fight/boss_hp3.png", "hunt/ui_fight/boss_hp4.png", "hunt/ui_fight/boss_hp_bg1.png", "hunt/ui_fight/boss_bg2.png", "hunt/ui_fight/boss_bg1.png", "hunt/ui_fight/boss_crown.png", "hunt/ui_comm/star.png"],
            loadList3D: []
        },
        a.NameBarBossUI = bd,
        s("ui.hunt.views.fight.NameBarBossUI", bd);
        class wd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/PvpBattleView")
            }
        }
        a.PvpBattleViewUI = wd,
        s("ui.hunt.views.fight.PvpBattleViewUI", wd);
        class Cd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/RankUpListDlg")
            }
        }
        a.RankUpListDlgUI = Cd,
        s("ui.hunt.views.fight.RankUpListDlgUI", Cd);
        class xd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fight/RoleHeadItem")
            }
        }
        a.RoleHeadItemUI = xd,
        s("ui.hunt.views.fight.RoleHeadItemUI", xd)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.fish || (a.fish = {});
        class Sd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fish/FishDlg")
            }
        }
        a.FishDlgUI = Sd,
        s("ui.hunt.views.fish.FishDlgUI", Sd);
        class Ad extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fish/FishExCellView")
            }
        }
        a.FishExCellViewUI = Ad,
        s("ui.hunt.views.fish.FishExCellViewUI", Ad);
        class Dd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fish/FishExChangeView")
            }
        }
        a.FishExChangeViewUI = Dd,
        s("ui.hunt.views.fish.FishExChangeViewUI", Dd);
        class Ld extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fish/FishExDlg")
            }
        }
        a.FishExDlgUI = Ld,
        s("ui.hunt.views.fish.FishExDlgUI", Ld);
        class Td extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fish/FishHistoryCellView")
            }
        }
        a.FishHistoryCellViewUI = Td,
        s("ui.hunt.views.fish.FishHistoryCellViewUI", Td);
        class Ed extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fish/FishInfoDlg")
            }
        }
        a.FishInfoDlgUI = Ed,
        s("ui.hunt.views.fish.FishInfoDlgUI", Ed);
        class Md extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fish/FishRankCellView")
            }
        }
        a.FishRankCellViewUI = Md,
        s("ui.hunt.views.fish.FishRankCellViewUI", Md);
        class Rd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fish/FishRankView")
            }
        }
        a.FishRankViewUI = Rd,
        s("ui.hunt.views.fish.FishRankViewUI", Rd);
        class Bd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fish/FishRewardDetailCellView")
            }
        }
        a.FishRewardDetailCellViewUI = Bd,
        s("ui.hunt.views.fish.FishRewardDetailCellViewUI", Bd);
        class Nd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fish/FishRewardDetailDlg")
            }
        }
        a.FishRewardDetailDlgUI = Nd,
        s("ui.hunt.views.fish.FishRewardDetailDlgUI", Nd);
        class Pd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fish/FishRuleDlg")
            }
        }
        a.FishRuleDlgUI = Pd,
        s("ui.hunt.views.fish.FishRuleDlgUI", Pd);
        class qd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fish/FishSuccDlg")
            }
        }
        a.FishSuccDlgUI = qd,
        s("ui.hunt.views.fish.FishSuccDlgUI", qd);
        class Ud extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/fish/FishView")
            }
        }
        a.FishViewUI = Ud,
        s("ui.hunt.views.fish.FishViewUI", Ud)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.food || (a.food = {});
        class Hd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/food/FoodCreateCellView")
            }
        }
        a.FoodCreateCellViewUI = Hd,
        s("ui.hunt.views.food.FoodCreateCellViewUI", Hd);
        class Od extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/food/FoodCreateDlg")
            }
        }
        a.FoodCreateDlgUI = Od,
        s("ui.hunt.views.food.FoodCreateDlgUI", Od);
        class Vd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/food/FoodDelCellView")
            }
        }
        a.FoodDelCellViewUI = Vd,
        s("ui.hunt.views.food.FoodDelCellViewUI", Vd);
        class Fd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/food/FoodMakeCellView")
            }
        }
        a.FoodMakeCellViewUI = Fd,
        s("ui.hunt.views.food.FoodMakeCellViewUI", Fd);
        class Gd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/food/FoodMakeDlg")
            }
        }
        a.FoodMakeDlgUI = Gd,
        s("ui.hunt.views.food.FoodMakeDlgUI", Gd);
        class Wd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/food/FoodUnLockDlg")
            }
        }
        a.FoodUnLockDlgUI = Wd,
        s("ui.hunt.views.food.FoodUnLockDlgUI", Wd)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.individual || (a.individual = {});
        class Yd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/individual/BindAccountDlg")
            }
        }
        a.BindAccountDlgUI = Yd,
        s("ui.hunt.views.individual.BindAccountDlgUI", Yd);
        class Xd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/individual/ChangeIcoDlg")
            }
        }
        a.ChangeIcoDlgUI = Xd,
        s("ui.hunt.views.individual.ChangeIcoDlgUI", Xd);
        class jd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/individual/ChangeNameDlg")
            }
        }
        a.ChangeNameDlgUI = jd,
        s("ui.hunt.views.individual.ChangeNameDlgUI", jd);
        class Kd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/individual/ExchangeGiftDlg")
            }
        }
        a.ExchangeGiftDlgUI = Kd,
        s("ui.hunt.views.individual.ExchangeGiftDlgUI", Kd);
        class zd extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/individual/HeadIcoItem")
            }
        }
        a.HeadIcoItemUI = zd,
        s("ui.hunt.views.individual.HeadIcoItemUI", zd);
        class $d extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/individual/IndividualMainDlg")
            }
        }
        a.IndividualMainDlgUI = $d,
        s("ui.hunt.views.individual.IndividualMainDlgUI", $d);
        class Qd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/individual/PrivacyPolicyDlg")
            }
        }
        a.PrivacyPolicyDlgUI = Qd,
        s("ui.hunt.views.individual.PrivacyPolicyDlgUI", Qd);
        class Jd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/individual/TermsOfServiceDlg")
            }
        }
        a.TermsOfServiceDlgUI = Jd,
        s("ui.hunt.views.individual.TermsOfServiceDlgUI", Jd)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.invite || (a.invite = {});
        class Zd extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/invite/InviteBoxDlg")
            }
        }
        a.InviteBoxDlgUI = Zd,
        s("ui.hunt.views.invite.InviteBoxDlgUI", Zd);
        class eu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/invite/InviteCellView")
            }
        }
        a.InviteCellViewUI = eu,
        s("ui.hunt.views.invite.InviteCellViewUI", eu);
        class tu extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/invite/InviteDetailDlg")
            }
        }
        a.InviteDetailDlgUI = tu,
        s("ui.hunt.views.invite.InviteDetailDlgUI", tu);
        class iu extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/invite/InviteDlg")
            }
        }
        a.InviteDlgUI = iu,
        s("ui.hunt.views.invite.InviteDlgUI", iu);
        class su extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/invite/InviteInfoCellView")
            }
        }
        a.InviteInfoCellViewUI = su,
        s("ui.hunt.views.invite.InviteInfoCellViewUI", su)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.mail || (a.mail = {});
        class au extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mail/MailCellView")
            }
        }
        a.MailCellViewUI = au,
        s("ui.hunt.views.mail.MailCellViewUI", au);
        class ru extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mail/MailDetailCellView")
            }
        }
        a.MailDetailCellViewUI = ru,
        s("ui.hunt.views.mail.MailDetailCellViewUI", ru);
        class nu extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mail/MailDetailDlg")
            }
        }
        a.MailDetailDlgUI = nu,
        s("ui.hunt.views.mail.MailDetailDlgUI", nu);
        class ou extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mail/MailDlg")
            }
        }
        a.MailDlgUI = ou,
        s("ui.hunt.views.mail.MailDlgUI", ou)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.menu || (a.menu = {});
        class lu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/menu/GameMenu")
            }
        }
        a.GameMenuUI = lu,
        s("ui.hunt.views.menu.GameMenuUI", lu);
        class hu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/menu/MainMenu")
            }
        }
        a.MainMenuUI = hu,
        s("ui.hunt.views.menu.MainMenuUI", hu);
        class mu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/menu/MoneyView")
            }
        }
        a.MoneyViewUI = mu,
        s("ui.hunt.views.menu.MoneyViewUI", mu);
        class cu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/menu/UserMenu")
            }
        }
        a.UserMenuUI = cu,
        s("ui.hunt.views.menu.UserMenuUI", cu);
        class du extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/menu/VitView")
            }
        }
        a.VitViewUI = du,
        s("ui.hunt.views.menu.VitViewUI", du)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.mistery || (a.mistery = {});
        class uu extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/CityBattleView")
            }
        }
        a.CityBattleViewUI = uu,
        s("ui.hunt.views.mistery.CityBattleViewUI", uu);
        class _u extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/CityNpcItem")
            }
        }
        a.CityNpcItemUI = _u,
        s("ui.hunt.views.mistery.CityNpcItemUI", _u);
        class pu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ClockClubCellView")
            }
        }
        a.ClockClubCellViewUI = pu,
        s("ui.hunt.views.mistery.ClockClubCellViewUI", pu);
        class gu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ClockClubDetailCellView")
            }
        }
        a.ClockClubDetailCellViewUI = gu,
        s("ui.hunt.views.mistery.ClockClubDetailCellViewUI", gu);
        class yu extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ClockClubDetailDlg")
            }
        }
        a.ClockClubDetailDlgUI = yu,
        s("ui.hunt.views.mistery.ClockClubDetailDlgUI", yu);
        class vu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ClockClubView")
            }
        }
        a.ClockClubViewUI = vu,
        s("ui.hunt.views.mistery.ClockClubViewUI", vu);
        class ku extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ClockDetailDlg")
            }
        }
        a.ClockDetailDlgUI = ku,
        s("ui.hunt.views.mistery.ClockDetailDlgUI", ku);
        class fu extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ClockDlg")
            }
        }
        a.ClockDlgUI = fu,
        s("ui.hunt.views.mistery.ClockDlgUI", fu);
        class Iu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ClockHornorCellView")
            }
        }
        a.ClockHornorCellViewUI = Iu,
        s("ui.hunt.views.mistery.ClockHornorCellViewUI", Iu);
        class bu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ClockHornorView")
            }
        }
        a.ClockHornorViewUI = bu,
        s("ui.hunt.views.mistery.ClockHornorViewUI", bu);
        class wu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ClockRankCellView")
            }
        }
        a.ClockRankCellViewUI = wu,
        s("ui.hunt.views.mistery.ClockRankCellViewUI", wu);
        class Cu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ClockRankDetailCellView")
            }
        }
        a.ClockRankDetailCellViewUI = Cu,
        s("ui.hunt.views.mistery.ClockRankDetailCellViewUI", Cu);
        class xu extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ClockRankDetailDlg")
            }
        }
        a.ClockRankDetailDlgUI = xu,
        s("ui.hunt.views.mistery.ClockRankDetailDlgUI", xu);
        class Su extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ClockRankView")
            }
        }
        a.ClockRankViewUI = Su,
        s("ui.hunt.views.mistery.ClockRankViewUI", Su);
        class Au extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/EleMisteryDlg")
            }
        }
        a.EleMisteryDlgUI = Au,
        s("ui.hunt.views.mistery.EleMisteryDlgUI", Au);
        class Du extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/EleMisteryItem")
            }
        }
        a.EleMisteryItemUI = Du,
        s("ui.hunt.views.mistery.EleMisteryItemUI", Du);
        class Lu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ElfBoxCellView")
            }
        }
        a.ElfBoxCellViewUI = Lu,
        s("ui.hunt.views.mistery.ElfBoxCellViewUI", Lu);
        class Tu extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ElfBoxShowDlg")
            }
        }
        a.ElfBoxShowDlgUI = Tu,
        s("ui.hunt.views.mistery.ElfBoxShowDlgUI", Tu);
        class Eu extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ElfOpenDlg")
            }
        }
        a.ElfOpenDlgUI = Eu,
        s("ui.hunt.views.mistery.ElfOpenDlgUI", Eu);
        class Mu extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ElfShopDlg")
            }
        }
        a.ElfShopDlgUI = Mu,
        s("ui.hunt.views.mistery.ElfShopDlgUI", Mu);
        class Ru extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/mistery/ExitMisteryDlg")
            }
        }
        a.ExitMisteryDlgUI = Ru,
        s("ui.hunt.views.mistery.ExitMisteryDlgUI", Ru)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.pass || (a.pass = {});
        class Bu extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/pass/PassBuyDlg")
            }
        }
        a.PassBuyDlgUI = Bu,
        s("ui.hunt.views.pass.PassBuyDlgUI", Bu);
        class Nu extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/pass/PassDlg")
            }
        }
        a.PassDlgUI = Nu,
        s("ui.hunt.views.pass.PassDlgUI", Nu);
        class Pu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/pass/PassIconView")
            }
        }
        a.PassIconViewUI = Pu,
        s("ui.hunt.views.pass.PassIconViewUI", Pu);
        class qu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/pass/PassItemCellView")
            }
        }
        a.PassItemCellViewUI = qu,
        s("ui.hunt.views.pass.PassItemCellViewUI", qu);
        class Uu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/pass/PassView")
            }
        }
        a.PassViewUI = Uu,
        s("ui.hunt.views.pass.PassViewUI", Uu)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.remember || (a.remember = {});
        class Hu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/remember/GameView")
            }
        }
        a.GameViewUI = Hu,
        s("ui.hunt.views.remember.GameViewUI", Hu);
        class Ou extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/remember/RemeberDetailDlg")
            }
        }
        a.RemeberDetailDlgUI = Ou,
        s("ui.hunt.views.remember.RemeberDetailDlgUI", Ou);
        class Vu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/remember/RememberCardView")
            }
        }
        a.RememberCardViewUI = Vu,
        s("ui.hunt.views.remember.RememberCardViewUI", Vu);
        class Fu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/remember/RememberDetailCellView")
            }
        }
        a.RememberDetailCellViewUI = Fu,
        s("ui.hunt.views.remember.RememberDetailCellViewUI", Fu);
        class Gu extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/remember/RememberDetailDlg")
            }
        }
        a.RememberDetailDlgUI = Gu,
        s("ui.hunt.views.remember.RememberDetailDlgUI", Gu);
        class Wu extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/remember/RememberDlg")
            }
        }
        a.RememberDlgUI = Wu,
        s("ui.hunt.views.remember.RememberDlgUI", Wu);
        class Yu extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/remember/RememberGameDlg")
            }
        }
        a.RememberGameDlgUI = Yu,
        s("ui.hunt.views.remember.RememberGameDlgUI", Yu);
        class Xu extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/remember/RememberInfoDlg")
            }
        }
        a.RememberInfoDlgUI = Xu,
        s("ui.hunt.views.remember.RememberInfoDlgUI", Xu);
        class ju extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/remember/RememberRankCellView")
            }
        }
        a.RememberRankCellViewUI = ju,
        s("ui.hunt.views.remember.RememberRankCellViewUI", ju);
        class Ku extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/remember/RememberRankView")
            }
        }
        a.RememberRankViewUI = Ku,
        s("ui.hunt.views.remember.RememberRankViewUI", Ku);
        class zu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/remember/RememberView")
            }
        }
        a.RememberViewUI = zu,
        s("ui.hunt.views.remember.RememberViewUI", zu)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.store || (a.store = {});
        class $u extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/store/StoreDlg")
            }
        }
        a.StoreDlgUI = $u,
        s("ui.hunt.views.store.StoreDlgUI", $u);
        class Qu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/store/StoreItem")
            }
        }
        a.StoreItemUI = Qu,
        s("ui.hunt.views.store.StoreItemUI", Qu)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.teamBoss || (a.teamBoss = {});
        class Ju extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/teamBoss/BossCellView")
            }
        }
        a.BossCellViewUI = Ju,
        s("ui.hunt.views.teamBoss.BossCellViewUI", Ju);
        class Zu extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/teamBoss/GroupCellView")
            }
        }
        a.GroupCellViewUI = Zu,
        s("ui.hunt.views.teamBoss.GroupCellViewUI", Zu);
        class e_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/teamBoss/GroupDlg")
            }
        }
        a.GroupDlgUI = e_,
        s("ui.hunt.views.teamBoss.GroupDlgUI", e_);
        class t_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/teamBoss/GroupMemberCellView")
            }
        }
        a.GroupMemberCellViewUI = t_,
        s("ui.hunt.views.teamBoss.GroupMemberCellViewUI", t_);
        class i_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/teamBoss/RankDetailDlg")
            }
        }
        a.RankDetailDlgUI = i_,
        s("ui.hunt.views.teamBoss.RankDetailDlgUI", i_);
        class s_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/teamBoss/RankDlg")
            }
        }
        a.RankDlgUI = s_,
        s("ui.hunt.views.teamBoss.RankDlgUI", s_);
        class a_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/teamBoss/RankRewardDlg")
            }
        }
        a.RankRewardDlgUI = a_,
        s("ui.hunt.views.teamBoss.RankRewardDlgUI", a_);
        class r_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/teamBoss/SkinBuffView")
            }
        }
        a.SkinBuffViewUI = r_,
        s("ui.hunt.views.teamBoss.SkinBuffViewUI", r_);
        class n_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/teamBoss/SkinInfoDlg")
            }
        }
        a.SkinInfoDlgUI = n_,
        s("ui.hunt.views.teamBoss.SkinInfoDlgUI", n_);
        class o_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/teamBoss/TeamBossDlg")
            }
        }
        a.TeamBossDlgUI = o_,
        s("ui.hunt.views.teamBoss.TeamBossDlgUI", o_);
        class l_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/teamBoss/TeamBossGroupDlg")
            }
        }
        a.TeamBossGroupDlgUI = l_,
        s("ui.hunt.views.teamBoss.TeamBossGroupDlgUI", l_);
        class h_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/teamBoss/TeamRankCellItem")
            }
        }
        a.TeamRankCellItemUI = h_,
        s("ui.hunt.views.teamBoss.TeamRankCellItemUI", h_);
        class m_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/teamBoss/TeamRankDetailItem")
            }
        }
        a.TeamRankDetailItemUI = m_,
        s("ui.hunt.views.teamBoss.TeamRankDetailItemUI", m_)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.tileMap || (a.tileMap = {});
        class c_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/tileMap/AreaMaskView")
            }
        }
        a.AreaMaskViewUI = c_,
        s("ui.hunt.views.tileMap.AreaMaskViewUI", c_);
        class d_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/tileMap/ArrowView")
            }
        }
        a.ArrowViewUI = d_,
        s("ui.hunt.views.tileMap.ArrowViewUI", d_);
        class u_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/tileMap/EyeMaskView")
            }
        }
        a.EyeMaskViewUI = u_,
        s("ui.hunt.views.tileMap.EyeMaskViewUI", u_);
        class __ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/tileMap/PositionView")
            }
        }
        a.PositionViewUI = __,
        s("ui.hunt.views.tileMap.PositionViewUI", __);
        class p_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/tileMap/TileAreaMapDlg")
            }
        }
        a.TileAreaMapDlgUI = p_,
        s("ui.hunt.views.tileMap.TileAreaMapDlgUI", p_);
        class g_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/tileMap/TileAreaMapView")
            }
        }
        a.TileAreaMapViewUI = g_,
        s("ui.hunt.views.tileMap.TileAreaMapViewUI", g_);
        class y_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/tileMap/TileConveyDlg")
            }
        }
        a.TileConveyDlgUI = y_,
        s("ui.hunt.views.tileMap.TileConveyDlgUI", y_);
        class v_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/tileMap/TileInfoView")
            }
        }
        a.TileInfoViewUI = v_,
        s("ui.hunt.views.tileMap.TileInfoViewUI", v_);
        class k_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/tileMap/TileLogicDlg")
            }
        }
        a.TileLogicDlgUI = k_,
        s("ui.hunt.views.tileMap.TileLogicDlgUI", k_);
        class f_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/tileMap/TileMapDlg")
            }
        }
        a.TileMapDlgUI = f_,
        s("ui.hunt.views.tileMap.TileMapDlgUI", f_);
        class I_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/tileMap/TileWorldView")
            }
        }
        a.TileWorldViewUI = I_,
        s("ui.hunt.views.tileMap.TileWorldViewUI", I_)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.trade || (a.trade = {});
        class b_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/trade/TradeBuyDlg")
            }
        }
        a.TradeBuyDlgUI = b_,
        s("ui.hunt.views.trade.TradeBuyDlgUI", b_);
        class w_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/trade/TradeBuyView")
            }
        }
        a.TradeBuyViewUI = w_,
        s("ui.hunt.views.trade.TradeBuyViewUI", w_);
        class C_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/trade/TradeDlg")
            }
        }
        a.TradeDlgUI = C_,
        s("ui.hunt.views.trade.TradeDlgUI", C_);
        class x_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/trade/TradeDownDlg")
            }
        }
        a.TradeDownDlgUI = x_,
        s("ui.hunt.views.trade.TradeDownDlgUI", x_);
        class S_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/trade/TradeHorseCellView")
            }
        }
        a.TradeHorseCellViewUI = S_,
        s("ui.hunt.views.trade.TradeHorseCellViewUI", S_);
        class A_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/trade/TradeHorseDlg")
            }
        }
        a.TradeHorseDlgUI = A_,
        s("ui.hunt.views.trade.TradeHorseDlgUI", A_);
        class D_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/trade/TradeInCellView")
            }
        }
        a.TradeInCellViewUI = D_,
        s("ui.hunt.views.trade.TradeInCellViewUI", D_);
        class L_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/trade/TradeKeyDlg")
            }
        }
        a.TradeKeyDlgUI = L_,
        s("ui.hunt.views.trade.TradeKeyDlgUI", L_);
        class T_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/trade/TradeMainDlg")
            }
        }
        a.TradeMainDlgUI = T_,
        s("ui.hunt.views.trade.TradeMainDlgUI", T_);
        class E_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/trade/TradeOutCellView")
            }
        }
        a.TradeOutCellViewUI = E_,
        s("ui.hunt.views.trade.TradeOutCellViewUI", E_);
        class M_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/trade/TradeSaleDlg")
            }
        }
        a.TradeSaleDlgUI = M_,
        s("ui.hunt.views.trade.TradeSaleDlgUI", M_);
        class R_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/trade/TradeSaleView")
            }
        }
        a.TradeSaleViewUI = R_,
        s("ui.hunt.views.trade.TradeSaleViewUI", R_);
        class B_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/trade/TradeSellCellView")
            }
        }
        a.TradeSellCellViewUI = B_,
        s("ui.hunt.views.trade.TradeSellCellViewUI", B_);
        class N_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/trade/TradeShareDlg")
            }
        }
        a.TradeShareDlgUI = N_,
        s("ui.hunt.views.trade.TradeShareDlgUI", N_);
        class P_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/trade/TradeSpCellView")
            }
        }
        a.TradeSpCellViewUI = P_,
        s("ui.hunt.views.trade.TradeSpCellViewUI", P_);
        class q_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/trade/TradeSpView")
            }
        }
        a.TradeSpViewUI = q_,
        s("ui.hunt.views.trade.TradeSpViewUI", q_)
    }
    a = t = t || {};
    a = (a = a.hunt || (a.hunt = {})).views || (a.views = {}); {
        a = a.treasure || (a.treasure = {});
        class U_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/treasure/TreasureDlg")
            }
        }
        a.TreasureDlgUI = U_,
        s("ui.hunt.views.treasure.TreasureDlgUI", U_);
        class H_ extends e {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/treasure/TreasureIcon")
            }
        }
        a.TreasureIconUI = H_,
        s("ui.hunt.views.treasure.TreasureIconUI", H_);
        class O_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/treasure/TreasureMapDlg")
            }
        }
        a.TreasureMapDlgUI = O_,
        s("ui.hunt.views.treasure.TreasureMapDlgUI", O_);
        class V_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/treasure/TreasureRewardDlg")
            }
        }
        a.TreasureRewardDlgUI = V_,
        s("ui.hunt.views.treasure.TreasureRewardDlgUI", V_);
        class F_ extends i {
            constructor() {
                super()
            }
            createChildren() {
                super.createChildren(),
                this.loadScene("hunt/views/treasure/TreasureStartDlg")
            }
        }
        a.TreasureStartDlgUI = F_,
        s("ui.hunt.views.treasure.TreasureStartDlgUI", F_)
    }
    var ue = new class {
        constructor() {
            this._timeMap = {}
        }
        checkLimit(e, t, i = !1) {
            return this._timeMap[e] ? (i && h("你操作的太快了"), !1) : (this._timeMap[e] = !0, Laya.timer.once(t, this, this.onTimeDelay, [e], !1), !0)
        }
        onTimeDelay(e) {
            delete this._timeMap[e]
        }
    };
    function _e(e, t = 200, i = !1) {
        return ue.checkLimit(e, t, i)
    }
    class pe extends z {
        static registerClick() {
            Laya.stage.on(Laya.Event.CLICK, null, e => {
                _e("tap") && pe.produce(e.stageX, e.stageY)
            })
        }
        static produce(i, s) {
            let a = me.instance.systemLayer;
            if (a) {
                let e = Laya.Point.create().setTo(i, s),
                t = (e = a.globalToLocal(e), G.get("ClickEffect", pe));
                t.zOrder = 1e3,
                t.pos(e.x, e.y),
                t.show(),
                a.addChild(t),
                e.recover()
            }
        }
        show() {
            this.once(Laya.Event.COMPLETE, this, () => {
                this.removeSelf(),
                G.put("ClickEffect", this)
            }),
            this.frames && this.frames.length || (this.source = "hunt/ue/21.atlas"),
            this.pivot(59, 59),
            this.play(0, !1)
        }
    }
    let ge,
    ye,
    ve,
    ke,
    fe;
    function Ie(e, t, i) {
        let s = new e(...(i || {}).params || []);
        return s.checkOpen() ? (s.centerY = s.centerX = 0, De(), s.openView().then(() => (Le(), s.pivotX = s.width / 2, s.pivotY = s.height / 2, s.showDialog(t, i), s))) : Promise.reject({
            code: -1,
            message: "功能不可开启"
        })
    }
    function be(e) {
        ge = e.gameMeunImpl,
        e.loadingImpl && (ye = e.loadingImpl),
        e.msgBoxImpl && (ve = e.msgBoxImpl),
        e.toastImpl && (ke = e.toastImpl),
        e.opCheckLimit && (fe = e.opCheckLimit),
        e.modelEventsDispatcher && (e = e.modelEventsDispatcher, re = e),
        me.init(),
        pe.registerClick()
    }
    function we(e, t = le) {
        return Ie(e, H.Main, t)
    }
    function l(e, t = le) {
        return Ie(e, H.Secondary, t)
    }
    function u(e, t = le) {
        return null == t.closeOnSide && (t.closeOnSide = !0),
        null == t.showEffect && (t.showEffect = !0),
        Ie(e, H.Popup, t)
    }
    function Ce(e) {
        e || me.instance.clearMain(),
        ge.showMenu(e)
    }
    function xe(e) {
        me.instance.enableShield(e)
    }
    function E(e, t) {
        let i = new e(...(t || {}).params || []);
        return i.openView().then(() => i)
    }
    function Se(e, t) {
        t != H.Popup && me.add2Container(e, t)
    }
    function Ae(e) {
        return Ie(ve, H.Popup, {
            params: [e],
            closeOnSide: !0,
            showEffect: !0
        }).then(e => e.wait())
    }
    function h(e) {
        e = [e];
        let t = new ke(...e);
        t.openView().then(() => {
            Se(t, H.Toast)
        })
    }
    function De() {
        return ye.show(),
        () => {
            ye.reduce()
        }
    }
    function Le() {
        ye.clear()
    }
    class Te extends Laya.EventDispatcher {
        constructor() {
            super(...arguments),
            this._isLoading = !1,
            this._isLoaded = !1,
            this._reference = 0,
            this._activeTime = 0
        }
        static registerTimer() {
            Laya.timer.loop(6e4, null, Te.checkUnusedRes)
        }
        static checkUnusedRes() {
            if (Te._resRef.size) {
                var t,
                i,
                s = Date.newDate().getTime();
                let e = Te._resRef;
                for ([t, i]of e)
                    i.canDestroy(s) && (i.destroy(), e.delete(t))
            }
        }
        static create(e) {
            let t = Te._resRef.get(e);
            return t || (t = new Te, Te._resRef.set(e, t)),
            t.init(e),
            t
        }
        init(e) {
            this._url = e,
            this._reference++,
            this._activeTime = Date.newDate().getTime(),
            this._templet && !this._templet.destroyed || (this._isLoading = !1, this._isLoaded = !1, this._templet = new Laya.SpineTemplet_3_x, this._templet.once(Laya.Event.COMPLETE, this, this.onLoadComplete), this._templet.once(Laya.Event.ERROR, this, this.onLoadError))
        }
        destroy() {
            this.offAll(),
            this._templet && (this._templet.offAll(), this._templet.destroy(), this._templet = null)
        }
        canDestroy(e) {
            return !(0 < this._reference) && !(e - this._activeTime < 36e4)
        }
        recover() {
            this._reference--
        }
        loadAni() {
            this._isLoaded ? this.event(Laya.Event.COMPLETE) : this._isLoading || (this._isLoading = !0, this._templet.loadAni(this._url))
        }
        buildSkeleton() {
            return this._templet.buildArmature()
        }
        onLoadComplete() {
            this._isLoading = !1,
            this._isLoaded = !0,
            this._templet.offAll(),
            0 < this._reference && this.event(Laya.Event.COMPLETE)
        }
        onLoadError() {
            this._isLoading = !1,
            this._templet.offAll(),
            0 < this._reference && this.event(Laya.Event.ERROR)
        }
    }
    Te._resRef = new Map,
    Te.registerTimer();
    class Ee extends Laya.Sprite {
        constructor() {
            super(),
            this._index = -1,
            this._offset = [],
            this.size(100, 100).pivot(50, 50)
        }
        static create(e) {
            let t = G.get(Ee._sign, Ee);
            var i,
            s,
            a;
            return t.setData(e),
            e.parent && (i = e.px || 0, s = e.py || 0, a = e.scale || 1, t.pos(i, s), t.scale(a, a), e.parent.addChild(t)),
            t
        }
        get skeleton() {
            return this._skeleton
        }
        setData(e) {
            this._url = e.url,
            this._autoPlay = !!e.autoPlay,
            this._loop = !!e.loop,
            this._rate = e.rate || 1,
            this._offset = e.offset || [],
            this._templet = Te.create(this._url),
            this._templet.once(Laya.Event.COMPLETE, this, this.onLoadComplete),
            this._templet.once(Laya.Event.ERROR, this, this.onLoadError),
            this._templet.loadAni()
        }
        onDestroy() {
            this._templet && (this._templet.off(Laya.Event.COMPLETE, this, this.onLoadComplete), this._templet.off(Laya.Event.ERROR, this, this.onLoadError), this._templet.recover(), this._templet = null),
            this._skeleton = null
        }
        recover() {
            this.destroyed || (this.removeSelf(), this._url = null, this._rate = 1, this._autoPlay = !1, this._loop = !1, this._loaded = !1, this._index = -1, this._settedPos = !1, this._offset = [], this._playHandler && this._playHandler.recover(), this._playHandler = null, this._templet && (this._templet.off(Laya.Event.COMPLETE, this, this.onLoadComplete), this._templet.off(Laya.Event.ERROR, this, this.onLoadError), this._templet.recover(), this._templet = null), this._skeleton && !this._skeleton.destroyed && this._skeleton.destroy(), this._skeleton = null, G.put(Ee._sign, this))
        }
        play(e = 0, t = !1, i = null) {
            this._index == e && this._loop == t || (t && (i = null), this._autoPlay = !0, this._index = e, this._loop = t, this._playHandler = i, this._play())
        }
        stop() {
            this._skeleton && this._skeleton.stop()
        }
        _play() {
            this._loaded && this._skeleton && ((this._index < 0 || this._index >= this._skeleton.getAnimNum()) && (this._index = 0), this._skeleton.play(this._index, this._loop), this._settedPos || (this._settedPos = !0, this._offset.length ? this._skeleton.pos(50 - this._offset[0], 100 - this._offset[1]) : this._skeleton.pos(50, 100)))
        }
        onLoadComplete() {
            if (!this.destroyed) {
                this._loaded = !0;
                let e = this._skeleton = this._templet.buildSkeleton();
                e.playbackRate(this._rate),
                e.on(Laya.Event.STOPPED, this, this.onPlayComplete),
                this.addChild(e),
                this._autoPlay && this._play()
            }
        }
        onLoadError() {
            console.log("load spine error==>" + this._url)
        }
        onPlayComplete() {
            if (this._playHandler) {
                var t = this._playHandler.caller;
                if (t && t.destroyed)
                    return this._playHandler.recover(), void(this._playHandler = null);
                let e = this._playHandler;
                this._playHandler = null,
                e.run()
            }
        }
    }
    Ee._sign = "p_Spine";
    let Me = {
        kill: 1,
        luck: 2
    };
    let Re = {
        test: 0,
        arena: 1,
        city: 2,
        normal: 3,
        imitatePvp: 4,
        worldBoss: 5,
        teamBoss: 6
    },
    Be = {
        copper: 1,
        silver: 2,
        gold: 3,
        rainbow: 4,
        memoryCard: 5
    },
    Ne = {
        appear: 1,
        click: 2,
        enter: 3,
        praise: 4,
        share: 5,
        pass: 6
    },
    Pe = {
        agree: 1,
        reject: 2
    },
    qe = {
        none: 0,
        civilian: 1,
        viceChairman: 2,
        chairman: 3
    },
    Ue = {
        club: 1,
        block: 2
    },
    He = {
        haveHero: 1,
        haveItemNum: 2,
        finishBlock: 3,
        eleLimit: 4
    },
    Oe = {
        buyVit: 1,
        skinBuyVit: 2,
        inviteBox: 3,
        arena: 4,
        buyArena: 5
    },
    _ = {
        earth: 1,
        water: 2,
        fire: 3,
        wind: 4
    },
    Ve = {
        arms: 1,
        clothes: 2,
        glove: 3,
        helmet: 4,
        crystal: 5,
        ornaments: 6
    },
    Fe = {
        copper: 1,
        mcToken: 2,
        tapToken: 3,
        skin: 4
    },
    Ge = {
        vegetables: 1,
        meat: 2,
        egg: 3,
        fruit: 4,
        fish: 5,
        mushroom: 6,
        seafood: 7
    },
    g = {
        hp: 1,
        attack: 2,
        critical: 3,
        dodge: 4,
        atkSpeed: 5,
        beAmp: 6,
        criticalDamage: 7,
        moveSpeed: 8,
        amp: 9,
        hpPercent: 20,
        atkPercent: 21
    },
    m = {
        currency: 1,
        item: 2,
        equip: 3,
        food: 4,
        cookFood: 5,
        hero: 6,
        heroSkin: 7,
        box: 8,
        randBox: 9,
        chooseBox: 10,
        limitTime: 11,
        ticket: 12,
        boxKey: 13,
        bubble: 14,
        fish: 15
    },
    We = {
        en: 1,
        tc: 2,
        jp: 3,
        vi: 4,
        ko: 5,
        fr: 6,
        ptbr: 7,
        tr: 8,
        ru: 9
    },
    Ye = {
        sys: 1,
        person: 2
    };
    let Xe = {
        roll: 1,
        trade: 2,
        fish: 3
    },
    je = {
        lang: 1,
        copper: 2,
        fishweight: 3
    },
    M = {
        normalMonster: 1,
        normalBoss: 2,
        normalChest: 3,
        talk: 4,
        openBurrow: 5,
        openWharf: 6,
        talkHero: 7,
        talkGoddess: 8,
        imitatePvp: 9,
        fish: 10,
        invite: 11,
        memoryCard: 12,
        treasure: 13,
        worldBoss: 14,
        teamBoss: 15
    },
    Ke = {
        ban: 1,
        forbidTalk: 2
    },
    ze = {
        client: 1,
        gateway: 2,
        game: 3,
        trade: 4,
        gamedb: 5,
        world: 6,
        mail: 7,
        battle: 8,
        gmt: 9
    };
    let p = {
        copper: 1,
        gem: 4,
        mcToken: 6,
        tapToken: 7,
        nameCard: 8,
        medal: 9,
        vit: 3,
        pvpToken: 36,
        bait: 100,
        diamond: 37
    };
    let $e = {
        explore: 1,
        eleMistery: 2
    },
    Qe = {
        arms: 1,
        clothes: 2,
        glove: 3,
        shoes: 4,
        crystal: 5,
        ornaments: 6,
        food: 101,
        cookFood: 102
    };
    let Je = {
        sold: 1,
        expire: 2
    };
    let Ze = {
        tradeTotal: 1,
        tradeHistory: 2,
        fish: 3,
        teamBossTeamList: 4
    };
    let et = {
        0: 0,
        1: 1072,
        2: 1071,
        3: 1070
    };
    let tt = {
        1: 1134,
        2: 1135,
        3: 1136,
        4: 1137
    },
    it = {
        1: 1014,
        2: 1015,
        3: 1016,
        4: 1017,
        5: 1018,
        6: 1019
    };
    let st = {
        1: 1023,
        2: 1024,
        3: 1025,
        4: 1026,
        5: 0,
        6: 0,
        7: 0,
        8: 0,
        9: 0,
        20: 1124,
        21: 1125
    };
    let at = {
        1: 2063,
        2: 2062,
        3: 2069,
        4: 2070,
        5: 2072,
        6: 2071,
        7: 2073,
        8: 2074,
        9: 2075
    };
    let rt = {
        1: 40101,
        2: 40102,
        3: 1082,
        4: 0,
        5: 1114,
        6: 1105,
        7: 40103,
        8: 40104,
        9: 1152,
        10: 2046,
        11: 2048,
        12: 2054,
        13: 2055,
        14: 1155,
        15: 0
    };
    var nt,
    ot,
    lt;
    function r(e, t, i, s) {
        var a,
        r = arguments.length,
        n = r < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
            n = Reflect.decorate(e, t, i, s);
        else
            for (var o = e.length - 1; 0 <= o; o--)
                (a = e[o]) && (n = (r < 3 ? a(n) : 3 < r ? a(t, i, n) : a(t, i)) || n);
        3 < r && n && Object.defineProperty(t, i, n)
    }
    function n(o, l) {
        const h = "_modelEvents";
        return function (e, t, i) {
            let s;
            if (e.hasOwnProperty(h))
                s = e[h];
            else {
                var a = e[h];
                if (e[h] = s = [], a)
                    for (var r in a) {
                        var n = a[r];
                        n.isPri || (s[r] = n)
                    }
            }
            s.push({
                eventType: o,
                handler: i.value,
                isPri: l
            })
        }
    }
    (e = nt = nt || {})[e.Home = 0] = "Home",
    e[e.Card = 1] = "Card",
    e[e.Bag = 2] = "Bag",
    e[e.Trade = 3] = "Trade",
    e[e.Club = 4] = "Club",
    e[e.User = 5] = "User",
    (i = ot = ot || {})[i.Buy = 0] = "Buy",
    i[i.Sale = 1] = "Sale",
    i[i.Ticket = 2] = "Ticket";
    const o = {
        White: "#ffffff",
        Green: "#99FF82",
        Blue: "#4DDBFF",
        Yellow: "#FFF056",
        Orange: "#FF864A",
        Gray: "#D5D5D5",
        DarkGray: "#51413B",
        Brown: "#8F593E",
        Red: "#FF4E4E"
    },
    y = ((a = lt = lt || {})[a.Get = 0] = "Get", a[a.Skin = 1] = "Skin", a[a.Click = 2] = "Click", {
    Tower: "TowerPoint",
    Switch: "SwitchPoint",
    Block: "BlockPoint",
    Concat: "ConcatPoint",
    Path: "PathPoint",
    Obstacles: "ObstaclePoint",
    Boat: "boat",
    City: "CityPoint",
    Exit: "ExitPoint",
    Treasure: "TreasurePoint"
}),
v = {
    SE_Reword: "SE_Reword.mp3",
    SE_Eat: "SE_Eat.mp3",
    SE_LvUp: "SE_LvUp.mp3",
    SE_Equip: "SE_Equip.mp3",
    SE_Unlock: "SE_Unlock.mp3",
    SE_Cooking: "SE_Cooking.mp3",
    SE_Battle: "SE_Battle.mp3",
    SE_Change: "SE_Change.mp3",
    SE_RankUp: "SE_RankUp.mp3",
    SE_GetGem: "SE_GetGem.mp3",
    SE_PutItem: "SE_PutItem.mp3",
    SE_GetGold: "SE_GetGold.mp3",
    SE_Intrade: "SE_Intrade.mp3",
    SE_Step: "SE_Step.mp3",
    SE_WalkChange: "SE_WalkChange.mp3",
    SE_TeleportOpen: "SE_TeleportOpen.mp3",
    SE_TeleportStart: "SE_TeleportStart.mp3",
    SE_DungeonUnlock: "SE_DungeonUnlock.mp3",
    SE_BoatSailFlapsLoop: "SE_BoatSailFlapsLoop.mp3",
    SE_TreasureOpenSr: "SE_TreasureOpenSr.mp3",
    SE_TreasureOpenSsr: "SE_TreasureOpenSsr.mp3",
    SE_TreasureOpenSss: "SE_TreasureOpenSss.mp3",
    SE_CardTurn: "SE_CardTurn.mp3",
    SE_CardChange: "SE_CardChange.mp3",
    SE_Dodge: "SE_Dodge.mp3",
    SE_Slash: "SE_Slash.mp3",
    SE_Boxing: "SE_Boxing.mp3",
    SE_Blunt: "SE_Blunt.mp3",
    SE_FireballHit: "SE_FireballHit.mp3",
    SE_Buff: "SE_Buff.mp3",
    SE_Debuff: "SE_Debuff.mp3",
    SE_ElectricArrowHit: "SE_ElectricArrowHit.mp3",
    SE_PosionHit: "SE_PosionHit.mp3",
    SE_ArrowShot: "SE_ArrowShot.mp3",
    SE_WaveHit: "SE_WaveHit.mp3",
    SE_AssassinCritical: "SE_AssassinCritical.mp3",
    SE_BigSlash: "SE_BigSlash.mp3",
    SE_FlameBurst: "SE_FlameBurst.mp3",
    SE_Abysshit: "SE_Abysshit.mp3",
    SE_Heal: "SE_Heal.mp3",
    SE_LostControl: "SE_LostControl.mp3",
    SE_Warning: "SE_Warning.mp3",
    SE_Twister: "SE_Twister.mp3",
    SE_GianSwordHit: "SE_GianSwordHit.mp3",
    SE_BigBoom: "SE_BigBoom.mp3",
    SE_Drop: "SE_Drop.mp3",
    SE_Pick: "SE_Pick.mp3",
    SE_CardFlip: "SE_CardFlip.mp3",
    SE_ScrollOpen: "SE_ScrollOpen.mp3",
    SE_ScrollNew: "SE_SCrollNew.mp3",
    SE_Merge01: "SE_Merge01.mp3",
    SE_Merge02: "SE_Merge02.mp3",
    SE_Merge03: "SE_Merge03.mp3",
    SE_Merge04: "SE_Merge04.mp3",
    SE_Merge05: "SE_Merge05.mp3",
    SE_RememberStart: "SE_RememberStart.mp3",
    SE_RememberClear: "SE_RememberClear.mp3",
    SE_WorldRevive: "SE_WorldRevive.mp3",
    SE_WorldClock: "SE_WorldClock.mp3",
    SE_WorldChest: "SE_WorldChest.mp3",
    SE_WorldKill: "SE_WorldKill.mp3",
    SE_GetChest: "SE_GetChest.mp3",
    BGM_ForestAdventrue: "BGM_ForestAdventrue.mp3",
    BGM_ElfAdventrue: "BGM_ElfAdventrue.mp3",
    BGM_DesertAdventrue: "BGM_DesertAdventrue.mp3",
    BGM_IceAdventrue: "BGM_IceAdventrue.mp3",
    BGM_SteampunkAdventure: "BGM_SteampunkAdventure.mp3",
    BGM_DungeonAdventrue: "BGM_DungeonAdventrue.mp3",
    BGM_RainbowBridgeAdventrue: "BGM_RainbowBridgeAdventrue.mp3",
    BGM_BattleArena: "BGM_BattleArena.mp3",
    BGM_BattleNormal: "BGM_BattleNormal.mp3",
    BGM_JunglePickUp: "BGM_JunglePickUp.mp3",
    BGM_BattleBoss: "BGM_BattleBoss.mp3",
    BGM_Win: "BGM_Win.mp3",
    BGM_Lose: "BGM_Lose.mp3",
    BGM_FairyLand: "BGM_FairyLand.mp3"
};
var ht,
mt,
k,
ct,
dt,
f,
ut,
_t,
pt,
gt = Laya.SoundManager;
class I {
    constructor() {
        this._musicEnable = !0,
        this._soundEnable = !0,
        this._soundVolume = 1,
        this._bgmVolume = 1
    }
    static get instance() {
        return I._instance || (I._instance = new I),
        I._instance
    }
    init() {
        I.instance.soundVolume = (Mmobay.LocalStorage.get("ttfsound") ? +Mmobay.LocalStorage.get("ttfsound") : 100) / 100,
        I.instance.bgmVolume = (Mmobay.LocalStorage.get("ttfbgm") ? +Mmobay.LocalStorage.get("ttfbgm") : 100) / 100
    }
    get musicEnable() {
        return this._musicEnable
    }
    set musicEnable(e) {
        this._musicEnable = e
    }
    get soundEnable() {
        return this._soundEnable
    }
    set soundEnable(e) {
        this._soundEnable = e
    }
    get soundVolume() {
        return this._soundVolume
    }
    set soundVolume(e) {
        this._soundVolume = e,
        Mmobay.MConfig.gameType == Mmobay.MConst.GAME_IOS ? window.mbplatform.changeSoundVolume(e) : gt.setSoundVolume(e)
    }
    getbgmVolume() {
        return this._bgmVolume
    }
    set bgmVolume(e) {
        this._bgmVolume = e,
        Mmobay.MConfig.gameType == Mmobay.MConst.GAME_IOS ? window.mbplatform.changeMusicVolume(e) : gt.setMusicVolume(e)
    }
    playMusic(e, t = 0, i) {
        e && this.musicEnable && (e = this.formatUrl(e = "hunt/bgm/" + e), Mmobay.MConfig.gameType == Mmobay.MConst.GAME_IOS ? window.mbplatform.playMusic(e, t, i) : this._musicChannel && this._musicChannel.url.includes(e) ? this._musicChannel.isStopped && this._musicChannel.resume() : this._musicChannel = gt.playMusic(e, t, i))
    }
    playSound(e, t = 1, i) {
        e && this.soundEnable && 0 != this.soundVolume && (e = this.formatUrl(e = "hunt/sound/" + e), (Mmobay.MConfig.gameType == Mmobay.MConst.GAME_IOS ? window.mbplatform : gt).playSound(e, t, i))
    }
    playCv(t, i, s) {
        if (t && this.soundEnable && 0 != this.soundVolume) {
            let e = "Get";
            i == lt.Click ? e = "Click" : i == lt.Skin && (e = "Skin");
            i = `hunt/cv/${t}_${e}.mp3`,
            i = this.formatUrl(i);
            (Mmobay.MConfig.gameType == Mmobay.MConst.GAME_IOS ? window.mbplatform : gt).playSound(i, 1, s)
        }
    }
    pauseMusic() {
        Mmobay.MConfig.gameType == Mmobay.MConst.GAME_IOS ? window.mbplatform.pauseMusic() : this._musicChannel && this._musicChannel.pause()
    }
    resumeMusic() {
        Mmobay.MConfig.gameType == Mmobay.MConst.GAME_IOS ? window.mbplatform.resumeMusic() : this._musicChannel && this._musicChannel.resume()
    }
    stopMusic() {
        Mmobay.MConfig.gameType == Mmobay.MConst.GAME_IOS ? window.mbplatform.stopMusic() : (gt.stopMusic(), this._musicChannel = null)
    }
    stopSound(e) {
        e ? (e = this.formatUrl(e = "hunt/sound/" + e), (Mmobay.MConfig.gameType == Mmobay.MConst.GAME_IOS ? window.mbplatform : gt).stopSound(e)) : (Mmobay.MConfig.gameType == Mmobay.MConst.GAME_IOS ? window.mbplatform : gt).stopAllSound()
    }
    stopAll() {
        Mmobay.MConfig.gameType == Mmobay.MConst.GAME_IOS ? window.mbplatform.stopSoundAndMusic() : (gt.stopAll(), this._musicChannel = null)
    }
    formatUrl(e) {
        return e = Mmobay.MConfig.gameType == Mmobay.MConst.GAME_ANDROID ? e.replace(".mp3", ".ogg") : e.replace(".ogg", "mp3")
    }
}
const yt = 1e4;
function vt(e, t, i, s) {
    e -= i,
    i = t - s;
    return Math.sqrt(e * e + i * i)
}
function kt(e, t, i, s) {
    let a = ct.Up;
    var r = i - e,
    n = s - t,
    e = vt(e, t, i, s),
    t = Math.acos(r / e);
    return a = 0 <= t && t < Math.PI / 8 ? ct.Right : t >= Math.PI / 8 && t < 3 * Math.PI / 8 ? 0 < n ? ct.DownRight : ct.UpRight : t >= Math.PI / 3 / 8 && t < 5 * Math.PI / 8 ? 0 < n ? ct.Down : ct.Up : t >= 5 * Math.PI / 8 && t < 7 * Math.PI / 8 ? 0 < n ? ct.DownLeft : ct.UpLeft : ct.Left
}
function ft(e, t) {
    return e && t && (e.x == t.x && e.y == t.y)
}
function It(e, t = 5, i) {
    let s = {
        x: 0,
        y: 0,
        rotation: 0,
        view: null
    };
    s.view && (Laya.timer.clearAll(s), s.view.x = s.x, s.view.y = s.y, s.view.rotation = s.rotation),
    s.x = e.x,
    s.y = e.y,
    s.rotation = e.rotation,
    s.view = e;
    var a,
    r,
    n = i ? i / 10 : 50,
    o = 0;
    Laya.timer.loop(10, s, function () {
        o++,
        r = .5 < Math.random() ? 1 : -1,
        a = Math.random() * t * r + s.x,
        r = Math.random() * t * r * -1 + s.y,
        Laya.Tween.to(e, {
            x: a,
            y: r,
            rotation: void 0
        }, 10, Laya.Ease.linearNone, Laya.Handler.create(s, function () {
                n < o && (Laya.timer.clearAll(s), e.x = 0, e.y = 0, e.rotation = s.rotation, s.view = null)
            }))
    })
}
(s = ht = ht || {})[s.Hero = 1] = "Hero",
s[s.Monster = 2] = "Monster",
s[s.Boss = 3] = "Boss",
s[s.Npc = 4] = "Npc",
(e = mt = mt || {})[e.Self = 1] = "Self",
e[e.Enemy = 2] = "Enemy",
(i = k = k || {})[i.Movement = 1] = "Movement",
i[i.State = 2] = "State",
i[i.Ani = 3] = "Ani",
i[i.Path = 4] = "Path",
i[i.AI = 5] = "AI",
i[i.CityAI = 6] = "CityAI",
(a = ct = ct || {})[a.Up = 0] = "Up",
a[a.UpRight = 1] = "UpRight",
a[a.Right = 2] = "Right",
a[a.DownRight = 3] = "DownRight",
a[a.Down = 4] = "Down",
a[a.DownLeft = 5] = "DownLeft",
a[a.Left = 6] = "Left",
a[a.UpLeft = 7] = "UpLeft",
(s = dt = dt || {})[s.Attack = 0] = "Attack",
s[s.Run = 1] = "Run",
s[s.Idle = 2] = "Idle",
(e = f = f || {})[e.Idle = 1] = "Idle",
e[e.Run = 2] = "Run",
e[e.checkAttack = 3] = "checkAttack",
e[e.PreAttack = 4] = "PreAttack",
e[e.Attack = 5] = "Attack",
e[e.Die = 6] = "Die",
(i = ut = ut || {})[i.Normal = 0] = "Normal",
i[i.Stun = 1] = "Stun",
i[i.Scared = 2] = "Scared",
i[i.Taunt = 3] = "Taunt",
(a = _t = _t || {})[a.Main = 1] = "Main",
a[a.Comm = 2] = "Comm",
a[a.Boss = 3] = "Boss",
a[a.City = 4] = "City",
(s = pt = pt || {})[s.init = 0] = "init",
s[s.fighting = 1] = "fighting",
s[s.end = 2] = "end",
s[s.pickDone = 3] = "pickDone";
class b extends Laya.Sprite {
    constructor() {
        super(),
        this._interval = 100,
        this._autoPlay = !1,
        this._autoRemove = !1,
        this._loop = !1,
        this._loaded = !1,
        this.size(100, 100).pivot(50, 50)
    }
    static create(e) {
        let t = G.get(b._sign, b);
        var i,
        s,
        a,
        r;
        return t.setData(e),
        e.parent && (i = e.px || 0, s = e.py || 0, a = e.scale || 1, r = e.opposite || !1, t.rotation = e.rotation || 0, t.pos(i, s), t.scale(r ? -1 * a : a, a), t.zOrder = 1e3, e.parent.addChild(t)),
        t
    }
    static createFlyEffect(e, t) {
        var i = vt(t.fx, t.fy, t.tx, t.ty),
        s = t.tx - t.fx,
        t = t.ty - t.fy,
        s = Math.acos(s / (i || 1)),
        t = (0 < t ? s : -s) / Math.PI * 180;
        return e.rotation = t, {
            effect: b.create(e),
            time: 1.2 * i
        }
    }
    static createFlyEffectNew(e, s, a, t) {
        var i = vt(s.root.x, s.root.y, a.root.x, a.root.y),
        r = a.root.x - s.root.x,
        n = a.root.y - s.root.y,
        r = Math.acos(r / (i || 1)),
        i = (0 < n ? r : -r) / Math.PI * 180;
        e.rotation = i;
        let o = b.create(e),
        l = Laya.Tween.to(o, {
            x: a.root.x,
            y: a.root.y
        }, t || 0, null, Laya.Handler.create(null, () => {
                    o.recover()
                }));
        l.update = Laya.Handler.create(null, () => {
            var e,
            t,
            i;
            a.destroyed || s.destroyed || (i = vt(o.x, o.y, a.root.x, a.root.y), t = a.root.x - o.x, e = a.root.y - o.y, t = Math.acos(t / (i || 1)), i = (0 < e ? t : -t) / Math.PI * 180, o.rotation = i, l._props.forEach(e => {
                    "x" == e[0] && (e[2] = a.root.x - s.root.x),
                    "y" == e[0] && (e[2] = a.root.y - s.root.y)
                }))
        }, null, !1)
    }
    get count() {
        return this._ani.count || 0
    }
    get isPlaying() {
        return this._ani.isPlaying
    }
    setData(e) {
        this._url = e.url,
        this._autoPlay = !!e.autoPlay,
        this._autoRemove = !!e.autoRemove,
        this._loop = !!e.loop,
        this._interval = e.interval || 100;
        let t = this._ani = z.create();
        t.pos(50, 50),
        t.on(Laya.Event.COMPLETE, this, this.onPlayComplete),
        t.loadAtlas(this._url, Laya.Handler.create(this, this.onLoadComplete)),
        this.addChild(t)
    }
    recover() {
        this.destroyed || (this.pos(0, 0), this.removeSelf(), this.scale(1, 1), this._ani.recover(), this._ani = null, this._url = null, this._interval = 100, this._autoPlay = !1, this._autoRemove = !1, this._loop = !1, this._loaded = !1, this._playHandler = null, G.put(b._sign, this))
    }
    play(e = 0, t = !1, i = null) {
        this._loop = t,
        this._autoPlay = !0,
        this._playHandler = i,
        this._loaded && this._ani.play(e, t)
    }
    stop() {
        this._ani.stop()
    }
    gotoAndStop(e) {
        this._ani.gotoAndStop(e)
    }
    onLoadComplete() {
        var e,
        t;
        this.destroyed || ((t = Laya.loader.getRes(this._url)) ? (this._loaded = !0, e = Object.keys(t.frames), t = t.frames[e[0]].sourceSize, this._ani.pivot(.5 * t.w, .5 * t.h), this._ani.interval = this._interval, this._ani.visible = !0, this._autoPlay && this._ani.play(0, this._loop)) : console.log("load ani res error==>" + this._url))
    }
    onPlayComplete() {
        if (this._autoRemove)
            this.recover();
        else if (this._playHandler) {
            var e = this._playHandler.caller;
            if (e && e.destroyed)
                return this._playHandler.recover(), void(this._playHandler = null);
            this._playHandler.run(),
            this._playHandler = null
        }
    }
}
b._sign = "p_Effect";
class bt extends t.hunt.views.common.UnlockHeroUI {
    constructor(e, t = !1, i = null) {
        super(),
        this.m_heroId = 0,
        this.m_needAni = !1,
        this.m_skinData = null,
        this.m_heroId = e,
        this.m_needAni = t,
        this.m_skinData = i
    }
    onDestroy() {
        super.onDestroy(),
        I.instance.stopSound(),
        O.event(c.DRAW_NEXT_TIME, this)
    }
    onAwake() {
        super.onAwake();
        var e = Mmobay.Utils.getScreenInfo(),
        t = e.stageHeight - e.designHeight,
        e = e.stageWidth - e.designWidth;
        this.m_img_Top.height = 83 + t / 2,
        this.m_img_Top.y = 144 - t / 2,
        this.m_img_Bottom.height = 151 + t / 2,
        this.m_img_Top.width = 560 + e,
        this.m_img_Top.x = this.m_img_Top.x - e / 2,
        this.m_img_Bottom.width = 560 + e,
        this.m_img_Bottom.x = this.m_img_Bottom.x + e / 2,
        this.m_img_Bottom.pivotX = this.m_img_Bottom.pivotX + e,
        this.m_needAni ? this.showCardAni() : this.showUI()
    }
    showCardAni() {
        let t = Ee.create({
            url: "hunt/spine/kapai.json",
            parent: this,
            px: 280,
            py: 460,
            scale: 2,
            rate: 1.3
        });
        I.instance.playSound(v.SE_CardFlip),
        t.play(0, !1, Laya.Handler.create(this, () => {
                let e = b.create({
                    url: "hunt/ue/7.atlas",
                    parent: this,
                    px: 280,
                    py: 520,
                    scale: 2.5
                });
                t.destroy(),
                e.play(0, !1, Laya.Handler.create(this, () => {
                        e.destroy(),
                        this.showUI()
                    }))
            }))
    }
    showUI() {
        this.m_box_ConAll.visible = !0;
        var e = 10 * Math.floor(this.m_heroId / 10),
        t = Data.getHero(e),
        i = Data.getItem(this.m_heroId),
        e = (this.m_txt_Name.text = S(i.name), this.m_img_Hero.skin = `hunt/ui_hero/${this.m_heroId}.png`, e != this.m_heroId),
        s = Data.getHeroSkin(this.m_heroId);
        e && s && (this.m_view_Skill.dataChanged(null, {
                skillId: s.skillId,
                skillLv: 0,
                skillCfg: Data.getSkillExecute(s.skillId),
                showName: !1
            }), this.m_txt_SkinNum.text = this.m_skinData && this.m_skinData.skin.tokenID, this.m_img_Rare.skin = `hunt/ui_card/rare_big${i.rare}.png`),
        this.m_box_SkinInfo.visible = e,
        this.m_view_Skill.visible = e,
        this.m_lst_Prop.visible = !e,
        this.m_img_PropBg.visible = !e,
        this.m_lst_Prop.array = t.props,
        this.showAni.play(0, !1),
        this.lightAni.play(0, !0),
        I.instance.playCv(this.m_heroId, lt.Get),
        this.showAni.on(Laya.Event.COMPLETE, this, () => {
            this.m_btn_OK.visible = !0
        })
    }
    onClickOK() {
        this.closeDialog()
    }
}
r([n(c.REWARD_BOX_CLOSE)], bt.prototype, "onClickOK", null);
class wt extends t.hunt.views.common.CommRewardDlgUI {
    constructor(e = [], t = "", i = null, s = "") {
        super(),
        this.m_boxAni = "",
        this.m_skinData = null,
        this.m_title = "",
        this.m_items = e,
        this.m_boxAni = t,
        this.m_skinData = i,
        this.m_title = s
    }
    onAwake() {
        if (super.onAwake(), this.m_title && (this.m_txt_Title.text = this.m_title), this.m_boxAni) {
            this.m_box_Spine.visible = !0;
            let e = Ee.create({
                url: `hunt/spine/${this.m_boxAni}.json`,
                parent: this.m_box_Spine,
                px: 150,
                py: 150
            });
            e.play(0, !1, Laya.Handler.create(this, () => {
                    e.play(1, !1, Laya.Handler.create(this, () => {
                            Laya.Tween.to(this.m_box_Spine, {
                                alpha: 0
                            }, 200, null, Laya.Handler.create(this, () => {
                                    this.m_box_Spine.destroyChildren();
                                    var e = this.m_items.find(e => e.itemCfg.type == m.heroSkin);
                                    e ? u(bt, {
                                        params: [e.itemId, !0, this.m_skinData],
                                        closeOnSide: !1
                                    }).then(e => {
                                        e.wait().then(() => {
                                            this.updateView()
                                        })
                                    }) : this.updateView()
                                }))
                        }))
                }))
        } else
            this.updateView()
    }
    updateView() {
        I.instance.playSound(v.SE_Reword),
        this.m_ani_Show.visible = !0,
        this.m_ani_Show.once(Laya.Event.COMPLETE, this, () => {
            this.m_ani_Show.visible = !1
        }),
        this.m_ani_Show.play(0, !1),
        this.m_box_Con.visible = !0;
        var e = this.m_items.find(e => e.itemId == p.copper && 0 < e.itemNum);
        if (e) {
            this.m_lst_Item.visible = !1,
            this.m_lst_Money.visible = !0;
            var i = Vt(e.itemNum);
            let t = [];
            for (let e = 0; e < i.length; e++)
                i[e] && t.push([e + 1, i[e]]);
            this.m_lst_Money.array = t;
            e = this.m_lst_Money.array.length;
            void(this.m_lst_Money.length <= 2 && (this.m_lst_Money.width = 110 * e + this.m_lst_Money.spaceX * (e - 1)))
        } else {
            this.m_lst_Item.array = this.m_items;
            e = this.m_lst_Item.array.length;
            this.m_lst_Item.elasticEnabled = !1,
            this.m_items.length <= 2 && (this.m_lst_Item.width = 110 * e + this.m_lst_Item.spaceX * (e - 1))
        }
    }
}
const Ct = "yyyy/mm/dd HH:MM:ss",
xt = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMs])\1?|[LloSZWN]/g;
function St(e, t = Ct) {
    let i = !1;
    "u" == t.charAt(0) && (t = t.slice(1), i = !0);
    "g" == t.charAt(0) && (t = t.slice(1));
    var s = i ? "getUTC" : "get",
    a = e[s + "Date"](),
    r = (e[s + "Day"](), e[s + "Month"]()),
    n = e[s + "FullYear"](),
    o = e[s + "Hours"](),
    l = e[s + "Minutes"](),
    h = e[s + "Seconds"]();
    e[s + "Milliseconds"](),
    i || e.getTimezoneOffset();
    let m = {
        d: a,
        dd: At(a),
        m: r + 1,
        mm: At(r + 1),
        yy: String(n).slice(2),
        yyyy: n,
        h: o % 12 || 12,
        hh: At(o % 12 || 12),
        H: o,
        HH: At(o),
        M: l,
        MM: At(l),
        s: h,
        ss: At(h)
    };
    return t = t.replace(xt, e => "mm" == e || "dd" == e ? +m[e] + "" : m[e])
}
function At(e, t = 2) {
    let i = String(e);
    for (; i.length < t; )
        i = "0" + i;
    return i
}
class w {
    static get(e, t) {
        e = Laya.LocalStorage.getJSON(e + "_" + R.id);
        return e ? t ? e[t] || "" : e : ""
    }
    static set(t, i, s) {
        let a = i;
        if (s) {
            let e = Laya.LocalStorage.getJSON(t + "_" + R.id) || {};
            e[s] = i,
            a = e
        }
        Laya.LocalStorage.setJSON(t + "_" + R.id, a)
    }
    static removeItem(e) {
        Laya.LocalStorage.removeItem(e + "_" + R.id)
    }
}
w.s_loginInfo = "LOGIN_INFO",
w.s_musicEnabel = "MUSIC_ENABEL",
w.s_soundEnabel = "SOUND_ENABEL",
w.s_heroInfo = "HERO_INFO",
w.s_heroSkin = "HERO_SKIN",
w.s_skinSkill = "SKIN_SKILL",
w.s_newFood = "NEW_FOOD",
w.s_initSale = "INIT_SALE",
w.s_notice = "NOTICE",
w.s_noticeDay = "NOTICE_DAY",
w.s_noticeText = "NOTICE_TEXT",
w.s_talkNpcRecord = "TALK_NPC_RECORD",
w.s_enterFromCity = "ENTER_FROM_CITY",
w.s_outMap = "OUTMAP",
w.s_paymentOrder = "PAYMENT_ORDER";
class Dt {
    constructor(e, t = null) {
        this.id = 0,
        this.props = {},
        this.eatLvl = 0,
        this.eatVal = 0,
        this.eatTime = 0,
        this.eatExp = 0,
        this.equips = [],
        this.wearingSkin = null,
        this.heroTable = null,
        this.heroSkinTable = null,
        this.extraInfo = null,
        this.produceTime = 0,
        this.id = e.id || 0,
        this.props = e.props || {},
        this.eatLvl = e.eatLvl || 0,
        this.eatVal = e.eatVal || 0,
        this.eatExp = e.eatExp || 0,
        this.eatTime = e.eatTime || 0,
        this.equips = e.equips || [],
        this.heroTable = Data.getHero(e.id),
        this.extraInfo = t,
        this.produceTime = +e.produceTime || 0,
        this.wearingSkin = e.skin,
        this.resetData()
    }
    get skinId() {
        return this.wearingSkin ? this.wearingSkin.skinID : this.id
    }
    get avatarId() {
        return this.wearingSkin ? this.wearingSkin.avatarID : this.id
    }
    get allSkins() {
        let e = [];
        if (this.wearingSkin && e.push({
                id: -1,
                tokenId: this.wearingSkin.tokenID,
                skinId: this.wearingSkin.skinID,
                avatarId: this.wearingSkin.avatarID,
                eles: this.wearingSkin.eles || [],
                level: this.wearingSkin.level
            }), !this.heroTable)
            return [];
        let t = this.heroTable.skins || [];
        for (const s in R.heroSkins) {
            var i = R.heroSkins[s];
            -1 != t.indexOf(i.skinID) && e.push({
                id: +s,
                tokenId: i.tokenID,
                skinId: i.skinID,
                avatarId: i.avatarID,
                eles: i.eles || [],
                level: i.level || 0
            })
        }
        return e
    }
    resetData() {
        var e = this.wearingSkin ? this.wearingSkin.avatarID : this.id;
        this.heroSkinTable = Data.getItem(e)
    }
    checkHasSkin(i) {
        var s = this.allSkins;
        for (let e = 0, t = s.length; e < t; e++)
            if (s[e].skinId == i)
                return !0;
        return !1
    }
    get curEatVal() {
        if (!this.eatLvl)
            return 0;
        var e = Date.newDate(1e3 * +this.eatTime).getSecondsBetween(Date.newDate()),
        t = +Data.gameConf.initCfg.eatValSpeed;
        return 0 < e ? Math.max(this.eatVal - Math.floor(e / t), 0) : this.eatVal
    }
    get heroEquipInfos() {
        let t = [];
        for (let e = 0; e <= 5; e++)
            this.equips[e] ? t.push({
                itemId: this.equips[e],
                equipCfg: Data.getEquip(this.equips[e]),
                itemCfg: Data.getItem(this.equips[e]),
                notShowName: !0
            }) : t.push(null);
        return t
    }
    get heroAllProps() {
        let a = [];
        var e,
        t = Data.getHeroSkinSP(this.avatarId),
        i = t ? t.addProps[0] : null;
        for (let t = 0; t < this.heroTable.props.length; t++) {
            var s = +this.heroTable.props[t].key,
            r = +this.heroTable.props[t].value;
            let e = 0;
            switch (s) {
            case g.hp:
                var n = 70 + 10 * r,
                o = Math.pow(1.033, this.eatLvl - 1);
                e = Math.ceil(n * o);
                break;
            case g.attack:
                n = 1.4 + .2 * r,
                o = Math.pow(1.045, this.eatLvl - 1);
                e = Math.ceil(n * o);
                break;
            case g.critical:
                var l = 20 * r,
                h = Math.floor(this.eatLvl / 5);
                e = Math.ceil((5 + h) * l) + (i && i.key == g.critical ? i.value : 0);
                break;
            case g.dodge:
                h = 15 * r,
                l = Math.floor(this.eatLvl / 5);
                e = Math.ceil((16 / 3 + l) * h) + (i && i.key == g.dodge ? i.value : 0)
            }
            a.push({
                propId: s,
                propVal: e
            })
        }
        let m = this.heroEquipProps,
        c = (m.forEach(t => {
                var e = a.findIndex(e => e.propId == +t.propId);
                let i = 1,
                s = [g.hp, g.attack, g.critical, g.dodge];
                6080 == this.id && -1 != s.indexOf(+t.propId) && (i = +Data.gameConf.skillParamCfg.bladePropRate + 1),
                a[e] ? a[e].propVal += +t.propVal * i : a.push({
                    propId: +t.propId,
                    propVal: +t.propVal * i
                })
            }), []),
        d = this.heroSkills || [];
        for (let t = 0; t < d.length; t++)
            d[t].skillCfg && d[t].skillCfg.addProps.length && (d[t].skillCfg.addProps[0].key == g.attack || d[t].skillCfg.addProps[0].key == g.hp ? (e = a.find(e => e.propId == d[t].skillCfg.addProps[0].key), c.push({
                        propId: d[t].skillCfg.addProps[0].key,
                        propVal: d[t].skillCfg.addProps[0].value / yt * (e && e.propVal || 0)
                    })) : c.push({
                    propId: d[t].skillCfg.addProps[0].key,
                    propVal: d[t].skillCfg.addProps[0].value
                }));
        for (let t = 0; t < a.length; t++) {
            var u = c.find(e => e.propId == a[t].propId);
            u && (a[t].propVal += u.propVal || 0)
        }
        if (6081 == this.skinId && this.checkEquipSeries(30001))
            for (var _ of a)
                _.propId == g.criticalDamage && (_.propVal = Math.floor(_.propVal + 2e4));
        else if (6082 == this.skinId && this.checkEquipSeries(30003))
            for (var p of a)
                p.propId == g.dodge && (p.propVal += 2e3);
        for (let t = 0; t < a.length; t++)
            if (a[t].propId == g.attack) {
                let e = a.find(e => e.propId == g.atkPercent);
                i && i.key == g.atkPercent ? e ? (e.propVal += i.value, a[t].propVal *= 1 + e.propVal / yt) : a[t].propVal *= 1 + i.value / yt : e && (a[t].propVal *= 1 + e.propVal / yt)
            } else if (a[t].propId == g.hp) {
                let e = a.find(e => e.propId == g.hpPercent);
                i && i.key == g.hpPercent ? e ? (e.propVal += i.value, a[t].propVal *= 1 + e.propVal / yt) : a[t].propVal *= 1 + i.value / yt : e && (a[t].propVal *= 1 + e.propVal / yt)
            }
        return a
    }
    get heroEquipProps() {
        let i = [];
        for (let t = 0; t < this.equips.length; t++)
            if (this.equips[t]) {
                let e = Data.getEquip(this.equips[t]);
                e && (e.props.forEach(t => {
                        var e = i.findIndex(e => e.propId == +t.key);
                        i[e] ? i[e].propVal += +t.value : i.push({
                            propId: +t.key,
                            propVal: +t.value
                        })
                    }), e.viceProps.forEach(t => {
                        var e = i.findIndex(e => e.propId == +t.key);
                        i[e] ? i[e].propVal += +t.value : i.push({
                            propId: +t.key,
                            propVal: +t.value
                        })
                    }))
            }
        return i
    }
    get heroEquipAverage() {
        let t = 0,
        i = 0;
        for (let e = 0; e < this.equips.length; e++) {
            var s;
            !this.equips[e] || (s = Data.getEquip(this.equips[e])) && (i++, t += s.lvl)
        }
        return i && Math.floor(t / i) || 0
    }
    get propsForBattle() {
        let t = [],
        e = this.heroAllProps;
        return e.forEach(e => {
            t[e.propId] = e.propVal
        }),
        t
    }
    get heroSkills() {
        let t = [];
        var e;
        return this.heroTable.skills.forEach(e => {
            t.push({
                skillId: e,
                skillCfg: Data.getSkillExecute(e),
                skillLv: 1,
                isSkinSkill: !1
            })
        }),
        this.wearingSkin && (e = Data.getHeroSkin(this.wearingSkin.skinID)) && t.push({
            skillId: e.skillId,
            skillCfg: Data.getSkillExecute(e.skillId),
            skillLv: 1,
            isSkinSkill: !0
        }),
        t
    }
    get heroEquipSkills() {
        let i = [];
        for (let t = 0; t <= 5; t++)
            if (this.equips[t]) {
                let e = Data.getEquip(this.equips[t]);
                (e.skills || []).forEach(e => {
                    i.push(e)
                })
            }
        let t = [];
        return i.forEach(e => {
            t.push({
                skillId: e[0],
                skillCfg: Data.getSkillExecute(e[0]),
                skillLv: e[1] || 0,
                showName: !1
            })
        }),
        t
    }
    get heroAndSkinSkill() {
        let e = [];
        var t;
        return e = e.concat(this.heroTable ? this.heroTable.skills : []),
        this.wearingSkin && (t = Data.getHeroSkin(this.wearingSkin.skinID)) ? e.push(t.skillId) : e.push(null),
        e
    }
    get hasBetterEquip() {
        let i = !1,
        s = O.bag.getEquipList();
        for (let e = 0; e <= 5; e++)
            if (this.equips[e]) {
                let t = Data.getEquip(this.equips[e]);
                if (s.find(e => e.equipCfg.seriesName == t.seriesName && e.equipCfg.lvl > t.lvl)) {
                    i = !0;
                    break
                }
            }
        return i
    }
    get hasNewSkin() {
        let t = !1,
        e = this.heroTable.skins;
        let i = (w.get(w.s_heroSkin) || {})[this.id] || {};
        return e.forEach(e => {
            t || R.heroSkins[e] && !i[e] && (t = !0)
        }),
        t
    }
    checkEquipSeries(e) {
        for (var t of this.equips) {
            t = Data.getEquip(t);
            if (t && t.seriesName == e)
                return !0
        }
        return !1
    }
}
let R = new class {
    constructor() {
        this._copper = 0,
        this.bag = {},
        this.heros = {},
        this.heroSkins = {},
        this.isNew = !0,
        this.squad = [0, 0, 0],
        this.sex = 0,
        this._vitNum = 0,
        this.MCToken = 0,
        this._tapToken = 0,
        this._diamond = 0,
        this.times = {},
        this.rechargeIds = [],
        this.seasonEndTime = 0,
        this.purchasing = !1,
        this.adData = {}
    }
    init(e) {
        this.isNew = !!Mmobay.Manager.loginMgr.loginData.isNew,
        this.counts = e.counts,
        this.vitNum = e.vit,
        this.vitTime = Math.max(+e.vitTime, 0),
        this.id = e.id,
        this.copper = e.copper,
        this.name = e.name,
        this.bag = e.bag,
        this.heroSkins = e.heroSkins || {},
        this.squad = e.squad,
        this.sex = e.sex,
        this.backCity = e.backCity,
        this.mapId = e.mapId,
        this.mapPos = e.mapPos,
        O.tileMap.unlockMapIds = e.unLockMaps,
        O.bag.init(),
        e.starPass && O.pass.initPassInfo(e.starPass),
        this._icon = e.icon,
        this.bubble = e.bubble || 5e3,
        this.MCToken = e.MCToken || 0,
        this.tapToken = e.tapToken || 0,
        this.diamond = e.Diamond || 0,
        this.adData = e.AdData || {},
        e.exData && (this.times = e.exData.times || {}),
        e.heros && (this.heros = {}, e.heros.forEach(e => {
                this.heros[e.id] = new Dt(e)
            })),
        this.checkPaymentOrder()
    }
    userInfoChange(e) {
        this.vitNum = e.vit
    }
    set copper(e) {
        this._copper != e && (this._copper = e, O.event(c.COPPER_CHANGE))
    }
    get copper() {
        return this._copper
    }
    set vitNum(e) {
        this._vitNum = e,
        O.event(c.VIT_CHANGE)
    }
    get vitNum() {
        return this._vitNum
    }
    set tapToken(e) {
        this._tapToken != e && (this._tapToken = e, O.event(c.TAP_TOKEN_CHANGE))
    }
    get tapToken() {
        return this._tapToken
    }
    set diamond(e) {
        this._diamond != e && (this._diamond = e, O.event(c.DIAMOND_CHANGE))
    }
    get diamond() {
        return this._diamond
    }
    get icon() {
        return 0 == this._icon ? +Data.gameConf.initCfg.defaultMale : 1 == this._icon ? +Data.gameConf.initCfg.defaultFemale : this._icon
    }
    set icon(e) {
        this._icon = e
    }
    updateSkins(e) {
        this.heroSkins = Object.assign(this.heroSkins, e)
    }
    getVitNum() {
        var e = this.vitTime;
        if (!this.vitTime)
            return this.vitNum;
        var e = Math.floor((Date.newDate().getTime() / 1e3 - e) / +Data.gameConf.vitCfg.recoverSpeed),
        t = +Data.gameConf.vitCfg.maxVit;
        return this.vitNum < t ? Math.min(t, this.vitNum + e) : this.vitNum
    }
    getCountByType(e) {
        if (this.counts[e]) {
            var t = 1e3 * +this.counts[e].refreshTime;
            if (Date.newDate(t).isToday())
                return this.counts[e].count
        }
        return 0
    }
    getADData(e) {
        if (!this.adData[e])
            return {
                count: 0,
                lastTime: 0
            };
        let t = this.adData[e];
        e = t.lastTime;
        return e && !Date.newDate(1e3 * e).isToday() && (t.lastTime = 0, t.count = 0),
        t
    }
    reqBuyVit(e) {
        let t,
        i;
        return i = Mmobay.MConfig.openPurchase ? (t = pb.BuyVitDiamondReq.create(), pb.IBuyVitDiamondAck) : (t = pb.BuyVitReq.create(), pb.IBuyVitAck),
        t.type = e,
        A(t, i).then(e => {
            O.bag.updateItem(e.items),
            this.counts = e.counts,
            u(wt, {
                params: [[{
                            itemCfg: Data.getItem(p.vit),
                            itemNum: e.addVit
                        }
                    ]]
            }),
            O.event(c.VIT_CHANGE)
        })
    }
    updateVit(e) {
        this.vitTime = +e.vitTime,
        this.vitNum = e.vit
    }
    checkVitEnough(e) {
        return this.getVitNum() >= e || (h(S(59)), !1)
    }
    getNextRecoverVit() {
        var e = Math.floor((Date.newDate().getTime() - 1e3 * this.vitTime) / (1e3 * +Data.gameConf.vitCfg.recoverSpeed));
        return 1e3 * this.vitTime + (e + 1) * +Data.gameConf.vitCfg.recoverSpeed * 1e3
    }
    updateRecharge(e) {
        e && 0 != e.length ? this.rechargeIds = e : this.rechargeIds = [],
        this.checkRecharge()
    }
    checkRecharge() {
        var e;
        this.rechargeIds && 0 != this.rechargeIds.length && (e = this.rechargeIds[0], this.receiveRecharge(e).then(e => {
                this.rechargeIds.splice(0, 1),
                this.checkRecharge()
            }))
    }
    receiveRecharge(e) {
        let t = pb.ReceiveRechargeReq.create();
        return t.id = e,
        A(t, pb.IReceiveRechargeAck).then(t => {
            console.log("resp==== ", t),
            this.tapToken = t.tapToken || 0,
            this.copper = t.copper || 0,
            this.MCToken = t.MCToken || 0,
            this.diamond = t.diamond || 0,
            t.skin && (this.heroSkins[t.skin.id] = t.skin.skin);
            let i = [];
            if (0 < t.addCopper) {
                let e = new pb.ItemInfo;
                e.delta = t.addCopper,
                e.id = p.copper,
                e.num = t.copper,
                i.push(e)
            }
            if (0 < t.addMCToken) {
                let e = new pb.ItemInfo;
                e.delta = t.addMCToken,
                e.id = p.mcToken,
                e.num = t.MCToken,
                i.push(e)
            }
            if (0 < t.addTapToken) {
                let e = new pb.ItemInfo;
                e.delta = t.addTapToken,
                e.id = p.tapToken,
                e.num = t.tapToken,
                i.push(e)
            }
            if (0 < t.addDiamond) {
                let e = new pb.ItemInfo;
                e.delta = t.addDiamond,
                e.id = p.diamond,
                e.num = t.diamond,
                i.push(e)
            }
            return O.event(c.ITEM_CHANGE),
            Et(i, t.skin),
            t
        })
    }
    requestPay(t) {
        if (this.purchasing)
            console.log("purchasing...");
        else {
            let e = pb.RequestPayReq.create();
            e.id = t,
            A(e, pb.IRequestPayAck).then(e => (this.purchasing = !0, window.mbplatform.purchase(e.payData))).then(e => {
                var t;
                this.purchasing = !1,
                e.success ? (h(S(86)), e.needCheck && (t = {
                            orderNo: e.payData.orderNo,
                            checkData: e.checkData,
                            payData: e.payData
                        }, this.savePayemntOrder(t), this.checkPay(t))) : e.code && h(S(e.code))
            })
        }
    }
    reqWatchAD(e) {
        let t = pb.AdRewardReq.create();
        t.adId = e,
        A(t, pb.IAdRewardAck).then(e => {
            (e.items || []).length && (this.adData = e.AdData, O.bag.updateItem(e.items, !0), O.event(c.UPDATE_STORE_LIST))
        })
    }
    savePayemntOrder(e) {
        let t = w.get(w.s_paymentOrder) || {};
        t[e.orderNo] = e,
        w.set(w.s_paymentOrder, t)
    }
    removePaymentOrder(e) {
        let t = w.get(w.s_paymentOrder) || {};
        delete t[e],
        Object.keys(t).length ? w.set(w.s_paymentOrder, t) : w.removeItem(w.s_paymentOrder)
    }
    checkPaymentOrder() {
        var e = w.get(w.s_paymentOrder) || {},
        t = Object.keys(e);
        t.length && (e = e[t[0]], this.checkPay(e))
    }
    checkPay(t) {
        let e = pb.CheckPayReq.create();
        e.checkData = t.checkData,
        e.payData = t.payData,
        A(e, pb.ICheckPayAck).then(e => {
            this.removePaymentOrder(t.orderNo),
            this.checkPaymentOrder()
        })
    }
    getPurchaseGoods() {
        let e = [],
        t = [];
        if (Mmobay.MConfig.openAD) {
            var i = Math.floor(Date.newDate().getTime() / 1e3);
            for (const c in Data.Advertisements) {
                var s = this.getADData(+c),
                a = Data.getAdvertisement(+c),
                r = a.count,
                n = s.count || 0,
                s = s.lastTime + a.cd,
                a = {
                    adCfg: {
                        id: a.id,
                        diamond: a.diamond,
                        maxCount: r,
                        useCount: n,
                        cd: a.cd,
                        leftTime: i < s ? s - i : 0
                    }
                };
                (r <= n ? t : e).push(a)
            }
        }
        var o = Data.getChannel(Mmobay.MConfig.channelId);
        if (!o)
            return [];
        for (const d in Data.Recharges) {
            var l,
            h = Data.getRecharge(+d),
            m = h.id,
            h = h[o.name];
            h && (l = Data.getGoods(m), m = {
                    id: m,
                    productId: h[0],
                    price: +h[1],
                    priceLang: +h[2],
                    nameId: l.name,
                    nameParam: l.nameParam,
                    iconId: +l.iconId,
                    diamond: l.diamond
                }, e.push(m))
        }
        return e = e.concat(t)
    }
};
window.me = R;
var C,
x,
Lt;
function S(e, ...t) {
    var i,
    s = Mmobay.MConfig.language || "cn",
    a = Data.getLang(e);
    if (!a)
        return "";
    let r = a[s];
    for (i of Object.keys(We))
        if (Mmobay.LocalStorage.get("ttfLan") == We[i]) {
            r = a[i];
            break
        }
    return r ? 0 < t.length ? r.format.apply(r, t) : r : ""
}
function Tt(e) {
    let t = [];
    for (var i of e)
        t.push({
            propId: i.key,
            propVal: i.value
        });
    return t
}
function Et(e, t, i = "", s = null, a = "") {
    let r = [];
    if (t && t.skin && r.push({
            itemId: t.skin.avatarID,
            itemCfg: Data.getItem(t.skin.avatarID),
            itemNum: 1
        }), e)
        for (var n of e)
            0 < n.delta && r.push({
                itemId: n.id,
                itemCfg: Data.getItem(n.id),
                itemNum: n.delta
            });
    return 0 < r.length ? u(wt, {
        params: [r, i, s, a],
        closeOnSide: !i
    }).then(e => e.wait()) : Promise.resolve()
}
function Mt(e) {
    return 1e6 <= e ?  + (e / 1e4).toFixed(2) + "m" : 1e4 <= e ?  + (e / 1e3).toFixed(1) + "k" : e ? e + "" : ""
}
function Rt(e) {
    var t = Date.newDate().getTime() / 1e3 - e;
    return 0 == e ? S(1074) : t < 60 ? S(1075, Math.ceil(t)) : t < 3600 ? S(1076, Math.floor(t / 60)) : t < 86400 ? S(1077, Math.floor(t / 3600)) : 604800 < t ? Bt(1e3 * e, !0) : S(1078, Math.floor(t / 86400))
}
function Bt(e, t = !1) {
    let i = Date.newDate(e);
    return i.getFullYear() == Date.newDate().getFullYear() ? i.isToday() ? St(i, "HH:MM") : St(i, t ? "mm-dd" : "mm-dd HH:MM") : St(i, "yyyy-mm-dd HH:MM")
}
function Nt(e, t = !1) {
    let i = "",
    s = ":",
    a = ":",
    r = "",
    n = (t && (s = S(2018), a = S(2019), r = S(2020)), Math.round(e / 1e3)),
    o = Math.floor(n / 3600);
    if (o) {
        e = 23 < o;
        if (e && t && (l = S(2017), h = Math.floor(o / 24), i += (h < 10 ? "0" : "") + h + l, o -= 24 * h), i += (o < 10 ? "0" : "") + o + s, e && t)
            return i
    }
    n %= 3600;
    var l = Math.floor(n / 60),
    h = Math.floor(n % 60);
    return i + (l < 10 ? "0" : "") + l + a + (h < 10 ? "0" : "") + h + r
}
function Pt(i, e, n, o, l, h, m = 1) {
    let c = [.4, .5, .6, .5];
    for (let t = 0; t < e; t++) {
        var d = .1 * Math.randRange(8, 10);
        let e = [150, 600 * d, 400 * d],
        s = new Laya.Image,
        a = (Se(s, H.Effect), s.anchorX = s.anchorY = .5, s.scale(c[0], c[0]), s.skin = i, s.pos(n.x, n.y), new Laya.TimeLine),
        r = new Laya.TimeLine;
        if (l) {
            let t = [{
                    x: n.x,
                    y: n.y
                }, {
                    x: n.x + Math.randRange(-300, -100),
                    y: n.y + Math.randRange(-150, 150)
                }, {
                    x: o.x,
                    y: o.y
                }
            ],
            i = {
                set x(e) {
                    s.x = e
                },
                set y(e) {
                    s.y = e
                },
                set bezierTween(e) {
                    i.x = (1 - e) * (1 - e) * t[0].x + 2 * e * (1 - e) * t[1].x + e * e * t[2].x,
                    i.y = (1 - e) * (1 - e) * t[0].y + 2 * e * (1 - e) * t[1].y + e * e * t[2].y
                },
                get bezierTween() {
                    return 0
                }
            };
            e[1] = Math.randRange(-200, 200),
            c[3] = .2,
            r.to(i, {
                bezierTween: 1
            }, e[0] + e[1] + e[2]),
            a.to(i, {
                scaleX: c[1],
                scaleY: c[1]
            }, e[0], null).to(i, {
                scaleX: c[2],
                scaleY: c[2]
            }, e[1], null, 100).to(i, {
                scaleX: c[3],
                scaleY: c[3]
            }, e[2], null),
            r.play(0, !1)
        } else
            a.to(s, {
                scaleX: c[1],
                scaleY: c[1]
            }, e[0]).to(s, {
                y: s.y - Math.randRange(0, 100),
                x: s.x + Math.randRange(-100, 100),
                scaleX: c[2],
                scaleY: c[2]
            }, e[1], Laya.Ease.circOut).to(s, {
                x: o.x,
                y: o.y,
                scaleX: c[3],
                scaleY: c[3]
            }, e[2] * m, null);
        a.once(Laya.Event.COMPLETE, null, () => {
            r.destroy(),
            a.destroy(),
            s.destroy(),
            h && h(),
            Laya.timer.once(20 * t, null, () => {
                I.instance.playSound(v.SE_GetGem)
            })
        }),
        a.play(0, !1)
    }
}
function qt(e, i = !1, s = !1, a = !1) {
    let r = [];
    for (var n of e) {
        n = Data.getLoot(n);
        let e = [];
        if (n) {
            n.randomEvery.length && (e = e.concat(n.randomEvery));
            for (let t of e = n.weightOne.length ? e.concat(n.weightOne) : e) {
                var o = Data.getItem(t.k),
                l = r.find(e => e.itemId == t.k);
                t && !l && o && r.push({
                    itemId: t.k,
                    itemNum: s ? 0 : t.v,
                    itemCfg: o,
                    notShowName: i,
                    showAnime: a
                })
            }
        }
    }
    return r
}
function Ut(i, s = !1) {
    var a,
    e,
    r = Data.getItem(i);
    if (r) {
        let t = [];
        if (r.type == m.randBox) {
            let e = [];
            for (a of Data.getItemRandBox(i).loots)
                 - 1 == e.indexOf(a.k) && e.push(a.k);
            return t = qt(e, s, !0, !0)
        }
        if (r.type == m.box) {
            for (e of Data.getItemUse(i).items)
                 - 1 == t.indexOf(e.id) && t.push({
                    itemId: e.id,
                    itemCfg: Data.getItem(e.id),
                    notShowName: s,
                    isBag: !0
                });
            return t
        }
    }
}
function Ht(e, t) {
    let i = e.nativeInput;
    i.style.caretColor = t
}
window.getLang = S;
const Ot = 100;
function Vt(e) {
    let t = [];
    var i = Ot * Ot,
    e = (t[0] = Math.floor(e / i), e - i * t[0]);
    return t[1] = Math.floor(e / Ot),
    e -= t[1] * Ot,
    t[2] = e,
    t
}
function Ft(e) {
    e = Vt(e);
    return e[0] ? [1, e[0]] : e[1] ? [2, e[1]] : e[2] ? [3, e[2]] : [3, 0]
}
function Gt(t) {
    let i = 0;
    for (let e = 0; e < t.length; e++)
        i++;
    return i
}
function Wt() {
    return Date.getMondayZeroTime().addDays(7).getTime()
}
function Yt() {
    return 1e3 * R.seasonEndTime
}
function Xt(e) {
    e.replace(/(^\s*)|(\s*$)/g, "");
    return /^\s+$/g.test(e) || 0 == e.length
}
function jt(e) {
    return 1e5 <= e && e < 3e5
}
(e = C = C || {})[e.Succ = 0] = "Succ",
e[e.Unkown = 1] = "Unkown",
e[e.SysError = 2] = "SysError",
e[e.ParamsError = 3] = "ParamsError",
e[e.ConfigError = 4] = "ConfigError",
e[e.NetError = 5] = "NetError",
e[e.NetDisconnect = 6] = "NetDisconnect",
e[e.ReqTimeout = 7] = "ReqTimeout",
e[e.ConnectTimeout = 8] = "ConnectTimeout",
e[e.PwdError = 9] = "PwdError",
e[e.NoRole = 10] = "NoRole",
e[e.NoAccount = 11] = "NoAccount",
e[e.DupAccount = 12] = "DupAccount",
e[e.FuncNotOpen = 13] = "FuncNotOpen",
e[e.OtherLogined = 14] = "OtherLogined",
e[e.ItemNotEnough = 15] = "ItemNotEnough",
e[e.EatMax = 16] = "EatMax",
e[e.LvlMax = 17] = "LvlMax",
e[e.CantBuySelfGoods = 18] = "CantBuySelfGoods",
e[e.GoodsPriceError = 19] = "GoodsPriceError",
e[e.NoGoods = 20] = "NoGoods",
e[e.TradeNumLiimit = 21] = "TradeNumLiimit",
e[e.NotYourGoods = 22] = "NotYourGoods",
e[e.GoodsSold = 23] = "GoodsSold",
e[e.CopperNotEnough = 24] = "CopperNotEnough",
e[e.TradeError = 25] = "TradeError",
e[e.PlayerNotEnough = 26] = "PlayerNotEnough",
e[e.InvalidData = 27] = "InvalidData",
e[e.NoData = 28] = "NoData",
e[e.AbnormalData = 29] = "AbnormalData",
e[e.HasGot = 30] = "HasGot",
e[e.Nonstandard = 31] = "Nonstandard",
e[e.NoUserData = 32] = "NoUserData",
e[e.NoItem = 33] = "NoItem",
e[e.IsAct = 34] = "IsAct",
e[e.NotAct = 35] = "NotAct",
e[e.LvMax = 36] = "LvMax",
e[e.NoClub = 37] = "NoClub",
e[e.WaitClubCheck = 38] = "WaitClubCheck",
e[e.ClubMbSizeLimit = 39] = "ClubMbSizeLimit",
e[e.NoPrivileges = 40] = "NoPrivileges",
e[e.HadClub = 41] = "HadClub",
e[e.ClubApplied = 42] = "ClubApplied",
e[e.ViceChairmanFull = 43] = "ViceChairmanFull",
e[e.ClubNameDup = 44] = "ClubNameDup",
e[e.MemberOffClub = 45] = "MemberOffClub",
e[e.ChairmanCantOff = 46] = "ChairmanCantOff",
e[e.IllegalRequest = 47] = "IllegalRequest",
e[e.CantEquipArms = 48] = "CantEquipArms",
e[e.InCD = 49] = "InCD",
e[e.CreateRoleErr = 50] = "CreateRoleErr",
e[e.ClubErr = 51] = "ClubErr",
e[e.TradeErr = 52] = "TradeErr",
e[e.WorldServerErr = 53] = "WorldServerErr",
e[e.DBServerErr = 54] = "DBServerErr",
e[e.PassUnable = 55] = "PassUnable",
e[e.vitMax = 56] = "vitMax",
e[e.soldOut = 57] = "soldOut",
e[e.vitNotEnough = 58] = "vitNotEnough",
e[e.InBattle = 59] = "InBattle",
e[e.MCNotEnough = 60] = "MCNotEnough",
e[e.TapTokenNotEnough = 61] = "TapTokenNotEnough",
e[e.NoWearSkin = 62] = "NoWearSkin",
e[e.NoSkin = 63] = "NoSkin",
e[e.NoHero = 64] = "NoHero",
e[e.UpLvLimit = 65] = "UpLvLimit",
e[e.InputTooLong = 66] = "InputTooLong",
e[e.IllegalChar = 67] = "IllegalChar",
e[e.IsUsed = 68] = "IsUsed",
e[e.CodeIsUsed = 69] = "CodeIsUsed",
e[e.MailServerErr = 70] = "MailServerErr",
e[e.WalletIsBind = 71] = "WalletIsBind",
e[e.WalletBindFail = 72] = "WalletBindFail",
e[e.WalletError = 73] = "WalletError",
e[e.HasBindWallet = 74] = "HasBindWallet",
e[e.InSettle = 75] = "InSettle",
e[e.BanAccount = 76] = "BanAccount",
e[e.BeKickoff = 77] = "BeKickoff",
e[e.MapOver = 78] = "MapOver",
e[e.NoTimes = 79] = "NoTimes",
e[e.CannotBuy = 80] = "CannotBuy",
e[e.GameOutTime = 81] = "GameOutTime",
e[e.SessExpire = 82] = "SessExpire",
e[e.NoBindWallet = 83] = "NoBindWallet",
e[e.ItemReturned = 84] = "ItemReturned",
e[e.PaymentSuccess = 85] = "PaymentSuccess",
e[e.PaymentFail = 86] = "PaymentFail",
e[e.NotSupportPurchase = 87] = "NotSupportPurchase",
e[e.BindingSuccess = 88] = "BindingSuccess",
e[e.MailSendSuccess = 89] = "MailSendSuccess",
e[e.AccountBound = 90] = "AccountBound",
e[e.LoginFail = 91] = "LoginFail",
e[e.LoginSuccess = 92] = "LoginSuccess",
e[e.ActivityOver = 93] = "ActivityOver",
e[e.HasTeam = 94] = "HasTeam",
e[e.NoTeam = 95] = "NoTeam",
e[e.TeamMemberMax = 96] = "TeamMemberMax",
e[e.TeamBattling = 97] = "TeamBattling",
e[e.OnlyLeaderCanDo = 98] = "OnlyLeaderCanDo",
e[e.NoTeamMember = 99] = "NoTeamMember",
e[e.RankRewardOver = 100] = "RankRewardOver",
(i = x = x || {})[i.Succ = 1] = "Succ",
i[i.Unkown = 2] = "Unkown",
i[i.SysError = 3] = "SysError",
i[i.ParamsError = 4] = "ParamsError",
i[i.ConfigError = 5] = "ConfigError",
i[i.NetError = 6] = "NetError",
i[i.NetDisconnect = 7] = "NetDisconnect",
i[i.ReqTimeout = 8] = "ReqTimeout",
i[i.ConnectTimeout = 9] = "ConnectTimeout",
i[i.PwdError = 10] = "PwdError",
i[i.NoRole = 11] = "NoRole",
i[i.NoAccount = 12] = "NoAccount",
i[i.DupAccount = 13] = "DupAccount",
i[i.FuncNotOpen = 14] = "FuncNotOpen",
i[i.OtherLogined = 15] = "OtherLogined",
i[i.ItemNotEnough = 16] = "ItemNotEnough",
i[i.EatMax = 17] = "EatMax",
i[i.LvlMax = 18] = "LvlMax",
i[i.CantBuySelfGoods = 19] = "CantBuySelfGoods",
i[i.GoodsPriceError = 20] = "GoodsPriceError",
i[i.NoGoods = 21] = "NoGoods",
i[i.TradeNumLiimit = 22] = "TradeNumLiimit",
i[i.NotYourGoods = 23] = "NotYourGoods",
i[i.GoodsSold = 24] = "GoodsSold",
i[i.CopperNotEnough = 25] = "CopperNotEnough",
i[i.TradeError = 26] = "TradeError",
i[i.PlayerNotEnough = 27] = "PlayerNotEnough",
i[i.InvalidData = 28] = "InvalidData",
i[i.NoData = 29] = "NoData",
i[i.AbnormalData = 30] = "AbnormalData",
i[i.HasGot = 31] = "HasGot",
i[i.Nonstandard = 32] = "Nonstandard",
i[i.NoUserData = 33] = "NoUserData",
i[i.NoItem = 34] = "NoItem",
i[i.IsAct = 35] = "IsAct",
i[i.NotAct = 36] = "NotAct",
i[i.LvMax = 37] = "LvMax",
i[i.NoClub = 38] = "NoClub",
i[i.WaitClubCheck = 39] = "WaitClubCheck",
i[i.ClubMbSizeLimit = 40] = "ClubMbSizeLimit",
i[i.NoPrivileges = 41] = "NoPrivileges",
i[i.HadClub = 42] = "HadClub",
i[i.ClubApplied = 43] = "ClubApplied",
i[i.ViceChairmanFull = 44] = "ViceChairmanFull",
i[i.ClubNameDup = 45] = "ClubNameDup",
i[i.MemberOffClub = 46] = "MemberOffClub",
i[i.ChairmanCantOff = 47] = "ChairmanCantOff",
i[i.IllegalRequest = 48] = "IllegalRequest",
i[i.CantEquipArms = 49] = "CantEquipArms",
i[i.InCD = 50] = "InCD",
i[i.CreateRoleErr = 51] = "CreateRoleErr",
i[i.ClubErr = 52] = "ClubErr",
i[i.TradeErr = 53] = "TradeErr",
i[i.WorldServerErr = 54] = "WorldServerErr",
i[i.DBServerErr = 55] = "DBServerErr",
i[i.PassUnable = 56] = "PassUnable",
i[i.vitMax = 57] = "vitMax",
i[i.soldOut = 58] = "soldOut",
i[i.vitNotEnough = 59] = "vitNotEnough",
i[i.InBattle = 60] = "InBattle",
i[i.MCNotEnough = 61] = "MCNotEnough",
i[i.TapTokenNotEnough = 62] = "TapTokenNotEnough",
i[i.NoWearSkin = 63] = "NoWearSkin",
i[i.NoSkin = 64] = "NoSkin",
i[i.NoHero = 65] = "NoHero",
i[i.UpLvLimit = 66] = "UpLvLimit",
i[i.InputTooLong = 67] = "InputTooLong",
i[i.IllegalChar = 68] = "IllegalChar",
i[i.IsUsed = 69] = "IsUsed",
i[i.CodeIsUsed = 70] = "CodeIsUsed",
i[i.MailServerErr = 71] = "MailServerErr",
i[i.WalletIsBind = 72] = "WalletIsBind",
i[i.WalletBindFail = 73] = "WalletBindFail",
i[i.WalletError = 74] = "WalletError",
i[i.HasBindWallet = 75] = "HasBindWallet",
i[i.InSettle = 76] = "InSettle",
i[i.BanAccount = 77] = "BanAccount",
i[i.BeKickoff = 78] = "BeKickoff",
i[i.MapOver = 79] = "MapOver",
i[i.NoTimes = 80] = "NoTimes",
i[i.CannotBuy = 81] = "CannotBuy",
i[i.GameOutTime = 82] = "GameOutTime",
i[i.SessExpire = 83] = "SessExpire",
i[i.NoBindWallet = 84] = "NoBindWallet",
i[i.ItemReturned = 85] = "ItemReturned",
i[i.PaymentSuccess = 86] = "PaymentSuccess",
i[i.PaymentFail = 87] = "PaymentFail",
i[i.NotSupportPurchase = 88] = "NotSupportPurchase",
i[i.BindingSuccess = 89] = "BindingSuccess",
i[i.MailSendSuccess = 90] = "MailSendSuccess",
i[i.AccountBound = 91] = "AccountBound",
i[i.LoginFail = 92] = "LoginFail",
i[i.LoginSuccess = 93] = "LoginSuccess",
i[i.ActivityOver = 94] = "ActivityOver",
i[i.HasTeam = 95] = "HasTeam",
i[i.NoTeam = 96] = "NoTeam",
i[i.TeamMemberMax = 97] = "TeamMemberMax",
i[i.TeamBattling = 98] = "TeamBattling",
i[i.OnlyLeaderCanDo = 99] = "OnlyLeaderCanDo",
i[i.NoTeamMember = 100] = "NoTeamMember",
i[i.RankRewardOver = 101] = "RankRewardOver";
let Kt = {
    [C.Succ]: [x.Succ],
    [C.Unkown]: [x.Unkown],
    [C.SysError]: [x.SysError],
    [C.ParamsError]: [x.ParamsError],
    [C.ConfigError]: [x.ConfigError],
    [C.NetError]: [x.NetError],
    [C.NetDisconnect]: [x.NetDisconnect],
    [C.ReqTimeout]: [x.ReqTimeout],
    [C.ConnectTimeout]: [x.ConnectTimeout],
    [C.PwdError]: [x.PwdError],
    [C.NoRole]: [x.NoRole],
    [C.NoAccount]: [x.NoAccount],
    [C.DupAccount]: [x.DupAccount],
    [C.FuncNotOpen]: [x.FuncNotOpen],
    [C.OtherLogined]: [x.OtherLogined],
    [C.ItemNotEnough]: [x.ItemNotEnough],
    [C.EatMax]: [x.EatMax],
    [C.LvlMax]: [x.LvlMax],
    [C.CantBuySelfGoods]: [x.CantBuySelfGoods],
    [C.GoodsPriceError]: [x.GoodsPriceError],
    [C.NoGoods]: [x.NoGoods],
    [C.TradeNumLiimit]: [x.TradeNumLiimit],
    [C.NotYourGoods]: [x.NotYourGoods],
    [C.GoodsSold]: [x.GoodsSold],
    [C.CopperNotEnough]: [x.CopperNotEnough],
    [C.TradeError]: [x.TradeError],
    [C.PlayerNotEnough]: [x.PlayerNotEnough],
    [C.InvalidData]: [x.InvalidData],
    [C.NoData]: [x.NoData],
    [C.AbnormalData]: [x.AbnormalData],
    [C.HasGot]: [x.HasGot],
    [C.Nonstandard]: [x.Nonstandard],
    [C.NoUserData]: [x.NoUserData],
    [C.NoItem]: [x.NoItem],
    [C.IsAct]: [x.IsAct],
    [C.NotAct]: [x.NotAct],
    [C.LvMax]: [x.LvMax],
    [C.NoClub]: [x.NoClub],
    [C.WaitClubCheck]: [x.WaitClubCheck],
    [C.ClubMbSizeLimit]: [x.ClubMbSizeLimit],
    [C.NoPrivileges]: [x.NoPrivileges],
    [C.HadClub]: [x.HadClub],
    [C.ClubApplied]: [x.ClubApplied],
    [C.ViceChairmanFull]: [x.ViceChairmanFull],
    [C.ClubNameDup]: [x.ClubNameDup],
    [C.MemberOffClub]: [x.MemberOffClub],
    [C.ChairmanCantOff]: [x.ChairmanCantOff],
    [C.IllegalRequest]: [x.IllegalRequest],
    [C.CantEquipArms]: [x.CantEquipArms],
    [C.InCD]: [x.InCD],
    [C.CreateRoleErr]: [x.CreateRoleErr],
    [C.ClubErr]: [x.ClubErr],
    [C.TradeErr]: [x.TradeErr],
    [C.WorldServerErr]: [x.WorldServerErr],
    [C.DBServerErr]: [x.DBServerErr],
    [C.PassUnable]: [x.PassUnable],
    [C.vitMax]: [x.vitMax],
    [C.soldOut]: [x.soldOut],
    [C.vitNotEnough]: [x.vitNotEnough],
    [C.InBattle]: [x.InBattle],
    [C.MCNotEnough]: [x.MCNotEnough],
    [C.TapTokenNotEnough]: [x.TapTokenNotEnough],
    [C.NoWearSkin]: [x.NoWearSkin],
    [C.NoSkin]: [x.NoSkin],
    [C.NoHero]: [x.NoHero],
    [C.UpLvLimit]: [x.UpLvLimit],
    [C.InputTooLong]: [x.InputTooLong],
    [C.IllegalChar]: [x.IllegalChar],
    [C.IsUsed]: [x.IsUsed],
    [C.CodeIsUsed]: [x.CodeIsUsed],
    [C.MailServerErr]: [x.MailServerErr],
    [C.WalletIsBind]: [x.WalletIsBind],
    [C.WalletBindFail]: [x.WalletBindFail],
    [C.WalletError]: [x.WalletError],
    [C.HasBindWallet]: [x.HasBindWallet],
    [C.InSettle]: [x.InSettle],
    [C.BanAccount]: [x.BanAccount],
    [C.BeKickoff]: [x.BeKickoff],
    [C.MapOver]: [x.MapOver],
    [C.NoTimes]: [x.NoTimes],
    [C.CannotBuy]: [x.CannotBuy],
    [C.GameOutTime]: [x.GameOutTime],
    [C.SessExpire]: [x.SessExpire],
    [C.NoBindWallet]: [x.NoBindWallet],
    [C.ItemReturned]: [x.ItemReturned],
    [C.PaymentSuccess]: [x.PaymentSuccess],
    [C.PaymentFail]: [x.PaymentFail],
    [C.NotSupportPurchase]: [x.NotSupportPurchase],
    [C.BindingSuccess]: [x.BindingSuccess],
    [C.MailSendSuccess]: [x.MailSendSuccess],
    [C.AccountBound]: [x.AccountBound],
    [C.LoginFail]: [x.LoginFail],
    [C.LoginSuccess]: [x.LoginSuccess],
    [C.ActivityOver]: [x.ActivityOver],
    [C.HasTeam]: [x.HasTeam],
    [C.NoTeam]: [x.NoTeam],
    [C.TeamMemberMax]: [x.TeamMemberMax],
    [C.TeamBattling]: [x.TeamBattling],
    [C.OnlyLeaderCanDo]: [x.OnlyLeaderCanDo],
    [C.NoTeamMember]: [x.NoTeamMember],
    [C.RankRewardOver]: [x.RankRewardOver]
};
function zt(e) {
    return S((e = e, Kt[e] || 0))
}
function $t(u, _ = "get", e, p, g) {
    return p = p || P,
    new Promise((i, s) => {
        let a = j.create(p),
        r = q.errorSpawnImpl,
        n,
        o = (p.noLoading || p.silent || (n = q.loadingImpl()), p.retryTimes || 0),
        l = 0 < o ? p.retryInterval || 1e3 : 0,
        h = function (e) {
            let t = [];
            for (var i in e)
                t.push(i + "=" + encodeURIComponent(e[i]));
            return t.join("&")
        }
        (e);
        function m(e, t) {
            a.on(Laya.Event.COMPLETE, null, c),
            a.on(Laya.Event.ERROR, null, () => {
                d(C.NetError, "网络异常", !0)
            }),
            a.send(e, t, _, "text", g)
        }
        function c(e) {
            var t = a.status;
            n && n(),
            200 == t ? (t = JSON.parse(e)).code ? d(t.code, t.message) : i(t) : s(),
            a.release()
        }
        function d(e, t, i) {
            if (i && 0 < o)
                return setTimeout(() => m(u, h), l), void o--;
            n && n();
            i = {
                code: e,
                message: t,
                handled: !1
            };
            s(i),
            i.handled || !r || p.silent || r(e, t),
            a.release()
        }
        m(u, h)
    })
}
let Qt = new Y;
function Jt(e) {
    Qt.send(e)
}
function A(e, t, i) {
    return Qt.sendAndWait(e, t, i)
}
class Zt {
    constructor() {
        this.m_rank = -1,
        this.clubRank = 0,
        this.oldCup = 0,
        this.rankList = [],
        this.myGrade = 0,
        this.myCup = 0,
        this.battleCount = 0,
        this.battleBuyCount = 0
    }
    get myRank() {
        return this.m_rank
    }
    reqArenaInfo() {
        return A(pb.GetArenaInfoReq.create(), pb.IGetArenaInfoAck).then(e => {
            if (this.arenaBase = e, this.arenaBase.squad || (this.arenaBase.squad = []), this.arenaBase.squad.length < 3)
                for (let e = 0; e < 3; e++)
                    this.arenaBase.squad[e] || (this.arenaBase.squad[e] = null);
            this.battleCount = e.battleCount,
            this.battleBuyCount = e.buyBattleCount,
            O.event(c.LOAD_ARENA)
        })
    }
    reqGetCupBox() {
        let e = pb.ArenaCupAwardReq.create();
        return e.id = this.arenaBase.cupReward + 1,
        A(e, pb.IArenaCupAwardAck).then(e => {
            this.arenaBase.cupReward = e.cupReward,
            O.bag.updateItem(e.items),
            Et(e.items)
        })
    }
    reqChangeHero(e) {
        let t = pb.ArenaSetSquadReq.create();
        return t.squad = e,
        A(t, pb.IArenaSetSquadAck).then(e => {
            I.instance.playSound(v.SE_Change),
            this.arenaBase && (this.arenaBase.squad = e.squad),
            O.event(c.SELECT_HERO, [{
                        ids: e.squad
                    }
                ])
        })
    }
    reqRecord() {
        return A(pb.ArenaRecordReq.create(), pb.IArenaRecordAck).then(e => e)
    }
    reqArenaRank() {
        return A(pb.ArenaUserRankReq.create(), pb.IArenaUserRankAck).then(e => (this.m_rank = e.myRank || -1, O.event(c.ARENA_RANK, e), e))
    }
    reqArenaMatchRival() {
        return A(pb.ArenaMatchRivalReq.create(), pb.IArenaMatchRivalAck).then(e => e)
    }
    reqArenaClub() {
        return A(pb.ClubRankReq.create(), pb.IClubRankAck).then(e => (this.clubRank = e.myRank || -1, this.rankList = e.rankList, this.myGrade = e.myGrade, this.myCup = e.myCup, O.event(c.CLUB_RANK, e), e))
    }
    reqArenaShopBuy(e) {
        let t = pb.ArenaShopBuyReq.create();
        return t.id = e,
        A(t, pb.IArenaShopBuyAck).then(e => {
            Et(e.items),
            this.arenaBase.shop = e.shop,
            O.bag.updateItem(e.items)
        })
    }
    getArenaWeekRank() {
        let e = [];
        for (var t in Data.arenaWeekSettles) {
            t = Data.getArenaWeekSettle(+t);
            e.push(t)
        }
        return e
    }
    getArenaSeasonRank() {
        let e = [];
        for (var t in Data.arenaSeasonSettles) {
            t = Data.getArenaSeasonSettle(+t);
            e.push(t)
        }
        return e
    }
    getClubSeasonRank() {
        let e = [];
        for (var t in Data.arenaSeasonClubSettles) {
            t = Data.getArenaSeasonClubSettle(+t);
            e.push(t)
        }
        return e
    }
    getArenaRankData() {
        let e = [];
        for (var t in Data.arenaMilitarys) {
            t = Data.getArenaMilitary(+t);
            e.unshift(t)
        }
        return e
    }
    reqBuyTimes() {
        return A(pb.BuyArenaCountReq.create(), pb.IBuyArenaCountAck).then(e => {
            R.copper = e.copper,
            this.battleBuyCount = e.buyBattleCount,
            this.battleCount = e.battleCount,
            O.event(c.BUY_ARENA)
        })
    }
    reqArenaPlayerInfo(e) {
        let t = pb.ArenaPlayerInfoReq.create();
        return t.userId = e,
        A(t, pb.IArenaPlayerInfoAck).then(e => e)
    }
}
class ei {
    constructor() {
        this.bag = {},
        this.equipBag = {},
        this.foodBag = {},
        this.itemBag = {},
        this.foodList = [],
        this.equipList = [],
        this.deltaGen = 0
    }
    init() {
        var e,
        t = R.bag,
        i = (this.equipBag = {}, this.foodBag = {}, this.itemBag = {}, Object.keys(t));
        for (e of i) {
            var s = Data.getItem(+e);
            s && (s.type == m.equip ? this.equipBag[e] = t[e] : s.type == m.food || s.type == m.cookFood ? this.foodBag[e] = t[e] : this.itemBag[e] = t[e])
        }
        this.bag[m.equip] = this.equipBag,
        this.bag[m.food] = this.foodBag,
        this.bag[m.item] = this.itemBag,
        O.event(c.ITEM_CHANGE)
    }
    getRewardItem(e) {
        return e.filter(e => 0 < e.delta)
    }
    updateItem(e, t = !1) {
        for (var i of e) {
            var s = i.id,
            a = Data.getItem(s);
            if (a) {
                if (s == p.copper)
                    R.copper = i.num;
                else if (s != p.vit)
                    if (s == p.mcToken)
                        R.MCToken = i.num;
                    else if (s == p.tapToken)
                        R.tapToken = i.num;
                    else if (s == p.diamond)
                        R.diamond = i.num;
                    else {
                        let e = a.type,
                        t = ((e = e == m.cookFood ? m.food : e) != m.equip && e != m.food && (e = m.item), this.bag[e]);
                        var r = i.num;
                        r <= 0 ? delete t[s] : t[s] = r,
                        a.type == m.food || a.type == m.cookFood ? (this.foodList = [], O.event(c.UPDATE_GAMEMENU), a.type != m.cookFood || O.food.foodUnlock[s] || (O.food.foodUnlock[s] = 1, w.set(w.s_newFood, s, s + ""), O.event(c.UNLOCK_FOOD))) : a.type == m.equip && (this.equipList = [], O.event(c.UPDATE_GAMEMENU)),
                        s == p.gem && (this.deltaGen += i.delta)
                    }
            } else
                console.warn("no item:", s)
        }
        O.event(c.ITEM_CHANGE),
        t && Et(e)
    }
    getItemNum(e) {
        var t = Data.getItem(e);
        if (!t)
            return 0;
        if (e == p.copper)
            return R.copper;
        if (e == p.mcToken)
            return R.MCToken;
        if (e == p.tapToken)
            return R.tapToken;
        if (e == p.diamond)
            return R.diamond;
        let i = t.type;
        return (i = i == m.cookFood ? m.food : i) != m.equip && i != m.food && (i = m.item),
        this.bag[i][e] || 0
    }
    checkEnough(e, t) {
        return !(this.getItemNum(e) < t) || (e == p.copper ? h(S(25)) : h(S(16)), !1)
    }
    reqUseItem(e, t) {
        let i = pb.UseItemReq.create();
        return i.num = t,
        i.id = e,
        A(i, pb.IUseItemAck).then(e => {
            this.updateItem(e.items)
        })
    }
    reqSellItem(e, t) {
        let i = pb.UseItemReq.create();
        return i.num = t,
        i.id = e,
        A(i, pb.ISellItemAck).then(e => {
            this.updateItem(e.items);
            e = this.getRewardItem(e.items);
            e && Et(e)
        })
    }
    reqUseRandBox(e) {
        let t = pb.UseRandBoxReq.create();
        return t.id = e,
        A(t, pb.IUseRandBoxAck).then(e => (this.updateItem(e.items), e))
    }
    reqSwapRandBox(e, t) {
        let i = pb.SwapRandBoxReq.create();
        return i.index = e,
        i.logicId = t,
        A(i, pb.ISwapRandBoxAck).then(e => e)
    }
    reqReceiveRandBox(e) {
        let t = pb.ReceiveRandBoxReq.create();
        return t.logicId = e,
        A(t, pb.IReceiveRandBoxAck).then(e => {
            this.updateItem(e.items)
        })
    }
    reqUseChooseBox(e, t) {
        let i = pb.UseChooseBoxReq.create();
        return i.id = e,
        i.index = t,
        A(i, pb.IUseChooseBoxAck).then(e => {
            this.updateItem(e.items)
        })
    }
    reqBuyItem(e, t) {
        let i = pb.BuyItemReq.create();
        return i.num = t,
        i.id = e,
        A(i, pb.IBuyItemAck).then(e => {
            Et(e.items),
            this.updateItem(e.items)
        })
    }
    getFoodList(e = 0) {
        var i = Object.keys(this.foodBag);
        this.foodList = [];
        for (let e = 0, t = i.length; e < t; e++)
            this.foodList.push({
                itemId: +i[e],
                itemNum: this.foodBag[i[e]],
                itemCfg: Data.getItem(+i[e]),
                foodCfg: Data.getFood(+i[e]),
                showSelect: !1
            });
        return this.foodList
    }
    getEquipList(e = !1, t = 0) {
        if (e || !this.equipList.length) {
            var i = Object.keys(this.equipBag);
            this.equipList = [];
            for (let e = 0, t = i.length; e < t; e++)
                this.equipList.push({
                    itemId: +i[e],
                    itemNum: this.equipBag[i[e]],
                    itemCfg: Data.getItem(+i[e]),
                    equipCfg: Data.getEquip(+i[e])
                })
        }
        return t ? this.equipList.filter(e => e.equipCfg.type == t) : this.equipList
    }
}
class ti {
    constructor() {
        this.unLockEquip = [],
        this.bagEquips = [],
        this.sumEquips = [],
        this.putSortIndex = -1
    }
    getEquipBook() {
        if (this.equipBook)
            return this.equipBook;
        for (var e in this.equipBook = {}, Data.equips) {
            var t = Data.getEquip(+e);
            10 <= t.lvl && t.lvl % 5 != 0 || (e = {
                    itemCfg: Data.getItem(+e),
                    itemId: +e,
                    equipCfg: t
                }, this.equipBook[t.seriesName] ? this.equipBook[t.seriesName].push(e) : this.equipBook[t.seriesName] = [e])
        }
        return this.equipBook
    }
    checkUnlock(e) {
        return -1 != this.unLockEquip.indexOf(e)
    }
    sortBook(e) {
        return e.sort((e, t) => e.itemCfg.quality - t.itemCfg.quality)
    }
    getBagEquips(t) {
        var i,
        s = O.bag.equipBag,
        e = Object.keys(s);
        this.bagEquips = [];
        for (i of e)
            for (let e = 0; e < s[i]; e++) {
                var a = {
                    itemCfg: Data.getItem(+i),
                    itemId: +i,
                    isSel: !1,
                    equipCfg: Data.getEquip(+i)
                };
                this.bagEquips.push(a)
            }
        return t ? this.bagEquips.filter(e => e.itemCfg.type == t) : this.bagEquips
    }
    getSumEquips() {
        let e = this.getBagEquips();
        this.sumEquips = e.splice(0, 20);
        var t = this.sumEquips.length;
        return 20 == t ? this.sumEquips : this.sumEquips.concat(new Array(20 - t).fill(null))
    }
    getPutEquips() {
        let e = {},
        t = this.sumEquips.filter(e => !!e);
        for (var i of t) {
            var s = e[i.itemId] || 0;
            e[i.itemId] = s + 1
        }
        var a;
        let r = [];
        for (a of this.getBagEquips()) {
            var n = e[a.itemId] || 0;
            e[a.itemId] ? e[a.itemId] = n - 1 : r.push(a)
        }
        let o = t.concat(r.sort((e, t) => e.itemCfg.quality - t.itemCfg.quality));
        for (let e = 0; e < 20; e++)
            o[e] && (o[e].isSel = !0);
        return o
    }
    reqSumEquip(e) {
        let t = pb.EquipMergeReq.create();
        return t.equipId = e,
        A(t, pb.IEquipMergeAck).then(e => (O.bag.updateItem(e.items), e))
    }
    reqEquipBookList() {
        return A(pb.EquipBookReq.create(), pb.IEquipBookAck).then(e => {
            this.unLockEquip = e.gotEquips
        })
    }
    checkShake(t) {
        let i = 0;
        for (let e = 0; e < this.sumEquips.length; e++) {
            var s = this.sumEquips[e];
            if (Data.getEquip(t) && (s && s.itemId == t && Data.getEquip(t).merge.length && 2 == ++i))
                return !0
        }
        return !1
    }
    getStartChangeIndex(e) {
        let t = {};
        for (var i of e)
            i && (t[i.itemId] = (t[i.itemId] || 0) + 1);
        for (var s of this.sumEquips)
            s && (t[s.itemId] = (t[s.itemId] || 0) - 1);
        var a;
        let r = 20;
        for (a of Object.keys(t))
            0 < t[a] && (r -= t[a]);
        return r
    }
    getPutTypes(e) {
        let t = [],
        i = {};
        for (var s of e)
            i[s.equipCfg.seriesName] ? i[s.equipCfg.seriesName]++ : i[s.equipCfg.seriesName] = 1;
        var a;
        let r = 0;
        for (a of Object.keys(i)) {
            var n = i[a];
            r += n,
            t.push({
                seriesName: a,
                num: n
            })
        }
        return t.unshift({
            seriesName: 1050,
            num: r
        }),
        t
    }
    checkCanSum() {
        var t = this.getSumEquips();
        let i = {},
        s = !1;
        for (let e = 0; e < t.length; e++) {
            var a = t[e];
            if (a && (i[a.itemId] = (i[a.itemId] || 0) + 1, 2 == i[a.itemId])) {
                s = !0;
                break
            }
        }
        return s
    }
}
class ii {
    constructor() {
        this.foodList = [],
        this.foodUnlock = {},
        this.foodDatas = []
    }
    reqCreateFood(e) {
        let t = pb.MakeFoodReq.create();
        return t.foodIds = e,
        A(t, pb.IMakeFoodAck).then(e => (O.bag.updateItem(e.items), e))
    }
    reqMakeFood(e, t, i) {
        let s = pb.QuickMakeCookReq.create();
        return s.foodIds = t,
        s.cookId = e,
        s.num = i,
        A(s, pb.IQuickMakeCookAck).then(e => {
            Et(e.items),
            O.bag.updateItem(e.items)
        })
    }
    reqUnlockList() {
        return A(pb.CookBookReq.create(), pb.ICookBookAck).then(e => {
            this.foodUnlock = {};
            for (var t of e.makeFoods)
                this.foodUnlock[t] = 1
        })
    }
    getFoodList() {
        for (var e in this.foodList = [], Data.cookFoods)
            4e3 != +e && (e = Data.getCookFood(+e), this.foodList.push(e));
        return this.foodList.sort((e, t) => {
            var i = +this.checkUnlock(e.id),
            s = +this.checkUnlock(t.id);
            return i != s ? s - i : e.id - t.id
        }),
        this.foodList
    }
    getFoodBag(e = !0) {
        return O.bag.getFoodList(e).filter(e => e.itemCfg.type == m.food)
    }
    checkUnlock(e) {
        return !!this.foodUnlock[e]
    }
    checkNew(e) {
        let t = w.get(w.s_newFood);
        var i = !!t[e];
        return i && (delete t[e], w.set(w.s_newFood, t)),
        i
    }
    getMaxrecommend(e) {
        let t = 0,
        i = O.bag;
        for (var s of e) {
            var a = s[1],
            s = i.getItemNum(s[0]);
            t = Math.min(t, Math.floor(s / a))
        }
        return t
    }
    getFoodTypes() {
        if (this.foodTypes)
            return this.foodTypes;
        for (var e in this.foodTypes = [1050], Ge)
            this.foodTypes.push(Ge[e] + 2e3 - 1);
        return this.foodTypes
    }
    getFastCookList(e) {
        e = Data.getCookFood(e);
        if (!e)
            return null;
        var a = O.bag.foodBag,
        P = e.recommend || [],
        r = e.needById,
        t = e.needByType,
        n = {
            canCook: !1,
            itemArr: this.createNeedItems(P, a),
            maxNum: 0,
            recipe: []
        };
        if (!r && !t)
            return console.log("无法制作"), n;
        let o = O.bag;
        if (r && !t) {
            let t = [],
            i = 0,
            s = [];
            for (let e = 0; e < r.length; e++) {
                var l = r[e][0],
                h = r[e][1],
                m = o.getItemNum(l);
                t.push([l, h]);
                for (let e = 0; e < h; e++)
                    s.push(parseInt(l + "", 10));
                if (!m) {
                    i = 0;
                    break
                }
                m = Math.floor(m / h);
                if (m <= 0) {
                    i = 0;
                    break
                }
                m <= (i = 0 == e ? m : i) && (i = m)
            }
            e = 0 < i;
            return e ? {
                canCook: e,
                itemArr: this.createNeedItems(t, a),
                maxNum: i,
                recipe: s
            }
             : n
        }
        let c = {},
        d = [];
        if (r)
            for (let e = 0; e < r.length; e++) {
                var i = r[e][0],
                s = r[e][1];
                if ((c[i] = s) > o.getItemNum(i))
                    return n;
                for (let e = 0; e < s; e++)
                    d.push(parseInt(i + "", 10))
            }
        let u = {};
        for (let e = 0; e < t.length; e++) {
            var _ = t[e][0],
            p = t[e][1],
            q = t[e][2];
            let i = this.getFoodByType(_);
            if (0 == Object.keys(i).length)
                return n;
            let s = {},
            a = (u[_] = s, Object.keys(i));
            var g = Object.keys(c);
            for (let e = 0; e < g.length; e++) {
                var y = g[e],
                v = c[y];
                if (i[y]) {
                    if (s[y] = v, delete c[y], i[y] < v)
                        return n;
                    i[y] == v ? delete i[y] : i[y] = i[y] - v
                }
            }
            if ((a = Object.keys(i)).sort((e, t) => {
                    var i = Data.getItem(+e).quality,
                    s = Data.getItem(+t).quality;
                    return i != s ? i - s : a[e] != a[t] ? a[t] - a[e] : parseInt(e, 10) - parseInt(t, 10)
                }), q) {
                if (a.length < p)
                    return n;
                let e = a.slice(0, p);
                e.forEach((e, t) => {
                    s[e] ? s[e]++ : s[e] = 1,
                    d.push(parseInt(e, 10))
                })
            } else {
                let t = 0;
                for (let e = 0; e < a.length; e++) {
                    var k = a[e],
                    f = i[k],
                    I = p - t;
                    if (I) {
                        if (s[k] = s[k] || 0, I <= f) {
                            s[k] = s[k] + I;
                            for (let e = 0; e < I; e++)
                                d.push(parseInt(k, 10));
                            break
                        }
                        s[k] = s[k] + f;
                        for (let e = 0; e < f; e++)
                            d.push(parseInt(k, 10));
                        t += f
                    }
                    if (e >= a.length - 1 && t < p)
                        return n
                }
            }
        }
        let b = 1,
        w = !0,
        C = [];
        var x = Object.keys(c);
        for (let e = 0; e < x.length; e++) {
            var S = x[e];
            C.push([S, c[S]])
        }
        var A = Object.keys(u);
        for (let e = 0; e < A.length; e++) {
            var D = A[e],
            L = Object.keys(u[D]);
            for (let e = 0; e < L.length; e++) {
                var T = L[e],
                U = u[D][T];
                C.push([T, U])
            }
        }
        for (; w; ) {
            var E = Object.keys(c),
            M = Object.keys(u);
            if (0 == E.length && 0 == M.length)
                return n;
            b++;
            for (let e = 0; e < E.length; e++) {
                var R = E[e];
                if (o.getItemNum(+R) < c[R] * b) {
                    w = !1;
                    break
                }
            }
            if (w)
                for (let e = 0; e < M.length; e++) {
                    var B = u[M[e]],
                    N = Object.keys(B);
                    if (!w)
                        break;
                    for (let e = 0; e < N.length; e++) {
                        var H = N[e];
                        if (o.getItemNum(+H) < B[H] * b) {
                            w = !1;
                            break
                        }
                    }
                }
        }
        return b--, {
            canCook: !0,
            itemArr: this.createNeedItems(C, a),
            maxNum: b,
            recipe: d
        }
    }
    createNeedItems(s, a) {
        Array.isArray(s) && (s = function (i) {
            let s,
            a = {};
            for (let e = 0, t = i.length; e < t; e++) {
                var r = (s = i[e])[0],
                n = s[1];
                a[r] = n
            }
            return a
        }
            (s));
        let r = [],
        e = Object.keys(s);
        return e.forEach(e => {
            var e = parseInt(e),
            t = a[e] || 0,
            i = parseInt(s[e], 10);
            r.push({
                itemId: e,
                itemCfg: Data.getItem(e),
                itemNum: t,
                needNum: i
            })
        }),
        r
    }
    getFoodByType(e) {
        let t = {},
        i = O.bag;
        var s,
        a;
        for (s of this.getFoodDatas())
            s.type != e || (a = i.getItemNum(s.id)) && (t[s.id] = a);
        return t
    }
    getFoodDatas() {
        if (this.foodDatas.length)
            return this.foodDatas;
        for (var e in this.foodDatas = [], Data.foods) {
            e = Data.getFood(+e);
            this.foodDatas.push(e)
        }
        return this.foodDatas
    }
}
class si extends t.hunt.views.common.HeroPropTipUI {
    constructor(e) {
        super(),
        this.dataSource = e
    }
    onAwake() {
        super.onAwake(),
        this.dataChanged()
    }
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_txt_Prop.text = S(st[t[0]]);
        let i = [g.critical, g.dodge, g.hpPercent, g.atkPercent];
        var s = -1 != i.indexOf(t[0]);
        this.m_txt_Value.text = s ? "+" + t[1] / 100 + "%" : "+" + t[1],
        Laya.timer.callLater(this, () => {
            this.destroyed || (this.m_img_Bg.width = this.m_box_Con.width + 15)
        })
    }
    static showHeroTips(e) {
        si.s_propArr = si.s_propArr.concat(e),
        Laya.timer.once(300, null, () => {
            si.checkAniShow()
        })
    }
    static checkAniShow() {
        var e;
        si.s_isPlaying || (e = si.s_propArr.splice(0, si.s_maxNum)).length && (si.s_isPlaying = !0, si.doTipsAni(e))
    }
    static doTipsAni(t) {
        if (t && t.length) {
            for (let s = 0, e = t.length; s < e; s++)
                E(si, {
                    params: [t[s]]
                }).then(e => {
                    Se(e, H.Toast),
                    e.x = 5;
                    var t = (e.y = 850) - 40 * s;
                    const i = new Laya.TimeLine;
                    i.to(e, {
                        y: t
                    }, 300, null).to(e, {
                        x: -500
                    }, 300 + 50 * s, null, 1200),
                    i.play(0, !1),
                    i.on(Laya.Event.COMPLETE, null, () => {
                        i.destroy(),
                        e.destroy(!0)
                    })
                });
            Laya.timer.once(1800 + 50 * t.length, null, () => {
                si.s_isPlaying = !1,
                si.checkAniShow()
            })
        }
    }
}
si.s_propArr = [],
si.s_maxNum = 5,
si.s_isPlaying = !1;
class ai extends t.hunt.views.common.InfoTipUI {
    constructor(e) {
        super(),
        this.dataSource = e
    }
    onAwake() {
        super.onAwake(),
        this.mouseThrough = !0;
        var e = this.dataSource;
        this.ani1.on(Laya.Event.COMPLETE, null, () => {
            this.destroy()
        }),
        this.m_img_Info.skin = e.skin,
        this.m_img_Info2.skin = e.skin2 || "",
        this.m_txt_Value.text = e.info,
        this.y = 600,
        this.visible = !0,
        this.ani1.play(0, !1)
    }
    static showInfoTips(e) {
        ai.s_arr = ai.s_arr.concat(e),
        Laya.timer.once(1e3, null, () => {
            ai.checkAniShow()
        })
    }
    static checkAniShow() {
        var e;
        ai.s_isPlaying || (e = ai.s_arr.shift()) && (ai.s_isPlaying = !0, E(ai, {
                params: [e]
            }).then(e => {
                Se(e, H.Toast)
            }), Laya.timer.once(300, null, () => {
                ai.s_isPlaying = !1,
                ai.checkAniShow()
            }))
    }
}
ai.s_arr = [],
ai.s_isPlaying = !1;
class ri {
    get heroMap() {
        return R.heros
    }
    get allHeros() {
        var i = Object.keys(Data.heros);
        let s = [];
        for (let e = 0, t = i.length; e < t; e++) {
            var a = this.getHero(+i[e]);
            a && s.push(a)
        }
        return s
    }
    getHero(e) {
        return this.heroMap[e] || new Dt({
            id: e
        })
    }
    reqEatFood(a, e, t = 1) {
        let i = pb.EatFoodReq.create();
        return i.heroId = a,
        i.foodId = e,
        i.num = t,
        A(i, pb.IEatFoodAck).then(e => {
            var t = this.getHero(a),
            i = e.eatLvl - t.eatLvl;
            let s = {
                heroId: a,
                heroCfg: t.heroTable,
                skin: t.avatarId || t.skinId,
                diffLv: i,
                newLv: e.eatLvl,
                oldProp: t.heroAllProps,
                newProp: null,
                rare: t.heroSkinTable ? t.heroSkinTable.rare : 0
            };
            return this.udpateHeroInfo(a, e),
            s.newProp = t.heroAllProps,
            s
        })
    }
    reqWearEquip(t, e) {
        let i = pb.WearEquipReq.create();
        return i.heroId = t,
        i.equipId = e,
        A(i, pb.IWearEquipAck).then(e => {
            this.udpateHeroInfo(t, e)
        })
    }
    reqUnWearEquip(t, e) {
        let i = pb.UnWearEquipReq.create();
        return i.heroId = t,
        i.equipId = e,
        A(i, pb.IUnWearEquipAck).then(e => {
            this.udpateHeroInfo(t, e)
        })
    }
    reqWearSkin(t, e) {
        let i = pb.WearSkinReq.create();
        return i.heroId = t,
        i.id = e,
        A(i, pb.IWearSkinAck).then(e => (delete R.heroSkins[e.delId], e.addSkin && (R.heroSkins[e.addSkin.id] = e.addSkin.skin), this.udpateHeroInfo(t, {
                    wearingSkin: e.skin
                }), this.getHero(t).wearingSkin = e.skin, I.instance.stopSound(), I.instance.playCv(this.getHero(t).avatarId, lt.Skin), e))
    }
    reqUnWearSkin(i) {
        let e = pb.UnWearSkinReq.create();
        return e.heroId = i,
        A(e, pb.IUnWearSkinAck).then(e => {
            let t = this.getHero(i);
            return t.wearingSkin = null,
            t.resetData(),
            R.heroSkins[e.skin.id] = e.skin.skin,
            I.instance.stopSound(),
            I.instance.playCv(this.getHero(i).avatarId, lt.Skin),
            e
        })
    }
    reqUpgradeWearSkin(t) {
        let e = pb.UpgradeSkinReq.create();
        return e.heroId = t,
        A(e, pb.IUpgradeSkinAck).then(e => (R.MCToken = e.MCToken || 0, R.tapToken = e.tapToken || 0, this.getHero(t).wearingSkin = e.skin.skin, e))
    }
    reqUpgradeSkin(e) {
        let t = pb.UpgradeSkinReq.create();
        return t.id = e,
        A(t, pb.IUpgradeSkinAck).then(e => (R.MCToken = e.MCToken || 0, R.tapToken = e.tapToken || 0, R.heroSkins[e.skin.id] = e.skin.skin, e))
    }
    reqSkinTokenInfo(e) {
        let t = pb.SkinTokenInfoReq.create();
        return t.skinTokenID = e,
        A(t, pb.ISkinTokenInfoAck).then(e => e)
    }
    reqSkinBuyMcToken(e) {
        let t = pb.SkinBuyMcTokenReq.create();
        return t.id = e.id || 0,
        t.heroId = e.heroId || 0,
        A(t, pb.ISkinBuyMcTokenAck).then(e => (Et(e.items), O.bag.updateItem(e.items), e))
    }
    actHeroNtf(e) {
        this.heroMap[e.hero.id] = new Dt(e.hero)
    }
    udpateHeroInfo(e, t) {
        let s = this.getHero(e).propsForBattle,
        i = this.getHero(e).heroSkills,
        a = (t.items && (O.bag.updateItem(t.items), delete t.items), Object.assign(this.getHero(e), t), this.getHero(e).propsForBattle),
        r = this.getHero(e).heroSkills,
        n = [];
        if (a.forEach((e, t) => {
                var i = a[t] - (s[t] || 0);
                0 < i && n.push([t, Math.floor(i)])
            }), n.length) {
            si.showHeroTips(n);
            let a = [];
            n.forEach(e => {
                let t,
                i = (t = e[0] == g.hpPercent ? g.hp : e[0] == g.atkPercent ? g.attack : e[0], [g.critical, g.dodge, g.hpPercent, g.atkPercent]);
                var s = -1 != i.indexOf(e[0]);
                a.push({
                    skin: `hunt/ui_comm/icoProp_${t}.png`,
                    skin2: "",
                    info: s ? "+" + e[1] / 100 + "%" : "+" + e[1]
                })
            }),
            ai.showInfoTips(a)
        }
        let o = [],
        l = (r.forEach(t => {
                i.find(e => e.skillId == t.skillId) || o.push(t)
            }), []);
        if (o.length) {
            let t = [],
            i = w.get(w.s_skinSkill) || {};
            o.forEach(e => {
                e.isSkinSkill && !i[e.skillId] ? l.push(e) : t.push({
                    skin: `hunt/ui_comm/sborder${e.skillCfg.iconBg}.png`,
                    skin2: `hunt/ui_skill/${e.skillCfg.icon}.png`,
                    info: S(e.skillCfg.name)
                })
            }),
            ai.showInfoTips(t)
        }
        this.getHero(e).resetData(),
        O.event(c.HERO_CHANGE),
        l.length && O.event(c.HERO_NEW_SKINSKILL, [l])
    }
    getChangeHeros(e, t, i = !1) {
        var s,
        a;
        let r = [];
        for (s in this.heroMap)
             + s != e && (a = this.getHero(+s), Data.getItem(+s) && a && r.push({
                    hero: a,
                    isSel: !1,
                    needEle: i
                }));
        return r.sort((e, t) => t.hero.eatLvl - e.hero.eatLvl),
        r
    }
    getHeroNum() {
        return Object.keys(this.heroMap).length
    }
    reqProduce(t, e) {
        let i = pb.SkillProduceReq.create();
        return i.heroId = t,
        i.skillId = e,
        A(i, pb.ISkillProduceAck).then(e => {
            this.udpateHeroInfo(t, {
                produceTime: e.produceTime
            }),
            O.bag.getRewardItem(e.items) && Et(e.items),
            O.bag.updateItem(e.items)
        })
    }
    checkProdect(e) {
        if (!this.getHero(e.id))
            return !1;
        var t = this.getProduceSkill(e);
        if (!t)
            return !1;
        var t = Data.getSkillProduce(t).cd,
        e = e.produceTime,
        i = Date.newDate().getTime();
        return 0 == e || e + 1e3 * t < i
    }
    getProduceSkill(e) {
        var t = Data.getHeroSkin(e.skinId);
        if (t && Data.getSkillProduce(t.skillId))
            return t.skillId;
        let i = e.heroAndSkinSkill,
        s = 0;
        return i.forEach((e, t) => {
            Data.getSkillProduce(e) && (s = e)
        }),
        s
    }
    checkAllProduce() {
        for (var e in this.heroMap) {
            e = this.heroMap[e];
            if (this.checkProdect(e))
                return !0
        }
        return !1
    }
    getHeroSkins() {
        if (this.heroSkinData)
            return this.heroSkinData;
        for (var e in this.heroSkinData = [], Data.heroSkins) {
            e = Data.getHeroSkin(+e);
            this.heroSkinData.push(e)
        }
        return this.heroSkinData
    }
    getAllSkinNum() {
        let e = 0;
        for (var t in e = Object.keys(R.heroSkins).length, R.heros)
            R.heros[t].wearingSkin && e++;
        return e
    }
    getSortSkins() {
        let e = [],
        t = {},
        i = [];
        for (var s in R.heroSkins) {
            s = R.heroSkins[s];
            t[s.avatarID] ? t[s.avatarID]++ :  - (t[s.avatarID] = 1) == i.indexOf(s.skinID) && i.push(s.skinID)
        }
        for (var a in R.heros) {
            a = R.heros[a].wearingSkin;
            a && (t[a.avatarID] ? t[a.avatarID]++ :  - (t[a.avatarID] = 1) == i.indexOf(a.skinID) && i.push(a.skinID))
        }
        for (var r in t) {
            var n = t[r];
            e.push({
                avatarId: +r,
                num: n
            })
        }
        for (var o of this.getHeroSkins())
            Data.getItem(o.id) && -1 == i.indexOf(o.id) && e.push({
                avatarId: +o.id,
                num: 0
            });
        return e
    }
    getNextBuyData() {
        var e,
        t = this.getAllSkinNum();
        for (e in Data.buyVits) {
            var i = Data.getBuyVit(+e);
            if (i.needSkin > t)
                return i
        }
        return null
    }
    getAllHeroEnterLimit(e) {
        var t = e[0];
        let i = {
            flag: !0,
            info: ""
        };
        if (!t)
            return i;
        let s = [];
        var a,
        r = {
            0: _.earth,
            1: _.water,
            2: _.fire,
            3: _.wind
        };
        let n = null;
        for (a in r)
            r[a] == t[0] && (n = a);
        for (let i in R.heros) {
            let e = R.heros[i].allSkins;
            e.forEach(e => {
                var t;
                e.eles[n] && (s.length && -1 != (t = s.findIndex(e => e.heroId == i)) ? s[t].skin.eles[n] < e.eles[n] && (s[t].skin = e) : s.push({
                        heroId: i,
                        skin: e
                    }))
            })
        }
        s.sort((e, t) => t.skin.eles[n] - e.skin.eles[n]);
        let o = 0;
        for (let e = 0; e < 3; e++)
            s[e] && (o += s[e].skin.eles[n]);
        if (o >= t[1])
            return i;
        e = S({
            [_.earth]: 1134,
            [_.water]: 1135,
            [_.fire]: 1136,
            [_.wind]: 1137
        }
                [t[0]]);
        return i.flag = !1,
        i.info = S(1138, e, t[1], e),
        i
    }
    checkHigherEleSkin(e, t, i) {
        var s,
        a = {
            0: _.earth,
            1: _.water,
            2: _.fire,
            3: _.wind
        };
        let r = null;
        for (s in a)
            a[s] == e && (r = s);
        let n = i.filter(e => e.hero.id != t.id),
        o = !1,
        l = t.wearingSkin && t.wearingSkin.eles[r] || 0;
        for (let t in R.heros) {
            var h = R.heros[t],
            m = n.find(e => e.hero.id == t);
            if (o)
                break;
            if (!m) {
                let e = h.allSkins;
                m = h.wearingSkin && h.wearingSkin.eles[r] || 0;
                l < m ? o = !0 : e.forEach(e => {
                    l < e.eles[r] && (o = !0)
                })
            }
        }
        return o
    }
    checkHigherSkinOrHero(e, t, i) {
        let s = {
            skinHigher: !1,
            heroHigher: !1
        };
        var a,
        r = {
            0: _.earth,
            1: _.water,
            2: _.fire,
            3: _.wind
        };
        let n = null;
        for (a in r)
            r[a] == e && (n = a);
        let o = i.wearingSkin && i.wearingSkin.eles[n] || 0,
        l = t.wearingSkin && t.wearingSkin.eles[n] || 0,
        h = t.allSkins,
        m = !1;
        return h.forEach(e => {
            -1 != e.id && o < e.eles[n] && l < e.eles[n] && (m = !0)
        }),
        s.heroHigher = o < l && -1 == R.squad.indexOf(t.id),
        s.skinHigher = m,
        s
    }
    checkHasEquip(e) {
        var t = e.heroEquipInfos;
        let i = !1;
        for (let e = 0; e < t.length; e++) {
            var s = !t[e],
            a = O.bag.getEquipList(!1, e + 1);
            if (s && 0 < a.length) {
                i = !0;
                break
            }
        }
        return i
    }
    checkEquipGreen() {
        let e = !1;
        for (var t in this.heroMap) {
            t = this.heroMap[t];
            if (t.hasBetterEquip || O.hero.checkHasEquip(t)) {
                e = !0;
                break
            }
        }
        return e
    }
}
window.reqTest = function (e, t) {
    e = pb[e].create();
    return Object.assign(e, t),
    A(e, pb.IWearEquipAck).then(e => {
        console.log(e)
    })
};
let ni = new class {
    onErrorAck(e, t) {
        e.code == C.OtherLogined || e.code == C.BanAccount || e.code == C.BeKickoff ? O.login.handleErrorAck(e.code) : h(zt(e.code))
    }
    onUnknownPacket(e, t) {
        e.heroSkins && R.updateSkins(e.heroSkins)
    }
    onEnterGameAck(e, t) {
        O.login.onEnterGameAck(e, !0),
        console.log("onEnterGameAck:", t, e)
    }
    onServerStateNtf(e, t) {
        O.login.onServerState(e.serverType, e.offline)
    }
    onChatInfoNtf(e, t) {}
    onItemChangeNtf(e, t) {
        O.bag.updateItem(e.items, e.needPopup)
    }
    onUserInfoNtf(e, t) {
        R.init(e.userInfo)
    }
    onUserInfoChangeNtf(e, t) {
        R.userInfoChange(e)
    }
    onAccountInfoChangeNtf(e, t) {
        O.account.accountInfoChange(e)
    }
    onActHeroNtf(e) {
        O.hero.actHeroNtf(e)
    }
    onFovHerosEnterNtf(e, t) {
        O.battle.fovHerosEnterNtf(e)
    }
    onReviveNtf(e) {
        O.battle.reviveNtf(e)
    }
    onFovPlayersEnterNtf(e, t) {
        O.battle.fovPlayersEnterNtf(e)
    }
    onFovPlayersLeaveNtf(e, t) {
        O.battle.fovPlayersLeaveNtf(e)
    }
    onFovPlayersPropertyNtf(e, t) {
        O.battle.fovPlayersPropertyNtf(e)
    }
    onFovHerosLeaveNtf(e, t) {
        O.battle.fovHerosLeaveNtf(e)
    }
    onBattleMapInfoNtf(e, t) {
        O.battle.battleMapInfoNtf(e)
    }
    onMovePathNtf(e, t) {
        O.battle.heroMovePathNtf(e)
    }
    onFovHerosPropertyNtf(e, t) {
        O.battle.fovHerosPropertyNtf(e)
    }
    onFovHerosHPChangeNtf(e, t) {
        O.battle.fovHerosHPChangeNtf(e)
    }
    onFovHerosBuffNtf(e, t) {
        O.battle.fovHerosBuffNtf(e)
    }
    onFovHerosInfoChangeNtf(e, t) {
        O.battle.fovHerosInfoChangeNtf(e)
    }
    onFovNpcsEnterNtf(e, t) {
        O.battle.fovNpcsEnterNtf(e)
    }
    onFovNpcsLeaveNtf(e, t) {
        O.battle.fovNpcsLeaveNtf(e)
    }
    onFovNpcsMoveNtf(e, t) {
        O.battle.fovNpcsMoveNtf(e)
    }
    onFovNpcsPropertyNtf(e, t) {
        O.battle.fovNpcsPropertyNtf(e)
    }
    onFovNpcsHPChangeNtf(e, t) {
        O.battle.fovNpcsHPChangeNtf(e)
    }
    onFovNpcsBuffNtf(e, t) {
        O.battle.fovNpcsBuffNtf(e)
    }
    onFovChestsEnterNtf(e, t) {
        O.battle.fovChestsEnterNtf(e)
    }
    onFovChestsLeaveNtf(e, t) {
        O.battle.fovChestsLeaveNtf(e)
    }
    onFovChestsPropertyNtf(e, t) {
        O.battle.fovChestsPropertyNtf(e)
    }
    onBattleEventNtf(e) {
        O.battle.battleEventNtf(e)
    }
    onExecuteSkillNtf(e, t) {
        O.battle.executeSkillNtf(e)
    }
    onSkillDamageNtf(e, t) {
        O.battle.skillDamageNtf(e)
    }
    onSkillEventNtf(e) {
        O.battle.skillEventNtf(e)
    }
    onSkillRecoverNtf(e) {
        O.battle.skillRecoverNtf(e)
    }
    onSyncHeroInfoNtf(e) {
        O.battle.syncHeroInfoNtf(e)
    }
    onNPCDieNtf(e, t) {
        O.battle.npcDieNtf(e)
    }
    onHeroDieNtf(e, t) {
        O.battle.heroDieNtf(e)
    }
    onArenaEndFightAck(e) {
        O.battle.arenaEndFightAck(e)
    }
    onBattleEndNtf(e) {
        O.battle.battleEndNtf(e)
    }
    onDropItemsNtf(e) {
        O.battle.battleDropNtf(e)
    }
    onVitChangeNtf(e) {
        R.updateVit(e)
    }
    onSyncRechargeNtf(e) {
        R.updateRecharge(e.ids)
    }
    onPricesNtf(e) {
        O.account.updatePrices(e.tapTokenPrice)
    }
    onNewMailNtf(e) {
        O.mail.updateMail(e.mail)
    }
    onSysMsgNtf(e) {
        O.sysNotice.updateSys(e)
    }
    onTradeStatisticalNtf(e) {
        O.sysNotice.updateStc(e)
    }
    onBlockOverNtf(e) {
        O.tileMap.deleteBlock(e.blockSpawnId)
    }
    onBlockAppearNtf(e) {
        O.tileMap.appearBlock(e.block)
    }
};
class oi extends Laya.Sprite {
    constructor(e, t, i) {
        super(),
        this.m_portWidth = 0,
        this.m_portHeight = 0,
        this.m_shieldMap = !1,
        this.m_cellArr = [];
        var s = .5 * -Mmobay.adaptOffsetWidth,
        a = .5 * -Mmobay.adaptOffsetHeight;
        this.pos(s, a),
        this.m_id = e,
        this.m_info = t,
        this.m_shieldMap = i,
        this.m_portWidth = Laya.stage.width,
        this.m_portHeight = Laya.stage.height,
        this.m_mapLayer = new Laya.Sprite,
        this.addChild(this.m_mapLayer),
        this.m_extLayer = new Laya.Sprite,
        this.addChild(this.m_extLayer),
        this.mouseEnabled = !0,
        this.on(Laya.Event.CLICK, this, this.onClickMap),
        this.parseMap()
    }
    static loadMap(s, a) {
        let r = "hunt/fightmap/" + s + "/meta.json";
        return new Promise((t, e) => {
            var i = Laya.loader.getRes(r);
            if (i)
                return i = oi.create(s, i, a), t(i);
            Laya.loader.load(r, Laya.Handler.create(null, e => {
                    if (!e)
                        return console.log("load map json fail"), t(null);
                    e = oi.create(s, e, a);
                    return t(e)
                }))
        })
    }
    static create(e, t, i) {
        e = new oi(e, t, i);
        return Se(e, H.Fight),
        e
    }
    get id() {
        return this.m_id
    }
    get info() {
        return this.m_info
    }
    get portWidth() {
        return this.m_portWidth
    }
    get portHeight() {
        return this.m_portHeight
    }
    set shieldMap(e) {
        this.m_shieldMap = e
    }
    set touchHandler(e) {
        this.m_touchHandler = e
    }
    get extLayer() {
        return this.m_extLayer
    }
    get skinUrls() {
        let t = [];
        return this.m_cellArr.forEach(e => {
            t.push(e.__skin)
        }),
        t
    }
    onDestroy() {
        this.m_touchHandler && (this.m_touchHandler.recover(), this.m_touchHandler = null)
    }
    updateViewPort(e, t) {
        e -= this.portWidth / 2,
        t -= this.portHeight / 2,
        e < 0 ? e = 0 : e > this.width - this.portWidth && (e = this.width - this.portWidth),
        t < 0 ? t = 0 : t > this.height - this.portHeight && (t = this.height - this.portHeight),
        this.m_mapLayer.pos(-e, -t),
        this.m_extLayer.pos(-e, -t),
        this.updateCells()
    }
    addExtChild(e) {
        this.m_extLayer.addChild(e)
    }
    onClickMap(t) {
        if (!this.m_shieldMap && T.battle && T.battle.canClickMap) {
            T.battle.clearMapLoop();
            let e = Laya.Point.create().setTo(t.stageX, t.stageY);
            e = this.m_mapLayer.globalToLocal(e),
            this.m_touchHandler && this.m_touchHandler.runWith([e.x, e.y]),
            e.recover()
        }
    }
    parseMap() {
        var e = this.m_info.cols,
        s = this.m_info.rows,
        a = this.m_info.cellWidth,
        r = this.m_info.cellHeight;
        this.size(e * a, s * r);
        for (let i = 0; i < e; i++)
            for (let t = 0; t < s; t++) {
                let e = new Laya.Sprite;
                var n = i * a,
                o = t * r,
                n = (e.size(a, r), e.pos(n, o), new Laya.Rectangle(n, o, a, r));
                e.__rect = n,
                e.__skin = this.formatSkin(i, t),
                this.m_mapLayer.addChild(e),
                this.m_cellArr.push(e)
            }
    }
    formatInt(e, t) {
        return ("" + e).length < t ? (new Array(t + 1).join("0") + e).slice(-t) : "" + e
    }
    formatSkin(e, t) {
        var i,
        s;
        return this.m_info.isRepeat ? (i = e % this.m_info.repeatCfg.cols, s = t % this.m_info.repeatCfg.rows, this.m_info.prefix + this.formatInt(s * this.m_info.repeatCfg.cols + i + 1, 2) + ".jpg") : this.m_info.prefix + this.formatInt(t * this.m_info.cols + e + 1, 2) + ".jpg"
    }
    updateCells() {
        for (let e = 0; e < this.m_cellArr.length; e++) {
            const t = this.m_cellArr[e];
            this.checkOutView(t.__rect) ? t.visible = !1 : (t.texture || t.loadImage(t.__skin), t.visible = !0)
        }
    }
    checkOutView(e) {
        return e.x + e.width < -this.m_mapLayer.x || e.x > -this.m_mapLayer.x + this.portWidth || e.y + e.height < -this.m_mapLayer.y || e.y > -this.m_mapLayer.y + this.portHeight
    }
}
class li {
    constructor() {
        this._data = new Map,
        this._destroyed = !1
    }
    get dirty() {
        return this._dirty
    }
    set dirty(e) {
        this._dirty = e
    }
    get destroyed() {
        return this._destroyed
    }
    set destroyed(e) {
        this._destroyed = e
    }
    dtor() {
        this._data.clear(),
        this._dirty = !1,
        this._destroyed = !0
    }
    get(e) {
        return this._data.get(e)
    }
    set(e, t) {
        this._data.set(e, t)
    }
    setObj(e) {
        for (const t in e)
            this._data.set(t, e[t])
    }
    markDirty1(e, t) {
        this._data.get(e) != t && (this._dirty = !0, this._data.set(e, t))
    }
    markDirty2(e) {
        if (e)
            for (const t in e)
                this._data.get(t) != e[t] && (this._dirty = !0, this._data.set(t, e[t]))
    }
}
class hi extends li {
    static create(e) {
        let t = G.get(hi._sign, hi);
        return t.destroyed = !1,
        t.setData(e),
        t
    }
    get role() {
        return this.get("role")
    }
    set role(e) {
        this.set("role", e)
    }
    setData(e) {
        this.role = e,
        this._components = new Map
    }
    dtor() {
        this.clearComponent(),
        super.dtor()
    }
    recover() {
        this.dtor(),
        G.put(hi._sign, this)
    }
    addComponent(e) {
        this._components.set(e.type, e)
    }
    removeComponent(e) {
        this._components.delete(e.type),
        e.recover()
    }
    getComponent(e) {
        return this._components.get(e)
    }
    clearComponent() {
        for (var[e, t]of this._components)
            t.recover(), this._components.delete(e)
    }
}
hi._sign = "p_Entity";
class mi extends li {
    static registerComponent(e, t) {
        mi._componentCls[e] = t
    }
    static create(e, t) {
        var i = mi._componentCls[e.type];
        if (!i)
            return console.log("component class not found!==>" + e.type), null;
        let s = G.get(mi._sign + e.type, i);
        return s.destroyed = !1,
        s.setData(e, t),
        s
    }
    get type() {
        return this.get("type")
    }
    get entity() {
        return this.get("entity")
    }
    get system() {
        return this.get("system")
    }
    get role() {
        return this.entity.role
    }
    setData(e, t) {
        this.markDirty2(e),
        this.set("entity", t);
        let i = ci.getSystem(this.type);
        i.addComponent(this),
        this.set("system", i)
    }
    dtor() {
        this.system.removeComponent(this),
        super.dtor()
    }
    recover() {
        var e = this.type;
        this.dtor(),
        G.put(mi._sign + e, this)
    }
}
mi._sign = "p_Component",
mi._componentCls = {};
class ci extends li {
    constructor(e) {
        super(),
        this._components = [],
        this.type = e
    }
    static registerSystem(e, t) {
        ci._systemCls[e] = t
    }
    static getSystem(t) {
        let i = ci._systems.find(e => t == e.type);
        if (!i) {
            let e = ci._systemCls[t];
            if (!e)
                return console.log("system class not found!==>" + t), null;
            i = new e(t)
        }
        return ci.addSystem(i),
        i
    }
    static addSystem(e) {
        -1 == ci._systems.indexOf(e) && (ci._systems.push(e), ci._systems.sort((e, t) => t.proirity - e.proirity))
    }
    static removeSystem(e) {
        var t = ci._systems.indexOf(e);
        -1 != t && ci._systems.splice(t, 1),
        e.dtor()
    }
    static update() {
        ci._systems.forEach(e => {
            e.execute()
        })
    }
    static broadcast(t, i, ...s) {
        for (let e = 0; e < ci._systems.length; e++) {
            const a = ci._systems[e];
            a.type == t && a.receive(i, s)
        }
    }
    get type() {
        return this.get("type")
    }
    set type(e) {
        this.set("type", e)
    }
    get proirity() {
        return this.get("proirity") || 0
    }
    set proirity(e) {
        this.set("proirity", e)
    }
    addComponent(e) {
        -1 == this._components.indexOf(e) && this._components.push(e)
    }
    removeComponent(e) {
        e = this._components.indexOf(e);
        -1 != e && this._components.splice(e, 1),
        this._components.length || ci.removeSystem(this)
    }
    execute() {
        this._components.forEach(e => {
            this.run(e)
        })
    }
    run(e) {}
    receive(e, t) {}
}
ci._systemCls = {},
ci._systems = [];
class di {
    static getScaredPoint(e) {
        if (!e.scaredId)
            return null;
        var t = L.getRoleById(e.scaredId);
        if (!t)
            return null;
        var i = kt(t.root.x, t.root.y, e.root.x, e.root.y),
        s = Math.randRange(100, 200),
        a = e.root.x - t.root.x,
        t = (Math.atan2(e.root.y - t.root.y, a) + 45 * i) * Math.PI / 180,
        a = s * Math.sin(t),
        i = s * Math.cos(t),
        s = e.root.x + a,
        t = e.root.y - i;
        return {
            x: Math.floor(Math.min(Math.max(s, 0), L.mapview.width)),
            y: Math.floor(Math.min(Math.max(t, 0), L.mapview.height))
        }
    }
    static getTauntPoint(e) {
        if (e.tauntId) {
            var t = L.getRoleById(e.tauntId);
            if (t) {
                if (!e.usingSkill)
                    return null;
                var i = e.usingSkill.cfg.maxExecuteDistance,
                s = vt(e.root.x, e.root.y, t.root.x, t.root.y);
                if (s < i || 0 == s)
                    return null;
                var a = t.root.x - e.root.x,
                t = t.root.y - e.root.y,
                i = (s - i) / s;
                return {
                    x: Math.floor(e.root.x + i * a),
                    y: Math.floor(e.root.y + i * t)
                }
            }
        }
    }
    static getNearPoint(i) {
        var e = i.usingSkill;
        if (!e)
            return null;
        if (T.battle.needTarget && !i.lockTarget)
            return null;
        let s = null,
        a = 999999,
        r = i.leader,
        n = e.cfg.maxExecuteDistance,
        o = [];
        if (jt(i.lockTarget) ? (e = L.getRoleById(i.lockTarget), o = [e]) : i.lockTarget && (o = L.getRoleByUserId(i.lockTarget)), L.iteratorRole(t => {
                if ((!T.battle.needTarget || -1 != o.indexOf(t)) && i != t)
                    if (i.leader) {
                        let e = vt(r.root.x, r.root.y, t.root.x, t.root.y);
                        e <= 200 + i.size + t.size + n && e < a && (e = vt(i.root.x, i.root.y, t.root.x, t.root.y), a = e, s = t)
                    } else {
                        var e = vt(t.root.x, t.root.y, i.root.x, i.root.y);
                        e < a && (a = e, s = t)
                    }
            }, null, i.enemyGroup), !s)
            return null;
        e = vt(i.root.x, i.root.y, s.root.x, s.root.y);
        if (e < n + i.size + s.size || 0 == e)
            return null;
        var t = s.root.x - i.root.x,
        l = s.root.y - i.root.y,
        e = (e - n) / e;
        return {
            x: Math.floor(i.root.x + e * t),
            y: Math.floor(i.root.y + e * l)
        }
    }
    static findTargets(s, e) {
        let t = [],
        a = e.cfg;
        var i;
        if (s.tauntId)
            return (i = L.getOneRole(null, s.enemyGroup, e => {
                    return s.tauntId == e.rid && vt(s.root.x, s.root.y, e.root.x, e.root.y) <= a.maxExecuteDistance + s.size + e.size
                })) && t.push(i), t;
        let r = [];
        switch (a.lockTargetType) {
        case 1:
            r = s.myGroup;
            break;
        case 2:
            r = s.ourGroup;
            break;
        case 3:
            r = s.enemyGroup
        }
        let n = [];
        return jt(s.lockTarget) ? (i = L.getRoleById(s.lockTarget), n = [i]) : s.lockTarget && (n = L.getRoleByUserId(s.lockTarget)),
        t = 2041 == e.cfg.id ? L.getArrRole(null, r, e => {
            var t = vt(s.root.x, s.root.y, e.root.x, e.root.y),
            i = a.maxExecuteDistance + s.size + e.size;
            if (e.hasAbnormal())
                return t <= i
        }) : L.getArrRole(null, r, e => {
            var t = vt(s.root.x, s.root.y, e.root.x, e.root.y),
            i = a.maxExecuteDistance + s.size + e.size;
            return !(T.battle.needTarget && 3 != a.lockTargetType && !s.lockTarget) && (r[0] == s.enemyGroup[0] && T.battle.needTarget ? t <= i && -1 != n.indexOf(e) : t <= i)
        })
    }
}
var ui = Laya.ColorFilter;
class _i {
    static get RED() {
        let e = _i.filterObj.red;
        return e || (e = new ui([1, 0, 0, 0, 70, 0, 1, 0, 0, -30, 0, 0, 1, 0, -30, 0, 0, 0, 1, 1]), _i.filterObj.red = e),
        e
    }
    static get PURPLE() {
        let e = _i.filterObj.purple;
        return e || (e = new ui([1, 0, 0, 0, 50, 0, 1, 0, 0, -50, 0, 0, 1, 0, 200, 0, 0, 0, 1, 1]), _i.filterObj.purple = e),
        e
    }
    static get GREEN() {
        let e = _i.filterObj.green;
        return e || (e = new ui([1, 0, 0, 0, -50, 0, 1, 0, 0, 40, 0, 0, 1, 0, -20, 0, 0, 0, 1, 1]), _i.filterObj.green = e),
        e
    }
    static get BLUE() {
        let e = _i.filterObj.blue;
        return e || (e = new ui([1, 0, 0, 0, -80, 0, 1, 0, 0, -80, 0, 0, 1, 0, 50, 0, 0, 0, 1, 1]), _i.filterObj.blue = e),
        e
    }
    static get WHITE() {
        let e = _i.filterObj.white;
        return e || (e = new ui([1, 0, 0, 0, 200, 0, 1, 0, 0, 200, 0, 0, 1, 0, 200, 0, 0, 0, 1, 1]), _i.filterObj.white = e),
        e
    }
}
_i.filterObj = {},
window.Filter = _i;
class pi extends Laya.Sprite {
    constructor() {
        super(),
        this.m_isSelf = !1,
        this.m_url = "",
        this.m_rate = .5,
        this.m_loop = !1,
        this.m_count = 0,
        this.m_loaded = !1,
        this.m_index = -1,
        this.m_settedPos = !1,
        this.size(100, 100).pivot(50, 50)
    }
    static create(e, t) {
        let i = G.get(pi._sign, pi);
        return i.setData(e, t),
        i
    }
    onDestroy() {
        this.m_tlFlash && (this.m_tlFlash.destroy(), this.m_tlFlash = null),
        this.m_tlShake && (this.m_tlShake.destroy(), this.m_tlShake = null),
        this.m_skeleton = null,
        this.m_templet && (this.m_templet.off(Laya.Event.COMPLETE, this, this.onLoadComplete), this.m_templet.off(Laya.Event.ERROR, this, this.onLoadError), this.m_templet.recover(), this.m_templet = null)
    }
    setData(e, t) {
        this.m_url = e,
        this.m_loadHandler = t,
        this.m_templet = Te.create(this.m_url),
        this.m_templet.once(Laya.Event.COMPLETE, this, this.onLoadComplete),
        this.m_templet.once(Laya.Event.ERROR, this, this.onLoadError),
        this.m_templet.loadAni()
    }
    recover() {
        this.destroyed || (this.filters = null, this.removeSelf(), this.m_tlFlash && (this.m_tlFlash.destroy(), this.m_tlFlash = null), this.m_tlShake && (this.m_tlShake.destroy(), this.m_tlShake = null), this.m_skeleton && !this.m_skeleton.destroyed && this.m_skeleton.destroy(), this.m_skeleton = null, this.m_templet && (this.m_templet.off(Laya.Event.COMPLETE, this, this.onLoadComplete), this.m_templet.off(Laya.Event.ERROR, this, this.onLoadError), this.m_templet.recover(), this.m_templet = null), this.m_url = "", this.m_rate = .5, this.m_loop = !1, this.m_count = 0, this.m_loaded = !1, this.m_index = -1, this.m_settedPos = !1, this.m_loadHandler = null, this.m_playHandler = null, G.put(pi._sign, this))
    }
    changeColor(e) {
        let t = (this.filters || []).filter(e => e == _i.BLUE);
        switch (e) {
        case 8:
            t = t.concat(_i.RED);
            break;
        case 9:
            t = t.concat(_i.PURPLE);
            break;
        case 10:
            t = t.concat(_i.GREEN)
        }
        this.filters = t
    }
    showFlash() {
        this.m_tlFlash || this.m_tlShake || (this.m_tlFlash = new Laya.TimeLine, this.m_tlFlash.to(this, {
                alpha: .4
            }, 50).to(this, {
                alpha: 1
            }, 50), this.m_tlShake = new Laya.TimeLine, this.m_tlShake.to(this, {
                x: 50 + Math.randRange(4, 8) * (.5 < Math.random() ? 1 : -1),
                y: 50 + Math.randRange(4, 8) * (.5 < Math.random() ? 1 : -1)
            }, 25), this.m_tlShake.play(0, !0), this.m_tlFlash.play(0, !0), Laya.timer.once(300, this, () => {
                this.destroyed || (this.m_tlFlash && this.m_tlFlash.destroy(), this.m_tlFlash = null, this.m_tlShake && this.m_tlShake.destroy(), this.m_tlShake = null, this.x = this.y = 50, this.alpha = 1)
            }))
    }
    showTestFlash() {
        var e,
        t;
        !_e("flash", this.m_isSelf ? 0 : 90) || this.m_tlFlash || this.m_tlShake || (e = this.m_isSelf ? .7 : .6, t = this.m_isSelf ? 90 : 70, this.m_tlFlash = new Laya.TimeLine, this.m_tlFlash.to(this, {
                alpha: e
            }, t).to(this, {
                alpha: 1
            }, 70), this.m_tlShake = new Laya.TimeLine, t = e = this.m_isSelf ? .4 : 1, this.m_tlShake.to(this, {
                x: 50 + Math.randRange(4, 8) * (.5 < Math.random() ? 1 : -1) * e,
                y: 50 + Math.randRange(4, 8) * (.5 < Math.random() ? 1 : -1) * t
            }, 90), this.m_tlShake.play(0, !0), this.m_tlFlash.play(0, !0), Laya.timer.once(300, this, () => {
                this.destroyed || (this.m_tlFlash && this.m_tlFlash.destroy(), this.m_tlFlash = null, this.m_tlShake && this.m_tlShake.destroy(), this.m_tlShake = null, this.x = this.y = 50, this.alpha = 1)
            }))
    }
    play(e = 0, t = 0, i = .5, s = null) {
        var a = 0 == t;
        this.m_index == e && this.m_loop == a || (a && (s = null), this.m_index = e, this.m_loop = a, this.m_count = t, this.m_rate = i, this.m_playHandler = s, this._play())
    }
    stop() {
        this.m_skeleton && this.m_skeleton.stop()
    }
    resume() {
        this.m_skeleton && this.m_skeleton.resume()
    }
    _play() {
        var e;
        this.m_loaded && this.m_skeleton && ((this.m_index < 0 || this.m_index >= this.m_skeleton.getAnimNum()) && (this.m_index = 0), this.m_skeleton.playbackRate(this.m_rate), this.m_skeleton.play(this.m_index, this.m_loop), this.m_settedPos || (this.m_settedPos = !0, e = this.m_skeleton.getBounds(), this.m_skeleton.pos(50, 100), this.m_loadHandler && (this.m_loadHandler.runWith([e.height]), this.m_loadHandler = null)))
    }
    onLoadComplete() {
        if (!this.destroyed) {
            this.m_loaded = !0;
            let e = this.m_skeleton = this.m_templet.buildSkeleton();
            e.on(Laya.Event.STOPPED, this, this.onPlayStop),
            this.addChild(e),
            this._play()
        }
    }
    onLoadError() {
        console.log("load spine error==>" + this.m_url)
    }
    onPlayStop() {
        if (this.m_count--, 0 < this.m_count)
            this._play();
        else if (this.m_playHandler) {
            var e = this.m_playHandler.caller;
            if (e && e.destroyed)
                return this.m_playHandler.recover(), void(this.m_playHandler = null);
            this.m_index = -1,
            this.m_playHandler.run(),
            this.m_playHandler = null
        }
    }
}
pi._sign = "p_AniWrap";
class gi extends Laya.Label {
    constructor() {
        super(),
        this.anchorX = this.anchorY = .5
    }
    onDestroy() {
        Laya.timer.clearAll(this),
        this.m_tl && (this.m_tl.destroy(), this.m_tl = null),
        this.m_tlShake && (this.m_tlShake.destroy(), this.m_tlShake = null)
    }
    static create(e, t, i, s = 1) {
        let a = G.get(gi._sign, gi);
        return a.anchorX = a.anchorY = .5,
        a.zOrder = 1200,
        a.setData(e, t, i, s),
        a
    }
    setData(i, s, e, a = 1) {
        0 == s ? (this.font = "10", this.text = "+" + i) : 1 != s && (2 == s || 4 == s ? (this.font = "11", this.text = -i + "") : 3 == s && (this.font = "12", this.text = -i + ""));
        let r = this.m_tl = new Laya.TimeLine;
        var i = e.root.y - Math.randRange(90, 110),
        t = e.root.x + Math.randRange(-20, 20);
        this.pos(t || 0, i || 0),
        this.alpha = 1,
        e.root.parent.addChild(this);
        let n = 0;
        if (3 == s || 4 == s) {
            let e = new Laya.Image,
            t = (3 == s ? e.skin = "hunt/ui_fight/crit.png" : 4 == s && (e.skin = "hunt/ui_fight/reflection.png"), e.centerY = 0, e.left = -40, this.addChild(e), this.m_img = e, r.to(this, {
                    scaleX: 2.5 * a,
                    scaleY: 2.5 * a
                }, 120, null).to(this, {
                    scaleX: +a,
                    scaleY: +a,
                    alpha: .8
                }, 320, null, 50).to(this, {
                    alpha: .4,
                    y: i - Math.randRange(20, 30)
                }, 340, null), this.m_tlShake = new Laya.TimeLine);
            t.to(this, {
                anchorX: .5 + Math.randRange(2, 4) / 100 * (.5 < Math.random() ? 1 : -1),
                anchorY: .5 + Math.randRange(2, 4) / 100 * (.5 < Math.random() ? 1 : -1)
            }, 5),
            t.play(0, !0),
            Laya.timer.once(200, this, () => {
                t.destroy(),
                this.m_tlShake = null
            }),
            n = 830
        } else {
            let e = 1 != a ? 100 : 0;
            r.to(this, {
                scaleX: 1.5 * a,
                scaleY: 1.5 * a
            }, 80, null).to(this, {
                scaleX: +a,
                scaleY: +a,
                alpha: .8
            }, 200 + e, null, 50).to(this, {
                alpha: .4,
                y: i - Math.randRange(20, 30)
            }, 300 + e, null),
            n = 630 + 2 * e
        }
        r.play(0, !1),
        Laya.timer.once(n, this, () => {
            this.recover()
        })
    }
    recover() {
        Laya.timer.clearAll(this),
        this.destroyed || (this.removeSelf(), this.m_img && (this.m_img.destroy(), this.m_img = null), this.m_tl && (this.m_tl.destroy(), this.m_tl = null), this.m_tlShake && (this.m_tlShake.destroy(), this.m_tlShake = null), G.put(gi._sign, this))
    }
}
gi._sign = "p_HurtLabel";
class yi extends Laya.Sprite {
    constructor() {
        super(),
        this.m_buffs = [],
        this.size(100, 100).pivot(50, 100),
        this.zOrder = 1
    }
    static registerNameWrap(e, t) {
        yi.s_nameCls[e] = t
    }
    static create(e) {
        var t = yi.s_nameCls[e.nameType];
        if (!t)
            return console.log("namewrap clss not found!==>" + e.nameType), null;
        let i = G.get(yi._sign + e.nameType, t);
        return i.scale(1, 1),
        i.setData(e),
        i.visible = !0,
        i
    }
    get nameType() {
        return this.m_type
    }
    setData(e) {
        this.m_rid = e.rid,
        this.m_type = e.nameType,
        this.m_data = e
    }
    recover() {
        this.destroyed || (this.m_maxHp = 0, this.removeSelf(), this.m_box_Buff && this.m_box_Buff.destroyChildren(), this.m_img_Abnormal && (this.m_img_Abnormal.visible = !1), this.m_txt_Name && (this.m_txt_Name.text = ""), this.m_buffs = [], G.put(yi._sign + this.m_type, this))
    }
    changeHp(e, t = 0) {}
    changeShield(e, t) {}
    changeBuff(e) {}
}
yi._sign = "p_NameWrap",
yi.s_nameCls = {};
class vi extends yi {
    constructor() {
        super(),
        this.m_hpSkin = "hunt/ui_fight/progress_hp1.png",
        this.m_ShieldSkin = "hunt/ui_fight/progress_hp2.png"
    }
    onAwake() {
        this.setBaseUI()
    }
    setBaseUI() {
        let e = this.m_bar_Shield = new Laya.ProgressBar(this.m_ShieldSkin),
        t = (e.sizeGrid = "4,4,4,4", e.size(80, 10), e.value = 1, e.centerX = 0, e.bottom = 13, e.visible = !1, this.addChild(e), this.m_bar_Hp = new Laya.ProgressBar(this.m_hpSkin)),
        i = (t.sizeGrid = "4,4,4,4", t.size(80, 14), t.value = 1, t.centerX = 0, t.bottom = 0, this.addChild(t), this.m_box_Buff = new Laya.Box),
        s = (i.centerX = 0, i.bottom = 25, i.width = 75, this.addChild(i), this.m_img_Abnormal = new Laya.Image);
        s.size(40, 40),
        s.left = 90,
        s.bottom = -12,
        this.addChild(s)
    }
    setData(e) {
        super.setData(e)
    }
    recover() {
        this.m_bar_Shield.value = 0,
        this.m_bar_Shield.visible = !1,
        this.m_bar_Hp.value = 1,
        super.recover()
    }
    changeHp(e = 0, t = !1) {
        t && this.m_maxHp || (this.m_maxHp || (t = L.getRoleById(this.m_rid), this.m_maxHp = t.propData.maxHp), this.m_bar_Hp.value = e / this.m_maxHp)
    }
    changeShield(e, t) {
        this.m_bar_Shield.value = e / (t || 1),
        this.m_bar_Shield.visible = 0 < e
    }
    changeBuff(e) {
        this.m_box_Buff.destroyChildren();
        var i,
        t = {
            [g.atkSpeed]: [1, 2],
            [g.critical]: [5, 4],
            [g.dodge]: [7, 6],
            [g.beAmp]: [13, 3],
            [g.amp]: [11, 12],
            [g.attack]: [11, 12]
        },
        s = e.props;
        let a = 0;
        for (i in s) {
            var r = t[i];
            if (0 != s[i] && r) {
                let e = new Laya.Image,
                t = (e.size(25, 25), e.pos(a % 3 * 27, 27 * Math.floor(a / 3)), 0 < s[i] ? e.skin = `hunt/ui_fight/buff_${r[1]}.png` : e.skin = `hunt/ui_fight/buff_${r[0]}.png`, this.m_box_Buff.addChild(e), new Laya.Label);
                t.font = "1",
                t.text = Math.max(1, Math.floor(Math.abs(s[i]) / yt * 10)) + "",
                t.right = 4,
                t.bottom = 2,
                t.scale(.5, .5),
                e.addChild(t),
                a++
            }
        }
        e.abnormal ? (this.m_img_Abnormal.skin = `hunt/ui_fight/buff_${e.abnormal}.png`, this.m_img_Abnormal.visible = !0) : (this.m_img_Abnormal.skin = "", this.m_img_Abnormal.visible = !1)
    }
}
class ki extends vi {
    constructor() {
        super(...arguments),
        this.m_hpSkin = "hunt/ui_fight/progress_hp0.png",
        this.m_ShieldSkin = "hunt/ui_fight/progress_hp2.png"
    }
    onAwake() {
        this.setBaseUI()
    }
}
class fi extends yi {
    constructor() {
        super(),
        this.m_doingAni = !1,
        this.m_curHp = 0,
        this.m_preHp = 0,
        this.m_barWidth = 380,
        this.m_barIndex = 0,
        this.m_hpUnit = 100,
        O.on(c.BATTLE_UILOADED, this, this.checkParent),
        this.mouseThrough = !0
    }
    setData(e) {
        super.setData(e),
        this.m_barUI || (this.m_barUI = new t.hunt.views.fight.NameBarBossUI, this.m_barUI.pivotX = 280, this.m_barUI.pivotY = 75, this.m_barUI.pos(50, 50), this.m_barUI.mouseThrough = !0),
        this.m_barUI.visible = !1,
        this.addChild(this.m_barUI),
        this.checkParent(),
        this.checkBaseShow()
    }
    recover() {
        super.recover(),
        O.off(c.BATTLE_UILOADED, this, this.checkParent),
        Laya.timer.clearAll(this),
        this.m_barUI && !this.m_barUI.destroyed && this.m_barUI.destroy(),
        this.m_barUI = null,
        this.m_curHp = 0
    }
    checkParent() {
        if (!this.parent) {
            let e = T.battle.battleUI;
            e && (e.zOrder = -1, e.addChild(this))
        }
    }
    checkBaseShow() {
        var e = L.getOneRole(ht.Boss, mt.Enemy);
        e && (e = e.propData, this.changeHp(e.hp, !0))
    }
    changeHp(e, t = !1) {
        t && this.m_maxHp ? this.visible = !0 : (this.m_maxHp || (t = L.getRoleById(this.m_rid), this.m_maxHp = t.propData.maxHp, this.m_hpUnit = Math.ceil(this.m_maxHp / 5)), this.checkBossHp(e))
    }
    checkBossHp(t) {
        if (this.checkParent(), t > this.m_curHp && !this.m_curHp) {
            var i = L.getOneRole(ht.Boss, []),
            i = (i && this.m_curHp && b.create({
                    url: "hunt/effect/recover.atlas",
                    parent: i.root,
                    px: 50,
                    py: 50,
                    autoPlay: !0,
                    autoRemove: !0,
                    scale: 3,
                    interval: 70
                }), Math.ceil(t / this.m_hpUnit));
            this.m_barIndex = (i - 1) % (this.m_barUI.m_box_Hp.numChildren - 1) + 1,
            this.m_curHp = t,
            this.m_preHp = t,
            this.m_doingAni = !1;
            let e = 0;
            i = t % this.m_hpUnit,
            i = (i && (e = i / this.m_hpUnit * this.m_barWidth), this.updateHpInfo(e), this.m_barUI.m_txt_Name.text = this.m_data.name, T.battle.createOpt.blockId),
            i = Data.getBlock(i);
            this.m_barUI.m_txt_Lv.text = i.star + "",
            this.m_barUI.m_img_Head.skin = `hunt/ui_monster/${this.m_data.showId}.png`
        } else
            this.m_curHp = t, this.m_doingAni || this.doHpAni();
        this.m_barUI.visible = !0
    }
    updateHpInfo(i = 0) {
        let s = this.m_barUI,
        a = 0;
        if (this.m_curHp > this.m_preHp ? (a = Math.ceil(this.m_curHp / this.m_hpUnit)) > this.m_barIndex && this.m_barIndex++ : a = Math.ceil(this.m_preHp / this.m_hpUnit), s.m_txt_Num.text = "x" + a, s.m_txt_Num.visible = 0 < a, !(a <= 0)) {
            this.m_barIndex <= 0 && 5 < this.m_barIndex && (this.m_barIndex = 5);
            for (let t = 0; t < s.m_box_Hp.numChildren; t++) {
                let e = s.m_box_Hp.getChildAt(t);
                e.visible = t == this.m_barIndex || t == this.m_barIndex - 1 && 0 < this.m_barIndex - 1 && 1 <= a,
                t == this.m_barIndex ? i && (e.width = i) : e.width = this.m_barWidth
            }
        }
    }
    doHpAni() {
        let s = this.m_barUI;
        if (this.updateHpInfo(), !(this.m_preHp <= 0 || this.m_curHp == this.m_preHp)) {
            this.m_doingAni = !0;
            let i = 200;
            if (this.m_curHp >= this.m_preHp) {
                var a = L.getOneRole(ht.Boss, mt.Enemy),
                a = (a && gi.create(this.m_curHp - this.m_preHp, 0, a, 2.5), Math.abs((this.m_preHp - this.m_curHp) % this.m_hpUnit));
                this.m_preHp = this.m_curHp;
                let e = s.m_box_Hp.getChildAt(this.m_barIndex);
                a = a / this.m_hpUnit * this.m_barWidth;
                e ? (i = 1e3, e.width = 0, Laya.Tween.clearAll(e), Laya.Tween.to(e, {
                        width: a
                    }, i), Laya.timer.once(i, this, () => {
                        this.m_doingAni = !1
                    })) : this.m_doingAni = !1
            } else {
                var a = Math.floor((this.m_preHp - this.m_curHp) / this.m_hpUnit),
                r = (this.m_preHp - this.m_curHp) % this.m_hpUnit;
                1e3 < a ? i /= Math.randRange(500, 1e3) : 500 < a ? i /= Math.randRange(200, 400) : 100 < a ? i /= Math.randRange(50, 100) : 10 < a && (i /= Math.randRange(2, 10));
                let e = 0,
                t = 0;
                var n = s.m_box_Hp.getChildAt(this.m_barIndex);
                a ? t = n.width < this.m_barWidth ? n.width / this.m_barWidth * this.m_hpUnit : this.m_hpUnit : r / this.m_hpUnit * this.m_barWidth > n.width ? t = n.width / this.m_barWidth * this.m_hpUnit : (t = r, e = n.width - r / this.m_hpUnit * this.m_barWidth),
                t = Math.ceil(t * (10 < a ? .1 * a : 1)),
                console.log("endwidth:", e),
                Laya.Tween.clearAll(n),
                Laya.Tween.to(n, {
                    width: e
                }, i),
                Laya.timer.once(i, this, () => {
                    this.m_doingAni = !1,
                    this.m_preHp -= t,
                    this.m_preHp < 0 && (this.m_preHp = 0),
                    Math.ceil(e) || this.m_barIndex--,
                    this.doHpAni()
                })
            }
        }
    }
}
class Ii extends yi {
    constructor() {
        super(),
        this.m_hpSkin = "hunt/ui_fight/progress_hp1.png",
        this.m_ShieldSkin = "hunt/ui_fight/progress_hp2.png"
    }
    onAwake() {
        this.setBaseUI()
    }
    setBaseUI() {
        if (!this.m_txt_Name) {
            let e = this.m_txt_Name = new Laya.Label;
            e.fontSize = 20,
            e.bold = !0,
            e.color = "#ffffff",
            e.centerX = 0,
            e.bottom = 25,
            e.stroke = 2,
            e.strokeColor = "#51413B",
            this.addChild(e)
        }
    }
    setData(e) {
        super.setData(e),
        this.m_txt_Name || this.setBaseUI(),
        this.m_txt_Name.text = e.name
    }
}
class bi extends Laya.Sprite {
    constructor() {
        super(),
        this.size(100, 100).pivot(50, 50);
        let e = this.m_sprCon = new Laya.Sprite;
        e.size(100, 100).pivot(50, 50).pos(50, 50),
        this.addChild(e)
    }
    static create(e) {
        let t = G.get(bi._sign, bi);
        return t.setData(e),
        t
    }
    get aniWrap() {
        return this.m_aniWrap
    }
    get nameWrap() {
        return this.m_nameWrap
    }
    onDestroy() {
        Laya.Tween.clearAll(this),
        this.removeFlyTl(),
        this.removeDeathTl()
    }
    setData(t) {
        var e = Data.getSpineParam(t.showId);
        if (t.nameType) {
            if (t.nameType == _t.Boss)
                this.m_nameWrap = yi.create(t);
            else if (t.nameType == _t.City) {
                let e = this.m_nameWrap = yi.create(t);
                e.pos(50, 30),
                this.m_sprCon.addChild(e)
            } else {
                let e = this.m_nameWrap = yi.create(t);
                e.pos(50, 0),
                this.m_sprCon.addChild(e)
            }
            this.m_nameWrap && (this.m_nameWrap.nameType == _t.Boss ? (this.m_nameWrap.y = 190, this.m_nameWrap.x = 280) : e && e.haemal.length && (this.m_nameWrap.y -= e.haemal[1], this.m_nameWrap.x += e.haemal[0]))
        }
        e = "hunt/role/" + t.showId + ".json";
        let i = this.m_aniWrap = pi.create(e, null);
        i.m_isSelf = t.group == mt.Self,
        i.pos(50, 50),
        this.scale(1, 1),
        this.alpha = 1,
        this.blendMode = null,
        this.m_sprCon.addChild(i)
    }
    recover() {
        this.destroyed || (this.filters = null, this.m_sprCon.scale(1, 1), Laya.Tween.clearAll(this), this.offAll(Laya.Event.CLICK), this.removeSelf(), this.removeFlyTl(), this.removeStunEffect(), this.removeDeathTl(), this.m_nameWrap && (this.m_nameWrap.recover(), this.m_nameWrap = null), this.m_aniWrap && (this.m_aniWrap.recover(), this.m_aniWrap = null), this.m_moveUpdate = null, this.m_moveComplete = null, this.m_deathComplete = null, G.put(bi._sign, this))
    }
    stop() {
        Laya.Tween.clearAll(this),
        this.m_moveComplete && (this.m_moveComplete.recover(), this.m_moveComplete = null),
        this.m_moveUpdate && (this.m_moveUpdate.recover(), this.m_moveUpdate = null)
    }
    move(e, t, i, s, a) {
        this.stop(),
        this.m_moveComplete = a,
        this.m_moveUpdate = s,
        Laya.Tween.to(this, {
            x: e,
            y: t,
            update: s
        }, i, null, Laya.Handler.create(this, this.onMoveComplete), 0, !0)
    }
    death(e) {
        if (this.stop(), this.removeDeathTl(), this.m_deathComplete = e, this.m_aniWrap && this.m_aniWrap.stop(), this.m_nameWrap && (this.m_nameWrap.recover(), this.m_nameWrap = null), !this.destroyed) {
            this.filters = [_i.WHITE],
            this.alpha = .5;
            let e = this.m_tlDeath = new Laya.TimeLine;
            e.scale = Math.min(5 * Laya.timer.scale, 1),
            this.scale(1.2, 1.2),
            e.to(this, {
                scaleX: 0,
                scaleY: 0
            }, 400, Laya.Ease.quadIn),
            e.once(Laya.Event.COMPLETE, this, this.onDeathComplete),
            e.play(0, !1)
        }
    }
    fly() {
        this.removeFlyTl();
        let e = this.m_tlFly = new Laya.TimeLine;
        var t = 50 != this.m_sprCon.y ? this.m_sprCon.y - 50 : -50;
        e.to(this.m_sprCon, {
            y: t,
            scaleX: 1.4,
            scaleY: 1.4
        }, 150, Laya.Ease.cubicOut).to(this.m_sprCon, {
            y: 50,
            scaleX: 1,
            scaleY: 1
        }, 250, Laya.Ease.bounceOut),
        e.play(0, !1)
    }
    addStunEffect() {
        this.m_effectFly || (this.m_effectFly = b.create({
                url: "hunt/effect/stun.atlas",
                parent: this.aniWrap,
                px: 50,
                py: 0,
                loop: !0,
                autoPlay: !0
            }))
    }
    removeStunEffect() {
        this.m_effectFly && (this.m_effectFly.recover(), this.m_effectFly = null)
    }
    addRecoverEffect() {
        b.create({
            url: "hunt/effect/recover.atlas",
            parent: this,
            px: 50,
            py: 50,
            autoPlay: !0,
            autoRemove: !0,
            interval: 70
        }),
        I.instance.playSound(v.SE_Heal)
    }
    add70PerEffect() {
        b.create({
            url: "hunt/effect/1100_beAtk.atlas",
            parent: this.parent,
            px: this.x,
            py: this.y,
            autoPlay: !0,
            autoRemove: !0,
            interval: 70,
            scale: 2
        })
    }
    addBuffEffect(e, t) {
        e && (b.create({
                url: "hunt/effect/buffUp.atlas",
                parent: this,
                px: 50,
                py: 50,
                autoPlay: !0,
                autoRemove: !0,
                interval: 70
            }), I.instance.playSound(v.SE_Buff)),
        t && (b.create({
                url: "hunt/effect/buffDown.atlas",
                parent: this,
                px: 50,
                py: 50,
                autoPlay: !0,
                autoRemove: !0,
                interval: 70
            }), I.instance.playSound(v.SE_Debuff))
    }
    onMoveComplete() {
        this.m_moveComplete && this.m_moveComplete.runWith(null),
        this.m_moveUpdate && this.m_moveUpdate.recover(),
        this.m_moveComplete = null,
        this.m_moveUpdate = null
    }
    onDeathComplete() {
        this.m_deathComplete && this.m_deathComplete.runWith(null),
        this.m_deathComplete = null
    }
    removeFlyTl() {
        this.m_tlFly && (this.m_tlFly.destroy(), this.m_tlFly = null)
    }
    removeDeathTl() {
        this.m_tlDeath && (this.m_tlDeath.destroy(), this.m_tlDeath = null)
    }
}
bi._sign = "p_RoleWrap";
class wi extends Laya.Image {
    constructor() {
        super(),
        this.anchorX = this.anchorY = .5,
        this.skin = "hunt/ui_fight/miss.png"
    }
    static create(e) {
        let t = G.get(wi._sign, wi);
        return t.anchorX = t.anchorY = .5,
        t.zOrder = 1200,
        t.setData(e),
        t
    }
    onDestroy() {
        super.onDestroy(),
        this.m_tl && (this.m_tl.destroy(), this.m_tl = null)
    }
    setData(e) {
        this.m_tl && (this.m_tl.destroy(), this.m_tl = null);
        let t = this.m_tl = new Laya.TimeLine;
        var i = e.root.y - Math.randRange(90, 110),
        s = e.root.x + Math.randRange(-20, 20);
        this.pos(s || 0, i || 0),
        this.alpha = 1,
        e.root.parent.addChild(this),
        t.to(this, {
            scaleX: 1.5,
            scaleY: 1.5
        }, 80, null).to(this, {
            scaleX: 1,
            scaleY: 1,
            alpha: .8
        }, 200, null, 50).to(this, {
            alpha: .4,
            y: i - Math.randRange(20, 30)
        }, 300, null),
        t.play(0, !1),
        Laya.timer.once(630, this, () => {
            this.recover()
        })
    }
    recover() {
        this.destroyed || (this.removeSelf(), this.m_tl && (this.m_tl.destroy(), this.m_tl = null), G.put(wi._sign, this))
    }
}
wi._sign = "p_HurtImg";
class Ci extends Laya.Sprite {
    constructor() {
        super(),
        this.m_tId = -1,
        this.isSpecial = !1,
        this.isPicking = !1,
        this.pivotX = this.pivotY = 25
    }
    static create(e) {
        let t = G.get(Ci._sign, Ci);
        return t.visible = !0,
        t.width = t.height = 50,
        t.pivotX = t.pivotY = 25,
        t.isPicking = !1,
        e.isBossBox ? t.setBossBox(e) : e.special ? t.setSpecial(e) : t.setData(e),
        t.zOrder = 0,
        t.isSpecial = !!e.special,
        t.m_tId < 0 && (t.m_tId = Ci.lootId++),
        L.allLootItems.push(t),
        t
    }
    static createFake(e, t) {
        let i = G.get(Ci._sign, Ci);
        return i.width = i.height = 50,
        i.pivotX = i.pivotY = 25,
        i.zOrder = 1200,
        i.setDataFake(e, t),
        i.alpha = .9,
        i.scale(t.scaleX, t.scaleY),
        i
    }
    setData(e) {
        this.clearEffectSpine(),
        this.m_shadow || (this.m_shadow = new Laya.Image),
        this.m_shadow.skin = "hunt/ui_fight/shadow.png",
        this.m_shadow.size(90, 74),
        this.m_shadow.centerX = 0,
        this.m_shadow.centerY = 20,
        this.addChild(this.m_shadow),
        this.m_shadow.visible = !0;
        var t = e.itemId;
        4 == t ? (this.m_effect && (this.m_effect.recover(), this.m_effect = null), this.m_effect = b.create({
                url: "hunt/ue/16.atlas",
                parent: this,
                px: 25,
                py: 25,
                autoPlay: !0,
                autoRemove: !1,
                loop: !0
            }), this.m_img && (this.m_img.visible = !1)) : (this.m_img || (this.m_img = new Laya.Image), this.m_effect && (this.m_effect.recover(), this.m_effect = null), s = Data.getItem(t), this.m_img.size(50, 50), this.m_img.centerX = this.m_img.centerY = 0, this.m_img.skin = `hunt/ui_item/${s.icon}.png`, this.m_img.visible = !0, this.addChild(this.m_img)),
        this.setLightImg(t),
        this.x = e.fromPos.x + Math.randRange(0, 100) * (.5 < Math.random() ? 1 : -1),
        this.y = e.fromPos.y;
        let i = L.mapview.extLayer;
        i.addChild(this);
        var s = .5 < Math.random() ? 1 : -1,
        t = e.moreDis ? 90 : 30;
        Laya.Tween.to(this, {
            x: this.x + t * s
        }, 500);
        let a = this.m_tl = new Laya.TimeLine;
        a.to(this, {
            y: e.fromPos.y - 30,
            scaleX: 1.2,
            scaleY: 1.2
        }, 150, Laya.Ease.cubicOut).to(this, {
            y: e.fromPos.y + 50,
            scaleX: 1,
            scaleY: 1
        }, 350, Laya.Ease.bounceOut),
        a.play(0, !1),
        (this.m_data = e).isAuto && Laya.timer.once(5e3, this, () => {
            this.m_tlFly || this.flyToTarget()
        }),
        e.moreDis || Laya.timer.frameLoop(4, this, this.checkPickDis)
    }
    setSpecial(e) {
        this.clearEffectSpine();
        var t = e.fromBoss ? "box2" : "box1";
        this.m_shadow || (this.m_shadow = new Laya.Image),
        this.m_shadow.skin = "hunt/ui_fight/shadow.png",
        e.fromBoss ? this.m_shadow.size(270, 222) : this.m_shadow.size(154, 126),
        this.m_shadow.centerX = -30,
        this.m_shadow.centerY = -20,
        this.m_shadow.visible = !0,
        this.addChild(this.m_shadow),
        this.m_img && (this.m_img.visible = !1),
        this.m_spine = Ee.create({
            url: "hunt/spine/" + t + ".json",
            parent: this,
            px: 0,
            py: 0,
            scale: e.fromBoss ? .7 : .5
        }),
        this.m_spine.play(0, !1),
        this.x = e.fromPos.x,
        this.y = e.fromPos.y;
        let i = L.mapview.extLayer,
        s = (i.addChild(this), this.alpha = 0, this.m_tl = new Laya.TimeLine);
        s.to(this, {
            y: e.fromPos.y - 30,
            scaleX: 1.2,
            scaleY: 1.2,
            alpha: .375
        }, 150, Laya.Ease.cubicOut).to(this, {
            y: e.fromPos.y - 50,
            scaleX: 1,
            scaleY: 1,
            alpha: 1
        }, 250, Laya.Ease.bounceOut),
        s.play(0, !1)
    }
    setBossBox(e) {
        this.clearEffectSpine(),
        this.m_shadow || (this.m_shadow = new Laya.Image),
        this.m_shadow.skin = "hunt/ui_fight/shadow.png",
        this.m_shadow.size(90, 74),
        this.m_shadow.centerX = 0,
        this.m_shadow.centerY = 20,
        this.addChild(this.m_shadow),
        this.m_shadow.visible = !0,
        this.m_img || (this.m_img = new Laya.Image),
        this.m_effect && (this.m_effect.recover(), this.m_effect = null);
        var t = Data.getItem(e.itemId);
        this.m_img.size(86, 86),
        this.m_img.centerX = this.m_img.centerY = 0,
        this.m_img.skin = `hunt/ui_item/${t.icon}.png`,
        this.m_img.visible = !0,
        this.addChild(this.m_img),
        this.x = e.fromPos.x,
        this.y = e.fromPos.y - 50;
        let i = L.mapview.extLayer,
        s = (i.addChild(this), this.m_tl = new Laya.TimeLine);
        s.to(this, {
            y: e.fromPos.y - 80,
            scaleX: 1.2,
            scaleY: 1.2
        }, 150, Laya.Ease.cubicOut).to(this, {
            y: e.fromPos.y,
            scaleX: 1,
            scaleY: 1
        }, 350, Laya.Ease.bounceOut),
        s.play(0, !1),
        s.on(Laya.Event.COMPLETE, this, () => {
            e.exView && (e.exView.visible = !0)
        }),
        (this.m_data = e).isAuto && Laya.timer.once(1e3, this, () => {
            this.m_tlFly || this.bossBoxFly()
        })
    }
    clearEffectSpine() {
        this.m_spine && (this.m_spine.recover(), this.m_spine = null),
        this.m_effect && (this.m_effect.recover(), this.m_effect = null)
    }
    pickSpecial() {
        !this.destroyed && this.m_spine && this.m_spine.play(1, !1, Laya.Handler.create(null, () => {
                this.m_spine.play(2, !0),
                Laya.timer.once(300, this, () => {
                    this.showSpecialHide()
                })
            }))
    }
    setDataFake(e, t) {
        var i = e.itemId;
        4 == i ? (this.m_effect && (this.m_effect.recover(), this.m_effect = null), this.m_effect = b.create({
                url: "hunt/ue/16.atlas",
                parent: this,
                px: 25,
                py: 25,
                autoPlay: !0,
                loop: !0
            }), this.m_img && (this.m_img.visible = !1)) : (this.m_img || (this.m_img = new Laya.Image), this.m_effect && (this.m_effect.recover(), this.m_effect = null), i = Data.getItem(i), this.m_img.skin = `hunt/ui_item/${i.icon}.png`, this.m_img.size(50, 50), this.m_img.centerX = this.m_img.centerY = 0, this.m_img.visible = !0, this.addChild(this.m_img)),
        this.setLightImg(e.itemId),
        this.x = t.x,
        this.y = t.y,
        this.stage.addChild(this)
    }
    setLightImg(e) {
        e = Data.getItem(e);
        let t = null;
        e && (12 <= e.quality ? t = "hunt/ui_fight/item_eff5.jpg" : 10 <= e.quality ? t = "hunt/ui_fight/item_eff4.jpg" : 7 <= e.quality ? t = "hunt/ui_fight/item_eff3.jpg" : 5 <= e.quality ? t = "hunt/ui_fight/item_eff2.jpg" : 3 <= e.quality ? t = "hunt/ui_fight/item_eff1.jpg" : 0 <= e.quality && (t = "hunt/ui_fight/item_eff0.jpg"), t ? (this.m_coverImg || (this.m_coverImg = new Laya.Image, this.m_coverImg.anchorX = this.m_coverImg.anchorY = .5, this.m_coverImg.blendMode = "light", this.m_coverImg.centerX = 0, this.m_coverImg.bottom = -20), this.m_coverImg.skin = t, this.m_tlLight || (this.m_tlLight = new Laya.TimeLine, this.m_tlLight.to(this.m_coverImg, {
                        alpha: .9
                    }, 700, null).to(this.m_coverImg, {
                        alpha: 1
                    }, 100, null).to(this.m_coverImg, {
                        alpha: .3
                    }, 500, null).to(this.m_coverImg, {
                        alpha: .2
                    }, 100, null), this.m_tlLight.play(0, !0)), this.m_coverImg.visible = !0, this.addChild(this.m_coverImg)) : (this.m_tlLight && (this.m_tlLight.destroy(), this.m_tlLight = null), this.m_coverImg && (this.m_coverImg.visible = !1)))
    }
    flyToTarget() {
        if (I.instance.playSound(v.SE_Pick), Laya.timer.clearAll(this), T.battle) {
            T.battle.rewards.push([this.m_data.itemId, this.m_data.itemNum]),
            L.allLootItems = L.allLootItems.filter(e => e.m_tId != this.m_tId),
            this.isPicking = !0;
            var e = 485 + Mmobay.adaptOffsetWidth / 2,
            a = 1045 + Mmobay.adaptOffsetHeight / 2,
            r = (this.m_shadow && (this.m_shadow.visible = !1), L.mapview.extLayer.localToGlobal(new Laya.Point(this.x, this.y)));
            this.zOrder = 1300,
            this.stage.addChild(this),
            this.x = r.x,
            this.y = r.y;
            let t = [{
                    x: r.x,
                    y: r.y - 100
                }, {
                    x: r.x + Math.randRange(-100, 100),
                    y: r.y - 100 + Math.randRange(-150, -50)
                }, {
                    x: e,
                    y: a
                }
            ],
            i = this,
            s = {
                set x(e) {
                    i.x = e
                },
                set y(e) {
                    i.y = e
                },
                set bezierTween(e) {
                    s.x = (1 - e) * (1 - e) * t[0].x + 2 * e * (1 - e) * t[1].x + e * e * t[2].x,
                    s.y = (1 - e) * (1 - e) * t[0].y + 2 * e * (1 - e) * t[1].y + e * e * t[2].y
                },
                get bezierTween() {
                    return 0
                }
            };
            Laya.timer.once(350, this, () => {
                Laya.timer.frameLoop(4, this, this.createFakeItem),
                Laya.Tween.to(s, {
                    bezierTween: 1
                }, 1e3, null, Laya.Handler.create(null, t => {
                        for (let e = Ci.s_flyArr.length - 1; 0 <= e; e--)
                            if (Ci.s_flyArr[e].m_tId == t.m_tId) {
                                Ci.s_flyArr.splice(e, 1);
                                break
                            }
                        t.recover(),
                        T.battle && (T.battle.pickReward(), Ci.s_flyArr.length || !L.killAniDone || L.allLootItems.length || T.battle.showBattleResult())
                    }, [this]))
            }),
            this.m_tlFly = new Laya.TimeLine,
            this.m_tlFly.to(this, {
                y: this.y - 100,
                scaleX: 1.4,
                scaleY: 1.4
            }, 300).to(this, {
                scaleX: .5,
                scaleY: .5
            }, 1e3, null, 50),
            this.m_tlFly.play(),
            Ci.s_flyArr.push(this)
        } else
            this.recover()
    }
    bossBoxFly() {
        if (I.instance.playSound(v.SE_Pick), Laya.timer.clearAll(this), T.battle) {
            L.allLootItems = L.allLootItems.filter(e => e.m_tId != this.m_tId),
            this.isPicking = !0;
            var e = 485 + Mmobay.adaptOffsetWidth / 2,
            a = 1045 + Mmobay.adaptOffsetHeight / 2,
            r = (this.m_shadow && (this.m_shadow.visible = !1), L.mapview.extLayer.localToGlobal(new Laya.Point(this.x, this.y)));
            this.zOrder = 1300,
            this.stage.addChild(this),
            this.x = r.x,
            this.y = r.y;
            let t = [{
                    x: r.x,
                    y: r.y - 100
                }, {
                    x: r.x + Math.randRange(-100, 100),
                    y: r.y - 100 + Math.randRange(-150, -50)
                }, {
                    x: e,
                    y: a
                }
            ],
            i = this,
            s = {
                set x(e) {
                    i.x = e
                },
                set y(e) {
                    i.y = e
                },
                set bezierTween(e) {
                    s.x = (1 - e) * (1 - e) * t[0].x + 2 * e * (1 - e) * t[1].x + e * e * t[2].x,
                    s.y = (1 - e) * (1 - e) * t[0].y + 2 * e * (1 - e) * t[1].y + e * e * t[2].y
                },
                get bezierTween() {
                    return 0
                }
            };
            Laya.timer.once(350, this, () => {
                Laya.timer.frameLoop(4, this, this.createFakeItem),
                Laya.Tween.to(s, {
                    bezierTween: 1
                }, 1e3, null, Laya.Handler.create(null, t => {
                        for (let e = Ci.s_flyArr.length - 1; 0 <= e; e--)
                            if (Ci.s_flyArr[e].m_tId == t.m_tId) {
                                Ci.s_flyArr.splice(e, 1);
                                break
                            }
                        t.recover()
                    }, [this]))
            }),
            this.m_tlFly = new Laya.TimeLine,
            this.m_tlFly.to(this, {
                y: this.y - 100,
                scaleX: 1.4,
                scaleY: 1.4
            }, 300).to(this, {
                scaleX: .5,
                scaleY: .5
            }, 1e3, null, 50),
            this.m_tlFly.play(),
            Ci.s_flyArr.push(this)
        } else
            this.recover()
    }
    checkPickDis() {
        var e = L.getMainRole();
        e ? vt(this.x, this.y, e.root.x, e.root.y) < 40 && (Laya.timer.clear(this, this.checkPickDis), this.flyToTarget()) : Laya.timer.clear(this, this.checkPickDis)
    }
    createFakeItem() {
        let e = this.m_data,
        t = (e.fromPos = {
                x: this.x,
                y: this.y
            }, Ci.createFake(e, this));
        t.showFakeHide()
    }
    showFakeHide() {
        this.m_tlHide = new Laya.TimeLine,
        this.m_tlHide.to(this, {
            scaleX: 0,
            scaleY: 0,
            alpha: 0
        }, 450),
        this.m_tlHide.once(Laya.Event.COMPLETE, null, () => {
            this.recover()
        }),
        this.m_tlHide.play()
    }
    showSpecialHide() {
        this.m_tlHide = new Laya.TimeLine,
        this.m_tlHide.to(this, {
            alpha: 0
        }, 800),
        this.m_tlHide.once(Laya.Event.COMPLETE, null, () => {
            this.recover(),
            Ci.s_flyArr.length || !L.killAniDone || L.allLootItems.length || T.battle.showBattleResult()
        }),
        this.m_tlHide.play()
    }
    recover() {
        L.allLootItems = L.allLootItems.filter(e => e.m_tId != this.m_tId),
        this.destroyed || (this.removeSelf(), this.scale(1, 1), this.alpha = 1, Laya.timer.clearAll(this), this.m_shadow && (this.m_shadow.visible = !1), this.m_effect && (this.m_effect.destroy(), this.m_effect = null), this.m_spine && (this.m_spine.destroy(), this.m_spine = null), this.m_tl && (this.m_tl.destroy(), this.m_tl = null), this.m_tlFly && (this.m_tlFly.destroy(), this.m_tlFly = null), this.m_tlHide && (this.m_tlHide.destroy(), this.m_tlHide = null), this.m_tlLight && (this.m_tlLight.destroy(), this.m_tlLight = null), this.m_coverImg && (this.m_coverImg.destroy(), this.m_coverImg = null), G.put(Ci._sign, this))
    }
}
Ci.lootId = 0,
Ci._sign = "p_LootItem",
Ci.s_flyArr = [];
class D {
    static getSkillUseRes(e) {
        let t = [];
        return e.forEach(e => {
            e = D.s_skillRes[e] || [];
            t = t.concat(e)
        }),
        t
    }
    static registerSkill(e, t) {
        D.s_skillCls[e] = t
    }
    static create(e) {
        var t = D.s_skillCls[e.id] || D.s_skillCls[9999];
        if (!t)
            return console.log("skill class not found!==>" + e.id), e.recover(), null;
        let i = G.get(D._sign + e.id, t);
        return i.setData(e),
        i
    }
    static showAttacked(t, i) {
        var s = D.s_skillCls[t.skillId];
        if (s) {
            let e = s.attackedAni || D.attackedAni;
            e ? e(t, i) : t.recover()
        } else
            t.recover()
    }
    static attackedAni(e, t) {
        console.log("attacledani", e),
        e.recover()
    }
    setData(e) {
        this.m_data = e
    }
    recover() {
        var e = this.m_data.id;
        this.m_data.recover(),
        G.put(D._sign + e, this)
    }
    play() {}
    showEvent(e) {}
    needWarningCircle(e, t = !1) {
        hs.create();
        let i = this.m_data.source,
        s = this.m_data.targets[0];
        i.changeState(f.Attack);
        var a = Data.getSkillExecute(this.m_data.id);
        let r;
        r = t ? {
            x: i.root.x,
            y: i.root.y
        }
         : {
            x: s.root.x,
            y: s.root.y
        };
        t = a.damageRadius / 35;
        let n = new Laya.Image,
        o = (n.skin = "hunt/ui_fight/circle_out.png", n.anchorX = n.anchorY = .5, n.pos(r.x, r.y), n.scale(t, t), s.root.parent.addChild(n), new Laya.Image);
        o.skin = "hunt/ui_fight/circle_in.png",
        o.anchorX = o.anchorY = .5,
        o.pos(r.x, r.y),
        o.scale(0, 0),
        s.root.parent.addChild(o);
        a = a.keyTimes.length && a.keyTimes[0][0] || 1500;
        Laya.Tween.to(o, {
            scaleX: t,
            scaleY: t
        }, a, null, Laya.Handler.create(this, () => {
                n.destroy(),
                o.destroy(),
                i.destroyed || e && e()
            })),
        I.instance.playSound(v.SE_Warning)
    }
    attackActionDone() {
        let e = this.m_data.source;
        e && e.endSkill()
    }
}
D._sign = "p_BaseSkill",
D.s_skillCls = {},
D.s_skillRes = {
    1010: ["hunt/effect/1010_beAtk.atlas", "hunt/effect/Atk0.atlas", "hunt/effect/Atk1.atlas", "hunt/effect/Atk2.atlas", "hunt/effect/Atk3.atlas", "hunt/effect/Atk4.atlas"],
    1011: ["hunt/effect/1010_beAtk.atlas", "hunt/effect/1011_atk.atlas"],
    1020: ["hunt/effect/flyCommBeAtk.atlas", "hunt/effect/1020_fly.atlas"],
    1021: ["hunt/effect/1150_beAtk.atlas", "hunt/effect/1021_beAtk.atlas"],
    2022: ["hunt/effect/flyCommBeAtk.atlas", "hunt/effect/1020_fly.atlas"],
    1030: ["hunt/effect/1010_beAtk.atlas", "hunt/effect/1030_atk.atlas"],
    1031: ["hunt/effect/1031_atk.atlas"],
    1040: ["hunt/effect/flyCommBeAtk.atlas", "hunt/effect/1020_fly.atlas"],
    2041: ["hunt/effect/1010_beAtk.atlas"],
    1050: ["hunt/effect/1050_beAtk.atlas"],
    1060: ["hunt/effect/1140_beAtk.atlas", "hunt/effect/1060_fly.atlas"],
    2060: ["hunt/effect/1140_beAtk.atlas", "hunt/effect/1060_fly.atlas"],
    2061: ["hunt/effect/1140_beAtk.atlas", "hunt/effect/1060_fly.atlas"],
    1070: ["hunt/effect/1140_beAtk.atlas", "hunt/effect/1070_fly.atlas"],
    1071: ["hunt/effect/1010_beAtk.atlas"],
    2071: ["hunt/effect/1010_beAtk.atlas"],
    1080: ["hunt/effect/1010_beAtk.atlas"],
    2080: ["hunt/effect/2080_atk.atlas"],
    1090: ["hunt/effect/1010_beAtk.atlas", "hunt/effect/1090_Atk0.atlas", "hunt/effect/1090_Atk1.atlas", "hunt/effect/1090_Atk2.atlas", "hunt/effect/1090_Atk3.atlas", "hunt/effect/1090_Atk4.atlas"],
    1091: ["hunt/effect/e2A.atlas", "hunt/effect/e202A.atlas"],
    2090: ["hunt/effect/e2A.atlas", "hunt/effect/e202A.atlas"],
    1100: ["hunt/effect/1100_Atk0.atlas", "hunt/effect/1100_Atk1.atlas", "hunt/effect/1100_Atk2.atlas", "hunt/effect/1100_Atk3.atlas", "hunt/effect/1100_Atk4.atlas", "hunt/effect/1010_beAtk.atlas"],
    1110: ["hunt/effect/1110_beAtk.atlas", "hunt/effect/1110_atk.atlas"],
    1111: ["hunt/effect/1010_beAtk.atlas"],
    2111: ["hunt/effect/1010_beAtk.atlas"],
    1120: ["hunt/effect/flyCommBeAtk.atlas", "hunt/effect/1020_fly.atlas"],
    1121: ["hunt/effect/1121_beAtk.atlas", "hunt/effect/1160_beAtk.atlas", "hunt/effect/1121.atlas", "hunt/effect/1122.atlas"],
    2121: ["hunt/effect/1121_beAtk.atlas", "hunt/effect/1160_beAtk.atlas", "hunt/effect/1121.atlas", "hunt/effect/1122.atlas"],
    1130: ["hunt/effect/1010_beAtk.atlas"],
    1140: ["hunt/effect/1140_beAtk.atlas"],
    1150: ["hunt/effect/1150_beAtk.atlas", "hunt/effect/1150_atk.atlas"],
    1160: ["hunt/effect/1160_beAtk.atlas", "hunt/effect/1160_fly.atlas"],
    1170: ["hunt/effect/1010_beAtk.atlas", "hunt/effect/1030_atk.atlas"],
    1171: ["hunt/effect/1010_beAtk.atlas"],
    2171: ["hunt/effect/1010_beAtk.atlas", "hunt/effect/1030_atk.atlas"],
    7001: ["hunt/effect/7001_atk.atlas"],
    7002: ["hunt/effect/7002_atk.atlas"],
    7003: ["hunt/effect/7003_atk.atlas"],
    7004: ["hunt/effect/7004_atk.atlas"],
    7006: ["hunt/effect/7006_atk.atlas"],
    7007: ["hunt/effect/7007_atk.atlas"],
    9001: ["hunt/effect/1140_beAtk.atlas", "hunt/effect/9001_atk.atlas"],
    9002: ["hunt/effect/1140_beAtk.atlas", "hunt/effect/9002_atk.atlas"],
    9003: ["hunt/effect/1140_beAtk.atlas", "hunt/effect/9003_atk.atlas"],
    9997: ["hunt/effect/flyCommBeAtk.atlas", "hunt/effect/1020_fly.atlas"],
    9998: ["hunt/effect/1010_beAtk.atlas"],
    9999: ["hunt/effect/1010_beAtk.atlas"]
};
class xi extends li {
    static create() {
        let e = G.get(xi._sign, xi);
        return e.destroyed = !1,
        e
    }
    setTo(e, t, i, s, a, r) {
        return this.set("maxHp", e),
        this.set("hp", t),
        this.set("shieldMaxHp", i),
        this.set("shieldHp", s),
        this.set("atkSpeed", a),
        this.set("moveSpeed", r),
        this
    }
    get attackSpeed() {
        return this.get("atkSpeed") / yt || 1
    }
    get moveSpeed() {
        return this.get("moveSpeed") / yt || .01
    }
    get maxHp() {
        return this.get("maxHp")
    }
    get shieldHp() {
        return this.get("shieldHp")
    }
    get shieldMaxHp() {
        return this.get("shieldMaxHp")
    }
    get hp() {
        return this.get("hp")
    }
    set hp(e) {
        this.set("hp", e)
    }
    recover() {
        this.dtor(),
        G.put(xi._sign, this)
    }
}
xi._sign = "p_PropData";
class Si extends li {
    static create() {
        let e = G.get(Si._sign, Si);
        return e.destroyed = !1,
        e
    }
    get id() {
        return this.get("id")
    }
    get source() {
        return this.get("source")
    }
    get targets() {
        return this.get("targets")
    }
    setTo(e, t, i) {
        return this.set("id", e),
        this.set("source", t),
        this.set("targets", i),
        this
    }
    recover() {
        this.dtor(),
        G.put(Si._sign, this)
    }
}
Si._sign = "p_SkillExeData";
class Ai extends li {
    constructor() {
        super(...arguments),
        this.m_buffIds = [],
        this.m_exeSkills = [],
        this.m_reportChecks = 0,
        this.m_buffObj = {},
        this.m_isForcePos = !1
    }
    static create(e, t) {
        let i = G.get(Ai._sign, Ai);
        return i.setData(e, t),
        i
    }
    get root() {
        return this.get("root")
    }
    get rid() {
        return this.get("rid")
    }
    get userId() {
        return this.get("userId")
    }
    get type() {
        return this.get("type")
    }
    get group() {
        return this.get("group")
    }
    get myGroup() {
        return [this.group]
    }
    get lvl() {
        return this.get("lvl")
    }
    get ourGroup() {
        return this.group == mt.Self ? [mt.Self] : [mt.Enemy]
    }
    get enemyGroup() {
        return this.group == mt.Self ? [mt.Enemy] : [mt.Self]
    }
    get entity() {
        return this.get("entity")
    }
    get mapview() {
        return this.get("mapview")
    }
    get size() {
        return this.get("size")
    }
    get showId() {
        return this.get("showId")
    }
    get name() {
        return this.get("name")
    }
    get isMain() {
        return this.get("isMain") || !1
    }
    set isMain(e) {
        this.set("isMain", e)
    }
    get leader() {
        return this.get("leader")
    }
    set leader(e) {
        this.set("leader", e)
    }
    get followers() {
        return this.get("followers") || []
    }
    set followers(e) {
        this.set("followers", e)
    }
    get targets() {
        return this.get("targets") || []
    }
    set targets(e) {
        this.set("targets", e)
    }
    get allSkills() {
        return this.get("allSkills") || []
    }
    get usingSkill() {
        return this.m_exeSkills[0]
    }
    get baseSkill() {
        return this.get("baseSkill")
    }
    set baseSkill(e) {
        this.set("baseSkill", e)
    }
    get propData() {
        return this.m_propData
    }
    get scaredId() {
        return this.get("scaredId")
    }
    set scaredId(e) {
        this.set("scaredId", e)
    }
    get tauntId() {
        return this.get("tauntId")
    }
    set tauntId(e) {
        this.set("tauntId", e)
    }
    get ignoreSort() {
        return this.get("ignoreSort")
    }
    set ignoreSort(e) {
        this.set("ignoreSort", e)
    }
    get dropInfo() {
        return this.get("dropInfo")
    }
    set lockTarget(e) {
        this.set("lockTarget", e)
    }
    get lockTarget() {
        return this.get("lockTarget")
    }
    clearForce() {
        this.m_isForcePos = !1
    }
    setData(e, t) {
        this.destroyed = !1,
        this.set("rid", e.rid),
        this.set("userId", e.userId),
        this.set("type", e.type),
        this.set("isMain", e.isMain),
        this.set("group", e.group),
        this.set("mapview", t),
        this.set("size", e.size || 40),
        this.set("showId", e.showId),
        this.set("lvl", e.lvl),
        this.set("dropInfo", e.dropInfo),
        this.set("name", e.name),
        this.m_propData = xi.create();
        let i = bi.create(e),
        s = (i.pos(e.x, e.y), t.addExtChild(i), this.set("root", i), hi.create(this)),
        a = e.cInfos,
        r = (a.forEach(e => {
                e = mi.create(e, s);
                s.addComponent(e)
            }), this.set("entity", s), []),
        n = e.skillIds || [];
        n.forEach(e => {
            e = Data.getSkillExecute(e);
            e && e.clientCheck && r.push({
                cd: 200,
                cfg: e
            })
        }),
        this.set("allSkills", r),
        Laya.timer.loop(100, this, this.update),
        this.changeVisualAngle(e.x, e.y)
    }
    testDrawCircle() {
        this.roleCir || (this.roleCir = new Laya.Sprite, this.root.addChild(this.roleCir), this.roleCir.graphics.drawCircle(50, 50, this.size, null, "#FFF000", 5))
    }
    DrawAttackCircle(e) {
        this.attackCir ? this.attackCir.graphics.clear() : this.attackCir = new Laya.Sprite,
        this.root.addChild(this.attackCir),
        this.attackCir.graphics.drawCircle(50, 50, e, null, "#FF0000", 5)
    }
    DrawTargetCircle(e, t) {
        this.targetCir && !this.destroyed ? this.targetCir.graphics.clear() : this.targetCir = new Laya.Sprite,
        t && (t.root.addChild(this.targetCir), this.targetCir.graphics.drawCircle(50, 50, e, null, "#F00FF0", 5))
    }
    dtor() {
        for (var e in Laya.timer.clearAll(this), this.m_buffObj)
            this.m_buffObj[e].recover(), delete this.m_buffObj[e];
        this.m_exeSkills = [],
        this.m_buffIds = [],
        this.m_reportPos = null,
        this.m_reportChecks = 0,
        this.m_buffObj = {},
        this.m_isForcePos = !1,
        this.entity.recover(),
        this.root.recover(),
        this.m_propData && this.m_propData.recover(),
        this.m_reportPos = null,
        super.dtor()
    }
    recover() {
        this.dtor(),
        G.put(Ai._sign, this)
    }
    rsyncMove(e, t, i = 0) {
        this.group != mt.Self || this.m_isForcePos || (i && (this.m_isForcePos = !0), O.battle.reqMovePath(this.rid, e, t, i))
    }
    onSyncMove(t, i, s, a = !1) {
        if (!this.destroyed && (T.battle && T.battle.createOpt.logicMapType == Re.arena || !this.m_isForcePos || s)) {
            this.m_isForcePos = !1;
            let e = this.entity.getComponent(k.Path);
            e.checkPath(Math.floor(t), Math.floor(i), s, a)
        }
    }
    canUseSkill() {
        return !!this.usingSkill && (!!di.findTargets(this, this.usingSkill).length || (1 < this.m_exeSkills.length && (e = this.m_exeSkills.shift(), this.m_exeSkills.push(e)), !1));
        var e
    }
    hasAttackSkill() {
        let t = !1;
        return this.m_exeSkills.forEach(e => {
            di.findTargets(this, e).length && (t = !0)
        }),
        t
    }
    canAttack() {
        if (!this.usingSkill)
            return !1;
        let e = di.findTargets(this, this.usingSkill);
        return e.sort((e, t) => {
            return vt(this.root.x, this.root.y, e.root.x, e.root.y) - vt(this.root.x, this.root.y, t.root.x, t.root.y)
        }),
        0 < (this.targets = e).length
    }
    checkSkill() {
        var e = {
            x: Math.floor(this.root.x),
            y: Math.floor(this.root.y)
        };
        O.battle.reqSyncLocation(this.rid, e.x, e.y),
        this.m_reportPos = e,
        T.checkSkill(this.usingSkill.cfg.id, this.rid, this.targets[0].rid)
    }
    playSkill(e, t, i = !1) {
        if (i) {
            let e = this.entity.getComponent(k.Ani);
            i = kt(this.root.x, this.root.y, t[0].root.x, t[0].root.y);
            e.direction = i
        }
        i = Si.create().setTo(e, this, t);
        let s = this.baseSkill = D.create(i);
        Data.getSkillExecute(e).damageCenter,
        s.play()
    }
    clearSkill() {
        this.baseSkill && (this.baseSkill.recover(), this.baseSkill = null),
        this.targets = []
    }
    endSkill() {
        this.baseSkill && (this.baseSkill.recover(), this.baseSkill = null),
        this.targets = [],
        this.changeState(f.Idle)
    }
    attackActionDone() {
        this.baseSkill ? this.baseSkill.attackActionDone() : this.changeState(f.Idle)
    }
    beAttacked(e) {
        0 == e.type ? this.root.addRecoverEffect() : -1 == [].indexOf(e.skillId) && 1 != e.type && this.root.aniWrap.showTestFlash(),
        1 == e.type ? (wi.create(this), I.instance.playSound(v.SE_Dodge)) : gi.create(e.damage, e.type, this),
        e.source && (e.source.type == ht.Hero || e.source.type == ht.Boss || e.source.userId) && D.showAttacked(e, this)
    }
    beRepulse(e, t, i, s) {
        let a = this.entity.getComponent(k.Movement),
        r = (a.repulse(e, t, i, s), this.entity.getComponent(k.State));
        if (r.state != f.Run) {
            let e = this.entity.getComponent(k.Path);
            e.stop()
        }
        r.state = f.Idle
    }
    bePunchFly() {
        this.root.fly()
    }
    bHp70() {
        this.root.add70PerEffect()
    }
    changeState(e, t = 1) {
        let i = this.entity.getComponent(k.Ani),
        s = (i.count = t, this.entity.getComponent(k.State));
        s.state = e
    }
    changeAbnormal(e) {
        let t = this.entity.getComponent(k.State);
        if (t.changeAbnormal([e]), e == ut.Stun ? this.root.addStunEffect() : this.root.removeStunEffect(), e != ut.Scared) {
            let e = this.entity.getComponent(k.AI);
            e && (e.scarePos = null),
            this.scaredId = null
        }
        e != ut.Taunt && (this.tauntId = null)
    }
    changeMainRole() {
        this.isMain = !0,
        this.leader = null,
        this.changeVisualAngle(this.root.x, this.root.y)
    }
    changeVisualAngle(e, t) {
        this.isMain && (this.mapview.updateViewPort(e, t), this.mapview.touchHandler = Laya.Handler.create(this, this.receiveMapPos, null, !1))
    }
    receiveMapPos(e, t) {
        if (!this.destroyed) {
            let r = {
                x: Math.floor(e),
                y: Math.floor(t)
            };
            e = {
                x: Math.floor(this.root.x),
                y: Math.floor(this.root.y)
            };
            if (!ft(r, e)) {
                let e = [].concat(this.followers, this),
                s = this.mapview.width - 1,
                a = this.mapview.height - 1;
                L.allLootItems.find(e => e.isSpecial) || L.killAniDone || (e.forEach((e, t) => {
                        let i = e.entity.getComponent(k.AI) || e.entity.getComponent(k.CityAI);
                        i && (e = t % 2 == 0 ? -1 : 1, t = 1 < t ? 1 : -1, e = {
                                x: Math.max(Math.min(r.x + 30 * e + Math.randRange(-15, 15), s), 0),
                                y: Math.max(Math.min(r.y + 30 * t + Math.randRange(-15, 15), a), 0)
                            }, i.currentClick = e, i.resetClickLaterMove())
                    }), T.battle.createOpt.logicMapType == Re.worldBoss && (O.battle.reqLockTarget(), this.isMain && T.battle.checkPick()))
            }
        }
    }
    doRoleMove(e, t) {
        this.isMain && this.receiveMapPos(e, t)
    }
    resetCD(i, s = 0) {
        for (let t = 0; t < this.allSkills.length; t++) {
            let e = this.allSkills[t];
            if (i == e.cfg.id) {
                e.cd = s || e.cfg.CDTime;
                break
            }
        }
        for (let e = this.m_exeSkills.length - 1; 0 <= e; e--)
            if (i == this.m_exeSkills[e].cfg.id) {
                this.m_exeSkills.splice(e, 1);
                break
            }
    }
    update() {
        this.destroyed || (this.reduceCD(), this.reportPos2Server())
    }
    reduceCD() {
        this.allSkills.forEach(e => {
            let t = e.cd;
            var i = 0 <= t;
            e.cfg.isFixedCD ? t -= 100 : t -= 100 * this.propData.attackSpeed,
            e.cd = t,
            i && t <= 0 && -1 == this.m_exeSkills.indexOf(e) && this.m_exeSkills.push(e)
        })
    }
    reportPos2Server() {
        var e;
        this.group != mt.Self || ft(e = {
                x: Math.floor(this.root.x),
                y: Math.floor(this.root.y)
            }, this.m_reportPos) || (O.battle.reqSyncLocation(this.rid, e.x, e.y), this.m_reportPos = e)
    }
    dropLootItem(t = !1, e = !1, i = !1) {
        e ? (I.instance.playSound(v.SE_Drop), Ci.create({
                fromPos: {
                    x: this.root.x,
                    y: this.root.y
                },
                isAuto: !1,
                special: !0,
                fromBoss: i
            }), Laya.timer.once(500, null, () => {
                T.battle && T.battle.pickSpecial()
            })) : this.dropInfo && (I.instance.playSound(v.SE_Drop), this.dropInfo.forEach(e => {
                Ci.create({
                    itemId: e.itemId,
                    itemNum: e.itemNum,
                    fromPos: {
                        x: this.root.x,
                        y: this.root.y
                    },
                    isAuto: t,
                    special: !1
                })
            }))
    }
    checkBuff(e) {
        let t = e.buffIds,
        i = t.filter(e => -1 == this.m_buffIds.indexOf(e)),
        s = this.m_buffIds.filter(e => -1 == t.indexOf(e)),
        a = (s.forEach(e => {
                var t = Data.getSkillState(e);
                if (t && this.m_buffObj[t.id] && (this.m_buffObj[t.id].recover(), delete this.m_buffObj[t.id]), 97004 == e) {
                    let e = this.root.aniWrap.filters || [];
                    this.root.aniWrap.filters = e.filter(e => e != _i.BLUE)
                }
            }), this.m_buffIds = t, !1),
        r = !1,
        n = (i.forEach(e => {
                var t = Data.getSkillState(e);
                if (t && (t.effectId && (this.m_buffObj[t.id] = b.create({
                                url: `hunt/effect/${t.effectId}_buff.atlas`,
                                parent: this.root,
                                px: 50,
                                py: 50,
                                scale: 1,
                                autoPlay: !0,
                                loop: !0,
                                interval: 90
                            })), 1 != t.skillFlag && (1 == t.buffType ? a = !0 : r = !0), 97004 == e)) {
                    let e = this.root.aniWrap.filters || [];
                    this.root.aniWrap.filters = e.concat(_i.BLUE)
                }
            }), this.root.addBuffEffect(a, r), 0);
        for (let e = t.length - 1; 0 <= e; e--) {
            var o = Data.getSkillState(t[e]);
            if (o && o.icon) {
                n = o.icon;
                break
            }
        }
        this.root.aniWrap.changeColor(n);
        e = {
            abnormal: n,
            props: e.props
        };
        this.root.nameWrap && this.root.nameWrap.changeBuff(e)
    }
    hasAbnormal() {
        var t = this.m_buffIds;
        for (let e = t.length - 1; 0 <= e; e--) {
            var i = Data.getSkillState(t[e]);
            if (i && i.icon)
                return !0
        }
        return !1
    }
    notifyFollowerMove(i) {
        if (this.isMain && i.length) {
            let e = this.followers;
            e.forEach(e => {
                let t = e.entity.getComponent(k.AI);
                t && t.observeLeaderMove(i)
            })
        }
    }
    notifyFollowerStop(i, s) {
        if (this.isMain) {
            let e = this.followers;
            e.forEach(e => {
                let t = e.entity.getComponent(k.AI);
                t && t.observeLeaderStop(i, s)
            })
        }
    }
    removeFollower(e) {
        e = this.followers.indexOf(e);
        -1 != e && this.followers.splice(e, 1)
    }
    autoAttackBoss() {
        var e;
        this.isMain && (e = L.getOneRole(ht.Boss, mt.Enemy)) && T.battle && !T.battle.checkIsPicking() && O.battle.reqLockTarget(e.rid)
    }
}
Ai._sign = "p_BaseRole";
class Di {
    constructor() {
        this.m_roles = [],
        this.allLootItems = [],
        this.tlArr = [],
        this.lastKilled = !1,
        this.killAniDone = !1,
        this.hasFinalDrop = !1,
        this.battleMapInfo = null
    }
    static registerTimer() {
        Laya.timer.loop(6e4, null, Di.checkUnusedRes)
    }
    static checkUnusedRes() {
        if (Di.s_resRef.size) {
            var t,
            i,
            s = Date.newDate().getTime();
            let e = Di.s_resRef;
            for ([t, i]of e)
                i.canDestroy(s) && (i.destroy(), e.delete(t))
        }
    }
    static addResRef(e, t) {
        let i = Di.s_resRef.get(e);
        i || (i = K.create(t), Di.s_resRef.set(e, i)),
        i.addReference()
    }
    static removeResRef(e) {
        let t = Di.s_resRef.get(e);
        t && t.removeReference()
    }
    get mapview() {
        return this.m_mapview
    }
    start(i, s, a = !1) {
        return new Promise((t, e) => {
            oi.loadMap(i, s).then(e => {
                if (!e)
                    return t(!1);
                this.m_mapview = e,
                this.m_needSort = a,
                Laya.timer.frameLoop(1, this, this.update);
                e = e.skinUrls;
                Laya.loader.load(e, Laya.Handler.create(this, () => {
                        t(!0)
                    })),
                Di.addResRef(i, e)
            })
        })
    }
    stop(e = !1) {
        this.lastKilled = !1,
        this.killAniDone = !1,
        this.battleMapInfo = null;
        let t = O.tileMap;
        Laya.timer.clearAll(this),
        this.m_roles.forEach(e => {
            e.recover()
        }),
        this.m_roles = [],
        this.allLootItems.forEach(e => {
            e.recover()
        }),
        this.allLootItems = [],
        this.tlArr.forEach(e => {
            e.total && e.destroy()
        }),
        this.tlArr.length = 0,
        e ? t.reqTileMap().then(() => {
            t.initLogic(),
            t.initConvey(),
            this.m_mapview && (Di.removeResRef(this.m_mapview.id), this.m_mapview.destroy(!0), this.m_mapview = null)
        }) : this.m_mapview && (Di.removeResRef(this.m_mapview.id), this.m_mapview.destroy(!0), this.m_mapview = null),
        this.m_mapview && (Di.removeResRef(this.m_mapview.id), this.m_mapview.destroy(!0), this.m_mapview = null),
        this.m_needSort = !1
    }
    removeRole(i, t = !1) {
        if (i) {
            var s = this.m_roles.indexOf(i);
            if (-1 != s && this.m_roles.splice(s, 1), i.leader && i.leader.removeFollower(i), t) {
                s = L.getRoleByUserId(i.userId);
                let e = 0;
                t = L.battleMapInfo && L.battleMapInfo.currStage >= L.battleMapInfo.maxStage || !L.battleMapInfo;
                if (T.battle.createOpt.logicMapType != Re.worldBoss && !this.lastKilled && (i.type == ht.Boss || t && 0 == s.length) && (I.instance.stopMusic(), this.lastKilled = !0, this.doLastKill(), e = 500), i.changeState(f.Die), Laya.timer.once(e, null, t => {
                        i.root.death(Laya.Handler.create(null, e => {
                                e.destroyed || (L.hasFinalDrop && (t ? (e.dropLootItem(!1, !0, i.type == ht.Boss), L.killAniDone = !0) : e.dropLootItem()), e.recover())
                            }, [i]))
                    }, [e]), i.isMain) {
                    let e = this.getArrRole(null, mt.Self);
                    if (!e.length)
                        return console.log("roles empty"), void O.event(c.BATTLE_ALLDIE);
                    e.reverse();
                    let t = e.pop();
                    t.changeMainRole(),
                    e.forEach(e => {
                        e.leader = t
                    }),
                    t.followers = e
                }
            } else
                i.recover()
        }
    }
    doLastKill() {
        Laya.timer.scale = .1,
        Laya.timer.once(120, null, () => {
            Laya.timer.scale = 1
        });
        let e = new Laya.Box,
        t = (e.bgColor = "#FFF", e.width = this.mapview.width, e.height = this.mapview.height, e.alpha = .8, e.x = 0, e.y = 0, new Laya.Box),
        i = (t.bgColor = "#FF0000", t.width = this.mapview.width, t.height = this.mapview.height, t.x = 0, t.y = 0, t.alpha = 0, new Laya.TimeLine),
        s = (this.tlArr.push(i), i.to(e, {
                alpha: 0
            }, 25).to(e, {
                alpha: .8
            }, 25), new Laya.TimeLine),
        a = (this.tlArr.push(s), s.to(t, {
                alpha: .8
            }, 25).to(t, {
                alpha: 0
            }, 25), new Laya.TimeLine),
        r = (this.tlArr.push(a), a.to(e, {
                alpha: 1
            }, 800).to(e, {
                alpha: 0
            }, 800), this.mapview.extLayer.addChild(e), this.mapview.extLayer.addChild(t), i.play(0, !0), s.play(0, !0), 0);
        i.on(Laya.Event.COMPLETE, null, () => {
            2 <= ++r && (i.destroy(), s.destroy(), t.destroy(), e.alpha = 0, a.play(0, !1))
        }),
        a.on(Laya.Event.COMPLETE, null, () => {
            a.destroy(),
            e.destroy()
        })
    }
    createHero(e, t = !1) {
        let i = [];
        return i.push({
            type: k.Movement,
            x: e.x,
            y: e.y,
            speed: e.speed
        }),
        i.push({
            type: k.Ani,
            id: e.rid,
            direction: e.dir,
            scale: e.scale
        }),
        i.push({
            type: k.Path
        }),
        i.push({
            type: k.State
        }),
        t && i.push({
            type: k.AI
        }),
        e.cInfos = i,
        this.createRole(e)
    }
    createCityRole(e) {
        let t = [];
        return t.push({
            type: k.Movement,
            x: e.x,
            y: e.y,
            speed: e.speed
        }),
        t.push({
            type: k.Ani,
            id: e.rid,
            direction: e.dir,
            scale: e.scale
        }),
        t.push({
            type: k.Path
        }),
        t.push({
            type: k.State
        }),
        t.push({
            type: k.CityAI
        }),
        e.cInfos = t,
        this.createRole(e)
    }
    createNpcRole(e) {
        let t = [];
        return t.push({
            type: k.Ani,
            id: e.rid,
            direction: e.dir,
            scale: e.scale
        }),
        t.push({
            type: k.State
        }),
        e.cInfos = t,
        this.createRole(e)
    }
    createMonster(e) {
        let t = [];
        return t.push({
            type: k.Movement,
            x: e.x,
            y: e.y,
            speed: e.speed
        }),
        t.push({
            type: k.Ani,
            id: e.rid,
            direction: e.dir,
            scale: e.scale
        }),
        t.push({
            type: k.Path
        }),
        t.push({
            type: k.State
        }),
        e.cInfos = t,
        this.createRole(e)
    }
    getMainRole() {
        let t = null;
        return this.iteratorRole(e => {
            if (e.isMain)
                return t = e, !0
        }),
        t
    }
    getRoleById(t) {
        let i = null;
        return this.iteratorRole(e => {
            if (e.rid == t)
                return i = e, !0
        }),
        i
    }
    getRoleByUserId(t) {
        let i = [];
        return this.iteratorRole(e => {
            e.userId == t && i.push(e)
        }),
        i
    }
    getOneRole(e, t, i) {
        let s = null;
        return this.iteratorRole(e => !i || i(e) ? (s = e, !0) : void 0, e, t),
        s
    }
    getArrRole(e, t, i) {
        let s = [];
        return this.iteratorRole(e => {
            (!i || i(e)) && s.push(e)
        }, e, t),
        s
    }
    iteratorRole(t, e, i) {
        let s = [],
        a = (e && (Array.isArray(e) ? s = e : s.push(e)), []);
        i && (Array.isArray(i) ? a = i : a.push(i));
        for (let e = 0; e < this.m_roles.length; e++) {
            var r = this.m_roles[e];
            if ((!s.length || -1 != s.indexOf(r.type)) && ((!a.length || -1 != a.indexOf(r.group)) && t(r)))
                break
        }
    }
    createRole(e) {
        e = Ai.create(e, this.mapview);
        return this.m_roles.push(e),
        e
    }
    update() {
        ci.update(),
        this.sortRoles()
    }
    sortRoles() {
        var e;
        this.m_needSort && ((e = this._checkFrames || 0) < 24 ? this._checkFrames = ++e : (this._checkFrames = 0, this.m_roles.sort((e, t) => e.root.y - t.root.y), this.m_roles.forEach((e, t) => {
                        e.ignoreSort || (e.root.zOrder = t + 1)
                    })))
    }
    activateAi(i) {
        let e = this.getArrRole(ht.Hero, [mt.Self]);
        e.forEach(e => {
            let t = e.entity.getComponent(k.AI);
            t && (t.enable = i)
        })
    }
}
Di.s_resRef = new Map,
Di.registerTimer();
let L = new Di;
window.world = L;
class Li extends li {
    static create() {
        let e = G.get(Li._sign, Li);
        return e.destroyed = !1,
        e
    }
    get type() {
        return this.get("type")
    }
    get damage() {
        return this.get("damage")
    }
    get skillId() {
        return this.get("skillId")
    }
    get source() {
        return this.get("source")
    }
    get mainTarget() {
        return this.get("mainTarget")
    }
    setTo(e, t, i, s, a = null) {
        return this.set("type", e),
        this.set("damage", t),
        this.set("skillId", i),
        this.set("source", s),
        this.set("mainTarget", a),
        this
    }
    recover() {
        this.dtor(),
        G.put(Li._sign, this)
    }
}
Li._sign = "p_HurtData";
function Ti(r, t = "D:HH:MM:ss") {
    r < 0 && (r = 0);
    let e = /D|([HhMs])\1?|S/,
    n = -1,
    o = -1,
    l = [],
    h = [];
    function i(t, e, i) {
        var s = Math.floor(+r / t);
        if (l.push(i), h.push(s), 0 < s ? ((o = -1) == n && (n = i), r = +r % t) : -1 == o && (o = i), e) {
            var[t, a = 2] = [s];
            let e = String(t);
            for (; e.length < a; )
                e = "0" + e;
            return e
        }
        return s + ""
    }
    let s = 0,
    a = !1,
    m = "";
    for (; m != t; )
        "" != m && (t = m), m = t.replace(e, e => {
            switch (s = 0, a = !1, e) {
            case "D":
                s = 86400,
                a = !0;
                break;
            case "hh":
            case "HH":
                a = !0;
            case "h":
            case "H":
                s = 3600;
                break;
            case "MM":
                a = !0;
            case "M":
                s = 60;
                break;
            case "ss":
                a = !0;
            case "s":
            case "S":
                s = 1
            }
            return i(s, a, t.indexOf(e))
        });
    let c = "",
    d = t.indexOf("#");
    if (-1 < d && (c = -1 == n ? t.slice(d, d + 1) : t.slice(d, n)), -1 < (d = t.indexOf("&")) && ("" != c && (c += "|"), -1 == o ? c += t.slice(d, d + 1) : c += t.slice(o, d + 1)), -1 < (d = t.indexOf("@"))) {
        "" != c ? c += "|@" : c += "@";
        for (let e = 0; e < l.length; e++)
            0 == h[e] && (c = (c += "|") + t.slice(l[e], null == l[e + 1] ? d : l[e + 1]))
    }
    e = new RegExp(c, "g");
    let u = (t = t.replace(e, "")).split(":");
    return 4 == u.length && "00" == u[0] && (u.shift(), t = u.join(":")),
    t
}
class Ei {
    constructor(e, t, i, s) {
        this.disposed = !1,
        this._endTime = e,
        this._interval = t,
        this._timeLabel = i,
        this._format = s
    }
    static create(e, t = 1e3, i, s = "D:HH:MM:ss") {
        return new Ei(e, t, i, s)
    }
    bindLabel(e) {
        this._timeLabel = e
    }
    set endTime(e) {
        this._endTime != e && (this._endTime = e)
    }
    get endTime() {
        return this._endTime
    }
    start() {
        Laya.timer.loop(this._interval, this, this.onTimerLoop),
        this.onTimerLoop()
    }
    onTimerLoop() {
        var e = Date.newDate().getTime();
        let t = this._endTime - e,
        i = (t <= 0 && (Laya.timer.clear(this, this.onTimerLoop), t = 0), t = Math.round(t / 1e3), "");
        if (i = null == this._format ? Ti(t) : Ti(t, this._format), this._timeLabel) {
            if (this._timeLabel.destroyed)
                return void this.dispose();
            this._timeLabel.text = i
        }
        this.onTick && this.onTick(t),
        t <= 0 && Laya.timer.once(1e3, this, () => {
            this.onEnd && this.onEnd(),
            this.dispose()
        })
    }
    dispose() {
        Laya.timer.clear(this, this.onTimerLoop),
        this._endTime = void 0,
        this._format = void 0,
        this._interval = void 0,
        this._timeLabel = null,
        this.onTick && (this.onTick = null),
        this.onEnd && (this.onEnd = null),
        this.disposed = !0
    }
}
class Mi extends t.hunt.views.common.NpcTalkItemUI {
    constructor(e) {
        super(),
        this.m_tickerTxt = null,
        this.m_tickerTime = null,
        this.m_aniDone = !1,
        this.dataSource = e
    }
    static create(e, t) {
        return E(Mi, {
            params: [e]
        }).then(e => (t.addChild(e), e.dataChanged(), e))
    }
    onDestroy() {
        super.onDestroy(),
        this.clearTimeTicker()
    }
    dataChanged(e) {
        var t = this.dataSource;
        this.m_img_Title.x = 0 === t.side ? 0 : 90,
        this.m_box_Talk.x = 0 === t.side ? 0 : 90,
        this.m_img_Bg.scaleX = 0 === t.side ? 1 : -1,
        this.m_txt_Title.text = S(t.speakName),
        this.clearTxtTicker();
        let i = S(t.content),
        s = (this.m_txt_Talk.text = "", this.m_tickerTxt = Ei.create(Date.newDate().addSeconds(5).getTime(), 50), 0);
        this.m_tickerTxt.onTick = () => {
            this.m_txt_Talk.text.length >= i.length ? (this.m_txt_Talk.text = i, this.skipAni()) : this.m_txt_Talk.text = i.slice(0, s),
            s++
        },
        this.m_tickerTxt.start();
        t = function (e, t, i, s, a, r) {
            let n = new Laya.Text;
            return n.wordWrap = !0,
            n.fontSize = i,
            n.width = t,
            s && (n.bold = s),
            a && (n.stroke = a, n.strokeColor = "#ffffff"),
            r && (n.leading = r),
            n.text = e,
            i = n.height,
            n.destroy(!0),
            n = null,
            i
        }
        (i, this.m_txt_Talk.width, this.m_txt_Talk.fontSize, this.m_txt_Talk.bold, 0, this.m_txt_Talk.leading);
        this.height = 140 + (t - 24)
    }
    skipAni() {
        var e;
        this.dataSource && !this.m_aniDone && (e = this.dataSource, this.m_aniDone = !0, this.clearTxtTicker(), this.m_txt_Talk.text = S(e.content), this.showTimeAni(e.second || 5))
    }
    showTimeAni(e) {
        this.clearTimeTicker(),
        e ? (this.m_tickerTime = Ei.create(Date.newDate().addSeconds(5).getTime()), this.m_txt_Time.text = "5s", this.m_tickerTime.onTick = e => {
                this.m_txt_Time.text = e + "s",
                e <= 0 && this.clearTimeTicker()
            }, this.m_tickerTime.start(), this.m_box_Time.visible = !0, this.ani1.play(0, !0)) : this.m_box_Time.visible = !1
    }
    clearTxtTicker() {
        this.m_tickerTxt && (this.m_tickerTxt.dispose(), this.m_tickerTxt = null)
    }
    clearTimeTicker() {
        this.m_tickerTime && (this.m_tickerTime.dispose(), this.m_tickerTime = null),
        this.m_box_Time.visible = !1,
        this.ani1.stop()
    }
}
class Ri extends t.hunt.views.common.NpcTalkViewUI {
    constructor() {
        super(),
        this.m_aniDone = !1,
        this.m_favorAdd = 0,
        this.m_rewardTalk = 0,
        this.m_checkNext = !1,
        this.m_curItem = null,
        this.m_npcLId = null,
        this.m_npcRId = null,
        this.m_addLast = !1,
        this.m_side = -1,
        this.m_tlArr = []
    }
    static create() {
        Ri.s_isShowing || (Ri.s_isShowing = !0, E(Ri, {}).then(e => {
                Se(e, H.Toast),
                e.checkTalkInfo(),
                Ri.s_instance = e
            }))
    }
    static showTalk(e, t, i = 0) {
        e && (i && (Ri.s_Block = O.tileMap.blocks.find(e => e.blockId == i)), Array.isArray(e) || (e = [e]), Ri.s_isShowing || Ri.create(), Ri.s_talkArr.push(e), t && (Ri.s_endCb = t))
    }
    onAwake() {
        super.onAwake(),
        this.m_img_Mask.on(Laya.Event.CLICK, this, this.onClickSkip),
        this.m_img_Mask.size(Laya.stage.width, Laya.stage.height)
    }
    checkTalkInfo() {
        this.m_checkNext = !1;
        let e = Ri.s_talkArr.shift() || [];
        var t;
        if (0 != e.length || !Ri.s_Block || (t = Data.getBlock_talkHero(Ri.s_Block.blockId)) && !this.m_addLast && (this.m_addLast = !0, e = 5 <= Ri.s_Block.favor + this.m_favorAdd ? [t.favorMax] : [t.favorUnMax]), 1 < e.length) {
            var i = this.m_box_Talk.numChildren;
            for (let t = 0; t < i; t++) {
                let e = this.m_box_Talk.getChildAt(t);
                e.showTimeAni(0)
            }
            this.showSelectList(e)
        } else
            e.length && (t = Data.getTalk(e[0])) ? this.showTalkView(t) : this.destroy()
    }
    onDestroy() {
        super.onDestroy(),
        this.clearTl(),
        Laya.Tween.clearAll(this.m_box_Talk),
        Laya.Tween.clearAll(this.m_img_NpcL),
        Laya.Tween.clearAll(this.m_img_NpcR),
        Ri.s_instance = null,
        Ri.s_isShowing = !1,
        Ri.s_endCb && (Ri.s_endCb({
                favor: this.m_favorAdd,
                rewardTalk: this.m_rewardTalk
            }), Ri.s_endCb = null),
        Ri.s_Block = null
    }
    showTalkView(e) {
        this.m_aniDone = !1,
        this.playNpcAni(e.side),
        this.m_box_Talk.zOrder = 3,
        0 === e.side ? this.m_npcLId !== e.image && (this.m_img_NpcL.skin = `hunt/ui_hero/${e.image}.png`, this.m_img_NpcL.visible = !0, this.m_npcLId = e.image) : this.m_npcRId !== e.image && (this.m_img_NpcR.skin = `hunt/ui_hero/${e.image}.png`, this.m_img_NpcR.visible = !0, this.m_npcRId = e.image);
        var i = this.m_box_Talk.numChildren + 1;
        Mi.create(e, this.m_box_Talk).then(e => {
            this.m_curItem = e
        });
        let s = 0;
        for (let t = i - 1; 0 <= t; t--) {
            let e = this.m_box_Talk.getChildAt(t);
            e && (s -= e.height + 20 * (i - t - 1), e.y = s, t !== i - 1 && e.showTimeAni(0))
        }
        Laya.Tween.clearAll(this.m_box_Talk),
        this.m_box_Talk.y = 660,
        Laya.Tween.to(this.m_box_Talk, {
            y: 600
        }, 200),
        Laya.timer.once(210, this, () => {
            this.m_aniDone = !0,
            this.onClickSkip(null)
        }),
        e.next.length && (Ri.showTalk(e.next), Laya.timer.once(5e3, this, () => {
                this.destroyed || this.checkTalkInfo()
            }))
    }
    reset() {
        this.m_box_Talk.destroyChildren(),
        this.m_aniDone = !1,
        this.m_curItem = null,
        this.m_npcLId = -1,
        this.m_npcRId = -1,
        this.m_side = -1,
        this.m_img_NpcL.visible = !1,
        this.m_img_NpcL.x = -120,
        this.m_img_NpcR.visible = !1,
        this.m_img_NpcR.x = 280
    }
    playNpcAni(e) {
        Laya.Tween.clearAll(this.m_img_NpcL),
        Laya.Tween.clearAll(this.m_img_NpcR),
        this.m_img_NpcL.zOrder = 0 === e ? 3 : 1,
        this.m_img_NpcR.zOrder = 1 === e ? 3 : 1,
        this.m_side !== e && (this.m_side = e, Laya.Tween.to(this.m_img_NpcL, {
                x: 0 === e ? -240 : -340
            }, 200), Laya.Tween.to(this.m_img_NpcR, {
                x: 1 === e ? 0 : 100
            }, 200))
    }
    showSelectList(e) {
        this.m_box_Talk.zOrder = 1;
        let t = [];
        e.forEach(e => {
            e = Data.getTalk(e);
            e && t.push({
                block: Ri.s_Block,
                talk: e
            })
        }),
        console.log("talk list:", t),
        this.m_lst_Sel.height = 72 * t.length + 30 * (t.length - 1),
        this.m_lst_Sel.array = t,
        this.m_lst_Sel.visible = 0 < t.length,
        this.m_img_NpcL.zOrder = this.m_img_NpcR.zOrder = -1
    }
    onSelectSel() {
        var e;
        -1 != this.m_lst_Sel.selectedIndex && (e = this.m_lst_Sel.getItem(this.m_lst_Sel.selectedIndex), this.m_lst_Sel.selectedIndex = -1, this.m_lst_Sel.visible = !1, this.m_lst_Sel.array = [], this.m_favorAdd += e.talk.favor || 0, e.block && !e.block.talkRewards.length ? this.m_rewardTalk = e.talk.items.length ? e.talk.id : 0 : this.m_rewardTalk = 0, this.showHeartAni(e.talk.favor), (e = Data.getTalk(e.talk.next[0])) ? this.showTalkView(e) : this.checkTalkInfo())
    }
    onClickSkip(e) {
        if (this.m_checkNext)
            return Laya.timer.clearAll(this), this.m_checkNext = !1, void this.checkTalkInfo();
        this.m_aniDone && this.m_curItem && (this.m_checkNext = !0, this.m_aniDone = !1, this.m_curItem.skipAni())
    }
    showHeartAni(e) {
        for (let i = 0; i < e; i++) {
            let e = new Laya.Image;
            e.skin = "hunt/ui_comm/heroHeart.png",
            e.anchorX = e.anchorY = .5;
            var s = i % 3,
            a = Math.floor(i / 3);
            e.x = 80 * s + (.5 < Math.random() ? 1 : -1) * Math.randRange(0, 5),
            e.y = 55 * a + (.5 < Math.random() ? 1 : -1) * Math.randRange(0, 5),
            e.scale(0, 0),
            e.rotation = Math.randRange(-10, 10),
            this.m_box_Ani.addChild(e);
            let t = new Laya.TimeLine;
            t.on(Laya.Event.COMPLETE, this, () => {
                e.destroy()
            }),
            t.to(e, {
                y: e.y - 35,
                scaleX: 1,
                scaleY: 1
            }, 500, null, 200 * i).to(e, {
                y: e.y - 70,
                scaleX: 2,
                scaleY: 2,
                alpha: .5
            }, 500),
            t.play(0, !1),
            this.m_tlArr.push(t)
        }
    }
    clearTl() {
        this.m_tlArr.forEach(e => {
            e.total && e.destroy()
        }),
        this.m_tlArr.length = 0
    }
}
Ri.s_isShowing = !1,
Ri.s_talkArr = [],
Ri.s_instance = null,
Ri.s_endCb = null,
Ri.s_Block = null;
class Bi extends t.hunt.views.common.StoryInfoViewUI {
    constructor() {
        super(),
        this.m_num = 0
    }
    static create(t = []) {
        E(Bi, {}).then(e => {
            Se(e, H.Toast),
            e.showTalk(t)
        })
    }
    static showTalk(t, i) {
        E(Bi, {}).then(e => {
            Se(e, H.Toast),
            e.showTalk(t, i)
        })
    }
    onAwake() {
        super.onAwake(),
        this.pos(.5 * -Mmobay.adaptOffsetWidth, .5 * -Mmobay.adaptOffsetHeight),
        this.m_img_Mask.size(Laya.stage.width, Laya.stage.height)
    }
    showTalk(t = [], i) {
        this.m_pan_Con.elasticEnabled = !1,
        i && (this.m_fn = i);
        let e = [];
        for (var s of t)
            e.push(S(s));
        i = e[this.m_num];
        if (i) {
            let e = this.getTextShow();
            this.m_box_Talk.addChild(e),
            e.text = i,
            this.m_box_Talk.height > this.m_pan_Con.height && this.m_pan_Con.scrollTo(0, this.m_box_Talk.height - this.m_pan_Con.height + 10),
            Laya.Tween.to(e, {
                alpha: 1
            }, 2e3, null, Laya.Handler.create(this, () => {
                    this.showTalk(t)
                }), 0 == this.m_num ? 0 : 500),
            this.m_num++
        } else
            Laya.timer.once(2e3, this, () => {
                this.destroy()
            })
    }
    getTextShow() {
        let e = new Laya.Label;
        return e.width = 420,
        e.wordWrap = !0,
        e.fontSize = 28,
        e.color = "#FFF",
        e.bold = !0,
        e.leading = 10,
        e.alpha = 0,
        e
    }
    onDestroy() {
        this.m_fn && this.m_fn.run(),
        super.onDestroy()
    }
}
Bi.s_isShowing = !1;
const Ni = (e, t, i) => ({
    q: e,
    r: t,
    s: i
});
class Pi {
    constructor() {
        this.point = (e, t) => ({
            x: e,
            y: t
        }),
        this.origin = {
            x: 42,
            y: 84 / Math.sqrt(3)
        },
        this.hexSize = {
            x: 84 / Math.sqrt(3),
            y: 48
        },
        this.orientation = (e, t, i, s, a, r, n, o, l) => ({
            f0: e,
            f1: t,
            f2: i,
            f3: s,
            b0: a,
            b1: r,
            b2: n,
            b3: o,
            start_angle: l
        }),
        this.pointy = () => this.orientation(Math.sqrt(3), Math.sqrt(3) / 2, 0, 1.5, Math.sqrt(3) / 3, -1 / 3, 0, 2 / 3, .5),
        this.O = this.pointy(),
        this.astarHeuristic = (e, t) => this.getDistanceBetweenHexes(e, t),
        this.makePointyMap = (e, i) => {
            let s = [];
            for (let t = 0; t < e; t++) {
                var a = Math.floor(t / 2);
                for (let e = -a; e < i - a; e++)
                    s.push(Ni(e, t, -e - t))
            }
            return s
        },
        this.hexAtPoint = (e, t = !1) => {
            var i = this.O,
            e = this.point((e.x - this.origin.x) / this.hexSize.x, (e.y - this.origin.y) / this.hexSize.y),
            s = i.b0 * e.x + i.b1 * e.y,
            i = i.b2 * e.x + i.b3 * e.y,
            e = this._roundToHex({
                q: s,
                r: i,
                s: -s - i
            });
            if (!t)
                return e
        },
        this._roundToHex = e => {
            var t = Math.trunc(Math.round(e.q)),
            i = Math.trunc(Math.round(e.r)),
            s = Math.trunc(Math.round(e.s)),
            a = Math.abs(t - e.q),
            r = Math.abs(i - e.r),
            e = Math.abs(s - e.s);
            return r < a && e < a ? Ni(-i - s, i, s) : e < r ? Ni(t, -t - s, s) : Ni(t, i, -t - i)
        },
        this.pathTo = (e, s, i, a = []) => {
            const t = this.getHexLineBetweenHexes(e, s);
            i || t.push(s);
            let r = this.hexId;
            if (!t.find(t => !this.map.find(e => r(e) == r(t)) || a.find(e => r(e) == r(t))))
                return t;
            const n = this.astarGridSetup(this.map, a),
            o = [this.makeAstarHex(e)];
            let l,
            h,
            m;
            for (; 0 < o.length; ) {
                l = 0,
                h = o[l].f || 0;
                for (let e = 0; e < o.length; e++) {
                    var c = o[e];
                    c.f < h && (l = e, h = c.f)
                }
                if (m = o[l], r(m) == r(s)) {
                    let e = m,
                    t = [];
                    for (; e.parent; )
                        t.push(e), e = e.parent;
                    return t.push({
                        q: 0,
                        r: 0,
                        s: 0
                    }),
                    (t = i ? t.filter(e => r(e) != r(s)) : t).reverse()
                }
                o.splice(l, 1),
                m.closed = !0;
                var d = this.getAllNeighbors(m);
                for (let e = 0; e < d.length; e++) {
                    let t = d[e],
                    i = n.find(e => r(e) == r(t));
                    if (i && !i.closed && !i.isObstacle) {
                        var u = m.g + 1;
                        let e = !1;
                        i.visited ? u < i.g && (e = !0) : (e = !0, i.h = this.astarHeuristic(i, s), i.visited = !0, o.push(i)),
                        e && (i.parent = m, i.g = u, i.f = i.g + i.h)
                    }
                }
            }
            return []
        },
        this.array = e => new Array(e).fill(0),
        this.getHexLineBetweenHexes = (i, s) => {
            var e = this.getDistanceBetweenHexes(i, s);
            const a = 1 / Math.max(e, 1);
            return this.array(e).map((e, t) => this._roundToHex(this.hexLerp(i, s, a * t)))
        },
        this.getDistanceBetweenHexes = (e, t) => (Math.abs(e.q - t.q) + Math.abs(e.q + e.r - t.q - t.r) + Math.abs(e.r - t.r)) / 2,
        this.hexLerp = (e, t, i) => Ni(e.q + (t.q - e.q) * i, e.r + (t.r - e.r) * i, e.s + (t.s - e.s) * i),
        this.astarGridSetup = (t, i) => {
            let s = [];
            for (let e = 0; e < t.length; e++)
                s.push(this.makeAstarHex(t[e], i));
            return s
        },
        this.makeAstarHex = (t, e = []) => Object.assign(Object.assign({}, t), {
            f: 0,
            g: 0,
            h: 0,
            parent: null,
            isObstacle: !!e.find(e => this.hexId(t) == this.hexId(e))
        }),
        this.hexId = e => `${e.q}.${e.r}.` + e.s,
        this.getNeighborAtDirection = (e, t) => this.hexAdd(e, this.direction(t)),
        this.getAllNeighbors = i => this.array(6).map((e, t) => this.getNeighborAtDirection(i, t)),
        this.hexAdd = (e, t) => Ni(e.q + t.q, e.r + t.r, e.s + t.s),
        this.direction = e => this.directions()[e],
        this.hexScale = (e, t) => Ni(e.q * t, e.r * t, e.s * t),
        this.directions = () => [Ni(1, 0, -1), Ni(1, -1, 0), Ni(0, -1, 1), Ni(-1, 0, 1), Ni(-1, 1, 0), Ni(0, 1, -1)],
        this.cornersOfHex = (t, e = !1) => {
            if (!e || this.map.find(e => this.hexId(e) == this.hexId(t))) {
                const i = e => {
                    e = 2 * Math.PI * (e + this.O.start_angle) / 6;
                    return this.point(this.hexSize.x * Math.cos(e), this.hexSize.y * Math.sin(e))
                };
                const s = this.centerOfHex(t);
                return [0, 1, 2, 3, 4, 5, 6].map(e => {
                    e = i(e);
                    return this.point(s.x + e.x, s.y + e.y)
                })
            }
        },
        this.centerOfHex = (t, e = !1) => {
            var i;
            if (!e || this.map.find(e => this.hexId(e) == this.hexId(t)))
                return e = this.O, i = (e.f0 * t.q + e.f1 * t.r) * this.hexSize.x, e = (e.f2 * t.q + e.f3 * t.r) * this.hexSize.y, this.point(i + this.origin.x, e + this.origin.y)
        },
        this.getAllHexesWithinDistance = (i, e) => [i, ...this.array(e + 1).map((e, t) => this.getAllHexesAtDistance(i, t))],
        this.getHexAtDistanceAndDirection = (e, t, i) => this.hexAdd(e, this.hexScale(this.direction(i), t)),
        this.getAllHexesAtDistance = (i, s) => {
            let a = this.array(6).map((e, t) => this.getHexAtDistanceAndDirection(i, s, t));
            return a.map((e, t) => this.getHexLineBetweenHexes(e, a[0 == t ? 5 : t - 1]))
        },
        this.hexToScreen = e => {
            var t = this.O,
            i = (t.f0 * e.q + t.f1 * e.r) * this.hexSize.x,
            t = (t.f2 * e.q + t.f3 * e.r) * this.hexSize.y;
            return this.point(Math.floor(i + this.origin.x - 42), Math.floor(t + this.origin.y - 48))
        }
    }
    init(t, e, i, s) {
        if (this.origin.x = e, this.origin.y = i, !this.map) {
            let e = this.getAllHexesWithinDistance(t, s);
            this.map = e.flat(1 / 0)
        }
    }
    checkHex(e) {
        for (var t of this.map)
            if (t.q == e.q && t.r == e.r)
                return !0
    }
    screenToScreen(e, t) {
        e = this.screenToHex(e, t),
        t = this.hexToScreen(e);
        return new Laya.Point(t.x + 42, t.y + 48)
    }
    screenToHex(e, t) {
        return this.hexAtPoint({
            x: e,
            y: t
        })
    }
}
class qi extends t.hunt.views.tileMap.TileConveyDlgUI {
    constructor(e, t) {
        super(),
        this.m_unlock = !1,
        this.m_mapId = e,
        this.m_data = t
    }
    onAwake() {
        if (super.onAwake(), this.m_data)
            if (this.m_data.area) {
                if (this.m_txt_Title.changeText(S(this.m_data.title)), this.m_data.isBoat)
                    this.m_img.skin = "hunt/ui_tilemap/banner3.png";
                else if (1114 == this.m_data.title) {
                    let e = Ee.create({
                        url: "hunt/worldmap/spine/didong.json"
                    });
                    e.y = 170,
                    e.x = 230;
                    var t = O.tileMap.blocks.find(e => Data.getBlock(e.blockId).playType == M.openBurrow);
                    this.m_unlock = !t || t.isOver,
                    e.play(this.m_unlock ? 2 : 0, !0),
                    Laya.timer.frameOnce(2, this, () => {
                        this.m_img.addChild(e)
                    }),
                    this.m_unlock && (this.m_btn_Click.label = S(1109)),
                    !t || this.m_unlock || (t = Data.getBlock_openGameplay(t.blockId).cond[0])[0] == He.haveItemNum && (this.m_box_Cost.visible = !0, this.m_txt_Cost.text = "/" + t[2], this.m_txt_Have.text = "" + O.bag.getItemNum(t[1]), i = Data.getItem(t[1]).icon, this.m_img_Cost.skin = `hunt/ui_item/${i}.png`, this.m_txt_Have.color = O.bag.getItemNum(t[1]) >= t[2] ? o.White : o.Red)
                } else if (this.m_data.tran && this.m_data.tran.type == y.Tower) {
                    this.m_unlock = O.tileMap.checkUnlockMap(O.tileMap.mapId);
                    let e = Ee.create({
                        url: "hunt/worldmap/spine/chuansong.json"
                    });
                    e.y = 200,
                    e.x = 230,
                    e.play(this.m_unlock ? 2 : 0, !0),
                    Laya.timer.frameOnce(2, this, () => {
                        this.m_img.addChild(e)
                    }),
                    this.m_img.skin = "hunt/ui_tilemap/banner2.png",
                    this.m_unlock && (this.m_btn_Click.label = S(1109)),
                    this.m_txt_Title.changeText(S(1107) + S(1111))
                } else if (this.m_data.block && this.m_data.block.playType == M.worldBoss) {
                    this.m_txt_Title.changeText(S(1155));
                    var i = Data.getBlock_worldBoss(this.m_data.block.id),
                    t = Data.getCharType(i.bossId);
                    let e = Ee.create({
                        url: `hunt/role/${t.avatar}.json`
                    });
                    e.y = 200,
                    e.x = 280,
                    e.play(14, !0),
                    e.scale(.8, .8),
                    this.m_img.skin = "hunt/ui_tilemap/banner2.png",
                    this.addChild(e)
                } else
                    this.m_img.skin = "hunt/ui_tilemap/banner5.png";
                this.m_img.anchorX = this.m_img.anchorY = .5
            } else if (this.m_data.type == y.Boat)
                this.m_img.skin = "hunt/ui_tilemap/banner3.png", this.m_txt_Title.changeText(S(1105)), this.m_btn_Click.label = S(1110);
            else if (this.m_data.type == y.Tower) {
                this.m_unlock = O.tileMap.checkUnlockMap(this.m_mapId);
                i = this.m_unlock ? S(1107) : S(1106);
                this.m_btn_Click.label = i,
                this.m_txt_Title.changeText(i + S(1111));
                let e = Ee.create({
                    url: "hunt/worldmap/spine/chuansong.json"
                });
                e.y = 200,
                e.x = 230,
                e.play(this.m_unlock ? 2 : 0, !0),
                Laya.timer.frameOnce(2, this, () => {
                    this.m_img.addChild(e)
                })
            } else if (this.m_data.type == y.City) {
                let e = O.tileMap,
                t = 1126;
                if (e.checkProps(this.m_data.pointData, "arenanpc"))
                    this.m_img.skin = "hunt/ui_mistery/elf_bg.png", t = 1144;
                else if (e.checkProps(this.m_data.pointData, "arena")) {
                    t = 2011;
                    let e = Ee.create({
                        url: "hunt/worldmap/spine/jingjichang.json"
                    });
                    e.play(0, !0),
                    e.y = 170,
                    e.x = 230,
                    e.scale(.6, .6),
                    Laya.timer.frameOnce(2, this, () => {
                        this.m_img.addChild(e)
                    })
                } else {
                    let e = Ee.create({
                        url: "hunt/worldmap/spine/shalou.json"
                    });
                    e.play(O.tileMap.getClockIndex(), !0),
                    e.y = 270,
                    e.x = 230,
                    Laya.timer.frameOnce(2, this, () => {
                        this.m_img.addChild(e)
                    })
                }
                this.m_btn_Click.label = S(1119),
                this.m_txt_Title.changeText(S(t))
            }
    }
    onDestroy() {
        super.onDestroy(),
        this.m_canvasUrl && Laya.Loader.clearRes(this.m_canvasUrl)
    }
    onClickClick() {
        let e = O.tileMap;
        var t;
        this.m_data.area && this.m_unlock ? (t = this.m_data.tran, e.reqMoveTo([+e.checkProps(t, "transx"), +e.checkProps(t, "transy")]).then(() => {
                let e = B.instance,
                t = e.m_transAni;
                xe(!0),
                t.visible = !0,
                e.m_stopMove = !0,
                t.once(Laya.Event.COMPLETE, t, () => {
                    t.visible = !1,
                    e.m_ani.visible = !1,
                    O.event(c.TRANSANI),
                    I.instance.playSound(v.SE_TeleportStart),
                    e.showTransAni(() => {
                        e.switchMap(0),
                        e.doTransAni()
                    }, () => {
                        xe(!1)
                    })
                }),
                O.event(c.CONVEY_MAP),
                t.play(0, !1)
            }), this.closeDialog()) : this.m_data.type == y.Boat || this.m_data.type == y.City ? this.closeDialog(d.Yes) : this.m_data.type == y.Tower ? this.m_unlock ? this.closeDialog(d.Yes) : e.reqUnlock(this.m_mapId).then(() => {
            B.instance.m_openTower = !0,
            this.closeDialog(d.Yes)
        }) : this.closeDialog()
    }
}
class Ui extends t.hunt.views.block.BlockInfoDlgUI {
    constructor(e, t, i = !1, s) {
        super(),
        this.isShow = !1,
        this.isShow = i,
        this.m_title = t,
        this.m_banner = e,
        this.m_block = s
    }
    onAwake() {
        super.onAwake(),
        this.m_txt_Title.text = this.m_title,
        this.m_img_Type.skin = `hunt/ui_block/block_banner${this.m_banner}.png`,
        this.isShow && (this.m_btn_Click.visible = !1, this.m_btn_C.visible = !0),
        this.setAuthor(Data.getBlock(this.m_block.id).authors),
        this.updateBlockInfo(this.m_block.id)
    }
    onClickClick() {
        this.closeDialog(d.Yes)
    }
    setAuthor(e = []) {
        this.m_view_Author.setData(e)
    }
    updateBlockInfo(t) {
        O.block.reqBlockInfo(t).then(e => {
            this.destroyed || (this.m_view_Like.visible = !0, this.m_view_Like.setData(t, e), this.m_view_Comment.visible = !0, this.m_view_Comment.setData(t))
        })
    }
}
class Hi extends t.hunt.views.tileMap.TileInfoViewUI {
    constructor(e, t, i) {
        super(),
        this.m_type = e,
        this.m_pos = t,
        this.m_data = i
    }
    onAwake() {
        super.onAwake(),
        this.m_pos.length && (this.x = +this.m_pos[0], this.y = +this.m_pos[1]),
        this.m_data && this.m_data.block && this.m_data.block.playType == M.worldBoss ? (this.m_img_Icon.skin = "hunt/ui_fight/boss_crown.png", this.m_img_Icon.scale(.8, .8), this.m_img_Warning.visible = !0, this.aniBoss.play(0, !0)) : this.m_data && this.m_data.icon ? this.m_img_Icon.skin = `hunt/ui_tilemap/img${this.m_data.icon}.png` : this.m_img_Icon.skin = "hunt/ui_tilemap/img9.png",
        this.on(Laya.Event.CLICK, this, e => {
            if (this.m_type)
                this.m_type == y.Tower && Ae({
                    button: V.Yes,
                    msg: S(1112),
                    title: S(this.m_pos[2]),
                    okTxt: S(1109)
                }).then(e => {
                    if (e.type == d.Yes) {
                        let i = this.m_data.mapId;
                        if (B.instance) {
                            let t = B.instance;
                            t.m_stopMove = !0,
                            T.battle && T.end(),
                            O.tileMap.reqConvey(i).then(() => {
                                let e = t.m_transAni;
                                xe(e.visible = !0),
                                e.once(Laya.Event.COMPLETE, e, () => {
                                    t.m_ani.visible = !1,
                                    e.visible = !1,
                                    O.event(c.TRANSANI),
                                    t.showTransAni(() => {
                                        t.createMap(i, 1, !0)
                                    })
                                }),
                                e.play(0, !1),
                                I.instance.playSound(v.SE_TeleportStart),
                                O.event(c.HOME_MAP_CHANGE)
                            })
                        }
                    }
                });
            else if (Yi && Yi.instance) {
                var t = this.m_data.block;
                if (t) {
                    if (t.playType == M.fish)
                        return void u(Ui, {
                            params: [M.fish, S(13007), !0, t]
                        });
                    if (t.playType == M.invite)
                        return void u(Ui, {
                            params: [M.invite, S(2048), !0, t]
                        })
                }
                u(qi, {
                    params: [O.tileMap.mapId, {
                            area: !0,
                            title: O.tileMap.checkProps(this.m_data.tran, "name") || 0,
                            isBoat: O.tileMap.checkProps(this.m_data.tran, "boat"),
                            tran: this.m_data.tran,
                            block: t
                        }
                    ]
                })
            }
        })
    }
}
class Oi extends t.hunt.views.tileMap.PositionViewUI {
    onAwake() {
        let e = this.m_locTl = new Laya.TimeLine;
        var t = this.m_img_Pos.y;
        e.to(this.m_img_Pos, {
            y: t - 30
        }, 200, Laya.Ease.circOut, 200).to(this.m_img_Pos, {
            y: t
        }, 200, Laya.Ease.circIn).to(this.m_img_Pos, {
            y: t - 20
        }, 200, Laya.Ease.circOut).to(this.m_img_Pos, {
            y: t
        }, 200, Laya.Ease.circIn).to(this.m_img_Pos, {
            y: t - 10
        }, 200, Laya.Ease.circOut).to(this.m_img_Pos, {
            y: t
        }, 200, Laya.Ease.circIn).to(this.m_img_Pos, {
            y: t - 5
        }, 200, Laya.Ease.circOut).to(this.m_img_Pos, {
            y: t
        }, 200, Laya.Ease.circIn),
        e.play(0, !0)
    }
    onDestroy() {
        super.onDestroy(),
        this.m_locTl && (this.m_locTl.destroy(), this.m_locTl = null)
    }
}
class Vi extends t.hunt.views.block.BlockInfoViewUI {
    constructor(e, t = !0) {
        super(),
        this.m_enable = !0,
        this.m_block = e,
        this.m_enable = t
    }
    onAwake() {
        super.onAwake(),
        this.m_block && (this.updateView(), this.on(Laya.Event.CLICK, this, e => {
                var t = Data.getBlock(this.m_block.blockId);
                let i = [M.normalBoss, M.normalMonster, M.normalChest, M.worldBoss];
                -1 == i.indexOf(t.playType) && (e.stopPropagation(), this.m_enable ? B.instance.onStageClick(e, 100) : O.block.blockHero(this.m_block, this.m_enable))
            }))
    }
    updateView() {
        var e,
        t = Data.getBlock(this.m_block.blockId),
        i = t.playType;
        this.m_img_Done.visible = !1,
        i == M.talkHero ? ((e = Data.getBlock_talkHero(this.m_block.blockId)) && (e = 0 == R.sex ? e.heroMale : e.heroFemale, this.m_img_Icon.skin = `hunt/ui_hero/h${e}.png`), this.m_box_Hero.visible = !0, this.shakeHead.play(0, !0)) : i == M.talk ? (this.m_box_Talk.visible = !0, this.m_img_Done.visible = 0 < this.m_block.talkRewards.length, this.m_img_TalkIco.skin = "hunt/ui_block/block_talk.png") : i != M.normalBoss && i != M.normalMonster && i != M.imitatePvp && i != M.worldBoss || (this.m_box_Star.visible = !0, this.m_txt_Star.text = t.star + "")
    }
}
class Fi extends t.hunt.views.tileMap.ArrowViewUI {}
class Gi extends t.hunt.views.tileMap.AreaMaskViewUI {
    constructor(e, t) {
        super(),
        this.m_w = 0,
        this.m_h = 0,
        this.m_w = e,
        this.m_h = t
    }
    onAwake() {
        super.onAwake();
        let e = new Laya.Sprite,
        t = new Laya.Sprite,
        i = (e.graphics.drawRect(0, -this.m_h, this.width, this.m_h, "#000000"), t.graphics.drawRect(0, this.m_img_Circle.height * this.m_img_Circle.scaleY, this.width, this.m_h, "#000000"), this.ani1.play(0, !0), this.m_box_Mask.addChild(e), this.m_box_Mask.addChild(t), new Laya.Sprite),
        s = new Laya.Sprite;
        i.graphics.drawRect(-this.m_w, -this.m_h, this.m_w, 2 * this.m_h, "#000000"),
        s.graphics.drawRect(560, -this.m_h, this.m_w, 2 * this.m_h, "#000000"),
        this.m_box_Mask.addChild(i),
        this.m_box_Mask.addChild(s)
    }
    onDestroy() {
        super.onDestroy(),
        Laya.Tween.clearAll(this)
    }
}
class Wi extends t.hunt.views.treasure.TreasureIconUI {
    constructor(e) {
        super(),
        this.m_end = !1,
        this.m_end = e
    }
    onAwake() {
        super.onAwake(),
        this.anchorX = this.anchorY = .5,
        this.scale(2, 2),
        this.m_img_Icon.skin = (this.m_end, "hunt/ui_treasure/pos.png")
    }
}
class Yi extends t.hunt.views.tileMap.TileAreaMapViewUI {
    constructor(e, t = 0) {
        super(),
        this.rect = new Laya.Rectangle(0, 0, 0, 0),
        this.mLastMouseX = 0,
        this.mLastMouseY = 0,
        this.mX = 0,
        this.m_convey = [],
        this.m_conveyPos = [],
        this.mY = 0,
        this.m_pos = new Laya.Point,
        this.mapScale = +e,
        this.holescale = t,
        this.holescale && (this.mapScale = this.holescale)
    }
    onAwake() {
        super.onAwake(),
        this.tMap = new Laya.TiledMap,
        this.width = Laya.stage.width,
        this.height = Laya.stage.height,
        this.createMap(O.tileMap.mapId),
        Yi.instance = this
    }
    onDestroy() {
        super.onDestroy(),
        Yi.instance = null,
        this.tMap.destroy(),
        this.tMap = null,
        Laya.timer.clearAll(this)
    }
    createMap(e) {
        this.tMap.autoCache = !1,
        this.tMap._isNight = O.tileMap.isNight;
        var t = new Laya.Rectangle(84, 96, 84, 96);
        this.tMap.createMap(`hunt/worldmap/map${e}.json`, new Laya.Rectangle(0, 0, this.width, this.height), Laya.Handler.create(this, () => {
                this && !this.destroyed && (this.completeHandler(), this.addChildAt(this.tMap.mapSprite(), 0), this.tMap.getLayerByName("area") && this.tMap.getLayerByName("area").destroy())
            }), t, new Laya.Point(84, 480))
    }
    completeHandler() {
        this.initMapViewPort(),
        this.hex = new Pi;
        var e = O.tileMap,
        e = this.hex.screenToScreen(e.mapPos[0], e.mapPos[1]);
        this.tMap.setViewPortPivotByScale(0, 0),
        this.tMap.scale = this.mapScale,
        this.focusMapItem(e),
        this.resize(),
        this.initBlock(),
        this.initTransPort(),
        this.visible = !1,
        this.createRole(e),
        this.on(Laya.Event.RESIZE, this, this.resize),
        this.on(Laya.Event.MOUSE_DOWN, this, this.mouseDown),
        this.on(Laya.Event.MOUSE_UP, this, this.mouseUp)
    }
    initTransPort() {
        var s = this.getLayarJsonByName("convey");
        if (s) {
            s = s.objects;
            if (s) {
                let n = O.tileMap,
                i;
                var a = n.getTreasureBlock();
                let t = [],
                e = null;
                if (a && a.treasure && a.treasure.isOpen) {
                    var r = Data.getBlock_treasure(a.blockId),
                    o = a.treasure.pointRewards;
                    for (let e = 0; e < r.points.length; e++)
                        o && o[e] || t.push(r.points[e]);
                    t.length || a.treasure && a.treasure.finalReward || (e = r.finalPoint)
                }
                for (let r of s) {
                    e && r.name == e ? (O.treasure.m_treashow && this.focusMapItem(new Laya.Point(r.x, r.y)), E(Wi, {
                            params: [!0]
                        }).then(e => {
                            e.x = r.x,
                            e.y = r.y,
                            this.logicLayer.addChildAt(e, 0)
                        })) : t.length && -1 != t.indexOf(+r.name) && E(Wi, {}).then(e => {
                        e.x = r.x,
                        e.y = r.y,
                        this.logicLayer.addChildAt(e, 0)
                    });
                    var l = n.checkProps(r, "arrow");
                    if (l && this.holescale) {
                        let e = new Fi;
                        e.anchorX = e.anchorY = .5,
                        e.scaleX = e.scaleY = 1 / this.mapScale,
                        e.x = r.x,
                        e.y = r.y,
                        e.rotation = 90 * l - 90,
                        Laya.timer.frameOnce(5, this, () => {
                            this.logicLayer.addChild(e)
                        })
                    }
                    let a = n.checkUnlockMap(n.mapId);
                    if (r.type == y.Tower) {
                        l = a;
                        let e = r.properties;
                        var h = e && e.find(e => "placeX" == e.name) ? e.find(e => "placeX" == e.name) : {},
                        m = e && e.find(e => "placeY" == e.name) ? e.find(e => "placeY" == e.name) : {};
                        let t = this.createSpine("hunt/worldmap/spine/chuansong.json", r.x, r.y - 50, l ? 2 : 0, 1, l, [-h.value || 0, -m.value || 0]);
                        Laya.timer.frameOnce(2, this, () => {
                            this.logicLayer.addChild(t)
                        })
                    } else if (n.checkProps(r, "arena")) {
                        let e = r.properties;
                        l = e && e.find(e => "placeX" == e.name) ? e.find(e => "placeX" == e.name) : {},
                        h = e && e.find(e => "placeY" == e.name) ? e.find(e => "placeY" == e.name) : {};
                        let t = this.createSpine("hunt/worldmap/spine/jingjichang.json", r.x, r.y, 0, 1, !0, [-l.value || 0, -h.value || 0]);
                        Laya.timer.frameOnce(2, this, () => {
                            this.logicLayer.addChild(t)
                        })
                    } else if (n.checkProps(r, "arenanpc")) {
                        let e = r.properties;
                        m = e && e.find(e => "placeX" == e.name) ? e.find(e => "placeX" == e.name) : {},
                        l = e && e.find(e => "placeY" == e.name) ? e.find(e => "placeY" == e.name) : {};
                        let t = this.createSpine("hunt/role/1001.json", r.x, r.y, 13, 1, !0, [-m.value || 0, -l.value || 0]);
                        Laya.timer.frameOnce(2, this, () => {
                            this.logicLayer.addChild(t)
                        })
                    } else
                        r.type == y.City && (i = r);
                    l = n.checkProps(r, "icon");
                    if (l) {
                        let t = r.type == y.Tower,
                        i = this.hex.screenToScreen(r.x, r.y),
                        s = (t && (i.y -= 150), this.m_conveyPos.push(new Laya.Point(i.x, i.y)), n.checkProps(r, "blockId"));
                        E(Hi, {
                            params: [null, [], {
                                    icon: l,
                                    tran: r,
                                    block: s ? Data.getBlock(s) : null
                                }
                            ]
                        }).then(e => {
                            a || t || (e.visible = !1),
                            711 != s || n.blocks.find(e => e.blockId == s) || (e.visible = !1),
                            e.x = (i.x + this.tMap.viewPortX) * this.mapScale,
                            e.y = (i.y + this.tMap.viewPortY) * this.mapScale,
                            this.m_convey.push(e),
                            this.addChild(e)
                        })
                    }
                }
                if (i) {
                    let e = i.properties;
                    a = e && e.find(e => "placeX" == e.name) ? e.find(e => "placeX" == e.name) : {},
                    s = e && e.find(e => "placeY" == e.name) ? e.find(e => "placeY" == e.name) : {};
                    let t = this.createSpine("hunt/worldmap/spine/shalou.json", i.x, i.y, O.tileMap.getClockIndex(), 1, !1, [-a.value || 0, -s.value || 0]);
                    Laya.timer.frameOnce(2, this, () => {
                        this.logicLayer.addChild(t)
                    })
                }
            }
        }
    }
    getLayarJsonByName(t) {
        let e = this.tMap._jsonData;
        if (e)
            return e.layers.find(e => e.name == t)
    }
    createRole(e) {
        let t = new Oi;
        t.anchorX = .5,
        t.anchorY = .7,
        t.x = e.x,
        t.y = e.y,
        t.scale(1 / this.mapScale, 1 / this.mapScale),
        this.m_pos.setTo(e.x, e.y),
        Laya.timer.frameOnce(2, this, () => {
            this.visible = !0,
            this.logicLayer.addChild(t)
        }),
        this.holescale ? (e = new Gi(this.tMap.width, this.tMap.height), t.addChild(e)) : O.tileMap.checkUnlockMap(O.tileMap.mapId) || (e = new Gi(this.tMap.width, this.tMap.height), t.addChild(e))
    }
    initBlock() {
        var e = this.getLayarJsonByName("logic");
        if (e) {
            e = e.objects;
            if (e) {
                let i = O.tileMap;
                if (i.blocks)
                    for (let t of e) {
                        var s = this.hex.screenToScreen(t.x, t.y),
                        s = (t.x = s.x, t.y = s.y, i.blocks.find(e => e.pointName == t.name && Math.floor(e.blockSpawnId / 1e3) == i.mapId));
                        s && (t.blockId = s.blockId, t.blockSpawnId = s.blockSpawnId, this.createBlock(s, t))
                    }
            }
        }
    }
    initMapViewPort() {
        this.rect.width = this.tMap.width,
        this.rect.height = this.tMap.height * (96 - Math.sqrt(588)) / 96
    }
    resize() {
        this.mX = this.fixPosX(this.mX),
        this.mY = this.fixPosY(this.mY),
        this.tMap.changeViewPort(this.mX, this.mY, this.width, this.height)
    }
    fixPosX(e) {
        var t = this.rect;
        return Math.max(42 / this.mapScale, Math.range(e, t.x, t.width - this.width / this.mapScale - 42))
    }
    fixPosY(e) {
        var t = this.rect;
        return Math.max(24, Math.range(e, t.y, t.height - this.height / this.mapScale))
    }
    focusMapItem(e) {
        this.mX = this.fixPosX(e.x - this.width / 2 / this.mapScale),
        this.mY = this.fixPosY(e.y - this.height / 2 / this.mapScale),
        this.tMap.changeViewPort(this.mX, this.mY, this.width, this.height),
        this.logicLayer && (this.logicLayer.x = -this.mX, this.logicLayer.y = -this.mY)
    }
    mouseMove() {
        var i = this.fixPosX(this.mX - (this.mouseX / this.mapScale - this.mLastMouseX)),
        s = this.fixPosY(this.mY - (this.mouseY / this.mapScale - this.mLastMouseY));
        for (let t = 0; t < this.m_convey.length; t++) {
            let e = this.m_convey[t];
            e.x = (this.m_conveyPos[t].x - i) * this.mapScale,
            e.y = (this.m_conveyPos[t].y - s) * this.mapScale
        }
        this.logicLayer && (this.logicLayer.x = -i, this.logicLayer.y = -s),
        this.tMap.moveViewPort(i, s)
    }
    mouseUp() {
        this.mX = this.fixPosX(this.mX - (this.mouseX / this.mapScale - this.mLastMouseX)),
        this.mY = this.fixPosY(this.mY - (this.mouseY / this.mapScale - this.mLastMouseY)),
        this.off(Laya.Event.MOUSE_MOVE, this, this.mouseMove),
        this.off(Laya.Event.MOUSE_OUT, this, this.mouseOut)
    }
    mouseOut() {
        this.mX = this.fixPosX(this.mX - (this.mouseX / this.mapScale - this.mLastMouseX)),
        this.mY = this.fixPosY(this.mY - (this.mouseY / this.mapScale - this.mLastMouseY)),
        this.off(Laya.Event.MOUSE_MOVE, this, this.mouseMove),
        this.off(Laya.Event.MOUSE_OUT, this, this.mouseOut)
    }
    mouseDown() {
        this.mLastMouseX = this.mouseX / this.mapScale,
        this.mLastMouseY = this.mouseY / this.mapScale,
        this.on(Laya.Event.MOUSE_MOVE, this, this.mouseMove),
        this.on(Laya.Event.MOUSE_OUT, this, this.mouseOut)
    }
    createBlock(b, w) {
        let C = b.blockId,
        x = Data.getBlock(C);
        if (x) {
            var S = x.playType;
            let I = !!O.tileMap.checkUnlockMap(O.tileMap.mapId);
            switch (S) {
            case M.normalBoss:
                var A = Data.getBlock_normalBattle(C);
                if (!A)
                    return;
                A = Data.getCharType(A.bossId);
                let e = 0,
                t = 0;
                var D = Data.getSpineParam(A.avatar);
                D && (e = D.offset[0] || 0, t = D.offset[1] || 0);
                let i = this.createSpine(`hunt/role/${A.avatar}.json`, w.x, w.y, 14, .7, !0, [e, t]);
                Laya.timer.frameOnce(2, this, () => {
                    this.logicLayer.addChild(i)
                });
                break;
            case M.normalMonster:
                D = Data.getBlock_normalBattle(C);
                if (!D)
                    return;
                A = Data.getMonsterGroup(D.monsterGroup[0]);
                if (!A || !A.monsters.length)
                    return;
                D = Data.getCharType(A.monsters[0]);
                let s = 0,
                a = 0;
                A = Data.getSpineParam(D.avatar);
                A && (s = A.offset[0] || 0, a = A.offset[1] || 0);
                let r = this.createSpine(`hunt/role/${D.avatar}.json`, w.x, w.y, 14, .7, !0, [s, a]);
                Laya.timer.frameOnce(2, this, () => {
                    this.logicLayer.addChild(r)
                });
                break;
            case M.imitatePvp:
                A = b.squad[1],
                D = Data.getSpineParam(A);
                let n = 0,
                o = 0,
                l = (D && (n = D.offset[0] || 0, o = D.offset[1] || 0), this.createSpine(`hunt/role/${A}.json`, w.x, w.y, 13, .7, !0, [n, o]));
                Laya.timer.frameOnce(2, this, () => {
                    this.logicLayer.addChild(l)
                });
                break;
            case M.worldBoss:
                if (b.isOver)
                    return;
                D = Data.getBlock_worldBoss(C);
                if (!D)
                    return;
                A = Data.getCharType(D.bossId),
                D = Data.getSpineParam(A.avatar);
                let h = 0,
                m = 0,
                c = (D && (h = D.offset[0] || 0, m = D.offset[1] || 0), this.createSpine(`hunt/role/${A.avatar}.json`, w.x, w.y - 100, 13, 1, !0, [h, m]));
                Laya.timer.frameOnce(2, this, () => {
                    this.logicLayer.addChild(c);
                    let t = this.hex.screenToScreen(w.x + (x.bubblePos[0] || 0), w.y + (x.bubblePos[1] || 0));
                    this.m_conveyPos.push(new Laya.Point(t.x, t.y - 150)),
                    E(Hi, {
                        params: [null, [], {
                                block: Data.getBlock(C)
                            }
                        ]
                    }).then(e => {
                        e.x = (t.x + this.tMap.viewPortX) * this.mapScale,
                        e.y = (t.y - 150 + this.tMap.viewPortY) * this.mapScale,
                        this.m_convey.push(e),
                        this.addChild(e)
                    })
                });
                break;
            case M.normalChest:
                D = Data.getBlock_normalChest(C);
                if (!D)
                    return;
                let d = new Laya.Image;
                d.skin = `hunt/ui_comm/${D.icon}_shadow.png`,
                d.anchorX = d.anchorY = .5,
                d.size(90, 90),
                d.x = w.x,
                d.y = w.y,
                Laya.timer.frameOnce(2, this, () => {
                    this.logicLayer.addChild(d)
                });
                break;
            case M.openBurrow:
                let u = w.properties;
                A = u ? u.find(e => "placeX" == e.name) : {
                    value: 0
                },
                D = u ? u.find(e => "placeY" == e.name) : {
                    value: 0
                };
                let _ = this.createSpine("hunt/worldmap/spine/didong.json", w.x + A.value, w.y + D.value, b.isOver ? 2 : 0, 1, b.isOver);
                Laya.timer.frameOnce(2, this, () => {
                    this.logicLayer.addChild(_)
                });
                break;
            case M.openWharf:
            case M.talk:
                break;
            case M.talkHero:
                let p = this.hex.screenToScreen(w.x + (x.bubblePos[0] || 0), w.y + (x.bubblePos[1] || 0));
                b.isOver || (this.m_conveyPos.push(new Laya.Point(p.x, p.y)), E(Vi, {
                        params: [b, !1]
                    }).then(e => {
                        I || (e.visible = !1),
                        e.anchorX = .5,
                        e.anchorY = 1,
                        e.x = (p.x + this.tMap.viewPortX) * this.mapScale,
                        e.y = (p.y + this.tMap.viewPortY) * this.mapScale,
                        this.m_convey.push(e),
                        this.addChild(e)
                    }));
                break;
            case M.fish:
                let g = this.createSpine("hunt/role/6070.json", w.x, w.y, 15, .7);
                Laya.timer.frameOnce(2, this, () => {
                    this.logicLayer.addChild(g)
                });
                break;
            case M.invite:
                let y = this.createSpine("hunt/role/1008.json", w.x, w.y, 14, .7);
                Laya.timer.frameOnce(2, this, () => {
                    this.logicLayer.addChild(y)
                });
                break;
            case M.memoryCard:
                if (b.isOver)
                    return;
                let v = this.createSpine("hunt/spine/remember.json", w.x, w.y, 0, 1.5);
                Laya.timer.frameOnce(2, this, () => {
                    this.logicLayer.addChild(v)
                });
                break;
            case M.treasure:
                if (b.isOver)
                    return;
                if (!O.tileMap.getTreasureBlock())
                    return;
                let k = B.instance.createSpine("hunt/spine/treasure.json", w.x, w.y - 25, 0, .5);
                Laya.timer.frameOnce(2, this, () => {
                    this.logicLayer.addChild(k)
                });
                break;
            case M.teamBoss:
                let f = B.instance.createSpine("hunt/spine/treasure.json", w.x, w.y - 25, 0, .5);
                Laya.timer.frameOnce(2, this, () => {
                    this.logicLayer.addChild(f)
                })
            }
        }
    }
    get logicLayer() {
        return this.tMap.getLayerByName("logic")
    }
    createSpine(e, t, i, s = 14, a = 1, r = !0, n = []) {
        let o = Ee.create({
            url: e,
            offset: n
        });
        return o.x = t,
        o.y = i,
        1 != a && o.scale(a, a),
        o.play(s, r),
        o
    }
}
class Xi extends t.hunt.views.mistery.ClockClubViewUI {
    onAwake() {
        super.onAwake(),
        Promise.all([O.arena.reqArenaClub(), O.club.reqClubInfo()]).then(() => {
            this.updateView()
        })
    }
    onDestroy() {
        this.tick && this.tick.dispose(),
        super.onDestroy()
    }
    updateView() {
        var e = O.arena,
        t = e.rankList || [],
        i = e.clubRank,
        t = (this.m_lst_Rank.array = t, O.club.clubInfo),
        s = t ? t.name : "",
        a = t ? t.population : 0,
        t = t ? t.icon : "";
        this.m_view_Me.visible = 0 < i,
        0 < i && this.m_view_Me.dataChanged(null, {
            rank: i,
            name: s,
            population: a,
            icon: t,
            grade: e.myGrade,
            cup: e.myCup
        }),
        this.m_view_Me.m_img_Bg.skin = "hunt/ui_comm/s9_bg19.png"
    }
}
r([n(c.CLUB_RANK)], Xi.prototype, "updateView", null);
class ji extends t.hunt.views.mistery.ClockDetailDlgUI {
    onAwake() {
        super.onAwake(),
        Object.assign(this.m_div_Msg.style, {
            fontSize: 24,
            bold: !0,
            color: "#ffffff",
            leading: 4,
            wordWrap: !0
        }),
        this.m_div_Msg.innerHTML = S(2032),
        this.m_box_Div.height = this.m_div_Msg.contextHeight,
        this.m_div_Msg.x = (this.m_pan_Msg.width - this.m_div_Msg.contextWidth) / 2
    }
    onClickSure(e) {
        this.closeDialog(d.Yes)
    }
    onClickCancel(e) {
        this.closeDialog(d.No)
    }
}
class Ki extends t.hunt.views.mistery.ClockRankViewUI {
    onAwake() {
        super.onAwake(),
        O.arena.reqArenaRank().then(e => {
            this.updateView(e)
        })
    }
    updateView(e) {
        var t = e.rankList,
        t = (this.m_lst_Rank.array = t, O.club.clubInfo ? O.club.clubInfo.name : "");
        0 < e.myMilitaryGrade ? (this.m_view_Me.visible = !0, this.m_view_Me.dataChanged(null, {
                rank: e.myRank,
                clubName: t,
                score: e.myScore,
                militaryGrade: e.myMilitaryGrade,
                name: R.name,
                userId: R.id,
                icon: R.icon
            })) : this.m_view_Me.visible = !1
    }
    onClickInfo() {
        u(ji)
    }
}
class zi extends t.hunt.views.mistery.ClockClubDetailDlgUI {
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        O.arena.reqArenaClub().then(() => {
            var e = O.arena.clubRank;
            this.m_txt_Rank.text = "" + Math.max(0, e),
            this.m_lst_Rank.array = O.arena.getClubSeasonRank(),
            this.m_view_Rank.dataChanged(null, Data.getArenaSeasonClubSettle(e)),
            this.m_box_Rank.visible = -1 != e,
            this.m_txt_NoRank.visible = -1 == e
        })
    }
}
class $i extends t.hunt.views.mistery.ClockRankDetailDlgUI {
    constructor(e = !1) {
        super(),
        this.m_week = !1,
        this.m_week = e
    }
    onAwake() {
        super.onAwake(),
        this.m_week && (this.m_txt_Title.text = S(2043)),
        this.updateView()
    }
    updateView() {
        let e = O.arena;
        var t = this.m_week ? e.getArenaWeekRank() : e.getArenaSeasonRank(),
        t = (this.m_lst_Rank.array = t, this.m_txt_Rank.changeText(Math.max(0, +e.myRank) + ""), this.m_week ? this.getArenaWeekRank(+e.myRank) : this.getArenSeasonRank(+e.myRank));
        this.m_view_Rank.visible = !!t,
        t && this.m_view_Rank.dataChanged(null, t)
    }
    getArenaWeekRank(e) {
        if (!e)
            return null;
        for (var t in Data.arenaWeekSettles) {
            t = Data.getArenaWeekSettle(+t);
            if (+t.start <= e && +t.end >= e)
                return t
        }
    }
    getArenSeasonRank(e) {
        if (!e)
            return null;
        for (var t in Data.arenaSeasonSettles) {
            t = Data.getArenaSeasonSettle(+t);
            if (+t.start <= e && +t.end >= e)
                return t
        }
    }
}
r([n(c.ARENA_RANK)], $i.prototype, "updateView", null);
class Qi extends t.hunt.views.mistery.ClockDlgUI {
    onAwake() {
        super.onAwake(),
        this.addTitle(S(2028)),
        this.m_box_Stack.setupCls([{
                    cls: Ki
                }, {
                    cls: Xi
                }
            ]),
        this.m_tab_Tab.selectedIndex = 0,
        this.m_btn_Info.enableAnimating = !1;
        let e = Ee.create({
            url: "hunt/worldmap/spine/shalou.json"
        }),
        t = (e.x = this.m_box_Spine.width / 2, e.y = 1.3 * this.m_box_Spine.height, e.play(O.tileMap.getClockIndex(), !0), this.m_box_Spine.addChild(e), this.tick && this.tick.dispose(), this.tick = Ei.create(Yt(), 1e3, this.m_txt_Time, "D:HH:MM:ss"));
        t.start()
    }
    onDestroy() {
        this.tick && this.tick.dispose(),
        super.onDestroy()
    }
    onSelectTab(e) {
        this.m_box_Stack.changeIndex(e)
    }
    onClickInfo() {
        u(ji)
    }
    onClickDetail() {
        0 == this.m_tab_Tab.selectedIndex ? u($i) : u(zi)
    }
}
class Ji extends t.hunt.views.tileMap.TileWorldViewUI {
    onAwake() {
        super.onAwake(),
        this.updateView(),
        this.width = Laya.stage.width,
        this.m_pan_World.width = Laya.stage.width,
        this.m_pan_World.height = Laya.stage.height;
        var e = this.m_img_World.height;
        e < Laya.stage.height && (this.m_box_World.scaleX = this.m_box_World.scaleY = Laya.stage.height / e),
        this.m_btn_Box.enableAnimating = !1
    }
    onDestroy() {
        this.tick && this.tick.dispose(),
        super.onDestroy(),
        Laya.timer.clearAll(this)
    }
    updateView() {
        this.m_pan_World.elasticEnabled = !1,
        this.m_pan_World.hScrollBar.visible = !1,
        this.initCloud(),
        this.initWorldMap(),
        this.tick && this.tick.dispose();
        let e = this.tick = Ei.create(Yt(), 1e3, this.m_txt_Time, "D:HH:MM:ss");
        e.start(),
        e.onEnd = () => {}
    }
    initWorldMap() {
        let i = O.tileMap,
        s = Data.gameConf.tileMapCfg;
        for (let t = 1; t <= Object.keys(s).length; t++) {
            let e = s["conveyPos" + t] || "";
            var a;
            e && (a = e.split(","), i.checkUnlockMap(t) && (a = new Hi(y.Tower, a, {
                        mapId: t
                    }), this.m_box_World.addChild(a)))
        }
        Laya.timer.frameOnce(5, this, () => {
            this.m_pan_World.hScrollBar.value = this.m_pan_World.width / 3
        });
        let e = Ee.create({
            url: "hunt/worldmap/spine/shalou.json"
        });
        e.x = this.m_btn_Box.width / 2,
        e.y = 1.3 * this.m_btn_Box.height + 250,
        e.play(18, !0),
        e.scaleX = 1.5,
        e.scaleY = 1.5;
        var t = s.clockPos.split(",");
        this.m_btn_Box.x = +t[0],
        this.m_btn_Box.y = +t[1],
        this.m_btn_Box.addChild(e)
    }
    initCloud() {
        let i = O.tileMap;
        var s,
        a = Data.gameConf.tileMapCfg;
        for (let t = 1; t <= 6; t++) {
            let e = a["cloudArr" + t];
            if (e && !i.checkUnlockMap(t))
                for (s of e.split(";")) {
                    var r = s.split(",");
                    if (!(r.length < 2)) {
                        let e = new Laya.Image("hunt/ui_tilemap/cloud.png");
                        e.x = +r[0],
                        e.y = +r[1],
                        e.mouseThrough = !0,
                        this.m_img_World.addChild(e)
                    }
                }
        }
    }
    onClickBox() {
        l(Qi)
    }
}
class Zi extends t.hunt.views.tileMap.TileAreaMapDlgUI {
    constructor(e, t, i = 0) {
        super(),
        this.m_sleIndex = 0,
        this.m_unlock = !1,
        this.m_holeScale = 0,
        this.mapScale = t,
        this.m_name = +e,
        this.m_holeScale = i
    }
    onAwake() {
        super.onAwake(),
        this.width = Laya.stage.width,
        this.addTitle(S(this.m_name)),
        this.m_box_Stack.setupCls([{
                    cls: Yi,
                    params: [this.mapScale, this.m_holeScale]
                }, {
                    cls: Ji
                }
            ]);
        let e = O.tileMap;
        this.m_unlock = e.checkUnlockMap(e.mapId),
        this.m_holeScale || this.m_unlock,
        this.m_sleIndex = 0,
        this.m_tab_Map.selectedIndex = this.m_sleIndex,
        (this.m_tab_Map.items || []).forEach(e => {
            e.enableAnimating = !1
        })
    }
    onDestroy() {
        super.onDestroy(),
        O.treasure.m_treashow = !1,
        Laya.timer.clearAll(this)
    }
    onSelectMap(e) {
        this.updateTitle(S(0 == e ? this.m_name : 1108)),
        this.m_box_Stack.changeIndex(e)
    }
    listenClose() {
        this.closeDialog()
    }
}
r([n(c.CONVEY_MAP)], Zi.prototype, "listenClose", null);
class es extends t.hunt.views.tileMap.EyeMaskViewUI {
    constructor(e, t = !1) {
        super(),
        this.m_isGuide = !1,
        this.m_dis = e,
        this.m_isGuide = t
    }
    onAwake() {
        super.onAwake();
        let e = 1,
        t = (e = this.m_dis ? 2 == this.m_dis ? 8.3 / 5 : 2.3 : 2, new Laya.Sprite),
        i = (t.graphics.drawRect(0, 0, this.width, 430, "#000000"), new Laya.Sprite);
        this.m_box_Mask.addChild(t),
        i.graphics.drawRect(0, 690, this.width, 430, "#000000"),
        this.m_box_Mask.addChild(i),
        this.scaleX = this.scaleX * e,
        this.scaleY = this.scaleY * e,
        this.ani1.play(0, !0)
    }
    showGuide() {
        this.m_isGuide && Laya.Tween.to(this.m_box_Mask, {
            alpha: .4,
            scaleX: 3,
            scaleY: 3
        }, 1500, null, Laya.Handler.create(this, () => {
                this.destroy()
            }))
    }
    onDestroy() {
        super.onDestroy(),
        Laya.Tween.clearAll(this)
    }
}
r([n(c.GUILD_LAND)], es.prototype, "showGuide", null);
class ts extends t.hunt.views.pass.PassBuyDlgUI {
    onAwake() {
        super.onAwake();
        var e = +Data.gameConf.starPassCfg.buyCost;
        Mmobay.MConfig.openPurchase ? (this.m_txt_Cost.text = e + "", this.m_img_Cost.skin = "hunt/ui_comm/diamond.png") : (e = Ft(e), this.m_txt_Cost.text = e[1], this.m_img_Cost.skin = `hunt/ui_comm/money${e[0]}.png`),
        this.m_btn_Buy.visible = !O.pass.passBuy,
        this.m_btn_Ok.visible = O.pass.passBuy,
        this.m_box_Buy.refresh()
    }
    onClickBuy(e) {
        var t;
        O.pass.passBuy ? h(S(35)) : (t = Mmobay.MConfig.openPurchase ? p.diamond : p.copper, O.bag.checkEnough(t, +Data.gameConf.starPassCfg.buyCost) && O.pass.reqBuyPass().then(() => {
                I.instance.playSound(v.SE_Unlock),
                this.closeDialog()
            }))
    }
}
class is extends t.hunt.views.pass.PassDlgUI {
    onAwake() {
        super.onAwake(),
        this.addTitle(S(1120)),
        this.m_lst_Item.vScrollBarSkin = "",
        this.m_lst_Item.elasticEnabled = !0,
        this.updateView(),
        this.m_lst_Item.scrollTo(O.pass.getScrolIndex());
        let e = Ei.create(Yt(), 1e3, this.m_txt_Time, "D:HH:MM:ss");
        e.onEnd = () => {
            O.pass.reset(),
            this.updateView(),
            this.m_lst_Item.scrollTo(O.pass.getScrolIndex())
        },
        e.start()
    }
    buyPass() {
        this.m_img_Unlock.visible = !0,
        this.m_ani_Unlock.visible = !0,
        this.m_ani_Unlock.once(Laya.Event.COMPLETE, this, () => {
            this.m_img_Unlock.visible = !1,
            this.m_ani_Unlock.visible = !1,
            O.event(c.PASS_UNLOCK)
        }),
        this.ani1.once(Laya.Event.COMPLETE, this, () => {
            this.m_ani_Unlock.play(0, !1)
        }),
        this.m_ani_Unlock.gotoAndStop(0),
        this.ani1.play(0, !1)
    }
    onDestroy() {
        super.onDestroy(),
        this.m_tick && this.m_tick.dispose()
    }
    updateView() {
        let e = O.pass;
        this.m_lst_Item.array = e.getPassData();
        var t = e.passLv,
        i = Data.getStarPass(t + 1);
        this.m_img_Buy.visible = !e.passBuy,
        this.m_txt_Exp.visible = !!i,
        i ? (i = e.getNowExpByLv(), this.m_pbr_Bar.value = i / (e.getNextExpByLv(t) + i), this.m_view_Icon.setData(t + 1), this.m_txt_Exp.text = i + "/" + (e.getNextExpByLv(t) + i)) : (this.m_pbr_Bar.value = 1, this.m_view_Icon.setData(t))
    }
    onClickBuy() {
        u(ts)
    }
}
r([n(c.PASS_BUY)], is.prototype, "buyPass", null),
r([n(c.PASS_UPDATE)], is.prototype, "updateView", null);
class ss extends t.hunt.views.pass.PassViewUI {
    constructor() {
        super(...arguments),
        this.m_Lv = 0
    }
    onAwake() {
        super.onAwake(),
        this.updateView(),
        this.on(Laya.Event.CLICK, this, () => {
            l(is)
        }),
        this.top = 70 + Mmobay.adaptOffsetHeight / 2
    }
    updateView() {
        this.m_txt_Title.changeText(S(1120));
        let e = O.pass;
        this.m_view_Icon.m_Change = !0,
        this.m_Lv = e.passLv;
        var t = !Data.getStarPass(this.m_Lv + 1),
        i = (this.m_view_Icon.setData(t ? this.m_Lv : this.m_Lv + 1), t ? e.getBoxRewardExp() : e.getNowExpByLv()),
        t = t ? +Data.gameConf.starPassCfg.boxCost : e.getNextExpByLv(this.m_Lv) + i;
        this.m_pbr_Bar.value = i / t,
        this.m_txt_Exp.text = i + "/" + t,
        this.setRed()
    }
    setData() {
        let e = O.pass,
        t = e.passLv;
        var i = !Data.getStarPass(t + 1),
        s = i ? e.getBoxRewardExp() : e.getNowExpByLv(),
        a = i ? +Data.gameConf.starPassCfg.boxCost : e.getNextExpByLv(t) + s;
        let r = s / a;
        t != this.m_Lv ? Laya.Tween.to(this.m_pbr_Bar, {
            value: 1
        }, 1e3 * (1 - this.m_pbr_Bar.value), null, Laya.Handler.create(this, () => {
                this.m_pbr_Bar.value = 0,
                Laya.Tween.to(this.m_pbr_Bar, {
                    value: r
                }, 1e3 * r),
                this.setRed(),
                this.m_Lv = t
            })) : Laya.Tween.to(this.m_pbr_Bar, {
            value: r
        }, 1e3 * (r - this.m_pbr_Bar.value)),
        this.m_view_Icon.setData(i ? this.m_Lv : this.m_Lv + 1),
        this.m_txt_Exp.text = s + "/" + a
    }
    setRed() {
        this.m_img_Got.visible = this.m_img_L.visible = O.pass.checkRed()
    }
}
r([n(c.PASS_UPDATE)], ss.prototype, "updateView", null),
r([n(c.PASS_GEN)], ss.prototype, "setData", null);
class as extends t.hunt.views.tileMap.TileMapDlgUI {
    constructor() {
        super(...arguments),
        this.m_stop = !1
    }
    onAwake() {
        super.onAwake(),
        this.ani2.play(0, !0),
        this.changeEnv(),
        this.updateView(),
        this.mouseThrough = !0,
        this.createGenAni(),
        this.m_box_Dapt.width = Laya.stage.width,
        this.m_box_Dapt.height = Laya.stage.height,
        this.m_box_Dapt.pos(.5 * -Mmobay.adaptOffsetWidth, .5 * -Mmobay.adaptOffsetHeight),
        this.m_img_Map.on(Laya.Event.CLICK, this, () => {
            B.instance && !this.m_stop && l(Zi, {
                params: [B.instance.getMapProp("name"), B.instance.getMapProp("scale"), B.instance.getMapProp("holescale")]
            })
        }),
        this.m_img_Map.top = 70 + Mmobay.adaptOffsetHeight / 2,
        (as.instance = this).checkWorldBoss()
    }
    updateName() {
        B.instance && (this.m_txt_Name.text = S(B.instance.getMapProp("name")))
    }
    onDestroy() {
        as.instance = null,
        this.offAll(),
        super.onDestroy()
    }
    updateView() {
        R.isNew && E(es, {
            params: [0, !0]
        }).then(e => {
            e.m_box_Mask.alpha = 1,
            Se(e, H.System)
        }),
        this.updateName()
    }
    onClickArea() {
        B.instance && l(Zi, {
            params: [B.instance.getMapProp("name"), B.instance.getMapProp("scale")]
        })
    }
    createGenAni() {
        O.bag.deltaGen && (Pt(`hunt/ui_item/${p.gem}.png`, 20, {
                x: Laya.stage.width / 2 - Mmobay.adaptOffsetWidth / 2,
                y: Laya.stage.height - 100 - Mmobay.adaptOffsetHeight / 2
            }, {
                x: 24 - Mmobay.adaptOffsetWidth / 2,
                y: 130 - Mmobay.adaptOffsetHeight / 2
            }, !1, () => {
                O.event(c.PASS_GEN)
            }, 3), O.bag.deltaGen = 0)
    }
    changeEnv() {
        B && B.instance && (this.m_img_Light2.visible = this.m_img_Light.visible = B.instance.m_showE)
    }
    doTransAni() {
        this.ani1.play(0, !1)
    }
    checkWorldBoss() {
        let e = O.tileMap.blocks || [];
        e.find(e => {
            return !!Data.getBlock_worldBoss(e.blockId)
        }) ? (this.m_img_Red.visible = !0, this.aniWarning.play(0, !0), Laya.timer.clearAll(this), Laya.timer.once(3e4, this, () => {
                this.m_img_Red.visible = !1,
                this.aniWarning.stop()
            })) : (Laya.timer.clearAll(this), this.m_img_Red.visible = !1, this.aniWarning.stop())
    }
}
r([n(c.MAP_CHANGE)], as.prototype, "updateName", null),
r([n(c.GEN_ANI)], as.prototype, "createGenAni", null),
r([n(c.CHANGE_ENV)], as.prototype, "changeEnv", null),
r([n(c.TRANSANI)], as.prototype, "doTransAni", null),
r([n(c.BLOCK_CHANGE)], as.prototype, "checkWorldBoss", null);
class rs extends t.hunt.views.mistery.CityBattleViewUI {
    constructor() {
        super()
    }
    onDestroy() {
        super.onDestroy(),
        T.battle && (T.battle.battleUI = null)
    }
    onAwake() {
        super.onAwake();
        var e = T.battle;
        e && this.showNpcList(e.m_npcCfg || [])
    }
    showNpcList(e) {
        e = e.filter(e => e.needGuide);
        this.m_lst_Npc.array = e
    }
    onClickNpc(e) {
        let t = T.battle;
        var e = e.target;
        t && e.dataSource && ((e = L.getRoleById(e.dataSource.npcId)) && t.startLoopCheck(e.root))
    }
    onClickExit() {
        T.end(!0, !0),
        we(as)
    }
}
class ns extends t.hunt.views.mistery.ExitMisteryDlgUI {
    constructor(e = !1) {
        super(),
        this.m_isOver = !1,
        this.m_isOver = e
    }
    onAwake() {
        super.onAwake(),
        this.m_txt_Label.text = this.m_isOver ? S(1133) : S(1132),
        this.m_btn_Cancel.visible = !this.m_isOver,
        this.m_btn_OK.centerX = this.m_isOver ? 0 : -100
    }
    onClickCancel() {
        this.closeDialog()
    }
    onClickOK() {
        this.closeDialog();
        var e = {
            [Re.city]: 1
        },
        t = (B.instance.updateMistery(!1), R.backCity || Re.city),
        e = Data.getBattleMap(e[t] || 1);
        T.start({
            mapId: +e.mapRes,
            logicMapType: t,
            squad: [R.icon],
            viewImpl: rs
        })
    }
}
class os extends t.hunt.views.common.FingerViewUI {
    onAwake() {
        super.onAwake(),
        this.ani1.play()
    }
}
class B extends Laya.Sprite {
    constructor() {
        super(),
        this.rect = new Laya.Rectangle(0, 0, 0, 0),
        this.viewPortPad = new Laya.Rectangle(84, 96, 84, 96),
        this.mX = 0,
        this.mY = 0,
        this.m_pos = new Laya.Point,
        this.m_dist = 6,
        this.m_lastArea = null,
        this.mapScale = 1,
        this.m_moveHex = [[], []],
        this.m_stopMove = !1,
        this.m_waitDlg = !1,
        this.m_logincPoint = {},
        this.m_conveys = [],
        this.m_logics = [],
        this.m_openTower = !1,
        this.m_openBurrow = !1,
        this.m_enterByBoat = !1,
        this.m_speed = 1,
        this.m_showE = !1,
        this.isPlaying = !1,
        this.m_checkBlock = !1,
        this.tMap = new Laya.TiledMap,
        this.width = Laya.stage.width,
        this.height = Laya.stage.height,
        this.name = "mapScene",
        (B.instance = this).pos(.5 * -Mmobay.adaptOffsetWidth, .5 * -Mmobay.adaptOffsetHeight),
        O.on(c.NET_RECONNECTED, this, () => {
            this.m_moveHex = [[], []],
            this.m_waitDlg = !1
        })
    }
    static create() {
        let e = new B;
        return O.tileMap.reqTileMap().then(() => Laya.loader.loadP(`hunt/worldmap/map${O.tileMap.mapId}.json`)).then(() => (e.createMap(O.tileMap.mapId), e))
    }
    destroy() {
        super.destroy(),
        this.tMap.destroy(),
        this.offAll(),
        Laya.Tween.clearAll(this),
        Laya.timer.clearAll(this),
        B.instance = null
    }
    switchMap(e) {
        this.m_movePos = null;
        let t = O.tileMap;
        var i = this.hex.screenToScreen(t.mapPos[0], t.mapPos[1]),
        s = (this.createRole(i), this.hex.screenToHex(42 - this.tMap.viewPortX, 48 - this.tMap.viewPortY));
        this.initHexByArea(s),
        this.focusMapItem(i),
        this.drawEyePort(),
        this.reDrawArea(),
        t.initLogic(),
        this.initEnvironment(),
        t.initConvey(),
        this.m_ani && this.m_ani.play(14, !0)
    }
    stopBgm() {
        I.instance.stopMusic(),
        this.isPlaying = !1
    }
    playBgm() {
        var e = this.getMapProp("bgm") + "";
        0 != +e ? (I.instance.playMusic(e), this.isPlaying = !0) : this.stopBgm()
    }
    createMap(t, i = 1, s = !1, a = !1) {
        this.tMap.destroy(),
        this.m_movePos = null,
        this.tMap.autoCache = !1,
        this.tMap._tileProperties3 = {},
        this.offAll(),
        this.tMap._isNight = O.tileMap.isNight,
        this.tMap.createMap(`hunt/worldmap/map${t}.json`, new Laya.Rectangle(0, 0, this.width, this.height), Laya.Handler.create(this, () => {
                xe(!1),
                O.event(c.MAP_CHANGE),
                this.on(Laya.Event.FOCUS, this, () => {
                    var e;
                    this.isPlaying && 0 !=  + (e = this.getMapProp("bgm") + "") && I.instance.playMusic(e)
                }),
                as.instance && (as.instance.m_stop = !1),
                this.playBgm(),
                this.m_lastArea = null,
                this.addChild(this.tMap.mapSprite()),
                this.on(Laya.Event.CLICK, this, this.onStageClick),
                this.completeHandler(i),
                window.mapScene = this,
                s && this.doTransAni();
                var e = () => {
                    var e;
                    a && (e = this.getMapProp("unlockMapTalk")) && "YES" != w.get(w.s_outMap + "_" + t) && (Ri.showTalk([e]), w.set(w.s_outMap + "_" + t, "YES"))
                };
                this.m_enterByBoat ? this.doEnterPath(e) : e(),
                this.m_enterByBoat = !1,
                20 <= t && B.instance.updateMistery(!0, t)
            }), this.viewPortPad, new Laya.Point(84, 480), !0, !1)
    }
    initHexByArea(e) {
        this.m_movePos ? this.hex.init(e, this.m_movePos.x, this.m_movePos.y, this.m_dist) : this.hex.init(e, this.m_pos.x, this.m_pos.y, this.m_dist)
    }
    initMapViewPort() {
        this.rect.width = this.tMap.width,
        this.rect.height = 3 * this.tMap.height / 4
    }
    completeHandler(e = 1) {
        this.mapScale = e,
        this.hex = new Pi,
        this.initMapViewPort(),
        this.on(Laya.Event.RESIZE, this, this.resize),
        window.map = this.tMap,
        this.tMap.setViewPortPivotByScale(0, 0),
        this.tMap.scale = e;
        let t = O.tileMap;
        var e = this.hex.screenToScreen(t.mapPos[0], t.mapPos[1]),
        i = (this.createRole(e), this.hex.screenToHex(42 - this.tMap.viewPortX, 48 - this.tMap.viewPortY));
        this.initHexByArea(i),
        this.focusMapItem(e),
        i = this.hex.screenToHex(42 - this.tMap.viewPortX, 48 - this.tMap.viewPortY),
        this.resize(),
        this.m_logincPoint = {},
        this.drawEyePort(),
        this.reDrawArea(),
        t.initLogic(),
        t.initConvey(),
        R.isNew && this.showGuidBoat(),
        this.initEnvironment()
    }
    createBoat(e, t, i = !1) {
        let s = this.getBoatPath(t) || [];
        var t = this.hex.hexToScreen(i ? s[s.length - 1] : s[0]),
        a = this.hex.screenToScreen(t.x, t.y);
        this.focusMapItem(a),
        this.m_pos.x = t.x,
        this.m_pos.y = t.y,
        this.m_moveHex[0] = i ? s.reverse() : s,
        e && s.length && (a = this.fixPosX(t.x - this.width / 2), i = this.fixPosY(t.y - this.height / 2), this.m_boat && !this.m_boat.destroyed || (this.m_boat = this.createSpine(`hunt/spine/${e}.json`, t.x - a, t.y - i), e = this.conveyLayer, a = this.tMap.mapSprite().getChildIndex(e) || this.tMap.mapSprite().numChildren - 1, this.tMap.mapSprite().addChildAt(this.m_boat, a + 1), this.m_ani.play(14, !0)), this.m_boat.visible = !0, this.m_ani.visible = !1)
    }
    createSpine(e, t, i, s = 10, a = 1, r = []) {
        let n = Ee.create({
            url: e,
            offset: r
        });
        return n.x = t,
        n.y = i,
        1 != a && n.scale(a, a),
        n.play(s, !0),
        n
    }
    createRole(e) {
        if (this.m_ani && !this.m_ani.destroyed)
            return t = this.fixPosX(e.x - this.width / 2), i = this.fixPosY(e.y - this.height / 2), this.m_pos.setTo(e.x, e.y), this.m_ani.x = e.x - t, this.m_ani.y = e.y - i, this.m_ani.visible = !0, void(this.m_boat && (this.m_boat.visible = !1));
        this.m_hole && (this.m_hole.destroy(), this.m_hole = null),
        this.m_transAni && (this.m_transAni.destroy(), this.m_transAni = null);
        var t = this.fixPosX(e.x - this.width / 2),
        i = this.fixPosY(e.y - this.height / 2);
        let s = R.icon;
        0 == R.icon ? s = 6010 : 1 == R.icon && (s = 6020);
        var a = Data.getSpineParam(s);
        let r = 0,
        n = 0;
        a && (r = a.offset[0] || 0, n = a.offset[1] || 0);
        a = this.createSpine(`hunt/role/${s}.json`, e.x - t, e.y - i, 14, .7, [r, n]),
        this.m_ani = a,
        this.m_pos.setTo(e.x, e.y),
        t = this.conveyLayer,
        i = this.tMap.mapSprite().getChildIndex(t) || this.tMap.mapSprite().numChildren - 1;
        this.tMap.mapSprite().addChildAt(a, i + 1),
        this.m_transAni = new z,
        this.m_transAni.visible = !1,
        this.m_transAni.source = "hunt/ue/15.atlas",
        this.m_transAni.x = a.x - 100,
        this.m_transAni.y = a.y - 120,
        this.tMap.mapSprite().addChild(this.m_transAni),
        E(es, {
            params: [+this.getMapEye()]
        }).then(e => {
            this.m_hole = e,
            this.m_hole.visible = +this.getMapEye(),
            this.m_hole.scale(1 / .7, 1 / .7),
            this.addChild(this.m_hole)
        })
    }
    reSetRoleSpine() {
        this.m_ani && (this.m_ani.recover(), this.m_ani = null);
        var e = O.tileMap,
        e = this.hex.screenToScreen(e.mapPos[0], e.mapPos[1]);
        this.createRole(e),
        this.m_hole && (this.m_hole.visible = !1)
    }
    doAniMove(e = 0, t = 0, i, s, a, r) {
        i && !i.destroyed && (i.play(a, !0), i.scaleX = 0 < r ? Math.abs(i.scaleX) : -Math.abs(i.scaleX));
        let n = O.tileMap,
        o = n.checkConvey(this.m_pos.x + e, this.m_pos.y + t);
        a = n.checkProps(o, "mapId");
        n.checkProps(o, "targetId") && a && +a != n.mapId ? as.instance && (as.instance.m_stop = !0) : as.instance && (as.instance.m_stop = !1),
        Laya.Tween.clearAll(this.m_pos),
        o && n.checkProps(o, "targetId") && !n.checkProps(o, "boat") && o.type == y.Switch && (this.m_stopMove = !0, this.m_moveHex = [[], []]),
        this.m_boat && this.m_boat.visible || I.instance.playSound(v.SE_Step);
        let l = this.m_pos.x,
        h = this.m_pos.y,
        m = (this.m_lastEnd = this.hex.screenToHex(this.m_pos.x + e, this.m_pos.y + t), this.m_movePos || (this.m_movePos = new Laya.Point), this.m_movePos.x = this.m_pos.x + e, this.m_movePos.y = this.m_pos.y + t, Laya.Tween.to(this.m_pos, {
                x: this.m_pos.x + e,
                y: this.m_pos.y + t
            }, Math.sqrt(Math.pow(e, 2) + Math.pow(t, 2)) / .5 * this.m_speed, null, Laya.Handler.create(null, () => {
                    if (this.m_checkBlock = !1, this.mX = this.mX - (l - this.m_pos.x), this.mY = this.mY - (h - this.m_pos.y), i && i.armature && (i.armature.scaleX = 1), this.drawEyePort(), o && n.checkProps(o, "targetId") && !n.checkProps(o, "boat") && o.type == y.Switch) {
                        if (this.m_moveHex = [[], []], i.play(14, !0), o.type == y.Switch) {
                            let t = n.mapId;
                            n.reqSwitchMap(o.id).then(e => {
                                i.play(14, !0),
                                O.event(c.TRANSANI),
                                this.showTransAni(() => {
                                    t == n.mapId ? this.switchMap(e[1]) : this.createMap(e[1], this.mapScale, !1, !0)
                                })
                            })
                        }
                    } else
                        s && s()
                })));
        m.update = Laya.Handler.create(null, () => {
            var e,
            t;
            i && (e = this.m_pos.x - 42, t = this.m_pos.y - 96, 42 + e < this.rect.width - this.width / 2 ? i.x = 0 < e - this.width / 2 ? this.width / 2 : e : i.x = 42 + e - this.rect.width + this.width, 96 + t < this.rect.height - this.height / 2 ? i.y = 0 < t - this.height / 2 ? this.height / 2 : t : i.y = 96 + t - this.rect.height + this.height, e = Math.min(Math.max(e - this.width / 2 + 42, 42), this.rect.width - this.width), t = Math.min(Math.max(t - this.height / 2 + 96, 96), this.rect.height - this.height), this.conveyLayer && (this.conveyLayer.x = -e, this.conveyLayer.y = -t), this.logicLayer && (this.logicLayer.x = -e, this.logicLayer.y = -t), this.tMap.moveViewPort(e, t), this.drawEyePort())
        }, [], !1)
    }
    doMoveByPosArr(e, i = this.m_ani, s) {
        let a = [];
        if (this.m_moveHex[0].length ? a = this.m_moveHex[0] : this.m_moveHex[1].length && (a = this.m_moveHex[1]), 1 < a.length) {
            this.m_checkBlock = !0;
            var r = a[0],
            n = a[1],
            o = n.q - r.q,
            l = n.r - r.r,
            n = n.s - r.s,
            r = (a.shift(), () => {
                this.reDrawArea(),
                this.doMoveByPosArr(null, i, s)
            });
            let e = 1,
            t = 0;
            if (0 == l) {
                if (t = 7, 1 == o && -1 == n)
                    return e = 1, void this.doAniMove(84, 0, i, r, t, e);
                if (-1 == o && 1 == n)
                    return e = -1, void this.doAniMove(-84, 0, i, r, t, e)
            } else if (0 == o) {
                if (1 == l && -1 == n)
                    return e = 1, t = 8, void this.doAniMove(42, 72, i, r, t, e);
                if (-1 == l && 1 == n)
                    return e = -1, t = 6, void this.doAniMove(-42, -72, i, r, t, e)
            } else if (0 == n) {
                if (-1 == o && 1 == l)
                    return e = -1, t = 8, void this.doAniMove(-42, 72, i, r, t, e);
                if (1 == o && -1 == l)
                    return e = 1, t = 6, void this.doAniMove(42, -72, i, r, t, e)
            }
            this.m_moveHex = [[], []],
            this.reDrawArea(),
            this.doMoveByPosArr(null, i, s)
        } else {
            if (I.instance.stopSound(v.SE_Step), s)
                return this.m_moveHex = [[], []], void s.run();
            this.m_ani.play(14, !0);
            let t = O.tileMap;
            t.reqMoveTo([this.m_pos.x * this.mapScale, this.m_pos.y * this.mapScale]).then(() => {
                var e;
                this.m_moveHex = [[], []],
                this.pointData ? (e = t.checkConvey(this.m_pos.x * this.mapScale, this.m_pos.y * this.mapScale), t.checkProps(e, "boat") ? (this.showBoatAni(e, this.pointData), this.m_waitDlg = !1) : O.tileMap.doEndPath(this.pointData)) : this.m_waitDlg = !1
            })
        }
    }
    resize() {
        this.mX = this.fixPosX(this.mX),
        this.mY = this.fixPosY(this.mY),
        this.tMap.changeViewPort(this.mX, this.mY, this.width, this.height)
    }
    fixPosX(e) {
        var t = this.rect;
        return Math.max(42, Math.range(e, t.x, t.width - this.width))
    }
    fixPosY(e) {
        var t = this.rect;
        return Math.max(96, Math.range(e, t.y, t.height - this.height))
    }
    focusMapItem(e) {
        this.mX = this.fixPosX(e.x - this.width / 2),
        this.mY = this.fixPosY(e.y - this.height / 2),
        this.conveyLayer && (this.conveyLayer.x = -this.mX, this.conveyLayer.y = -this.mY),
        this.logicLayer && (this.logicLayer.x = -this.mX, this.logicLayer.y = -this.mY),
        this.tMap.changeViewPort(this.mX, this.mY, this.width, this.height)
    }
    onStageClick(o, e = 0) {
        if (_e("stageClick", 200) && !(!B.instance || o.target instanceof J || o.target instanceof ss) && this.hex && !this.m_stopMove && !this.m_waitDlg) {
            var o = this.mouseX,
            e = this.mouseY + e,
            l = (this.m_lastEnd && this.initHexByArea(this.m_lastEnd), -this.tMap.viewPortX),
            h = -this.tMap.viewPortY,
            m = -this.tMap.viewPortX + o,
            c = -this.tMap.viewPortY + e;
            let a = this.hex.screenToHex(m, c),
            r = O.tileMap,
            n = r.getPointType(m, c);
            if (!n || n.type != y.Block || !this.m_checkBlock) {
                n && (a = this.hex.screenToHex(n.x, n.y));
                m = this.hex.hexToScreen(a);
                let i = m.x - l + 42,
                s = m.y - h + 48;
                if ((!n || r.checkArea(o, e)) && (!n || n.type != y.Obstacles)) {
                    let t = this.hex.screenToHex(this.m_pos.x, this.m_pos.y);
                    if (n) {
                        c = n.type;
                        if (c == y.Block)
                            O.tileMap.blocks.find(e => e.pointName == +n.name) ? r.clickBlock(n, Laya.Handler.create(this, () => {
                                    this.m_waitDlg = !0,
                                    this.createPath(t, a, n, [i, s])
                                })) : this.createPath(t, a, null, [i, s]);
                        else if (c == y.Tower)
                            this.clickTower(n, Laya.Handler.create(this, () => {
                                    this.m_waitDlg = !0,
                                    this.createPath(t, a, n, [i, s])
                                }));
                        else if (c == y.Switch)
                            r.checkProps(n, y.Boat) ? u(qi, {
                                params: [r.mapId, {
                                        type: y.Boat
                                    }
                                ]
                            }).then(e => {
                                e.wait().then(e => {
                                    e.type == d.Yes && (this.m_waitDlg = !0, this.createPath(t, a, n, [i, s]))
                                })
                            }) : this.createPath(t, a, n, [i, s]);
                        else if (c == y.City)
                            this.clickCity(n, Laya.Handler.create(this, () => {
                                    this.m_waitDlg = !0,
                                    this.createPath(t, a, n, [i, s])
                                }));
                        else if (c == y.Exit)
                            u(ns, {
                                params: [0 == r.blocks.length]
                            });
                        else if (c == y.Treasure && r.getTreasureBlock()) {
                            if (n.name) {
                                l = r.getTreasureBlock();
                                let e = l.treasure;
                                m = Data.getBlock_treasure(l.blockId);
                                let t = m.points;
                                h = t.indexOf(+n.name);
                                e && e.isOpen ? +n.name == m.finalPoint ? (o = e.pointRewards.length, !e.finalReward && 0 < o && o == e.pointRewards.filter(e => !!e).length || (n = null)) : e.pointRewards[h] && (n = null) : n = null
                            }
                            this.createPath(t, a, n, [i, s])
                        } else
                            this.createPath(t, a, null, [i, s])
                    } else
                        this.createPath(t, a, null, [i, s])
                }
            }
        }
    }
    createPath(e, t, i, s) {
        this.m_movePos && (e = this.hex.screenToHex(this.m_movePos.x, this.m_movePos.y));
        let a = O.tileMap;
        s = a.getBgProps(s[0], s[1]),
        e = this.hex.pathTo(e, t, s || i && (i.type == y.Block || i.type == y.Tower || i.type == y.City || i.type == y.Treasure), this.getObstacles(t)),
        0 < e.length ? this.m_lastEnd = t : this.m_waitDlg = !1,
        s = this.m_moveHex[0].length + this.m_moveHex[1].length;
        this.m_moveHex[0].length ? (this.m_moveHex[0] = e, this.m_moveHex[1] = []) : (this.m_moveHex[0] = [], this.m_moveHex[1] = e),
        this.pointData = i,
        e.length && !s && (Laya.Tween.clearAll(this.m_pos), this.doMoveByPosArr(i))
    }
    get conveyLayer() {
        return this.tMap.getLayerByName("convey")
    }
    get bgLayer() {
        return this.tMap.getLayerByName("bg")
    }
    get logicLayer() {
        return this.tMap.getLayerByName("logic")
    }
    get areaLayer() {
        var e = this.tMap.getLayerByName("area");
        if (e)
            return e
    }
    reDrawArea() {
        let e = this.tMap._jsonData;
        if (e) {
            let o = (e.layers || []).find(e => "area" == e.name);
            if (o && this.areaLayer) {
                let n = this.areaLayer.getTileDataByScreenPos(this.m_ani.x, this.m_ani.y);
                if (null == this.m_lastArea || n != this.m_lastArea) {
                    this.m_lastArea = n;
                    for (let t = 0; t < (this.tMap._gridArray || []).length; t++) {
                        var l = this.tMap._gridArray[t].length;
                        for (let e = 0; e < l; e++)
                            this.tMap._gridArray[t][e] = null
                    }
                    let e = this.tMap._mapLastRect;
                    e.right = e.top = e.bottom = e.left = -1;
                    var h = (o.data || []).map(e => n == e ? 0 : this.getAreaMaskId());
                    o.opacity = 1;
                    let t = Object.assign({}, o),
                    i = (t.name = "areaTop", t.data = h, this.tMap._mapSprite),
                    s = this.tMap._renderLayerArray,
                    a = this.tMap._layerArray,
                    r = a.find(e => "areaTop" == e.layerName);
                    r && r.destroy(),
                    this.tMap._layerArray = a.filter(e => "areaTop" != e.layerName),
                    (this.tMap._layerArray || []).forEach(i => {
                        if ("logic" != i.layerName) {
                            let t;
                            for (let e = 0; e < i._gridSpriteArray.length; e++)
                                (t = i._gridSpriteArray[e]).clearAll();
                            i._gridSpriteArray.length = 0,
                            i.destroyChildren()
                        }
                    }),
                    this.tMap._renderLayerArray = s.filter(e => "areaTop" != e.layerName);
                    var h = new Laya.MapLayer,
                    m = this.tMap.mapSprite().getChildIndex(this.logicLayer) || this.tMap.mapSprite().numChildren - 1;
                    h.init(t, this.tMap),
                    h.name = "mask",
                    i.addChildAt(h, m),
                    this.tMap._layerArray.push(h),
                    this.tMap._renderLayerArray.push(h),
                    this.tMap.updateViewPort()
                }
            }
        }
    }
    getObstacles(e) {
        var t = this.hex.map;
        let i = [],
        s = O.tileMap;
        var a,
        r,
        n,
        o,
        l = -this.tMap.viewPortX,
        h = -this.tMap.viewPortY;
        for (a of t)
            a.q == e.q && a.r == e.r && a.s == e.s || (n = (r = this.hex.hexToScreen(a)).x - l + 42, o = r.y - h + 48, (s.getBgProps(n, o) || s.getPointType(r.x + 42, r.y + 48)) && i.push(a));
        return i
    }
    getLayarJsonByName(t) {
        let e = this.tMap._jsonData;
        if (e)
            return e.layers.find(e => e.name == t)
    }
    getBoatPath(e) {
        var t = this.getLayarJsonByName("convey");
        let i = [];
        if (t && e) {
            var s,
            t = t.objects;
            i.push(this.hex.screenToHex(e.x, e.y));
            for (s of t)
                s.type == y.Path && e.id == s.properties[0].value && i.push(this.hex.screenToHex(s.x, s.y));
            i.length && (this.m_stopMove = !0)
        }
        return i
    }
    drawEyePort() {
        var e = +this.getMapEye();
        this.m_hole && (this.m_hole.visible = !!e)
    }
    getAreaMaskId() {
        var e,
        t,
        i = this.tMap._tileProperties3;
        for (e in i)
            for (t of i[e])
                if ("mask" == t.name)
                    return e
    }
    getMapProp(t) {
        let e = this.tMap._properties;
        if (!e)
            return 0;
        var i = e.find(e => e.name == t);
        return i ? i.value : 0
    }
    getMapEye() {
        let e = this.tMap._properties;
        if (!e)
            return 0;
        var t = e.find(e => "eye" == e.name);
        return t ? t.value : 0
    }
    doTransAni() {
        let e = this.m_transAni;
        e.visible = !0,
        e.once(Laya.Event.COMPLETE, this, () => {
            e.visible = !1,
            this.m_stopMove = !1
        }),
        e.play(0, !1)
    }
    clickTower(e, t) {
        u(qi, {
            params: [O.tileMap.mapId, {
                    type: y.Tower
                }
            ]
        }).then(e => {
            e.wait().then(e => {
                e.type == d.Yes && (this.m_waitDlg = !0, t && t.run())
            })
        })
    }
    clickCity(e, t) {
        var i = (e.properties || []).find(e => "cityType" == e.name);
        let s = O.tileMap;
        (i || s.checkProps(e, "arenanpc") || s.checkProps(e, "arena")) && u(qi, {
            params: [s.mapId, {
                    type: y.City,
                    title: 2011,
                    pointData: e
                }
            ]
        }).then(e => {
            e.wait().then(e => {
                e.type == d.Yes && (this.m_waitDlg = !0, t && t.run())
            })
        })
    }
    initTower(t) {
        let e = O.tileMap,
        i = e.checkUnlockMap(e.mapId),
        s = t.properties;
        var a = s && s.find(e => "placeX" == e.name) ? s.find(e => "placeX" == e.name) : {},
        r = s && s.find(e => "placeY" == e.name) ? s.find(e => "placeY" == e.name) : {};
        this.m_tower = this.createSpine("hunt/worldmap/spine/chuansong.json", t.x, t.y - 40, i ? 2 : 0, 1, [-a.value || 0, -r.value || 0]),
        Laya.timer.frameOnce(2, this, () => {
            this.logicLayer && this.logicLayer.addChild(this.m_tower),
            i || 1 != e.mapId || E(os, {}).then(e => {
                e.name = "towerFinger",
                e.x = t.x,
                e.y = t.y - 20,
                this.logicLayer.addChild(e)
            })
        })
    }
    openPlace(e) {
        I.instance.playSound(v.SE_DungeonUnlock),
        this.m_place.play(1, !1, Laya.Handler.create(this, () => {
                this.m_place.play(2, !0),
                e.run()
            }))
    }
    openTower() {
        let t = this.getMapProp("unlockTowerTalk"),
        e = (I.instance.playSound(v.SE_TeleportOpen), this.m_tower.play(1, !1, Laya.Handler.create(this, () => {
                    l(Zi, {
                        params: [this.getMapProp("name"), this.getMapProp("scale")]
                    }).then(e => {
                        e.wait().then(() => {
                            this.m_stopMove = !1,
                            this.m_waitDlg = !1,
                            Ri.showTalk(t)
                        })
                    }),
                    this.m_tower.play(2, !0)
                })), this.logicLayer._children.find(e => "towerFinger" == e.name));
        e && e.destroy()
    }
    showBoatAni(e, t, i = !1, s) {
        this.createBoat(1e3, e, i);
        let a = O.tileMap;
        this.m_moveHex[0].length && (xe(!0), I.instance.playSound(v.SE_BoatSailFlapsLoop), this.m_speed = R.isNew ? 5 : 2, this.doMoveByPosArr(t, this.m_boat, Laya.Handler.create(this, () => {
                    if (this.m_speed = 1, I.instance.stopSound(), this.playBgm(), i) {
                        let e = this.hex.screenToScreen(a.mapPos[0], a.mapPos[1]);
                        R.isNew ? (O.event(c.TRANSANI), this.showTransAni(() => {
                                R.isNew = !1,
                                this.createRole(e),
                                this.focusMapItem(e)
                            }, () => {
                                O.event(c.GUILD_LAND),
                                O.tileMap.showScaredCat(() => {
                                    xe(!1)
                                }),
                                Laya.timer.clear(this, this.addSpeed),
                                this.m_waitDlg = !1,
                                this.m_stopMove = !1
                            })) : (this.createRole(e), this.focusMapItem(e), this.m_waitDlg = !1, xe(this.m_stopMove = !1), s && s()),
                        this.m_movePos = null;
                        var t = this.hex.screenToHex(42 - this.tMap.viewPortX, 48 - this.tMap.viewPortY);
                        void this.initHexByArea(t)
                    } else
                        e && a.reqSwitchMap(e.id).then(e => {
                            O.event(c.TRANSANI),
                            this.showTransAni(() => {
                                this.m_enterByBoat = !0,
                                this.showBridge(() => {
                                    this.createMap(e[1], this.mapScale, !1, !0)
                                })
                            })
                        })
                })))
    }
    doEnterPath(e) {
        let t = O.tileMap;
        var i = this.hex.screenToScreen(t.mapPos[0], t.mapPos[1]),
        i = t.checkConvey(i.x, i.y);
        let s = O.tileMap.checkProps(i, "enterBoat");
        s && (i = this.m_conveys.find(e => e.id == s)) && this.showBoatAni(i, null, !0, e)
    }
    showBridge(e) {
        let t = Ee.create({
            url: "hunt/spine/CaiHongQiao.json"
        }),
        i = (t.x = Laya.stage.width / 2, t.y = Laya.stage.height / 2, new Laya.Image("hunt/ui_bg/bridge_bg.png"));
        i.name = "bridge",
        i.width = Laya.stage.width,
        i.height = Laya.stage.height,
        this.tMap.mapSprite().addChild(i),
        this.tMap.mapSprite().addChild(t),
        I.instance.playMusic(v.BGM_RainbowBridgeAdventrue),
        t.play(1, !1, Laya.Handler.create(this, () => {
                O.event(c.TRANSANI),
                t.destroy(),
                this.showTransAni(() => {
                    e && e()
                })
            }))
    }
    createClouds(e = !1) {
        O.tileMap.createClouds(e)
    }
    clearClouds() {
        var e;
        for (e of this.logicLayer._children)
            "cloud" == e.name && (Laya.Tween.clearAll(e), e.removeSelf(), e.destroy())
    }
    initEnvironment() {
        Laya.timer.clear(this, this.createClouds),
        this.getMapProp("showEffect") ? (Laya.timer.frameOnce(2, this, this.createClouds, [!0]), Laya.timer.loop(4e4, this, this.createClouds), this.m_showE = !0) : this.m_showE = !1,
        O.event(c.CHANGE_ENV)
    }
    showGuidBoat() {
        var e,
        t = this.getLayarJsonByName("convey");
        let i;
        if (t)
            for (e of t.objects)
                O.tileMap.checkProps(e, "enterBoat") && (i = e);
        this.showBoatAni(i, null, !0),
        Laya.timer.once(2e3, this, this.addSpeed)
    }
    addSpeed() {
        this.m_speed = 3
    }
    showTransAni(e, t) {
        Laya.timer.once(5e3 / 12, null, () => {
            e && e()
        }),
        Laya.timer.once(500, null, () => {
            t && t()
        }),
        Laya.timer.once(1e3, null, () => {
            this.m_stopMove = !1,
            this.m_waitDlg = !1
        })
    }
    setTowerRound() {
        let e = O.tileMap;
        for (var t of this.m_conveys) {
            var i = e.getPointType(t.x, t.y);
            i && i.type == y.Tower && (i = this.createSpine("hunt/spine/block.json", t.x, t.y - 49), this.logicLayer.addChild(i))
        }
    }
    updateMistery(i = !1, a) {
        if (!(this.m_moveHex[0].length + this.m_moveHex[1].length)) {
            let t = me.instance.mainLayer,
            e = t.getChildByName("reset");
            if (i)
                if (e)
                    e.visible = !0, e.skin = `hunt/ui_mistery/${a}.png`;
                else {
                    let s = [1059, 733],
                    e = new Laya.Button(`hunt/ui_mistery/${a}.png`);
                    e.on(Laya.Event.CLICK, this, () => {
                        this.m_movePos = null;
                        let e = O.tileMap;
                        var t = this.hex.screenToScreen(s[0], s[1]),
                        i = (this.createRole(t), this.hex.screenToHex(42 - this.tMap.viewPortX, 48 - this.tMap.viewPortY));
                        this.initHexByArea(i),
                        this.focusMapItem(t),
                        e.initLogic(),
                        e.initConvey(),
                        this.m_ani && this.m_ani.play(14, !0),
                        O.tileMap.reqMoveTo(s),
                        this.doTransAni()
                    }),
                    e.stateNum = 1,
                    e.name = "reset",
                    e.right = 0,
                    e.top = 80,
                    t.addChild(e)
                }
            else
                e && (e.visible = !1)
        }
    }
}
class ls extends t.hunt.views.fight.CommonBattleViewUI {
    onAwake() {
        super.onAwake();
        var e = T.battle.createOpt,
        t = new ce(e.title, !1);
        this.addChild(t),
        this.updateBlockInfo(e.blockId)
    }
    updateBlockInfo(t) {
        t && O.block.reqBlockInfo(t).then(e => {
            this.destroyed || (this.m_view_Like.visible = !0, this.m_view_Like.setData(t, e), this.m_view_Comment.visible = !0, this.m_view_Comment.setData(t))
        })
    }
    showPickAni() {
        this.m_view_Bag.showPickAni && this.m_view_Bag.showPickAni()
    }
    onClickBack() {
        T.end(!0),
        this.destroy()
    }
}
let T = new class {
    constructor() {
        this.m_isFighting = !1
    }
    get battle() {
        return this.m_battle
    }
    start(t) {
        if (this.battle || this.m_isFighting)
            return console.log("battle already exists"), Promise.resolve(!1);
        this.m_isFighting = !0,
        t.logicMapType != Re.test || t.viewImpl || (t.viewImpl = ls);
        var e = t.mapId || 1e3;
        return De(),
        L.start(e, !!t.shieldMap, !0).then(e => e ? this.loadRoleRes(t) : (this.m_isFighting = !1, Le(), !1)).then(e => e ? this.enterMap(t) : (this.m_isFighting = !1, Le(), !1)).then(e => e ? (t.logicMapType != Re.city ? Ce(!1) : me.instance.clearMain(), L.hasFinalDrop = t.logicMapType == Re.normal || t.logicMapType == Re.imitatePvp, Le(), !0) : (this.m_isFighting = !1, Le(), !1))
    }
    end(e = !1, t = !1) {
        var i,
        s;
        this.m_isFighting = !1,
        this.m_battle && ((i = !!this.m_battle.createOpt.blockId) && O.report.close(), L.stop(i && this.m_battle.createOpt.logicMapType != Re.worldBoss), O.battle.reqLeaveMap(), i = this.m_battle.createOpt.logicMapType == Re.arena, this.m_battle && (s = Data.getBlock(this.m_battle.createOpt.blockId), !e && s && s.endTalk.length && Ri.showTalk(s.endTalk[0]), this.m_battle.dtor(), this.m_battle = null, s && O.event(c.GEN_ANI)), t && O.tileMap.mapId != R.mapId ? O.tileMap.reqConvey(R.mapId).then(() => {
                B.instance && B.instance.createMap(R.mapId)
            }) : B.instance && B.instance.playBgm(), 20 <= O.tileMap.mapId && B.instance.updateMistery(!0, R.mapId), Ce(!0), i && (w.get(w.s_enterFromCity) ? (w.set(w.s_enterFromCity, !1), e = R.backCity || Re.city, s = {
                        [Re.city]: 1
                    }, t = Data.getBattleMap(s[e] || 1), this.start({
                        mapId: +t.mapRes,
                        logicMapType: e,
                        squad: [R.icon],
                        viewImpl: rs
                    })) : O.event(c.HOME_ClUB_CHANGE, [null, !0])))
    }
    loadRoleRes(i) {
        return new Promise((t, e) => {
            let s = [],
            a = [];
            if (i.logicMapType == Re.city) {
                let e = 0;
                e = 0 == R.icon ? 6010 : 1 == R.icon ? 6020 : R.icon,
                s.push(e)
            } else {
                let e = [];
                (e = i.logicMapType == Re.arena ? O.arena.arenaBase.squad || [] : R.squad || []).forEach(e => {
                    let t = O.hero.getHero(e);
                    if (t) {
                        s.push(t.skinId);
                        let e = t.heroSkills.concat(t.heroEquipSkills);
                        e.forEach(e => {
                            a.push(e.skillId)
                        })
                    }
                })
            }
            if (s.length || a.length) {
                let i = [],
                e = (s.forEach(e => {
                        let t = `hunt/role/${e}.png`;
                        Laya.Loader.checkUseKtx(t) && (t = t.replace(".png", ".ktx")),
                        i.push({
                            url: `hunt/role/${e}.json`,
                            type: Laya.Loader.TEXT
                        }),
                        i.push({
                            url: `hunt/role/${e}.atlas`,
                            type: Laya.Loader.TEXT
                        }),
                        i.push({
                            url: t,
                            type: Laya.Loader.IMAGE
                        })
                    }), D.getSkillUseRes(a));
                e.forEach(e => {
                    i.push({
                        url: e,
                        type: Laya.Loader.ATLAS
                    })
                }),
                Laya.loader.load(i, Laya.Handler.create(this, () => {
                        t(!0)
                    }))
            } else
                t(!0)
        })
    }
    enterMap(i) {
        return O.battle.reqEnterMap(i).then(e => {
            if (0 != e.retCode)
                return console.log("reqEnterMap error"), L.stop(), !1;
            R.mapId = e.tileMapId,
            R.mapPos = e.tileMapPos;
            let t = this.m_battle = ms.create(i);
            return t.preLoad(e.enterHeros || []),
            t.start(),
            B.instance.updateMistery(!1),
            !0
        })
    }
    checkSkill(i, s, e) {
        return O.battle.reqExecuteSkill(i, s, e).then(e => {
            let t = L.getRoleById(e.srcID || s);
            if (t)
                return 0 != e.retCode ? (t.resetCD(i, 150), void t.endSkill()) : void t.resetCD(i)
        })
    }
    transAbnormal(e) {
        let t = ut.Normal;
        if (!e)
            return t;
        let i = !1;
        return 2 & e ? t = ut.Stun : 4 & e ? (t = ut.Scared, i = !0) : 16 & e ? (t = ut.Taunt, i = !0) : 8 & e && (i = !0),
        i && I.instance.playSound(v.SE_LostControl),
        t
    }
    playersEnterNtf(e) {
        if (this.battle) {
            let i = 0;
            e.forEach(e => {
                var t;
                L.getRoleById(e.id) || (t = Data.getCharType(e.showId), t = {
                        rid: e.id,
                        showId: e.showId,
                        size: t.shapRadius,
                        speed: t.moveSpeed,
                        type: ht.Hero,
                        x: e.location.x,
                        y: e.location.y,
                        group: mt.Enemy,
                        isMain: !1,
                        cInfos: [],
                        dir: ct.Down,
                        userId: e.userId,
                        nameType: _t.Comm,
                        name: e.name,
                        lvl: e.level
                    }, i++, L.createHero(t))
            })
        }
    }
    herosLeaveNtf(e) {
        this.battle && e.forEach(e => {
            e = L.getRoleById(e);
            e && L.removeRole(e, !1)
        })
    }
    heroMovePathNtf(t) {
        if (this.battle) {
            let e = L.getRoleById(t.id);
            e && e.onSyncMove(t.targetLocation.x, t.targetLocation.y, t.isForce)
        }
    }
    herosPropertyNtf(t) {
        if (this.battle) {
            let e = t.propertys || [];
            e.forEach(e => {
                let t = L.getRoleById(e.id);
                t && (t.propData && t.propData.setTo(e.maxHp, e.hp, e.shieldHp, e.hp, e.atkSpeed, e.moveSpeed), t.root.nameWrap && t.root.nameWrap.changeShield(e.shieldHp, e.shieldMaxHp), e = this.transAbnormal(e.skillFlag), t.changeAbnormal(e))
            }),
            this.battle.recordMaxHp(t)
        }
    }
    herosHPChangeNtf(t) {
        if (this.battle) {
            let e = t.hps || [];
            e.forEach(e => {
                let t = L.getRoleById(e.id);
                t && (t.propData && (t.propData.hp = e.hp), t.root.nameWrap.changeHp(e.hp))
            }),
            this.battle.updateHpInfo()
        }
    }
    herosBuffNtf(t) {
        if (this.battle) {
            let e = t.buffs || [];
            e.forEach(e => {
                let t = L.getRoleById(e.id);
                t && t.checkBuff(e)
            })
        }
    }
    herosChangeInfoNtf(e) {
        this.battle && this.battle.changeHeroInfo(e)
    }
    heroDieNtf(t) {
        if (this.battle) {
            let e = L.getRoleById(t);
            e && (e.propData && (e.propData.hp = 0), e.root.nameWrap && e.root.nameWrap.changeHp(0), L.removeRole(e, !0)),
            this.battle.updateHpInfo()
        }
    }
    playerEnter(e) {
        this.battle && (this.battle.playerEnter(e), this.battle.updateUserList())
    }
    playerUpdate(e) {
        this.battle && (this.battle.playerUpdate(e), this.battle.updateUserList())
    }
    playerLeave(e) {
        this.battle && (this.battle.playerLeave(e), this.battle.updateUserList())
    }
    otherHeroEnter(i) {
        if (this.battle) {
            let e = i.heros || [],
            t = [];
            e.forEach(e => {
                e.userId != R.id && t.push(e)
            }),
            this.battle.otherHeroEnter(t),
            this.battle.updateUserList()
        }
    }
    heroRevive(e) {
        var t = e.heros;
        this.battle && (e.isSelf ? (this.battle.createSelfRoles(e.enterHeros, !0), this.battle.heroRevive()) : this.battle.otherHeroEnter(t, !0))
    }
    npcsEnterNtf(e) {
        this.battle && (this.battle.npcsEnter(e), this.battle.updateUserList())
    }
    npcsLeaveNtf(e) {
        this.battle && (e.forEach(e => {
                e = L.getRoleById(e);
                e && L.removeRole(e, !1)
            }), this.battle.updateUserList())
    }
    npcsMoveNtf(e) {
        this.battle && e.forEach(e => {
            let t = L.getRoleById(e.id);
            !t || t.root.x == e.targetLocation.x && t.root.y == e.targetLocation.y || t.onSyncMove(e.targetLocation.x, e.targetLocation.y, 0, !0)
        })
    }
    npcsPropertyNtf(t) {
        if (this.battle) {
            let e = t.propertys || [],
            s = null;
            e.forEach(e => {
                let t = L.getRoleById(e.id);
                var i;
                t && (t.propData && t.propData.setTo(e.maxHp, e.hp, e.shieldHp, e.hp, e.atkSpeed, e.moveSpeed), t.root.nameWrap && (t.root.nameWrap.changeHp(e.hp, !0), t.root.nameWrap.changeShield(e.shieldHp, e.shieldMaxHp)), i = this.transAbnormal(e.skillFlag), t.changeAbnormal(i), t.type == ht.Boss && (s = e))
            }),
            this.battle.recordMaxHp(t),
            s && this.battle.updateBossInfo(s)
        }
    }
    npcsHPChangeNtf(t) {
        if (this.battle) {
            let e = t.hps || [];
            e.forEach(e => {
                let t = L.getRoleById(e.id);
                t && (t.propData && (t.propData.hp = e.hp), t.root.nameWrap && t.root.nameWrap.changeHp(e.hp))
            }),
            this.battle.updateHpInfo()
        }
    }
    npcsBuffNtf(t) {
        if (this.battle) {
            let e = t.buffs || [];
            e.forEach(e => {
                let t = L.getRoleById(e.id);
                t && t.checkBuff(e)
            })
        }
    }
    npcDieNtf(e) {
        var t;
        this.battle && (t = L.getRoleById(e.id), this.battle.npcDie(e.id), t && t.type == ht.Boss && this.battle.updateBossInfo(e))
    }
    executeSkillNtf(i) {
        if (this.battle) {
            let t = L.getRoleById(i.srcID);
            if (t) {
                if (t.root.x = i.currentLocation.x, t.root.y = i.currentLocation.y, t.isMain) {
                    let e = t.mapview;
                    e.updateViewPort(i.currentLocation.x, i.currentLocation.y)
                }
                var e = L.getRoleById(i.targetID);
                e ? t.playSkill(i.skillID, [e], !0) : t.endSkill()
            }
        }
    }
    skillDamageNtf(t) {
        if (this.battle) {
            var i,
            s = L.getRoleById(t.srcID);
            let e = L.getRoleById(t.targetID);
            e && s && (this.battle.checkAniPlayInBattle(t.srcID, t.targetID) || (i = L.getRoleById(t.mainTargetID), i = Li.create().setTo(t.damageType, t.damage, t.skillID, s, i), e.beAttacked(i), t.bRepulsed && e.beRepulse(t.repulsedX, t.repulsedY, s.root.x, s.root.y), t.bPunchFly && e.bePunchFly(), this.battle.recordDamage(t)))
        }
    }
    skillEventNtf(t) {
        if (this.battle) {
            let e = L.getRoleById(t.srcID);
            var i = L.getRoleById(t.targetID);
            3 == t.evt ? this.battle.showKillAnime({
                srcId: t.srcID,
                targetId: t.targetID
            }) : i && e && e.baseSkill && e.baseSkill.showEvent(t)
        }
    }
    skillRecoverNtf(t) {
        if (this.battle) {
            var i = L.getRoleById(t.srcID);
            let e = L.getRoleById(t.targetID);
            e && (i = Li.create().setTo(0, t.value, t.skillID, i), e.beAttacked(i), T.battle && T.battle.recordDamage({
                    srcID: t.srcID,
                    targetID: t.targetID,
                    damage: t.value,
                    damageType: 0
                }))
        }
    }
    syncHeroInfoNtf(t) {
        if (this.battle) {
            let e = L.getRoleById(t.id);
            e && (t.scaredId ? e.scaredId = t.scaredId : t.tauntId && (e.tauntId = t.tauntId))
        }
    }
    battleEndNtf(e) {
        this.battle && this.battle.end(e)
    }
    battleDropNtf(e) {
        this.battle && this.battle.dropItem(e)
    }
    battleMapInfoNtf(e) {
        L.battleMapInfo = e
    }
    battleEventNtf(e) {
        this.battle && this.battle.showBattleEvent(e)
    }
    chestsEnterNtf(e) {
        this.battle && this.battle.createBoxDrop(e)
    }
    chestsLeaveNtf(e) {
        this.battle && this.battle.removeBoxDrop(e)
    }
    chestsPropertyNtf(e) {
        this.battle && this.battle.updateBoxDrop(e)
    }
    arenaEndFightAck(e) {
        this.battle && this.battle.end(e)
    }
};
window.battleCtr = T,
window.npcTalkView = Ri,
window.storyInfoView = Bi;
class hs extends t.hunt.views.fight.BossWarningUI {
    constructor() {
        super()
    }
    static create(i = !1) {
        hs.s_isShowing || (hs.s_isShowing = !0, E(hs, {}).then(e => {
                let t = T.battle && T.battle.battleUI;
                t && (t.addChild(e), e.showWarning(i))
            }))
    }
    onAwake() {
        super.onAwake(),
        this.mouseThrough = !0,
        this.ani1.on(Laya.Event.COMPLETE, this, () => {
            this.destroy()
        }),
        this.m_img_Bg.size(Laya.stage.width, Laya.stage.height)
    }
    onDestroy() {
        super.onDestroy(),
        hs.s_isShowing = !1
    }
    showWarning(e = !1) {
        this.m_img_Warn.visible = this.m_img_WarnAni.visible = e,
        this.ani1.play(0, !1)
    }
}
hs.s_isShowing = !1;
class ms {
    constructor(e) {
        this.m_rewards = [],
        this.m_killNum = 0,
        this.m_hpRecord = null,
        this.m_enemyId = null,
        this.m_damageObj = null,
        this.m_endData = null,
        this.m_boxReward = null,
        this.m_allLoots = [],
        this.m_canClickMap = !1,
        this.m_needTarget = !1,
        this.m_selfTarget = 0,
        this.m_lastPickId = 0,
        this.m_destroyed = !1,
        this.m_logicIdShowMap = {},
        this.m_playerList = [],
        this.m_createOpt = e,
        this.m_state = pt.init,
        O.on(c.NET_RECONNECTED, this, () => {
            T.end(!0)
        })
    }
    static registerBattle(e, t) {
        ms.s_battleCls[e] = t
    }
    static create(e) {
        let t = ms.s_battleCls[e.logicMapType];
        if (t)
            return new t(e);
        console.log("battle not register!==>" + e.logicMapType)
    }
    get createOpt() {
        return this.m_createOpt
    }
    get viewImpl() {
        return this.m_createOpt.viewImpl
    }
    get canClickMap() {
        return this.m_canClickMap
    }
    get needTarget() {
        return this.m_needTarget
    }
    get selfTarget() {
        return this.m_selfTarget
    }
    set selfTarget(e) {
        this.m_selfTarget = e
    }
    get lastPick() {
        return this.m_lastPickId
    }
    set lastPick(e) {
        this.m_lastPickId = e
    }
    get battleUI() {
        return this.m_battleUI
    }
    get playerList() {
        return this.m_playerList
    }
    get hpRecord() {
        return this.m_hpRecord
    }
    set battleUI(e) {
        this.m_battleUI = e
    }
    get boxReward() {
        return this.m_boxReward
    }
    get resultImpl() {
        return this.m_createOpt.resultImpl
    }
    get damageObj() {
        return this.m_damageObj
    }
    get state() {
        return this.m_state
    }
    dtor() {
        this.m_damageObj = null,
        this.m_rewards = [],
        this.m_hpRecord = null,
        this.m_enemyId = null,
        this.m_endData = null,
        this.m_boxReward = null,
        this.m_destroyed = !0,
        this.m_logicIdShowMap = {},
        Laya.timer.clearAll(this),
        this.m_battleUI && (this.m_battleUI.closeDialog(), this.m_battleUI = null),
        I.instance.stopMusic(),
        O.off(c.NET_RECONNECTED, this, null)
    }
    get rewards() {
        return this.m_rewards
    }
    npcsEnter(e) {
        e.forEach(e => {
            var t,
            i,
            s;
            L.getRoleById(e.id) || (t = Data.getCharType(e.showId), s = (i = e.userId == R.id) ? mt.Self : mt.Enemy, s = {
                    rid: e.id,
                    userId: e.userId,
                    showId: t.avatar || t.icon,
                    scale: t.shapScale / yt,
                    speed: t.moveSpeed,
                    size: t.shapRadius,
                    type: ht.Hero,
                    x: e.location.x,
                    y: e.location.y,
                    group: s,
                    isMain: !1,
                    cInfos: [],
                    dir: ct.Down,
                    nameType: i ? _t.Main : _t.Comm,
                    name: S(t.name),
                    lvl: e.level
                }, this.m_logicIdShowMap[e.id] = {
                    userId: e.userId,
                    showId: t.avatar || t.icon
                }, L.createMonster(s))
        })
    }
    otherHeroEnter(e, i = !1) {
        let s = 0;
        e.forEach(e => {
            var t;
            L.getRoleById(e.id) || (t = Data.getCharType(e.showId), t = {
                    rid: e.id,
                    showId: e.showId,
                    size: t.shapRadius,
                    speed: t.moveSpeed,
                    type: ht.Hero,
                    x: e.location.x,
                    y: e.location.y,
                    group: mt.Enemy,
                    isMain: !1,
                    cInfos: [],
                    dir: ct.Down,
                    userId: e.userId,
                    nameType: _t.Comm,
                    name: e.name,
                    lvl: e.level
                }, s++, this.m_logicIdShowMap[e.id] = {
                    userId: e.userId,
                    showId: e.showId
                }, e = L.createHero(t), i && b.create({
                    url: "hunt/effect/7003_atk.atlas",
                    parent: e.root.parent,
                    px: e.root.x,
                    py: e.root.y,
                    scale: 1,
                    autoPlay: !0,
                    autoRemove: !0,
                    interval: 90
                }))
        })
    }
    changeHeroInfo(e) {}
    playerEnter(e) {
        (e.players || []).forEach(t => {
            this.m_playerList.find(e => t.id == e.id) || this.m_playerList.push(t)
        })
    }
    playerLeave(e) {
        (e.playerIds || []).forEach(t => {
            var e = this.m_playerList.findIndex(e => t == e.id);
            -1 != e && this.m_playerList.splice(e, 1),
            delete this.m_hpRecord[t]
        })
    }
    playerUpdate(e) {
        (e.propertys || []).forEach(t => {
            var i = this.m_playerList.findIndex(e => t.id == e.id);
            if (-1 != i) {
                this.m_playerList[i].tempBag = t.tempBag,
                this.m_playerList[i].targetId = t.targetId;
                let e = L.getRoleByUserId(t.id);
                e.forEach(e => e.lockTarget = t.targetId),
                t.targetId == R.id && hs.create(),
                t.id == R.id && (T.battle.selfTarget = t.targetId)
            }
        })
    }
    getPlayerInfo(t) {
        return this.m_playerList.find(e => e.id == t)
    }
    npcDie(e) {
        let t = L.getRoleById(e);
        t && (t.propData && (t.propData.hp = 0), t.root.nameWrap && t.root.nameWrap.changeHp(0), L.removeRole(t, !0)),
        this.updateHpInfo()
    }
    pickReward() {
        this.battleUI && this.battleUI.showPickAni && this.battleUI.showPickAni()
    }
    updateHpInfo() {}
    showKillAnime(e) {}
    recordMaxHp(e) {
        this.m_hpRecord || (this.m_hpRecord = {});
        let t = e.propertys.filter(e => {
            if (!this.m_hpRecord[e.userId || -1])
                return !0
        });
        t.forEach(e => {
            e.userId == R.id || this.m_enemyId || (this.m_enemyId = e.userId || -1),
            this.m_hpRecord[e.userId || -1] ? this.m_hpRecord[e.userId || -1] += e.maxHp : this.m_hpRecord[e.userId || -1] = e.maxHp
        }),
        1 < Object.keys(this.m_hpRecord).length && this.updateHpInfo()
    }
    pickSpecial() {}
    showBattleResult() {}
    preLoad(e) {
        this.createSelfRoles(e)
    }
    start() {
        this.m_state = pt.fighting,
        this.viewImpl && we(this.viewImpl).then(e => {
            this.m_battleUI = e,
            O.event(c.BATTLE_UILOADED)
        })
    }
    end(e) {
        this.m_state = pt.end,
        Laya.timer.once(1800, this, () => {
            this.m_destroyed || (e.isWin ? I.instance.playMusic(v.BGM_Win, 1) : I.instance.playMusic(v.BGM_Lose, 1))
        }),
        this.createOpt.blockId && O.report.done(e.isWin)
    }
    showEndLater() {
        this.m_endData && this.end(this.m_endData)
    }
    recordDamage(e) {}
    createSelfRoles(e, s = !1) {
        let a = 0,
        r = null,
        n = [];
        e.forEach(e => {
            var t = Data.getCharType(e.showId),
            t = {
                rid: e.id,
                showId: e.showId,
                speed: t.moveSpeed,
                type: ht.Hero,
                x: e.location.x,
                y: e.location.y,
                group: mt.Self,
                isMain: !a,
                cInfos: [],
                dir: ct.Down,
                userId: R.id,
                nameType: _t.Main,
                name: R.name,
                skillIds: e.skillIds || []
            };
            this.m_logicIdShowMap[e.id] = {
                userId: R.id,
                showId: e.showId
            };
            let i = L.createHero(t, !0);
            0 == a ? r = i : (i.leader = r, n.push(i)),
            a++,
            s && b.create({
                url: "hunt/effect/7003_atk.atlas",
                parent: i.root.parent,
                px: i.root.x,
                py: i.root.y,
                scale: 1,
                autoPlay: !0,
                autoRemove: !0,
                interval: 90
            })
        }),
        r && (r.followers = n)
    }
    getCurHpByUserId(e) {
        let t = L.getRoleByUserId(e),
        i = 0;
        return t.forEach(e => {
            i += e.propData.hp
        }),
        i
    }
    dropItem(e) {
        I.instance.playSound(v.SE_Drop),
        (e.items || []).forEach(e => {
            Ci.create({
                itemId: e.id,
                itemNum: e.num,
                fromPos: {
                    x: e.location.x + Math.randRange(25, 70) * (.5 < Math.random() ? -1 : 1),
                    y: e.location.y + Math.randRange(15, 40) * (.5 < Math.random() ? -1 : 1)
                },
                isAuto: !0,
                special: !1
            })
        })
    }
    checkBattleUI() {
        this.m_battleUI || this.viewImpl && we(this.viewImpl).then(e => {
            this.m_destroyed ? e.closeDialog() : this.m_battleUI = e
        })
    }
    checkAniPlayInBattle(e, t) {
        return !1
    }
    showBattleEvent(e) {}
    updateUserList() {}
    createBoxDrop(e) {}
    removeBoxDrop(e) {}
    updateBoxDrop(e) {}
    heroRevive() {}
    pickBox(e) {}
    checkPick() {}
    clearMapLoop() {}
    updateBossInfo(e) {}
    checkIsPicking() {
        return !1
    }
}
ms.s_battleCls = {};
class cs extends t.hunt.views.fight.BattleResultUI {
    constructor(e) {
        super(),
        this.dataSource = e
    }
    onAwake() {
        super.onAwake(),
        this.m_img_Mask.size(this.m_img_AdaptBg.width, this.m_img_AdaptBg.height);
        var e = this.dataSource || [];
        this.m_lst_Reward.array = e,
        (this.m_lst_Reward.cells || []).forEach((e, t) => {
            e.m_box_Con.alpha = 0,
            e.visible = !0,
            e.m_box_Con.y = 96,
            Laya.Tween.to(e.m_box_Con, {
                y: 126,
                alpha: 1
            }, 300, null, null, 100 * t)
        }),
        Laya.timer.once(120 * e.length, this, () => {
            this.destroyed || (this.m_lst_Reward.refresh(), this.m_btn_Close.visible = !0)
        });
        let t = T.battle.createOpt.blockId;
        t && O.block.reqBlockInfo(t).then(e => {
            this.destroyed || (this.m_view_Like.visible = !0, this.m_view_Like.setData(t, e), this.m_view_Comment.visible = !0, this.m_view_Comment.setData(t))
        })
    }
    onClickClose(e) {
        super.onClickClose(e),
        T.end()
    }
}
class ds extends t.hunt.views.fight.BattleRewardItemUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.showData()
    }
    showData() {
        var e = this.dataSource,
        t = (this.m_txt_Num.text = 1 < e.itemNum ? e.itemNum + "" : "", this.m_txt_Item.text = S(e.itemCfg.name), this.m_img_Reward.skin = `hunt/ui_item/${e.itemCfg.icon}.png`, {
        0: "hunt/ui_card/cardBgN.png",
        1: "hunt/ui_card/cardBgR.png",
        2: "hunt/ui_card/cardBgSR.png",
        3: "hunt/ui_card/cardBgSSR.png",
        4: "hunt/ui_card/cardBgSP.png"
    });
        e.itemCfg.type == m.boxKey ? this.m_img_Bg.skin = t[4] : e.itemCfg.type == m.equip ? 11 <= e.itemCfg.quality ? this.m_img_Bg.skin = t[4] : 9 < e.itemCfg.quality ? this.m_img_Bg.skin = t[3] : 6 < e.itemCfg.quality ? this.m_img_Bg.skin = t[2] : this.m_img_Bg.skin = t[1] : e.itemCfg.id != p.gem && e.itemCfg.type != m.food && e.itemCfg.type != m.cookFood || (this.m_img_Bg.skin = t[0]),
        this.m_img_FoodLv.visible = this.m_img_Star.visible = !1,
        e.itemCfg.type == m.equip ? (t = Data.getEquip(e.itemCfg.id)) && (this.m_img_Star.visible = this.m_txt_StarLv.visible = !0, this.m_txt_StarLv.text = t.lvl + "") : e.itemCfg.type == m.food || e.itemCfg.type == m.cookFood ? (this.m_img_FoodLv.visible = this.m_txt_Lvl.visible = !0, (t = Data.getFood(e.itemCfg.id)) && (this.m_txt_Lvl.text = Math.floor(t.exp / 150) + "")) : this.m_img_Star.visible = this.m_txt_StarLv.visible = !1
    }
}
class us extends t.hunt.views.fight.BattleFailDlgUI {
    constructor() {
        super()
    }
    onAwake() {
        super.onAwake(),
        this.m_img_TipEquip.visible = O.equip.checkCanSum(),
        this.m_img_TipHero.visible = O.hero.checkEquipGreen()
    }
    onDestroy() {
        super.onDestroy(),
        T.end(!0)
    }
    onClickCard() {
        this.onClickClose(),
        O.event(c.HOME_CARD_CHANGE)
    }
    onClickBag() {
        this.onClickClose(),
        O.event(c.HOME_BAG_CHANGE)
    }
    onClickClose() {
        this.closeDialog()
    }
}
class _s extends ms {
    constructor() {
        super(...arguments),
        this.m_canClickMap = !0,
        this.m_ticker = null
    }
    start() {
        super.start()
    }
    end(e) {
        super.end(e),
        e.isWin ? (this.m_boxReward = e.finalLoots, O.bag.updateItem(e.finalLoots), O.bag.updateItem(e.monsterLoots), this.m_allLoots = this.m_allLoots.concat(e.finalLoots, e.monsterLoots)) : u(us)
    }
    dtor() {
        super.dtor(),
        this.m_ticker && (this.m_ticker.dispose(), this.m_ticker = null)
    }
    npcsEnter(e) {
        let a = Data.getBlock_normalBattle(this.m_createOpt.blockId);
        e.forEach((e, t) => {
            var i,
            s;
            L.getRoleById(e.id) || (i = a && a.bossId == e.showId, s = Data.getCharType(e.showId), s = {
                    rid: e.id,
                    userId: e.userId,
                    showId: s.avatar || s.icon,
                    scale: s.shapScale / yt,
                    speed: s.moveSpeed,
                    size: s.shapRadius,
                    type: i ? ht.Boss : ht.Monster,
                    x: e.location.x,
                    y: e.location.y,
                    group: mt.Enemy,
                    isMain: !1,
                    cInfos: [],
                    dir: ct.DownRight,
                    nameType: _t.Comm,
                    name: S(s.name),
                    lvl: e.level,
                    dropInfo: null
                }, i || b.create({
                    url: "hunt/effect/e2A.atlas",
                    parent: L.mapview.extLayer,
                    px: e.location.x,
                    py: e.location.y,
                    interval: 50,
                    autoPlay: !0,
                    autoRemove: !0
                }), L.createMonster(s))
        }),
        5 < e.length && hs.create()
    }
    pickSpecial() {
        let e = L.getMainRole();
        var t;
        e ? (t = L.allLootItems.find(e => e.isSpecial), e.entity.role.rsyncMove(t.x + 30, t.y + 30), Laya.timer.frameLoop(1, this, this.checkDisToLoot), Laya.timer.frameLoop(60, this, this.checkMoveBox)) : console.warn("no leader")
    }
    checkMoveBox() {
        let e = L.getMainRole();
        var t;
        e && (t = L.allLootItems.find(e => e.isSpecial)) ? vt(e.root.x, e.root.y, t.x, t.y) < 50 ? this.showPickAni(t) : e.entity.role.rsyncMove(t.x + 30, t.y + 30) : Laya.timer.clear(this, this.checkMoveBox)
    }
    checkDisToLoot() {
        var e = L.getMainRole(),
        t = L.allLootItems.find(e => e.isSpecial);
        if (!e || !t)
            return Laya.timer.clear(this, this.checkDisToLoot), void Laya.timer.clear(this, this.checkMoveBox);
        vt(e.root.x, e.root.y, t.x, t.y) < 50 && (Laya.timer.clear(this, this.checkDisToLoot), Laya.timer.clear(this, this.checkMoveBox), this.showPickAni(t))
    }
    checkDisToLootAll() {
        let t = L.getMainRole();
        if (Laya.timer.clear(this, this.checkDisToLootAll), t) {
            let e = L.allLootItems.filter(e => {
                if (vt(t.root.x, t.root.y, e.x, e.y) < 20 && !e.isPicking && !e.isSpecial)
                    return !0
            });
            e.forEach(e => {
                e.flyToTarget()
            }),
            L.allLootItems.filter(e => !e.isPicking && !e.isSpecial).length && this.pickAllLoots()
        }
    }
    showBattleResult() {
        let i = [];
        (this.m_allLoots || []).forEach(t => {
            var e = i.findIndex(e => e.itemId == t.id);
            Data.getItem(t.id).type != m.equip && -1 != e ? i[e].itemNum += t.delta : i.push({
                itemId: t.id,
                itemNum: t.delta,
                itemCfg: Data.getItem(t.id),
                notShowName: !1,
                showSelect: !1,
                notShowStar: !1
            })
        }),
        i.sort((e, t) => {
            if (e.itemId == p.gem)
                return -1;
            if (e.itemCfg.type == m.boxKey)
                return t.itemCfg.type == m.boxKey ? t.itemCfg.quality - e.itemCfg.quality : t.itemId == p.gem ? 1 : -1;
            if (e.itemCfg.type == m.equip)
                return t.itemCfg.type == m.equip ? Data.getEquip(t.itemId).lvl - Data.getEquip(e.itemId).lvl : t.itemId == p.gem || t.itemCfg.type == m.boxKey ? 1 : -1;
            if (e.itemCfg.type == m.food || e.itemCfg.type == m.cookFood) {
                if (t.itemCfg.type == m.food || t.itemCfg.type == m.cookFood)
                    return Data.getFood(t.itemId).exp - Data.getFood(e.itemId).exp;
                if (t.itemId == p.gem || t.itemCfg.type == m.equip)
                    return 1
            }
            return t.itemCfg.quality - e.itemCfg.quality
        });
        var e = Mmobay.Utils.getScreenInfo(),
        s = (e.stageWidth - e.designWidth) / 2 || 0,
        a = 485 + s;
        for (let t = 0; t < i.length && !(9 <= t); t++) {
            let e = new ds;
            e.scale(.3, .3),
            e.x = a,
            e.y = 1045,
            e.zOrder = 1300,
            e.dataChanged(0, i[t]),
            Laya.timer.once(100 * t, this, (e, t) => {
                var i = 90 + t % 3 * 175 + s,
                t = 220 + 260 * Math.floor(t / 3);
                Laya.stage.addChild(e),
                Laya.Tween.to(e, {
                    x: i,
                    y: t,
                    scaleX: 1,
                    scaleY: 1,
                    alpha: .3
                }, 500, null, Laya.Handler.create(this, e => {
                        e.destroy()
                    }, [e]))
            }, [e, t])
        }
        Laya.timer.once(400, this, () => {
            me.instance.removeAllPopUp(),
            this.m_state = pt.pickDone,
            u(cs, {
                params: [i],
                closeOnSide: !1,
                showEffect: !1
            })
        })
    }
    showPickAni(e) {
        let t = new Laya.Box,
        i = (t.size(60, 60), t.anchorX = t.anchorY = .5, new Laya.Image),
        s = (i.skin = "hunt/ui_fight/pick_hand.png", i.size(90, 90), i.centerX = 0, t.addChild(i), new Laya.Image),
        a = (s.skin = "hunt/ui_fight/pick_circle.png", s.size(90, 90), s.centerX = 0, t.addChild(s), new Laya.Sprite);
        s.mask = a;
        let r = -90;
        var n = Date.newDate().addSeconds(4).getTime();
        this.m_ticker = Ei.create(n, 50),
        this.m_ticker.onTick = () => {
            r += 8,
            a.graphics.clear(),
            a.graphics.drawPie(45, 45, 45, -90, r, "#FFFFFF"),
            270 <= r && (this.m_ticker.dispose(), t.destroy(), e.pickSpecial(), this.dropBoxReward(e))
        },
        this.m_ticker.start(),
        t.centerX = 0,
        t.centerY = 100
    }
    dropBoxReward(t) {
        this.m_destroyed || ((this.m_boxReward || []).forEach(e => {
                Ci.create({
                    itemId: e.id,
                    itemNum: e.delta,
                    fromPos: {
                        x: t.x + Math.randRange(25, 70) * (.5 < Math.random() ? -1 : 1),
                        y: t.y + Math.randRange(15, 40) * (.5 < Math.random() ? -1 : 1)
                    },
                    isAuto: !1,
                    special: !1,
                    moreDis: !0
                })
            }), Laya.timer.once(1400, this, () => {
                this.pickAllLoots()
            }), Laya.timer.once(5400, this, () => {
                this.allLootsFly()
            }))
    }
    allLootsFly() {
        L.allLootItems.forEach(e => {
            e.isSpecial || e.isPicking || e.flyToTarget()
        })
    }
    pickAllLoots() {
        let i = L.getMainRole(),
        s = null,
        a = 99999;
        L.allLootItems.forEach(e => {
            var t = vt(e.x, e.y, i.root.x, i.root.y);
            t < a && !e.isSpecial && !e.isPicking && (a = t, s = e)
        }),
        i && s && (i.entity.role.clearForce(), i.entity.role.rsyncMove(s.x, s.y), Laya.timer.loop(300, this, this.checkDisToLootAll))
    }
}
class ps extends mi {
    get enable() {
        return this.get("enable")
    }
    set enable(e) {
        this.set("enable", e)
    }
    get lastPos() {
        return this.get("lastPos")
    }
    set lastPos(e) {
        this.set("lastPos", e)
    }
    get targetPos() {
        return this.get("targetPos")
    }
    set targetPos(e) {
        this.set("targetPos", e)
    }
    get scarePos() {
        return this.get("scarePos")
    }
    set scarePos(e) {
        this.set("scarePos", e)
    }
    get lastClick() {
        return this.get("lastClick")
    }
    set lastClick(e) {
        this.set("lastClick", e)
    }
    get currentClick() {
        return this.get("currentClick")
    }
    set currentClick(e) {
        this.set("currentClick", e)
    }
    get followPoints() {
        return this.get("followPoints") || []
    }
    set followPoints(e) {
        this.set("followPoints", e)
    }
    get followPrePos() {
        return this.get("followPrePos")
    }
    set followPrePos(e) {
        this.set("followPrePos", e)
    }
    get followTarPos() {
        return this.get("followTarPos")
    }
    set followTarPos(e) {
        this.set("followTarPos", e)
    }
    set noFollow(e) {
        this.set("noFollow", e)
    }
    get noFollow() {
        return this.get("noFollow")
    }
    set needDelayAfterClick(e) {
        this.set("needDelayAfterClick", e)
    }
    get needDelayAfterClick() {
        return this.get("needDelayAfterClick")
    }
    set clickCheckTime(e) {
        this.set("clickCheckTime", e)
    }
    get clickCheckTime() {
        return this.get("clickCheckTime")
    }
    set checkMoveTimes(e) {
        this.set("checkMoveTimes", e)
    }
    get checkMoveTimes() {
        return this.get("checkMoveTimes")
    }
    resetClickLaterMove() {
        this.needDelayAfterClick = !0,
        this.clickCheckTime = null
    }
    setData(e, t) {
        super.setData(e, t),
        this.enable = !0,
        this.dirty = !0
    }
    observeLeaderMove(e) {
        this.followPoints = e,
        this.followPrePos = e[e.length - 1],
        this.followTarPos = null
    }
    observeLeaderStop(e, t) {
        var i;
        this.followPrePos && (ft(this.followPrePos, i = {
                    x: e,
                    y: t
                }) || vt(e, t, this.followPrePos.x, this.followPrePos.y) < 10 ? this.followPrePos = null : this.observeLeaderMove([i]))
    }
    checkFollowMove() {
        var e = this.role.leader;
        e && 250 < vt(this.role.root.x, this.role.root.y, e.root.x, e.root.y) && (e = {
                x: e.root.x,
                y: e.root.y
            }, this.observeLeaderMove([e]))
    }
}
class gs extends ps {
    constructor() {
        super()
    }
}
class ys extends ci {
    constructor(e) {
        super(e),
        this.proirity = 4
    }
    run(i) {
        if (i.enable && T.battle && !(T.battle.state >= pt.pickDone)) {
            let t = i.entity.getComponent(k.State);
            if ((t.hasAbnormals(ut.Stun, ut.Scared, ut.Taunt) || t.hasStates(f.Die)) && (i.currentClick = null, i.followTarPos = null), !t.hasStates(f.Die) && !t.hasAbnormals(ut.Stun)) {
                if (i.currentClick) {
                    if (ft(i.currentClick, i.lastClick) && t.hasStates(f.Run))
                        return;
                    if (ft(i.currentClick, i.lastClick)) {
                        if (i.checkMoveTimes < 100)
                            return void i.checkMoveTimes++;
                        i.checkMoveTimes = 0
                    }
                    return i.lastClick = i.currentClick,
                    i.role.rsyncMove(i.currentClick.x, i.currentClick.y),
                    void(t.hasStates(f.Run) || (t.state = f.Idle))
                }
                var s = T.battle.createOpt.logicMapType == Re.worldBoss;
                if (i.needDelayAfterClick) {
                    i.clickCheckTime || (i.clickCheckTime = Date.newDate().getTime());
                    var a = s ? 1e3 : 500;
                    if (Date.newDate().getTime() - i.clickCheckTime < a)
                        return;
                    i.needDelayAfterClick = !1,
                    i.clickCheckTime = null
                } else !T.battle.selfTarget && s && i.role.autoAttackBoss();
                if (!t.hasStates(f.PreAttack, f.Attack))
                    if (t.hasAbnormals(ut.Scared))
                        i.scarePos || (a = di.getScaredPoint(i.entity.role)) && (i.scarePos = a, i.entity.role.rsyncMove(a.x, a.y));
                    else {
                        if (this.inFollowRange(i) && i.role.hasAttackSkill() && i.followTarPos && (i.followTarPos = null, t.state = f.Idle), !t.hasAbnormals(ut.Taunt) && !i.role.isMain && !i.noFollow) {
                            if (i.followTarPos) {
                                if (t.hasStates(f.Idle) && i.checkMoveTimes < 100)
                                    return void i.checkMoveTimes++;
                                if (!t.hasStates(f.Idle))
                                    return;
                                i.followTarPos = null,
                                i.checkMoveTimes = 0
                            }
                            var s = this.getFollowPoint(i);
                            if (s)
                                return i.followPoints = [], i.followTarPos = s, void i.role.rsyncMove(s.x, s.y)
                        }
                        if (t.state != f.checkAttack)
                            return this.inFollowRange(i) && i.role.canUseSkill() ? (i.lastPos = null, i.targetPos = null, void(t.state = f.checkAttack)) : t.hasAbnormals(ut.Taunt) ? (a = di.getTauntPoint(i.role), void this.checkMove(i, a)) : void(t.hasStates(f.Idle, f.Run) && (s = di.getNearPoint(i.role), this.checkMove(i, s))); {
                            if (!i.role.canAttack())
                                return void i.role.changeState(f.Idle);
                            i.entity.getComponent(k.Path);
                            t.state = f.PreAttack;
                            let e = i.entity.getComponent(k.Ani);
                            a = i.role.targets[0],
                            s = kt(i.role.root.x, i.role.root.y, a.root.x, a.root.y);
                            return e.direction = s,
                            void i.role.checkSkill()
                        }
                    }
            }
        }
    }
    checkMove(t, i) {
        if (i) {
            let e = t.entity.getComponent(k.State);
            if (!ft(t.targetPos, i) || e.hasStates(f.Idle)) {
                var s = t.entity.getComponent(k.Movement),
                s = {
                    x: s.transform.x,
                    y: s.transform.y
                };
                if (t.lastPos)
                    if (e.hasStates(f.Idle)) {
                        if (t.checkMoveTimes < 100)
                            return void t.checkMoveTimes++;
                        t.checkMoveTimes = 0
                    } else {
                        var a = t.entity.role.usingSkill.cfg.maxExecuteDistance + t.entity.role.size;
                        if (vt(s.x, s.y, t.lastPos.x, t.lastPos.y) < a)
                            return
                    }
                t.checkMoveTimes = 0,
                t.targetPos = i,
                t.lastPos = s,
                t.entity.role.rsyncMove(i.x, i.y)
            }
        }
    }
    inFollowRange(e) {
        var t = e.role.leader;
        return !(t && !e.noFollow) || vt(t.root.x, t.root.y, e.role.root.x, e.role.root.y) <= 250
    }
    getFollowPoint(e) {
        var t = e.role.leader,
        i = e.followPoints,
        s = i.length;
        if (!s)
            return e.checkFollowMove(), null;
        if (!this.checkOverRange(e.role.root.x, e.role.root.y, 250, i))
            return e.followPoints = [], null;
        if (!this.checkLeaderFar(e.role.root.x, e.role.root.y, t.root.x, t.root.y, i))
            return null;
        e = i[s - 1].x,
        t = i[s - 1].y,
        i = Math.randRange(0, 360) * Math.PI / 180;
        return {
            x: e + Math.floor(60 * Math.sin(i)),
            y: t - Math.floor(60 * Math.cos(i))
        }
    }
    checkOverRange(t, i, s, a) {
        for (let e = 0; e < a.length; e++)
            if (s < vt(t, i, a[e].x, a[e].y))
                return !0;
        return !1
    }
    checkLeaderFar(t, i, s, a, r) {
        for (let e = 0; e < r.length; e++) {
            var n = r[e],
            o = vt(t, i, n.x, n.y);
            if (vt(s, a, n.x, n.y) <= o)
                return !0
        }
        return !1
    }
}
class vs extends ys {
    constructor(e) {
        super(e),
        this.proirity = 4
    }
    run(e) {
        !e.enable || e.currentClick && !ft(e.currentClick, e.lastClick) && (e.lastClick = e.currentClick, e.role.rsyncMove(e.currentClick.x, e.currentClick.y))
    }
}
class ks extends mi {
    set action(e) {
        e = {
            action: e,
            rate: e == dt.Attack ? this.role.propData.attackSpeed : 1
        };
        this.markDirty2(e)
    }
    get action() {
        return this.get("action")
    }
    get direction() {
        return this.get("direction")
    }
    set direction(e) {
        this.markDirty1("direction", e)
    }
    get rate() {
        return this.get("rate") || 1
    }
    set rate(e) {
        this.set("rate", e)
    }
    get count() {
        return this.get("count") || 1
    }
    set count(e) {
        this.set("count", e)
    }
    get scale() {
        return this.get("scale") || 1
    }
    set scale(e) {
        this.set("scale", e)
    }
    get transform() {
        return this.role.root.aniWrap
    }
    setData(e, t) {
        super.setData(e, t),
        this.action = dt.Idle,
        this.dirty = !0
    }
}
class fs extends ci {
    constructor(e) {
        super(e),
        this.proirity = 2
    }
    run(i) {
        if (i.dirty && (i.dirty = !1, i.transform && !i.transform.destroyed)) {
            let e = null,
            t = i.count;
            i.action == dt.Attack ? e = Laya.Handler.create(this, e => {
                e.action = dt.Idle,
                e.entity.role.attackActionDone()
            }, [i]) : t = 0,
            i.count = 1;
            a = i.action,
            s = 4 < (s = i.direction) ? 8 - s : s;
            var s,
            a = s += 5 * a;
            i.transform.scaleY = i.scale,
            i.transform.scaleX = 4 < i.direction ? -1 * i.scale : +i.scale,
            i.transform.play(a, t, i.rate, e)
        }
    }
}
class Is extends mi {
    get x() {
        return this.get("x")
    }
    get y() {
        return this.get("y")
    }
    get speed() {
        var e = this.get("speed") / 1e3 || 0;
        return 0 == e ? e : Math.max((this.get("speed") / 1e3 || .4) * this.role.propData.moveSpeed, .02)
    }
    get transform() {
        return this.role.root
    }
    setData(e, t) {
        super.setData(e, t),
        this.dirty = !1
    }
    pos(e, t) {
        var i = kt(this.transform.x, this.transform.y, e, t);
        let s = this.entity.getComponent(k.Ani);
        s.direction = i,
        this.markDirty2({
            x: e,
            y: t
        })
    }
    stop() {
        this.transform.stop();
        var e = this.transform.x,
        t = this.transform.y;
        this.set("x", e),
        this.set("y", t)
    }
    repulse(e, t, i, s) {
        this.transform.stop(),
        this.set("x", e),
        this.set("y", t),
        this.transform.pos(e, t);
        e = kt(e, t, i, s);
        let a = this.entity.getComponent(k.Ani);
        if (a.direction = e, this.role.isMain) {
            let e = this.role.mapview;
            e.updateViewPort(this.transform.x, this.transform.y)
        }
    }
    correctPos(e, t) {
        this.transform.stop(),
        this.transform.pos(e, t),
        this.set("x", e),
        this.set("y", t)
    }
}
class bs extends ci {
    constructor(e) {
        super(e),
        this.proirity = 1
    }
    run(t) {
        if (t.dirty && (t.dirty = !1, t.transform && t.speed)) {
            var i = vt(t.x, t.y, t.transform.x, t.transform.y);
            if (i <= bs.s_minDistance)
                this.end(t);
            else {
                i = i / t.speed;
                let e = null;
                t.role.isMain && t.role.group == mt.Self && (e = Laya.Handler.create(this, this.update, [t], !1));
                var s = Laya.Handler.create(this, this.end, [t]);
                t.transform.move(t.x, t.y, i, e, s)
            }
        }
    }
    update(e) {
        let t = e.role.mapview;
        t.updateViewPort(e.transform.x, e.transform.y)
    }
    end(e) {
        let t = e.entity.getComponent(k.Path);
        t && t.endBlock()
    }
}
function ws(e, t, i) {
    i = i || 0;
    let s;
    if (e.x === t.x) {
        if (0 === i)
            return null;
        if (1 === i)
            return function () {
                return e.x
            }
    } else if (e.y === t.y) {
        if (0 === i)
            return function () {
                return e.y
            };
        if (1 === i)
            return null
    }
    const a = (e.y - t.y) / (e.x - t.x || 1),
    r = e.y - a * e.x;
    return 0 === i ? s = function (e) {
        return a * e + r
    }
     : 1 === i && (s = function (e) {
        return (e - r) / (a || 1)
    }),
    s
}
bs.s_minDistance = 5;
class Cs {
    constructor() {
        this._grids = {},
        this._astar = new Ss
    }
    static get instance() {
        return Cs._instance || (Cs._instance = new Cs),
        Cs._instance
    }
    static get cellW() {
        return Cs._cellW
    }
    static get cellH() {
        return Cs._cellH
    }
    find(e, t, i, s) {
        let a = this.getGrid(e, t);
        if (!a)
            return [];
        e = {
            x: Math.ceil(i.x / Cs.cellW),
            y: Math.ceil(i.y / Cs.cellH)
        },
        t = {
            x: Math.ceil(s.x / Cs.cellW),
            y: Math.ceil(s.y / Cs.cellH)
        },
        i = e.x,
        s = e.y,
        e = a.getNode(i, s);
        let r = t.x,
        n = t.y;
        t = a.getNode(r, n);
        if (t.walkable || (e = a.findReplacer(e, t)) && (r = e.x, n = e.y), i == r && s == n)
            return [];
        let o = [];
        return o.push(t),
        a.setStartNode(i, s),
        a.setEndNode(r, n),
        this._astar.findPath(a) && (this._astar.floyd(), (o = this._astar.floyPath).splice(0, 1)),
        o
    }
    sameGrid(e, t, i, s) {
        let a = this.getGrid(e, t);
        if (!a)
            return !1;
        e = {
            x: Math.ceil(i.x / Cs.cellW),
            y: Math.ceil(i.y / Cs.cellH)
        },
        t = {
            x: Math.ceil(s.x / Cs.cellW),
            y: Math.ceil(s.y / Cs.cellH)
        },
        i = a.getNode(e.x, e.y),
        s = a.getNode(t.x, t.y);
        return i.x == s.x && i.y == s.y
    }
    getGrid(e, t) {
        if (!t)
            return null;
        if (Cs._cellH = t.tileHeight || 80, Cs._cellW = t.tileWidth || 80, this._grids[e])
            return this._grids[e];
        var i = t.cellWidth * t.cols,
        s = t.cellHeight * t.rows,
        i = Math.round(i / Cs.cellW),
        s = Math.round(s / Cs.cellH);
        let a = new As(i, s, Cs.cellW),
        r;
        return (r = t.blocks || []).forEach(e => {
            a.setWalkable(e[0], e[1], !1)
        }),
        (r = t.alphas || []).forEach(e => {
            a.setAlphable(e[0], e[1], !0)
        }),
        this._grids[e] = a
    }
}
Cs._cellW = 80,
Cs._cellH = 80;
class xs {
    constructor(e, t) {
        this.x = 0,
        this.y = 0,
        this.f = 0,
        this.g = 0,
        this.h = 0,
        this.depth = -1,
        this.walkable = !0,
        this.alphable = !1,
        this.x = e,
        this.y = t
    }
    distance(e) {
        var t = e.x - this.x,
        e = e.y - this.y;
        return Math.sqrt(t * t + e * e)
    }
}
class Ss {
    constructor() {
        this._open = [],
        this._closed = [],
        this._path = [],
        this._floydPath = [],
        this._isEnd = !1,
        this._heuristic = this.diagonal,
        this._straightCost = 1,
        this._diagCost = Math.SQRT2
    }
    get floyPath() {
        return this._floydPath
    }
    findPath(e) {
        return this._isEnd = !1,
        this._grid = e,
        this._open = [],
        this._closed = [],
        this._startNode = this._grid.startNode,
        this._endNode = this._grid.endNode,
        this._startNode.g = 0,
        this._startNode.h = this._heuristic(this._startNode),
        this._startNode.f = this._startNode.g + this._startNode.h,
        this._open[0] = this._startNode,
        this.search()
    }
    search() {
        let i = null;
        for (; !this._isEnd; ) {
            let t = 0;
            var s = this._open.length;
            i = this._open[0];
            for (let e = 0; e < s; e++)
                this._open[e].f < i.f && (i = this._open[e], t = e);
            this._open[t] = this._open[this._open.length - 1],
            this._open.pop(),
            this._closed.push(i);
            var e = i.x - 1 < 0 ? 0 : i.x - 1,
            a = this._grid.cols - 1 < i.x + 1 ? this._grid.cols - 1 : i.x + 1,
            r = i.y - 1 < 0 ? 0 : i.y - 1,
            n = this._grid.rows - 1 < i.y + 1 ? this._grid.rows - 1 : i.y + 1;
            for (let t = e; t <= a; t++)
                for (let e = r; e <= n; e++) {
                    const m = this._grid.getNode(t, e);
                    if (m !== i && m.walkable && this._grid.getNode(i.x, m.y).walkable && this._grid.getNode(m.x, i.y).walkable) {
                        let e = this._straightCost;
                        i.x !== m.x && i.y !== m.y && (e = 1.4);
                        var o = i.g + e,
                        l = this._heuristic(m),
                        h = o + l;
                        -1 !== this._open.indexOf(m) || -1 !== this._closed.indexOf(m) ? h < m.f && (m.f = h, m.g = o, m.h = l, m.parent = i) : (m.f = h, m.g = o, m.h = l, m.parent = i, this._open.push(m)),
                        m === this._endNode && (this._isEnd = !0)
                    }
                }
            if (0 === this._open.length)
                return !(this._isEnd = !0)
        }
        return this.buildPath(),
        !0
    }
    floyd() {
        if (null !== this._path) {
            this._floydPath = this._path.concat();
            let e = this._floydPath.length;
            if (2 < e) {
                const i = new xs(0, 0);
                var t = new xs(0, 0);
                this.floydVector(i, this._floydPath[e - 1], this._floydPath[e - 2]);
                for (let e = this._floydPath.length - 3; 0 <= e; e--)
                    this.floydVector(t, this._floydPath[e + 1], this._floydPath[e]), i.x === t.x && i.y === t.y ? this._floydPath.splice(e + 1, 1) : (i.x = t.x, i.y = t.y)
            }
            for (let i = (e = this._floydPath.length) - 1; 0 <= i; i--)
                for (let t = 0; t <= i - 2; t++)
                    if (!this._grid.hasBarrier(this._floydPath[i].x, this._floydPath[i].y, this._floydPath[t].x, this._floydPath[t].y)) {
                        for (let e = i - 1; e > t; e--)
                            this._floydPath.splice(e, 1);
                        i = t,
                        e = this._floydPath.length;
                        break
                    }
        }
    }
    floydVector(e, t, i) {
        e.x = t.x - i.x,
        e.y = t.y - i.y
    }
    buildPath() {
        this._path = [];
        let e = this._endNode;
        for (this._path.push(e); e !== this._startNode; )
            e = e.parent, this._path.unshift(e)
    }
    diagonal(e) {
        var t = e.x - this._endNode.x < 0 ? this._endNode.x - e.x : e.x - this._endNode.x,
        e = e.y - this._endNode.y < 0 ? this._endNode.y - e.y : e.y - this._endNode.y,
        i = t < e ? t : e;
        return 1.4 * i + this._straightCost * (t + e - 2 * i)
    }
}
class As {
    constructor(e, t, i) {
        this._cols = e,
        this._rows = t,
        this._size = i,
        this._nodes = [];
        for (let t = 0; t < this._cols; t++) {
            this._nodes[t] = [];
            for (let e = 0; e < this._rows; e++)
                this._nodes[t][e] = new xs(t, e)
        }
    }
    get startNode() {
        return this._startNode
    }
    get endNode() {
        return this._endNode
    }
    get cols() {
        return this._cols
    }
    get rows() {
        return this._rows
    }
    getNode(e, t) {
        return (e = e < 0 ? 0 : e) >= this._cols && (e = this._cols - 1),
        (t = t < 0 ? 0 : t) >= this._rows && (t = this._rows - 1),
        this._nodes[e][t]
    }
    setEndNode(e, t) {
        this._endNode = this.getNode(e, t)
    }
    setStartNode(e, t) {
        this._startNode = this.getNode(e, t)
    }
    setWalkable(e, t, i) {
        const s = this.getNode(e, t);
        s && (s.walkable = i)
    }
    getWalkable(e, t) {
        e = this.getNode(e, t);
        return !!e && e.walkable
    }
    setAlphable(e, t, i) {
        const s = this.getNode(e, t);
        s && (s.alphable = i)
    }
    hasBarrier(e, t, i, s) {
        if (e === i && t === s)
            return !1;
        var a = new xs(e * this._size + this._size / 2, t * this._size + this._size / 2),
        r = new xs(i * this._size + this._size / 2, s * this._size + this._size / 2),
        n = Math.abs(i - e);
        let o,
        l,
        h,
        m,
        c = [];
        if (Math.abs(s - t) < n)
            for (o = ws(a, r, 0), h = Math.min(e, i), m = Math.max(e, i), l = h; l < m; l++) {
                var d = l * this._size + this._size,
                d = o(d);
                for (let e = 0, t = (c = this.getNodesUnderPoint(l + 1, d / (this._size || 1))).length; e < t; e++)
                    if (!c[e].walkable)
                        return !0
            }
        else
            for (o = ws(a, r, 1), h = Math.min(t, s), m = Math.max(t, s), l = h; l < m; l++) {
                var u = l * this._size + this._size,
                u = o(u);
                for (let e = 0, t = (c = this.getNodesUnderPoint(u / (this._size || 1), l + 1)).length; e < t; e++)
                    if (!c[e].walkable)
                        return !0
            }
        return !1
    }
    getNodesUnderPoint(e, t, i) {
        const s = [];
        var a = e % 1 == 0,
        r = t % 1 == 0;
        if (a && r ? (s[0] = this.getNode(e - 1, t - 1), s[1] = this.getNode(e, t - 1), s[2] = this.getNode(e - 1, t), s[3] = this.getNode(e, t)) : a && !r ? (s[0] = this.getNode(e - 1, Math.floor(t)), s[1] = this.getNode(e, Math.floor(t))) : !a && r ? (s[0] = this.getNode(Math.floor(e), t - 1), s[1] = this.getNode(Math.floor(e), t)) : s[0] = this.getNode(Math.floor(e), Math.floor(t)), i && 0 < i.length)
            for (let e = 0; e < s.length; e++)
                 - 1 !== i.indexOf(s[e]) && (s.splice(e, 1), e--);
        return s
    }
    findReplacer(s, e) {
        let a;
        if (e.walkable)
            a = e;
        else {
            -1 === e.depth && (e.depth = this.getNodeDepth(e, Math.max(this._cols, this._rows)));
            var r = e.x - e.depth < 0 ? 0 : e.x - e.depth,
            n = e.x + e.depth > this._cols - 1 ? this._cols - 1 : e.x + e.depth,
            o = e.y - e.depth < 0 ? 0 : e.y - e.depth,
            l = e.y + e.depth > this._rows - 1 ? this._rows - 1 : e.y + e.depth;
            let i;
            for (let t = r; t <= n; t++)
                for (let e = o; e <= l; e++)
                    t > r && t < n && e > o && e < l || (i = this.getNode(t, e)).walkable && (!a || i.distance(s) < a.distance(s)) && (a = i)
        }
        return a
    }
    getNodeDepth(i, e) {
        e = e || 10;
        let s = i.walkable ? 0 : 1,
        t = 1;
        for (; t <= e; ) {
            var a,
            r = i.x - t < 0 ? 0 : i.x - t,
            n = i.x + t > this._cols - 1 ? this._cols - 1 : i.x + t,
            o = i.y - t < 0 ? 0 : i.y - t,
            l = i.y + t > this._rows - 1 ? this._rows - 1 : i.y + t;
            for (let t = r; t <= n; t++)
                for (let e = o; e <= l; e++)
                    if ((a = this.getNode(t, e)) !== i && a.walkable)
                        return s;
            s++,
            t++
        }
        return s
    }
}
class Ds extends mi {
    constructor() {
        super(...arguments),
        this._points = []
    }
    get point() {
        return this.get("point")
    }
    get isEnd() {
        return this.get("isEnd")
    }
    set isEnd(e) {
        this.set("isEnd", e)
    }
    setData(e, t) {
        super.setData(e, t),
        this.isEnd = !0,
        this.dirty = !1
    }
    dtor() {
        this._points = [],
        super.dtor()
    }
    endBlock() {
        var e = this._points.shift();
        if (e)
            this.markDirty1("point", e);
        else {
            let e = this.entity.getComponent(k.State);
            void(e.state == f.Run && (e.state = f.Idle))
        }
    }
    stop() {
        this.role.rsyncMove(this.role.root.x, this.role.root.y, 1),
        this.role.notifyFollowerStop(this.role.root.x, this.role.root.y);
        let e = this.entity.getComponent(k.AI) || this.entity.getComponent(k.CityAI);
        e && (e.lastPos = null, e.targetPos = null, e.scarePos = null, e.currentClick = null, e.followTarPos = null),
        this._points = [],
        this.set("point", null)
    }
    checkPath(i, s, a, r = !1) {
        if (r)
            this.markDirty1("point", {
                x: i,
                y: s,
                alphable: !1
            });
        else {
            let t = this.entity.getComponent(k.State);
            if (a) {
                this.isEnd = !0;
                let e = this.entity.getComponent(k.Movement);
                return e.correctPos(i, s),
                void(t.state == f.Run && (t.state = f.Idle))
            }
            r = Math.floor(this.role.root.x),
            a = Math.floor(this.role.root.y);
            if (!(r == i && a == s || t.hasStates(f.PreAttack, f.Attack, f.Die) || t.hasAbnormals(ut.Stun))) {
                var n = this.role.mapview;
                let t = [],
                e = Cs.instance.find(n.id, n.info, {
                    x: r,
                    y: a
                }, {
                    x: i,
                    y: s
                });
                e.length ? (e.forEach(e => {
                        t.push({
                            x: e.x * Cs.cellW,
                            y: e.y * Cs.cellH,
                            alphable: e.alphable
                        })
                    }), l = t.length, (o = t[l - 1]).x == i && o.y == s || Cs.instance.sameGrid(n.id, n.info, {
                        x: o.x,
                        y: o.y
                    }, {
                        x: i,
                        y: s
                    }) && (t[l - 1].x = i, t[l - 1].y = s)) : Cs.instance.sameGrid(n.id, n.info, {
                    x: r,
                    y: a
                }, {
                    x: i,
                    y: s
                }) && t.push({
                    x: i,
                    y: s,
                    alphable: !1
                });
                var o = t.concat(),
                l = t.shift();
                this._points = t,
                this.isEnd = !1,
                this.markDirty1("point", l),
                this.role.notifyFollowerMove(o),
                l || this.stop()
            }
        }
    }
}
class Ls extends ci {
    constructor(e) {
        super(e),
        this.proirity = 3
    }
    run(i) {
        if (i.dirty && (i.dirty = !1, i.point)) {
            let e = i.entity.getComponent(k.State),
            t = (e.state = f.Run, i.entity.getComponent(k.Movement));
            t.transform.alpha = i.point.alphable ? .4 : 1,
            t.pos(i.point.x, i.point.y)
        }
    }
}
class Ts extends mi {
    get state() {
        return this.get("state")
    }
    set state(e) {
        if (this.state != f.Die) {
            var t = this.state;
            if (this.markDirty1("state", e), t == f.Run && e != f.Run) {
                let e = this.entity.getComponent(k.Path),
                t = (e.stop(), this.entity.getComponent(k.Movement));
                t.stop()
            }
        }
    }
    get abnormals() {
        return this.get("abnormals") || []
    }
    setData(e, t) {
        super.setData(e, t),
        this.set("state", f.Idle),
        this.dirty = !1
    }
    changeAbnormal(t) {
        let i = this.abnormals,
        e = (this.set("abnormals", t), [ut.Stun, ut.Scared, ut.Taunt]),
        s = [],
        a = [];
        e.forEach(e => {
            -1 == i.indexOf(e) && -1 != t.indexOf(e) && s.push(e),
            -1 != i.indexOf(e) && -1 == t.indexOf(e) && a.push(e)
        }),
        (s.length || a.length) && this.state == f.Run && (this.state = f.Idle)
    }
    hasAbnormals(...t) {
        let i = this.abnormals;
        for (let e = 0; e < t.length; e++)
            if (-1 != i.indexOf(t[e]))
                return !0;
        return !1
    }
    hasStates(...t) {
        for (let e = 0; e < t.length; e++)
            if (this.state == t[e])
                return !0;
        return !1
    }
}
class Es extends ci {
    constructor(e) {
        super(e),
        this.proirity = 5
    }
    run(i) {
        if (i.dirty && (i.dirty = !1, i.state != f.Die)) {
            i.hasStates(f.PreAttack, f.Attack) || i.role.clearSkill();
            let e = dt.Idle,
            t = (i.state == f.Run ? e = dt.Run : i.state == f.Attack && (e = dt.Attack), i.entity.getComponent(k.Ani));
            t.action = e
        }
    }
}
class Ms extends D {
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/1010_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x + 10 + Math.randRange(-15, 15),
            py: t.root.y - 5 + Math.randRange(-15, 15),
            scale: 2,
            autoPlay: !0,
            autoRemove: !0,
            interval: 40
        })
    }
    play() {
        let e = this.m_data.source;
        e.changeState(f.Attack),
        b.create({
            url: "hunt/effect/1011_atk.atlas",
            parent: e.root.parent,
            px: e.root.x,
            py: e.root.y,
            scale: 1.8,
            autoPlay: !0,
            autoRemove: !0
        }),
        I.instance.playSound(v.SE_BigSlash)
    }
}
class Rs extends D {
    static attackedAni(e, t) {
        0 != e.type && (b.create({
                url: "hunt/effect/1010_beAtk.atlas",
                parent: t.root.parent,
                px: t.root.x + 10 + Math.randRange(-15, 15),
                py: t.root.y - 5 + Math.randRange(-15, 15),
                scale: 2,
                autoPlay: !0,
                autoRemove: !0,
                interval: 40
            }), e.mainTarget && e.mainTarget.rid != t.rid || I.instance.playSound(v.SE_Slash))
    }
    play() {
        let e = this.m_data.source;
        e.changeState(f.Attack)
    }
}
class Bs extends D {
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/1010_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x + 10 + Math.randRange(-15, 15),
            py: t.root.y - 5 + Math.randRange(-15, 15),
            scale: 2,
            autoPlay: !0,
            autoRemove: !0,
            interval: 40
        }),
        e.mainTarget && e.mainTarget.rid != t.rid || I.instance.playSound(v.SE_Slash)
    }
    play() {
        let e = this.m_data.source;
        e.changeState(f.Attack),
        b.create({
            url: "hunt/effect/1030_atk.atlas",
            parent: e.root.parent,
            px: e.root.x,
            py: e.root.y + 45,
            autoPlay: !0,
            autoRemove: !0,
            scale: 1.5
        })
    }
}
class Ns extends D {
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/flyCommBeAtk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y,
            autoPlay: !0,
            autoRemove: !0,
            interval: 50
        }),
        e.mainTarget && e.mainTarget.rid != t.rid || (b.create({
                url: "hunt/effect/flyCommBeAtk.atlas",
                parent: t.root.parent,
                px: t.root.x,
                py: t.root.y,
                autoPlay: !0,
                autoRemove: !0,
                scale: 3.2
            }), I.instance.playSound(v.SE_FireballHit))
    }
    play() {
        let e = this.m_data.source;
        e.changeState(f.Attack)
    }
    showEvent(e) {
        var t = L.getRoleById(e.srcID),
        i = L.getRoleById(e.targetID),
        s = t.root.x,
        a = t.root.y;
        b.createFlyEffectNew({
            url: "hunt/effect/1020_fly.atlas",
            parent: t.root.parent,
            loop: !0,
            autoPlay: !0,
            px: s,
            py: a,
            interval: 50
        }, t, i, e.evtPara1)
    }
}
class Ps extends D {
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/1150_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y,
            autoPlay: !0,
            autoRemove: !0,
            interval: 50
        })
    }
    play() {
        let e = this.m_data.source;
        e.changeState(f.Attack);
        var t = this.m_data.targets[0];
        b.create({
            url: "hunt/effect/1021_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y - 180,
            autoPlay: !0,
            autoRemove: !0,
            scale: 3
        }),
        I.instance.playSound(v.SE_FlameBurst)
    }
}
class qs extends D {
    play() {
        let s = this.m_data.source,
        a = this.m_data.targets[0],
        r = s.root.zOrder;
        s.root.x,
        s.root.y;
        let i = b.create({
            url: "hunt/effect/e2A.atlas",
            parent: s.root,
            px: 50,
            py: 50,
            interval: 20
        });
        Laya.Tween.to(s.root.aniWrap, {
            alpha: 0
        }, 50, null),
        s.root.nameWrap.visible = !1,
        i.play(0, !1, Laya.Handler.create(null, () => {
                if (i.recover(), s.root && !s.destroyed) {
                    if (a.destroyed)
                        return s.root.zOrder = r, s.root.nameWrap.visible = !0, s.ignoreSort = !1, void this.attackActionDone();
                    var e = a.entity.getComponent(k.Ani).direction * Math.PI / 4,
                    t = 80 * Math.sin(e),
                    e = 80 * Math.cos(e);
                    s.root.aniWrap.x = 50 + a.root.x - s.root.x - t,
                    s.root.aniWrap.y = 50 + a.root.y - s.root.y - e,
                    s.root.zOrder = 900,
                    s.ignoreSort = !0,
                    Laya.Tween.to(s.root.aniWrap, {
                        alpha: 1
                    }, 50, null, Laya.Handler.create(null, () => {
                            if (!s.destroyed) {
                                if (a.destroyed)
                                    return s.root.aniWrap.x = 50, s.root.aniWrap.y = 50, s.root.zOrder = r, s.ignoreSort = !1, s.root.nameWrap.visible = !1, void this.attackActionDone();
                                let e = s.entity.getComponent(k.Ani);
                                var i = a.entity.getComponent(k.Ani);
                                e.direction = i.direction,
                                s.changeState(f.Attack);
                                let t = b.create({
                                    url: "hunt/effect/e202A.atlas",
                                    parent: a.root.parent,
                                    px: a.root.x,
                                    py: a.root.y,
                                    interval: 60
                                });
                                t.play(0, !1, Laya.Handler.create(this, () => {
                                        t.recover()
                                    })),
                                Laya.timer.once(500, this, () => {
                                    s.destroyed || (s.root.aniWrap.x = 50, s.root.aniWrap.y = 50, s.root.zOrder = r, s.ignoreSort = !1, s.root.nameWrap && (s.root.nameWrap.visible = !0))
                                }),
                                I.instance.playSound(v.SE_AssassinCritical)
                            }
                        }))
                }
            }))
    }
}
class Us extends D {
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/1150_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y,
            scale: 2,
            autoPlay: !0,
            autoRemove: !0,
            interval: 50
        }),
        e.mainTarget && e.mainTarget.rid != t.rid || It(L.mapview, 2, 200)
    }
    play() {
        let e = this.m_data.source;
        var t = this.m_data.targets[0];
        e.changeState(f.Attack),
        b.create({
            url: "hunt/effect/1150_atk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y,
            autoPlay: !0,
            autoRemove: !0,
            scale: 2,
            interval: 75
        }),
        I.instance.playSound(v.SE_Abysshit)
    }
}
class Hs extends D {
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/1160_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y,
            autoPlay: !0,
            autoRemove: !0,
            interval: 50
        }),
        e.mainTarget && e.mainTarget.rid != t.rid || I.instance.playSound(v.SE_PosionHit)
    }
    play() {
        let e = this.m_data.source;
        e.changeState(f.Attack)
    }
    showEvent(e) {
        var t = L.getRoleById(e.srcID),
        i = L.getRoleById(e.targetID),
        s = t.root.x,
        a = t.root.y;
        b.createFlyEffectNew({
            url: "hunt/effect/1160_fly.atlas",
            parent: t.root.parent,
            loop: !0,
            autoPlay: !0,
            px: s,
            py: a,
            interval: 50
        }, t, i, e.evtPara1)
    }
}
class Os extends D {
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/1140_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x + Math.randRange(-15, 15),
            py: t.root.y + Math.randRange(-15, 15),
            scale: 2,
            autoPlay: !0,
            autoRemove: !0,
            interval: 50
        })
    }
    play() {
        let e = this.m_data.source;
        e.changeState(f.Attack)
    }
    showEvent(e) {
        var t = L.getRoleById(e.srcID),
        i = L.getRoleById(e.targetID),
        s = t.root.x,
        a = t.root.y;
        let r = b.create({
            url: "hunt/effect/1070_fly.atlas",
            parent: t.root.parent,
            loop: !0,
            autoPlay: !0,
            px: s,
            py: a,
            interval: 50
        }),
        n = [{
                x: s,
                y: a
            }, {
                x: (s + i.root.x) / 2,
                y: a + Math.randRange(-150, -50)
            }, {
                x: i.root.x,
                y: i.root.y
            }
        ],
        o = [{
                x: i.root.x,
                y: i.root.y
            }, {
                x: (s + i.root.x) / 2,
                y: i.root.y + Math.randRange(50, 150)
            }, {
                x: s,
                y: a
            }
        ],
        l = {
            set x(e) {
                r.x = e
            },
            set y(e) {
                r.y = e
            },
            set bezierTween(e) {
                l.x = (1 - e) * (1 - e) * n[0].x + 2 * e * (1 - e) * n[1].x + e * e * n[2].x,
                l.y = (1 - e) * (1 - e) * n[0].y + 2 * e * (1 - e) * n[1].y + e * e * n[2].y
            },
            get bezierTween() {
                return 0
            }
        },
        h = {
            set x(e) {
                r.x = e
            },
            set y(e) {
                r.y = e
            },
            set bezierTween(e) {
                l.x = (1 - e) * (1 - e) * o[0].x + 2 * e * (1 - e) * o[1].x + e * e * o[2].x,
                l.y = (1 - e) * (1 - e) * o[0].y + 2 * e * (1 - e) * o[1].y + e * e * o[2].y
            },
            get bezierTween() {
                return 0
            }
        };
        Laya.Tween.to(l, {
            bezierTween: 1
        }, e.evtPara1, null, Laya.Handler.create(null, () => {
                Laya.Tween.to(h, {
                    bezierTween: 1
                }, e.evtPara1, null, Laya.Handler.create(null, () => {
                        r.recover()
                    })),
                I.instance.playSound(v.SE_ArrowShot)
            }))
    }
}
class Vs extends D {
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/1140_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y,
            scale: 2,
            autoPlay: !0,
            autoRemove: !0,
            interval: 50
        }),
        e.mainTarget && e.mainTarget.rid != t.rid || I.instance.playSound(v.SE_ArrowShot)
    }
    play() {
        let e = this.m_data.source;
        e.changeState(f.Attack)
    }
    showEvent(e) {
        var t = L.getRoleById(e.srcID),
        i = L.getRoleById(e.targetID),
        s = t.root.x,
        a = t.root.y;
        b.createFlyEffectNew({
            url: "hunt/effect/1060_fly.atlas",
            parent: t.root.parent,
            loop: !0,
            autoPlay: !0,
            px: s,
            py: a,
            interval: 50
        }, t, i, e.evtPara1)
    }
}
class Fs extends D {
    play() {
        let e = this.m_data.source;
        var t = this.m_data.targets[0];
        b.create({
            url: "hunt/effect/1050_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x - 20,
            py: t.root.y + 10,
            autoPlay: !0,
            autoRemove: !0,
            interval: 58
        }),
        e.changeState(f.Attack),
        I.instance.playSound(v.SE_Boxing)
    }
}
class Gs extends D {
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/1010_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y,
            scale: 2,
            autoPlay: !0,
            autoRemove: !0,
            interval: 40
        }),
        e.mainTarget && e.mainTarget.rid != t.rid || I.instance.playSound(v.SE_Slash)
    }
    play() {
        let e = this.m_data.source,
        t = (e.changeState(f.Attack), e.entity.getComponent(k.Ani)),
        i = 4 < t.direction ? 8 - t.direction : t.direction;
        Laya.timer.once(160, this, () => {
            e.destroyed || b.create({
                url: `hunt/effect/Atk${i}.atlas`,
                parent: e.root.parent,
                px: e.root.x,
                py: e.root.y,
                autoPlay: !0,
                autoRemove: !0,
                interval: 80,
                scale: 1.5,
                opposite: 4 < t.direction
            })
        })
    }
}
class Ws extends D {
    play() {
        let e = this.m_data.source;
        e.changeState(f.Attack);
        var t = e.entity.getComponent(k.Ani),
        i = 4 < t.direction ? 8 - t.direction : t.direction;
        b.create({
            url: `hunt/effect/1100_Atk${i}.atlas`,
            parent: e.root.parent,
            px: e.root.x,
            py: e.root.y,
            autoPlay: !0,
            autoRemove: !0,
            interval: 60,
            scale: 1.5,
            opposite: 4 < t.direction
        })
    }
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/1010_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x + 10 + Math.randRange(-15, 15),
            py: t.root.y - 5 + Math.randRange(-15, 15),
            scale: 2,
            autoPlay: !0,
            autoRemove: !0,
            interval: 85
        }),
        e.mainTarget && e.mainTarget.rid != t.rid || I.instance.playSound(v.SE_Slash)
    }
}
class Ys extends D {
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/flyCommBeAtk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y,
            autoPlay: !0,
            autoRemove: !0,
            interval: 50
        }),
        e.mainTarget && e.mainTarget.rid != t.rid || I.instance.playSound(v.SE_FireballHit)
    }
    play() {
        let e = this.m_data.source;
        e.changeState(f.Attack)
    }
    showEvent(e) {
        var t = L.getRoleById(e.srcID),
        i = L.getRoleById(e.targetID),
        s = t.root.x,
        a = t.root.y;
        b.createFlyEffectNew({
            url: "hunt/effect/1020_fly.atlas",
            parent: t.root.parent,
            loop: !0,
            autoPlay: !0,
            px: s,
            py: a,
            interval: 50
        }, t, i, e.evtPara1)
    }
}
class Xs {
    constructor() {
        this.rs = L.m_roles
    }
    testSkill(e) {
        var t = this.rs[0],
        i = this.rs[1];
        let s = new D.s_skillCls[e];
        s.m_data = {
            source: t,
            target: i
        },
        s.play()
    }
    sendSuperMan() {
        let e = window.sendCommand;
        e("addItem 6011 1"),
        e("addItem 6012 1"),
        e("addItem 6020 1"),
        e("addItem 6021 1"),
        e("addItem 6022 1"),
        e("addItem 6030 1"),
        e("addItem 6031 1"),
        e("addItem 6032 1"),
        e("addItem 6040 1"),
        e("addItem 6041 1"),
        e("addItem 6042 1"),
        e("addItem 6050 1"),
        e("addItem 6051 1"),
        e("addItem 6052 1"),
        e("addItem 6060 1"),
        e("addItem 6061 1"),
        e("addItem 6062 1"),
        e("addItem 6070 1"),
        e("addItem 6071 1"),
        e("addItem 6072 1"),
        e("addItem 6080 1"),
        e("addItem 6081 1"),
        e("addItem 6082 1"),
        e("addItem 6090 1"),
        e("addItem 6091 1"),
        e("addItem 6092 1"),
        e("addItem 6100 1"),
        e("addItem 6101 1"),
        e("addItem 6102 1"),
        e("addItem 6110 1"),
        e("addItem 6111 1"),
        e("addItem 6112 1"),
        e("addItem 6120 1"),
        e("addItem 6121 1"),
        e("addItem 6122 1"),
        e("addItem 6130 1"),
        e("addItem 6131 1"),
        e("addItem 6132 1"),
        e("addItem 6140 1"),
        e("addItem 6141 1"),
        e("addItem 6142 1"),
        e("addItem 6150 1"),
        e("addItem 6151 1"),
        e("addItem 6152 1"),
        e("addItem 6160 1"),
        e("addItem 6161 1"),
        e("addItem 6162 1"),
        e("addItem 6170 1"),
        e("addItem 6171 1"),
        e("addItem 6172 1")
    }
}
class js extends D {
    constructor() {
        super(...arguments),
        this.m_diceImg = null
    }
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/1121_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y,
            autoPlay: !0,
            autoRemove: !0,
            scale: 2
        }),
        b.create({
            url: "hunt/effect/1160_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y,
            autoPlay: !0,
            autoRemove: !0,
            interval: 50
        }),
        e.mainTarget && e.mainTarget.rid != t.rid || I.instance.playSound(v.SE_ElectricArrowHit)
    }
    play() {
        let e = this.m_data.source;
        e.changeState(f.Attack)
    }
    showEvent(t) {
        let i = L.getRoleById(t.srcID);
        if (t.evtPara1 == t.evtPara2) {
            let e = b.create({
                url: "hunt/effect/1121.atlas",
                parent: i.root,
                px: 50,
                py: -60,
                autoPlay: !1,
                interval: 50
            });
            e.play(0, !1, Laya.Handler.create(null, () => {
                    e.recover(),
                    this.m_diceImg && (this.m_diceImg.destroy(), this.m_diceImg = null),
                    i.destroyed || (this.m_diceImg = new Laya.Image, this.m_diceImg.anchorX = .5, this.m_diceImg.anchorY = .5, this.m_diceImg.x = 50, this.m_diceImg.y = -60, i.root.addChild(this.m_diceImg), this.m_diceImg.skin = "hunt/ui_fight/dice_" + t.evtPara2 + ".png", Laya.timer.once(600, this, () => {
                            this.m_diceImg && !this.m_diceImg.destroyed && (this.m_diceImg.destroy(), this.m_diceImg = null)
                        }))
                }))
        } else {
            console.log("show time____start", Date.newDate().getTime());
            let e = b.create({
                url: "hunt/effect/1121.atlas",
                parent: i.root,
                px: 50,
                py: -60,
                autoPlay: !1,
                interval: 50
            });
            e.play(0, !1, Laya.Handler.create(null, () => {
                    e.recover(),
                    this.m_diceImg && (this.m_diceImg.destroy(), this.m_diceImg = null),
                    i.destroyed || (this.m_diceImg = new Laya.Image, this.m_diceImg.anchorX = .5, this.m_diceImg.anchorY = .5, this.m_diceImg.x = 50, this.m_diceImg.y = -60, i.root.addChild(this.m_diceImg), this.m_diceImg.skin = "hunt/ui_fight/dice_" + t.evtPara1 + ".png", Laya.timer.once(200, this, () => {
                            if (!i.destroyed) {
                                let e = b.create({
                                    url: "hunt/effect/1122.atlas",
                                    parent: i.root,
                                    px: 50,
                                    py: -60,
                                    autoPlay: !1,
                                    interval: 50
                                });
                                this.m_diceImg && !this.m_diceImg.destroyed && (this.m_diceImg.destroy(), this.m_diceImg = null),
                                e.play(0, !1, Laya.Handler.create(null, () => {
                                        e.recover(),
                                        i.destroyed || (this.m_diceImg && (this.m_diceImg.destroy(), this.m_diceImg = null), this.m_diceImg = new Laya.Image, this.m_diceImg.anchorX = .5, this.m_diceImg.anchorY = .5, this.m_diceImg.x = 50, this.m_diceImg.y = -60, i.root.addChild(this.m_diceImg), this.m_diceImg.skin = "hunt/ui_fight/dice_" + t.evtPara2 + ".png", Laya.timer.once(500, this, () => {
                                                console.log("show time____end", Date.newDate().getTime()),
                                                this.m_diceImg && !this.m_diceImg.destroyed && (this.m_diceImg.destroy(), this.m_diceImg = null)
                                            }))
                                    }))
                            }
                        }))
                }))
        }
    }
}
class Ks extends D {
    static attackedAni(e, t) {
        0 != e.type && b.create({
            url: "hunt/effect/1140_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x + Math.randRange(-15, 15),
            py: t.root.y + Math.randRange(-15, 15),
            scale: 2,
            autoPlay: !0,
            autoRemove: !0,
            interval: 40
        }),
        e.mainTarget && e.mainTarget.rid != t.rid || I.instance.playSound(v.SE_Blunt)
    }
    play() {
        let e = this.m_data.source;
        e.changeState(f.Attack)
    }
}
class zs extends D {
    play() {
        let e = this.m_data.source;
        e.changeState(f.Attack),
        b.create({
            url: "hunt/effect/1031_atk.atlas",
            parent: e.root.parent,
            px: e.root.x,
            py: e.root.y,
            autoPlay: !0,
            autoRemove: !0,
            scale: 1.6,
            interval: 60
        })
    }
}
class $s extends D {
    static attackedAni(e, t) {
        0 != e.type && b.create({
            url: "hunt/effect/1110_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x + Math.randRange(-15, 15),
            py: t.root.y + Math.randRange(-15, 15),
            scale: 1.5,
            autoPlay: !0,
            autoRemove: !0,
            interval: 50
        })
    }
    play() {
        let e = this.m_data.source;
        var t = this.m_data.targets[0];
        e.changeState(f.Attack),
        b.create({
            url: "hunt/effect/1110_atk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y,
            autoPlay: !0,
            autoRemove: !0,
            scale: 2,
            interval: 75
        }),
        I.instance.playSound(v.SE_WaveHit)
    }
}
class Qs extends t.hunt.views.fight.BattleHurtRecordUI {
    constructor(e) {
        super(),
        this.dataSource = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        this.m_txt_Score.text = this.dataSource;
        var e,
        t = T.battle.damageObj;
        let i = [],
        s = [];
        for (e in t)
            parseInt(e) != R.id ? s = s.concat(Object.values(t[e])) : i = i.concat(Object.values(t[e]));
        let a = {
            damage: 0,
            recover: 0,
            bear: 0
        },
        r = {
            damage: 0,
            recover: 0,
            bear: 0
        },
        n = (i.forEach(e => {
                r.damage < e.damage && (r.damage = e.damage),
                r.recover < e.recover && (r.recover = e.recover),
                r.bear < e.bear && (r.bear = e.bear),
                a.damage += e.damage,
                a.recover += e.recover,
                a.bear += e.bear
            }), {
        damage: 0,
        recover: 0,
        bear: 0
    });
        s.forEach(e => {
            r.damage < e.damage && (r.damage = e.damage),
            r.recover < e.recover && (r.recover = e.recover),
            r.bear < e.bear && (r.bear = e.bear),
            n.damage += e.damage,
            n.recover += e.recover,
            n.bear += e.bear
        }),
        this.updateHeroDamageShow([a, n], i, !1, r, this.m_box_Left),
        this.updateHeroDamageShow([n, a], s, !0, r, this.m_box_Right);
        var o = Math.max(i.length, s.length);
        this.height = 355 + 120 * (o - 1)
    }
    updateHeroDamageShow(i, s, a, r, n) {
        for (let t = 0; t < 3; t++) {
            let e = n.getChildAt(t);
            e.visible = !!s[t],
            e.dataChanged(t, {
                total: i,
                damageInfo: s[t],
                isRight: a,
                isHTop: s[t] && s[t].damage && s[t].damage == r.damage,
                isRTop: s[t] && s[t].recover && s[t].recover == r.recover,
                isBTop: s[t] && s[t].bear && s[t].bear == r.bear
            })
        }
    }
}
class Js extends t.hunt.views.fight.ArenaBattleResultUI {
    constructor(e, t) {
        super(),
        this.m_ticker = null,
        this.m_tickerScore = null,
        this.m_tl = null,
        this.m_battleData = null,
        this.dataSource = e,
        this.m_battleData = t
    }
    onDestroy() {
        super.onDestroy();
        var e = this.dataSource;
        O.arena.reqArenaInfo(),
        e.newCup > e.oldCup && Pt("hunt/ui_comm/img6.png", 20, {
            x: 280,
            y: 400
        }, {
            x: 360,
            y: 220
        }, !1),
        this.clearTicker(),
        this.m_tl && (this.m_tl.destroy(), this.m_tl = null),
        T.end()
    }
    onAwake() {
        super.onAwake(),
        this.m_ani_Win.on(Laya.Event.COMPLETE, null, () => {
            this.m_ani_Win.visible = !1
        });
        let e = this.dataSource;
        var t = e.newCup > e.oldCup;
        this.m_txt_Score.text = e.oldCup + "",
        this.m_txt_Change.text = (t ? "+" : "") + (e.newCup - e.oldCup),
        this.m_tl = new Laya.TimeLine,
        this.m_tl.to(this.m_txt_Score, {
            scaleX: 1.5,
            scaleY: 1.5
        }, 200).to(this.m_txt_Score, {
            scaleX: .8,
            scaleY: .8
        }, 700),
        t && this.m_tl.play(0, !1);
        let i = Date.newDate().addMilliseconds(800).getTime(),
        s = (this.m_tickerScore = Ei.create(i, 100), 0);
        this.m_tickerScore.onTick = () => {
            Date.newDate().getTime() >= i ? this.m_txt_Score.text = e.newCup + "" : this.m_txt_Score.text = Math.floor(e.oldCup + (e.newCup - e.oldCup) / 8 * s) + "",
            s++
        },
        this.m_tickerScore.start(),
        this.m_img_Arrow.skin = t ? "hunt/ui_comm/arrow_up.png" : "hunt/ui_comm/arrow_down.png",
        t ? Laya.timer.once(200, null, () => {
            this.destroyed || (this.m_ani_Win.visible = !0, this.m_ani_Win.play(0, !1))
        }) : this.aniLose.play(0, !1);
        var t = this.m_battleData.selfData,
        a = this.m_battleData.enemyData,
        t = (this.setInfoShow(t.info, !0), this.setInfoShow(a.info, !1), Date.newDate().addSeconds(10).getTime());
        this.m_ticker = Ei.create(t),
        this.m_ticker.onTick = e => {
            this.m_txt_Time.text = S(1060, e)
        },
        this.m_ticker.onEnd = () => {
            this.closeDialog()
        },
        this.m_ticker.start()
    }
    setInfoShow(e, t) {
        t = t ? "L" : "R";
        this["m_txt_Name" + t].text = e.name,
        this["m_txt_GLv" + t].text = e.guildLv || 0,
        this["m_txt_GName" + t].text = e.clubName || "",
        this["m_img_Title" + t].skin = `hunt/ui_arena/tk${e.militaryGrade||0}.png`,
        this["m_view_Head" + t].setData({
            head: e.icon
        })
    }
    onClickImgData() {
        this.dataSource && (this.clearTicker(), this.visible = !1, u(Qs, {
                params: [this.dataSource.newCup]
            }).then(e => {
                e.wait().then(() => {
                    this.visible = !0
                })
            }))
    }
    clearTicker() {
        this.m_ticker && (this.m_ticker.dispose(), this.m_ticker = null),
        this.m_tickerScore && (this.m_tickerScore.dispose(), this.m_tickerScore = null),
        this.m_txt_Time.visible = !1
    }
}
class Zs extends t.hunt.views.fight.RankUpListDlgUI {
    constructor(e) {
        super(),
        this.m_doChange = !1,
        this.m_listInfo = [],
        this.dataSource = e
    }
    onAwake() {
        super.onAwake(),
        this.m_ani_Show.on(Laya.Event.COMPLETE, null, () => {
            this.m_ani_Show.visible = !1
        }),
        this.m_lst_Rank.scrollBar.on(Laya.Event.CHANGE, this, this.changeItemAnime),
        this.updateView()
    }
    updateView() {
        let e = this.dataSource.rankList;
        var t = this.dataSource.oldRank,
        i = this.dataSource.newRank;
        e.unshift(0),
        e = e.concat([0]),
        I.instance.playSound(v.SE_RankUp);
        let s = e.splice(i, 1);
        s[0] && (s[0].rank = 51 < t ? 52 : t, 51 < t ? e.splice(e.length - 1, 0, s[0]) : e.splice(t - 1, 0, s[0])),
        e.forEach((e, t) => {
            e && (e.rank = t)
        }),
        this.m_listInfo = e,
        this.m_lst_Rank.array = this.m_listInfo,
        this.m_lst_Rank.tweenTo(t - 1, 0),
        this.showTopThree(this.m_listInfo),
        Laya.timer.once(800, this, () => {
            this.destroyed || this.doStartAni()
        })
    }
    doStartAni() {
        this.m_doChange = !0,
        this.m_lst_Rank.mouseEnabled = !1;
        let s = this.dataSource.newRank;
        this.m_lst_Rank.tweenTo(s - 1, 1e3, Laya.Handler.create(this, () => {
                this.m_doChange = !1;
                var e = this.m_lst_Rank.getItem(s);
                this.m_lst_Rank.changeItem(s, e);
                let t = this.m_lst_Rank.getCell(s),
                i = (t.dataSource && (t.dataSource.showBorder = !0), t.dataChanged(), t.m_img_Cover.visible = !1, t.ani1);
                i && (i.once(Laya.Event.COMPLETE, null, () => {
                        this.m_lst_Rank.mouseEnabled = !0
                    }), i.play(0, !1), this.m_ani_Show.visible = !0, this.m_ani_Show.play(0, !1)),
                s < 4 && Laya.timer.once(800, this, () => {
                    if (!this.destroyed) {
                        var e;
                        this["m_box_Top" + (s - 1)] && (this.m_ani_Change.x = (e = [[200, 20], [80, 77], [320, 77]])[s - 1][0], this.m_ani_Change.y = e[s - 1][1], this.m_ani_Change.visible = !0, this.m_ani_Change.play(0, !1));
                        for (let e = 0; e < 3; e++)
                            this.changeTopShow(e, this.m_lst_Rank.array[e + 1])
                    }
                })
            }))
    }
    changeItemAnime() {
        let a = this.m_lst_Rank.scrollBar.value,
        e = this.m_lst_Rank.cells || [],
        r = this.m_listInfo.findIndex(e => e && e.userId == R.id),
        n = null;
        e.forEach(t => {
            if (125 <= t.y - a && t.y - a <= 255)
                if (t.m_box_Con.scale(1, 1), this.m_doChange) {
                    t.m_img_Cover.visible = !0;
                    var i = this.m_listInfo.findIndex(e => (t.dataSource && t.dataSource.rank) == (e && e.rank));
                    let e = this.m_listInfo[r];
                    var s = this.m_listInfo[i] && this.m_listInfo[i].rank;
                    this.m_listInfo[r] = this.m_listInfo[i],
                    this.m_listInfo[r] && (this.m_listInfo[r].rank = e && e.rank),
                    e && (e.rank = s),
                    this.m_listInfo[i] = e,
                    this.m_lst_Rank.changeItem(i, e),
                    n = r
                } else
                    t.m_img_Cover.visible = !1;
            else if (t.y - a < 125 && 0 < t.y - a || 255 < t.y - a && t.y - a < 400) {
                let e = 0;
                e = t.y - a < 125 && 0 < t.y - a ? t.y - a : 390 - t.y + a + 5;
                s = .85 + Math.min(e / 130 * .15, .15);
                t.m_box_Con.scale(s, s),
                t.m_img_Cover.visible = !0,
                n && (this.m_lst_Rank.changeItem(n, this.m_listInfo[n]), n = null)
            } else
                t.m_box_Con.scale(.85, .85), t.m_img_Cover.visible = !0, n && (this.m_lst_Rank.changeItem(n, this.m_listInfo[n]), n = null)
        })
    }
    showTopThree(t) {
        for (let e = 0; e < 3; e++) {
            var i = t[e + 1];
            this.changeTopShow(e, i)
        }
    }
    changeTopShow(e, i) {
        let s = this["m_box_Top" + e],
        t = this["m_txt_Name" + e];
        if (i && s) {
            t.text = i.name,
            s.visible = 0 < i.squad.length,
            s.destroyChildren();
            for (let t = 0; t < 3; t++) {
                var a = i.squad[t];
                if (!a)
                    break;
                let e = Ee.create({
                    url: `hunt/role/${a}.json`
                });
                e.play(14, !0),
                s.addChild(e),
                e.x = 70 * t - 40
            }
        }
    }
}
class ea extends t.hunt.views.common.OpenRewardBoxUI {
    constructor(e) {
        super(),
        this.m_changeMax = 0,
        this.m_drawTimes = 0,
        this.m_heroArr = [],
        this.m_isTen = !1,
        this.m_doSkip = !1,
        this.m_canSkip = !1,
        this.m_maxNums = 0,
        this.m_changeTimes = 0,
        this.m_lastSelect = -1,
        this.m_selectAniState = 0,
        this.m_isShowHero = !1,
        this.m_spineBox = null,
        this.dataSource = e
    }
    onAwake() {
        super.onAwake();
        let e = this.dataSource;
        this.m_img_Mask.size(this.m_img_AdaptBg.width, this.m_img_AdaptBg.height),
        this.m_lst_Reward.scrollBar.touchScrollEnable = !1,
        this.on(Laya.Event.CLICK, this, () => {
            e.fromSelect || this.doSkip()
        }),
        this.aniShowCards.once(Laya.Event.COMPLETE, null, () => {
            this.doItemAni()
        }),
        this.checkAniShow()
    }
    onDestroy() {
        super.onDestroy();
        var e = this.dataSource;
        e.fromSelect || O.bag.reqReceiveRandBox(e.logicId).then(() => {
            O.event(c.GEN_ANI)
        }),
        this.m_heroArr.length = 0,
        O.event(c.REWARD_BOX_CLOSE, this)
    }
    showViewSelectBox() {
        var e = this.dataSource;
        let t = Data.getItemChooseBox(e.boxCfg.id),
        i = [],
        s = 0;
        t.items.forEach(e => {
            var t = Data.getItem(e.id);
            s < t.quality && (s = t.quality),
            i.push({
                itemCfg: t,
                itemNum: e.count,
                selectState: 0
            })
        }),
        this.m_lst_Reward.array = i,
        this.m_lst_Reward.visible = !0,
        this.m_txt_Tips.visible = !0
    }
    checkAniShow() {
        let i = null;
        var t = this.dataSource;
        if (!t.fromSelect) {
            let e = t.showItems,
            s = (i = 3 < e.length ? (this.m_isTen = !0, this.m_box_Con2) : this.m_box_Con, this.m_maxNums = e.length, this.m_changeMax = t.swapNum || 0, []);
            e.forEach((e, t) => {
                var i = Data.getItem(e.id);
                s.push({
                    itemCfg: i,
                    itemNum: e.num,
                    canChange: i.type != m.hero && 1 < this.m_changeMax,
                    index: t
                })
            });
            for (let t = 0; t < i.numChildren; t++) {
                let e = i.getChildAt(t);
                s[t] && (e.visible = !0, e.dataChanged(null, s[t]))
            }
        }
        let e = Ee.create({
            url: "hunt/spine/box4.json",
            parent: this.m_box_Spine,
            px: 150,
            py: 0
        });
        this.m_spineBox = e,
        Laya.timer.once(300, this, () => {
            this.destroyed || (I.instance.playSound(v.SE_TreasureOpenSss), e.play(0, !1, Laya.Handler.create(this, () => {
                        e.play(1, !1, Laya.Handler.create(this, () => {
                                this.dataSource.fromSelect ? this.showViewSelectBox() : (this.m_canSkip = !0, this.doRewardAni()),
                                this.m_spineBox && this.m_spineBox.destroy(),
                                this.m_spineBox = null
                            }))
                    })))
        })
    }
    doRewardAni() {
        var e = this.dataSource;
        10 <= e.showItems.length ? (this.m_box_Con2.visible = !0, this.aniShowCards.play(0, !1)) : e.showItems.length && this.doItemAni()
    }
    onClickGiveUp() {
        Ae({
            button: V.YesNo,
            msg: S(1081)
        }).then(e => {
            e.type == d.Yes && this.closeDialog()
        })
    }
    doSkip() {
        if (!this.m_doSkip && this.m_canSkip) {
            this.m_doSkip = !0;
            let i = null;
            i = this.m_isTen ? this.m_box_Con2 : this.m_box_Con;
            for (let t = 0; t < i.numChildren; t++) {
                let e = i.getChildAt(t);
                e && e.dataSource && !e.hasDoAni && !e.doingAni && e.allAniStart()
            }
            this.m_drawTimes = this.m_maxNums,
            this.updateUI(),
            this.doItemAni()
        }
    }
    doItemAni() {
        let t = null;
        if ((t = this.m_isTen ? this.m_box_Con2 : this.m_box_Con).visible = !0, this.m_heroArr.length)
            this.checkShowUnLock();
        else {
            let e = t.getChildByName("Item" + this.m_drawTimes);
            e && e.dataSource && e.allAniStart()
        }
    }
    checkShowUnLock() {
        var e;
        this.m_isShowHero || (this.m_isShowHero = !0, (e = this.m_heroArr.shift()) && l(bt, {
                params: [e]
            }).then(e => {
                e.wait().then(() => {
                    this.m_isShowHero = !1,
                    this.doItemAni()
                })
            }))
    }
    onSelectReward(i) {
        if (!(i < 0 || 0 != this.m_selectAniState)) {
            let e = this.m_lst_Reward.array,
            t = (e.forEach(e => {
                    e.selectState = 1
                }), this.m_lst_Reward.array = e, this.m_lst_Reward.getItem(this.m_lst_Reward.selectedIndex));
            t && (t.selectState = 2, this.m_lst_Reward.changeItem(this.m_lst_Reward.selectedIndex, t)),
            this.m_lastSelect = i,
            this.m_btn_Select.visible = !0
        }
    }
    onClickSelect() {
        var e;
        -1 != this.m_lastSelect && (e = this.dataSource, O.bag.reqUseChooseBox(e.boxCfg.id, this.m_lastSelect).then(() => {
                this.m_btn_Select.visible = !1,
                this.doSelectEndHide()
            }))
    }
    doSelectEndHide() {
        this.m_selectAniState = 1,
        this.m_txt_Tips.visible = !1,
        this.m_lst_Reward.cells.forEach(e => {
            var t = e.dataSource;
            if (t)
                return 2 == t.selectState ? (Laya.Tween.to(e, {
                        x: 176
                    }, 300, null, Laya.Handler.create(this, () => {
                            this.m_selectAniState = 2,
                            this.m_btn_Close.visible = !0
                        })), void(this.m_selectAniState = 2)) : void Laya.Tween.to(e, {
                    alpha: 0
                }, 300, null, Laya.Handler.create(this, () => {
                        this.m_selectAniState = 2,
                        this.m_btn_Close.visible = !0
                    }))
        })
    }
    updateUI(e = 0, t = 0) {
        1 == e && (this.m_drawTimes++, t ? (this.m_heroArr.push(t), this.checkShowUnLock()) : this.doItemAni());
        let i = null;
        if (i = this.m_isTen ? this.m_box_Con2 : this.m_box_Con, this.m_changeMax && (10 <= this.m_drawTimes || this.m_changeTimes >= this.m_changeMax))
            for (let t = 0; t < i.numChildren; t++) {
                let e = i.getChildAt(t);
                e.dataSource.canChange = this.m_changeTimes < this.m_changeMax,
                e.doingChange || e.doingAni || e.setItemShow()
            }
        this.m_box_Change.visible = this.m_changeTimes < this.m_changeMax && this.m_drawTimes >= this.m_maxNums,
        this.m_btn_GiveUp.visible = this.m_changeTimes < this.m_changeMax && this.m_drawTimes >= this.m_maxNums,
        this.m_btn_Close.visible = this.m_changeTimes >= this.m_changeMax && this.m_drawTimes >= this.m_maxNums,
        this.m_txt_Times.text = this.m_changeMax - this.m_changeTimes + "",
        this.m_txt_Times.color = 0 < this.m_changeMax - this.m_changeTimes ? o.Green : o.Red,
        this.m_txt_Max.text = "/" + this.m_changeMax
    }
    changeCard(s) {
        var e,
        t;
        this.m_changeTimes >= this.m_changeMax || (e = this.dataSource, t = s.dataSource, O.bag.reqSwapRandBox(t.index, e.logicId).then(e => {
                let t = s.dataSource;
                var i = Data.getItem(e.showItem.id);
                t.itemCfg = i,
                t.itemNum = e.showItem.num,
                s.dataSource = t,
                s.doChangeCard(),
                this.m_changeTimes++,
                this.updateUI()
            }))
    }
    playAniShake() {
        this.ani3.play(0, !1)
    }
}
r([n(c.DRAW_NEXT_TIME)], ea.prototype, "doItemAni", null),
r([n(c.DRAW_ONE_TIME)], ea.prototype, "updateUI", null),
r([n(c.CHANGE_ONE_CARD)], ea.prototype, "changeCard", null),
r([n(c.REWARD_GET_RARE)], ea.prototype, "playAniShake", null);
class ta extends ms {
    start() {
        super.start(),
        I.instance.playMusic(v.BGM_BattleArena)
    }
    end(a) {
        let r = 0 < a.newCup - a.oldCup;
        if (a.isWin = r, super.end(a), this.battleUI && (this.battleUI.m_tick && this.battleUI.m_tick.dispose(), this.battleUI.m_view_Bar.ani1.stop()), this.battleUI.m_view_KillAnime && this.battleUI.m_view_KillAnime.doingAnime)
            this.m_endData = a;
        else {
            let s = this.createOpt.rank,
            t = () => {
                O.arena.reqArenaRank().then(e => {
                    var t = e.myRank,
                    e = e.rankList;
                    let i = () => {
                        u(Js, {
                            params: [a, this.createOpt]
                        })
                    };
                    r && t <= 50 && t < s ? (t = {
                            oldRank: s,
                            newRank: t,
                            rankList: e
                        }, u(Zs, {
                            params: [t]
                        }).then(e => {
                            e.wait().then(() => {
                                i()
                            })
                        })) : i()
                })
            };
            var e;
            a.boxId ? (e = Data.getItem(a.boxId)).type == m.chooseBox ? l(ea, {
                params: [{
                        boxCfg: e,
                        fromSelect: !0
                    }
                ]
            }).then(e => {
                e.wait().then(() => {
                    t()
                })
            }) : O.bag.reqUseRandBox(a.boxId).then(e => {
                l(ea, {
                    params: [e]
                }).then(e => {
                    e.wait().then(() => {
                        t()
                    })
                })
            }) : t()
        }
    }
    npcsEnter(e) {
        let a = [];
        if (e.forEach(e => {
                var t,
                i,
                s;
                L.getRoleById(e.id) || (t = Data.getCharType(e.showId), s = (i = e.userId == R.id) ? mt.Self : mt.Enemy, s = {
                        rid: e.id,
                        userId: e.userId,
                        showId: t.avatar || t.icon,
                        scale: t.shapScale / yt,
                        speed: t.moveSpeed,
                        size: t.shapRadius,
                        type: ht.Hero,
                        x: e.location.x,
                        y: e.location.y,
                        group: s,
                        isMain: !1,
                        cInfos: [],
                        dir: ct.Down,
                        nameType: i ? _t.Main : _t.Comm,
                        name: S(t.name),
                        lvl: e.level
                    }, this.m_logicIdShowMap[e.id] = {
                        userId: e.userId,
                        showId: t.avatar || t.icon
                    }, e = L.createHero(s), i && a.push(e))
            }), a.length) {
            let t = a.find(e => 270 == e.root.x && 910 == e.root.y);
            a = a.filter(e => 270 != e.root.x && 910 != e.root.y),
            t.isMain = !0,
            (t.followers = a).forEach(e => {
                e.leader = t
            }),
            t.changeMainRole()
        }
    }
    updateHpInfo() {
        if (this.m_hpRecord) {
            var t = this.m_createOpt;
            let e = this.m_battleUI;
            var i = t.selfData.info,
            t = t.enemyData.info,
            i = {
                leftInfo: {
                    name: i.name,
                    totalHp: this.m_hpRecord[i.userId],
                    curHp: this.getCurHpByUserId(i.userId),
                    showId: i.icon
                },
                rightInfo: {
                    name: t.name,
                    totalHp: this.m_hpRecord[t.userId],
                    curHp: this.getCurHpByUserId(t.userId),
                    showId: t.icon
                }
            };
            e && e.updateHpInfo(i)
        }
    }
    showKillAnime(e) {
        let t = this.m_battleUI;
        var i = this.m_logicIdShowMap[e.srcId],
        e = this.m_logicIdShowMap[e.targetId];
        t && i && e && t.showKillAnime({
            isLeft: i.userId == R.id,
            atkShowId: i.showId,
            tarShowId: e.showId
        })
    }
    recordDamage(e) {
        let t = L.getRoleById(e.srcID),
        i = L.getRoleById(e.targetID);
        if (this.m_damageObj || (this.m_damageObj = {}), !this.m_damageObj[t.userId]) {
            this.m_damageObj[t.userId] = {};
            let e = L.getRoleByUserId(t.userId);
            e.forEach(e => {
                this.m_damageObj[t.userId][e.rid] = {
                    damage: 0,
                    bear: 0,
                    recover: 0,
                    showId: e.showId,
                    lvl: e.lvl
                }
            })
        }
        if (!this.m_damageObj[i.userId]) {
            this.m_damageObj[i.userId] = {};
            let e = L.getRoleByUserId(i.userId);
            e.forEach(e => {
                this.m_damageObj[i.userId][e.rid] = {
                    damage: 0,
                    bear: 0,
                    recover: 0,
                    showId: e.showId,
                    lvl: e.lvl
                }
            })
        }
        0 == e.damageType ? (this.m_damageObj[t.userId][t.rid] || (this.m_damageObj[t.userId][t.rid] = {
                    damage: 0,
                    bear: 0,
                    recover: 0,
                    showId: t.showId,
                    lvl: t.lvl
                }), this.m_damageObj[t.userId][t.rid].recover += e.damage) : 1 < e.damageType && (this.m_damageObj[t.userId][t.rid] || (this.m_damageObj[t.userId][t.rid] = {
                    damage: 0,
                    bear: 0,
                    recover: 0,
                    showId: t.showId,
                    lvl: t.lvl
                }), this.m_damageObj[t.userId][t.rid].damage += e.damage, this.m_damageObj[i.userId][i.rid] || (this.m_damageObj[i.userId][i.rid] = {
                    damage: 0,
                    bear: 0,
                    recover: 0,
                    showId: i.showId,
                    lvl: i.lvl
                }), this.m_damageObj[i.userId][i.rid].bear += e.damage)
    }
}
class ia extends D {
    static attackedAni(e, t) {
        0 != e.type && b.create({
            url: "hunt/effect/1010_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x + 10 + Math.randRange(-15, 15),
            py: t.root.y - 5 + Math.randRange(-15, 15),
            scale: 2,
            autoPlay: !0,
            autoRemove: !0,
            interval: 40
        }),
        e.mainTarget && e.mainTarget.rid != t.rid || I.instance.playSound(v.SE_Slash)
    }
    play() {
        let e = this.m_data.source;
        e.changeState(f.Attack);
        var t = e.entity.getComponent(k.Ani),
        i = 4 < t.direction ? 8 - t.direction : t.direction;
        b.create({
            url: `hunt/effect/1090_Atk${i}.atlas`,
            parent: e.root.parent,
            px: e.root.x,
            py: e.root.y,
            autoPlay: !0,
            autoRemove: !0,
            interval: 60,
            opposite: 4 < t.direction
        })
    }
}
class sa extends D {
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/1140_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y,
            autoPlay: !0,
            autoRemove: !0,
            interval: 50,
            scale: 1.5
        }),
        It(L.mapview, 2, 200)
    }
    play() {
        let e = this.m_data.source;
        var t = this.m_data.targets[0];
        let i = {
            x: t.root.x,
            y: t.root.y
        };
        this.needWarningCircle(() => {
            b.create({
                url: "hunt/effect/9001_atk.atlas",
                parent: e.root.parent,
                px: i.x,
                py: i.y,
                scale: 2,
                autoPlay: !0,
                autoRemove: !0,
                interval: 100
            }),
            I.instance.playSound(v.SE_GianSwordHit)
        })
    }
}
class aa extends D {
    static attackedAni(e, t) {}
    play() {
        var e = this.m_data.targets[0];
        e && !e.destroyed && b.create({
            url: "hunt/effect/7004_atk.atlas",
            parent: e.root.parent,
            px: e.root.x,
            py: e.root.y,
            scale: 2,
            autoPlay: !0,
            autoRemove: !0,
            interval: 90
        })
    }
}
class ra extends D {
    static attackedAni(e, t) {}
    play() {
        var e = this.m_data.source;
        b.create({
            url: "hunt/effect/7003_atk.atlas",
            parent: e.root.parent,
            px: e.root.x,
            py: e.root.y,
            scale: 1,
            autoPlay: !0,
            autoRemove: !0,
            interval: 90
        })
    }
}
class na extends D {
    static attackedAni(e, t) {}
    play() {
        var e = this.m_data.source;
        b.create({
            url: "hunt/effect/7001_atk.atlas",
            parent: e.root.parent,
            px: e.root.x,
            py: e.root.y,
            scale: 2,
            autoPlay: !0,
            autoRemove: !0,
            interval: 90
        })
    }
}
class oa extends D {
    static attackedAni(e, t) {}
    play() {
        var e = this.m_data.source;
        b.create({
            url: "hunt/effect/7007_atk.atlas",
            parent: e.root,
            px: 50,
            py: 50,
            scale: 1.4,
            autoPlay: !0,
            autoRemove: !0,
            interval: 90
        })
    }
}
class la extends D {
    static attackedAni(e, t) {}
    play() {
        var e = this.m_data.source;
        b.create({
            url: "hunt/effect/7006_atk.atlas",
            parent: e.root,
            px: 50,
            py: 50,
            scale: 1.4,
            autoPlay: !0,
            autoRemove: !0,
            interval: 90
        })
    }
}
class ha extends D {
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/1140_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y,
            autoPlay: !0,
            autoRemove: !0,
            interval: 50,
            scale: 1.5
        }),
        It(L.mapview, 2, 200)
    }
    play() {
        let e = this.m_data.source;
        var t = this.m_data.targets[0];
        let i = {
            x: t.root.x,
            y: t.root.y
        };
        this.needWarningCircle(() => {
            b.create({
                url: "hunt/effect/9002_atk.atlas",
                parent: e.root.parent,
                px: i.x,
                py: i.y - 120,
                scale: 2,
                autoPlay: !0,
                autoRemove: !0,
                interval: 100
            }),
            I.instance.playSound(v.SE_BigBoom)
        })
    }
}
class ma extends D {
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/1140_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y,
            autoPlay: !0,
            autoRemove: !0,
            interval: 50,
            scale: 1.5
        }),
        It(L.mapview, 2, 200)
    }
    play() {
        let e = this.m_data.source;
        var t = this.m_data.targets[0];
        let i = {
            x: t.root.x,
            y: t.root.y
        };
        this.needWarningCircle(() => {
            b.create({
                url: "hunt/effect/9003_atk.atlas",
                parent: e.root.parent,
                px: i.x,
                py: i.y - 90,
                scale: 1.5,
                autoPlay: !0,
                autoRemove: !0,
                interval: 100
            }),
            I.instance.playSound(v.SE_Twister)
        })
    }
}
class ca extends D {
    static attackedAni(e, t) {}
    play() {
        var e = this.m_data.source;
        b.create({
            url: "hunt/effect/7002_atk.atlas",
            parent: e.root.parent,
            px: e.root.x,
            py: e.root.y,
            scale: 1.4,
            autoPlay: !0,
            autoRemove: !0,
            interval: 60
        })
    }
}
class da extends t.hunt.views.mistery.EleMisteryDlgUI {
    constructor(e) {
        super(),
        this.m_data = null,
        this.m_data = e
    }
    onAwake() {
        super.onAwake(),
        O.tileMap.reqEleMisteryLoot().then(e => {
            var e = e[this.m_data.element],
            t = 0 <= e,
            e = S(t ? 2035 : 2036, Math.abs(e));
            this.m_txt_Output.text = e + "",
            this.m_img_Arrow.skin = t ? "hunt/ui_comm/arrow_up3.png" : "hunt/ui_comm/arrow_down.png",
            this.m_txt_Output.color = t ? o.Green : o.Red
        }),
        this.showUI()
    }
    showUI() {
        var e = this.m_data.element;
        this.m_txt_Title.text = this.m_data.npcTitle;
        let t = [],
        i = !0,
        s = 100 * e + 1;
        for (; i; ) {
            var a = Data.getElementMistery(s);
            a ? t.push(a) : i = !1,
            s++
        }
        t.reverse(),
        this.m_lst_Mistery.array = t,
        this.m_img_Top.skin = `hunt/ui_mistery/mistery_${e}.png`
    }
}
r([n(c.ITEM_CHANGE)], da.prototype, "showUI", null);
class ua extends t.hunt.views.common.RewardBoxItemUI {
    constructor() {
        super(...arguments),
        this.m_hasDoAni = !1,
        this.m_isDoing = !1,
        this.m_timeArr = [],
        this.m_doingChange = !1,
        this.m_aniCfg = {
            1: [0, 0],
            2: [0, 0],
            3: [30, 0],
            4: [30, 0],
            5: [31, 32],
            6: [31, 32],
            7: [31, 32],
            8: [31, 32],
            9: [31, 32],
            10: [33, 34],
            11: [33, 34],
            12: [33, 34],
            13: [35, 36],
            14: [35, 36]
        },
        this.m_readyCfg = [500, 500, 150, 150]
    }
    get hasDoAni() {
        return this.m_hasDoAni
    }
    get doingChange() {
        return this.m_doingChange
    }
    get doingAni() {
        return this.m_isDoing
    }
    onDestroy() {
        super.onDestroy(),
        this.clearAllTime()
    }
    onAwake() {
        super.onAwake(),
        this.m_ani_Shine.on(Laya.Event.COMPLETE, null, () => {
            this.m_ani_Shine.visible = !1
        }),
        this.m_ani_Lighting.on(Laya.Event.COMPLETE, null, () => {
            this.m_ani_Lighting.visible = !1
        }),
        this.m_ani_Ready.on(Laya.Event.COMPLETE, null, () => {
            this.m_ani_Ready.visible = !1
        })
    }
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource;
        t = t.itemCfg,
        t = this.m_aniCfg[t.quality];
        t && t[0] ? (this.m_ani_Shine.source = `hunt/ue/${t[0]}.atlas`, t[1] ? (this.m_ani_Border.source = `hunt/ue/${t[1]}.atlas`, this.m_ani_Border.visible = !0, this.m_ani_Border.play(0, !0)) : this.m_ani_Border.visible = !1) : (this.m_ani_Shine.visible = !1, this.m_ani_Ready.visible = !1, this.m_ani_Border.visible = !1)
    }
    onClickCon() {
        !this.m_isDoing && this.m_hasDoAni && this.dataSource.itemCfg.type != m.hero && this.dataSource.itemCfg.type != m.heroSkin && O.event(c.CHANGE_ONE_CARD, this)
    }
    allAniStart() {
        var t = this.dataSource;
        if (!this.m_isDoing && !this.m_hasDoAni) {
            this.m_isDoing = !0;
            let e = t.itemCfg;
            1 < e.quality ? (this.m_ani_Ready.visible = !0, this.m_ani_Ready.play(0, !1), Laya.timer.once(this.m_readyCfg[e.quality] || 0, this, () => {
                    8 <= e.quality ? this.doFlipSSSAni() : 5 <= e.quality ? this.doFlipSSRAni() : 3 <= e.quality ? this.doFlipSRAni() : this.doFlipAni()
                })) : this.doFlipAni()
        }
    }
    getNewTimeLine() {
        var e = new Laya.TimeLine;
        return this.m_timeArr.push(e),
        e
    }
    getFinalFlip() {
        let e = this.getNewTimeLine(),
        t = this.m_box_Con;
        return e.to(t, {
            scaleX: 1,
            skewY: 0
        }, 140),
        e.once(Laya.Event.COMPLETE, this, () => {
            t.anchorX = t.anchorY = .5,
            this.m_hasDoAni = !0,
            this.m_isDoing = !1
        }),
        e
    }
    getStartFlip(e) {
        let t = this.getNewTimeLine();
        var i = this.m_box_Con;
        return t.to(i, {
            scaleX: .1,
            skewY: -8
        }, 240),
        t.once(Laya.Event.COMPLETE, this, e => {
            this.m_img_Bg.visible = !1,
            this.m_doingChange = !1,
            this.setItemShow(),
            e.play(0, !1),
            this.doEmitDrawTime()
        }, [e]),
        t
    }
    getBigLine() {
        let e = this.getNewTimeLine();
        var t = this.m_box_Con;
        return e.to(t, {
            scaleX: 1.1,
            scaleY: 1.1
        }, 300),
        e
    }
    getSmallLine(e) {
        let t = this.getNewTimeLine();
        var i = this.m_box_Con;
        return t.to(i, {
            scaleX: 1,
            scaleY: 1
        }, 20),
        t.once(Laya.Event.COMPLETE, this, e => {
            I.instance.playSound(v.SE_CardTurn),
            e.play(0, !1)
        }, [e]),
        t
    }
    getShakeLine() {
        var e = this.m_box_Con;
        let t = this.getNewTimeLine();
        return t.to(e, {
            anchorX: .5 + Math.randRange(4, 7) / 100 * (.5 < Math.random() ? 1 : -1),
            anchorY: .5 + Math.randRange(4, 7) / 100 * (.5 < Math.random() ? 1 : -1)
        }, 30),
        t
    }
    addTmLater(e, t, i) {
        0 == e ? Laya.timer.once(t, this, () => {
            this.destroyed || (this.m_ani_Shine.visible = !0, this.m_ani_Shine.play(0, !1))
        }) : 1 == e ? Laya.timer.once(t, this, () => {
            this.destroyed || 7 <= this.dataSource.itemCfg.quality && i[0] && i[0].play(0, !0)
        }) : 2 == e && Laya.timer.once(1e3, this, () => {
            this.destroyed || (i[0] && i[0].destroy(), this.m_box_Con.scale(1, 1), i[1] && i[1].play())
        })
    }
    doEmitDrawTime() {
        var e = this.dataSource.itemCfg;
        let t = e.type == m.hero && e.id;
        Laya.timer.once(t ? 100 : 0, this, () => {
            O.event(c.DRAW_ONE_TIME, [1, t])
        })
    }
    doFlipAni() {
        var e = this.getFinalFlip();
        let t = this.getStartFlip(e);
        I.instance.playSound(v.SE_CardTurn),
        t.play(0, !1)
    }
    doFlipSRAni() {
        var e = this.getFinalFlip();
        let t = this.getStartFlip(e);
        this.m_ani_Border.visible = !0,
        this.addTmLater(0, 80),
        I.instance.playSound(v.SE_CardTurn),
        t.play(0, !1)
    }
    doFlipSSRAni() {
        var e = this.getFinalFlip(),
        e = this.getStartFlip(e);
        let t = this.getBigLine();
        var i = this.getShakeLine(),
        e = this.getSmallLine(e);
        this.m_ani_Border.visible = !0,
        this.addTmLater(1, 200, [i]),
        this.addTmLater(0, 130),
        this.addTmLater(2, 700, [i, e]),
        O.event(c.REWARD_GET_RARE),
        t.play(0, !1)
    }
    doFlipSSSAni() {
        var e = this.getFinalFlip(),
        e = this.getStartFlip(e);
        let t = this.getBigLine();
        var e = this.getSmallLine(e),
        i = this.getShakeLine();
        this.m_ani_Border.visible = !0,
        this.addTmLater(1, 200, [i]),
        this.addTmLater(0, 400),
        this.addTmLater(2, 1e3, [i, e]),
        O.event(c.REWARD_GET_RARE),
        t.play(0, !1)
    }
    setItemShow() {
        var e,
        t = this.dataSource || {};
        this.m_doingChange || (this.m_img_Bg.visible = !1, e = {
                0: "hunt/ui_card/cardBgN.png",
                1: "hunt/ui_card/cardBgR.png",
                2: "hunt/ui_card/cardBgSR.png",
                3: "hunt/ui_card/cardBgSSR.png",
                4: "hunt/ui_card/cardBgSP.png"
            }, t.itemCfg.type == m.boxKey ? this.m_img_Item.skin = e[4] : t.itemCfg.type == m.equip ? 11 <= t.itemCfg.quality ? this.m_img_Item.skin = e[4] : 9 < t.itemCfg.quality ? this.m_img_Item.skin = e[3] : 6 < t.itemCfg.quality ? this.m_img_Item.skin = e[2] : this.m_img_Item.skin = e[1] : t.itemCfg.id != p.gem && t.itemCfg.type != m.food && t.itemCfg.type != m.cookFood || (this.m_img_Item.skin = e[0]), t.itemCfg.type == m.hero ? (this.m_img_Reward.skin = `hunt/ui_hero/s${t.itemCfg.icon}.png`, this.m_ani_Border.visible = !0, this.m_txt_Num.visible = !1) : (this.m_img_Reward.skin = `hunt/ui_item/${t.itemCfg.icon}.png`, this.m_txt_Num.text = t.itemNum, this.m_txt_Num.visible = 1 < t.itemNum, t.itemCfg.type == m.equip ? (e = Data.getEquip(t.itemCfg.id), this.m_img_Star.visible = !0, this.m_txt_StarLv.text = e.lvl + "") : t.itemCfg.type != m.food && t.itemCfg.type != m.cookFood || (e = Data.getFood(t.itemCfg.id), this.m_img_FoodLv.visible = !0, this.m_txt_FoodLv.text = Math.floor(e.exp / 150) + "")), (e = this.m_aniCfg[t.itemCfg.quality]) && e[0] && e[1] ? (this.m_ani_Border.source = `hunt/ue/${e[1]}.atlas`, this.m_ani_Border.visible = !0, this.m_ani_Border.play(0, !0)) : this.m_ani_Border.visible = !1, this.m_img_Reward.visible = !0, this.m_txt_Item.text = S(t.itemCfg.name), this.m_txt_Item.visible = !0, t.itemCfg.type != m.hero && t.itemCfg.type != m.heroSkin && t.canChange ? Laya.timer.once(Math.randRange(0, 150), this, () => {
                this.destroyed || this.ani1.play(0, !0)
            }) : (this.ani1.stop(), this.m_box_Con.rotation = 0), this.m_hasDoAni = !0, this.m_isDoing = !1)
    }
    setUIAniDone() {
        this.m_ani_Shine.offAll(Laya.Event.COMPLETE),
        this.m_ani_Ready.offAll(Laya.Event.COMPLETE),
        this.m_box_Con.scale(1, 1),
        this.m_box_Con.skew(0, 0),
        this.setItemShow()
    }
    clearAllTime() {
        Laya.timer.clearAll(this),
        this.m_timeArr.forEach(e => {
            e.total && e.destroy()
        }),
        this.m_timeArr.length = 0
    }
    doChangeCard() {
        if (this.dataSource.canChange && this.m_hasDoAni) {
            this.m_hasDoAni = !1,
            this.m_doingChange = !0;
            let e = this.getNewTimeLine(),
            t = this.getNewTimeLine();
            e.to(this.m_box_Con, {
                alpha: 0
            }, 300),
            t.to(this.m_box_Con, {
                scaleX: 1.3,
                scaleY: 1.3,
                alpha: 1
            }, 10).to(this.m_box_Con, {
                scaleX: 1,
                scaleY: 1
            }, 20, null, 120),
            Laya.timer.once(50, this, () => {
                this.destroyed || e.play(0, !1)
            }),
            Laya.timer.once(350, this, () => {
                this.destroyed || (e.destroy(), this.setDefault(), this.m_box_Con.scale(0, 0))
            }),
            Laya.timer.once(550, this, () => {
                this.destroyed || t.play(0, !1)
            }),
            Laya.timer.once(550, this, () => {
                this.destroyed || this.allAniStart()
            }),
            this.m_ani_Lighting.visible = !0,
            this.m_ani_Lighting.play(0, !1),
            I.instance.playSound(v.SE_CardChange)
        }
    }
    setDefault() {
        var e = this.dataSource,
        e = (this.m_box_Con.alpha = 1, this.m_ani_Shine.visible = !1, this.m_ani_Ready.visible = !1, this.m_ani_Border.visible = !1, e.itemCfg),
        e = this.m_aniCfg[e.quality];
        e && e[0] && (this.m_ani_Shine.source = `hunt/ue/${e[0]}.atlas`, e[1] ? (this.m_ani_Border.source = `hunt/ue/${e[1]}.atlas`, this.m_ani_Border.visible = !0, this.m_ani_Border.play(0, !0)) : this.m_ani_Border.visible = !1),
        this.m_img_Bg.visible = !0,
        this.m_img_Reward.visible = !1,
        this.m_txt_Item.visible = !1
    }
}
class _a extends t.hunt.views.block.BlockChestResultUI {
    constructor(e, t) {
        super(),
        this.m_blockId = 0,
        this.m_canShowLike = !1,
        this.dataSource = e,
        this.m_blockId = t
    }
    onDestroy() {
        super.onDestroy();
        var e = this.dataSource;
        O.bag.reqReceiveRandBox(e.logicId).then(() => {
            O.event(c.GEN_ANI)
        })
    }
    onAwake() {
        super.onAwake(),
        this.m_img_Mask.size(this.m_img_AdaptBg.width, this.m_img_AdaptBg.height);
        let e = this.dataSource.showItems || [],
        s = [];
        e.forEach(t => {
            var i = Data.getItem(t.id),
            e = s.findIndex(e => e.itemId == t.id);
            if (i.type == m.equip)
                for (let e = 0; e < t.num; e++)
                    s.push({
                        itemId: t.id,
                        itemCfg: i,
                        canChange: !1
                    });
            else  - 1 != e ? s[e].itemNum += t.num : s.push({
                    itemId: t.id,
                    itemCfg: i,
                    itemNum: t.num,
                    canChange: !1
                })
        }),
        s.sort((e, t) => {
            if (e.itemId == p.gem)
                return -1;
            if (e.itemCfg.type == m.boxKey)
                return t.itemCfg.type == m.boxKey ? t.itemCfg.quality - e.itemCfg.quality : t.itemId == p.gem ? 1 : -1;
            if (e.itemCfg.type == m.equip)
                return t.itemCfg.type == m.equip ? Data.getEquip(t.itemId).lvl - Data.getEquip(e.itemId).lvl : t.itemId == p.gem || t.itemCfg.type == m.boxKey ? 1 : -1;
            if (e.itemCfg.type == m.food || e.itemCfg.type == m.cookFood) {
                if (t.itemCfg.type == m.food || t.itemCfg.type == m.cookFood)
                    return Data.getFood(t.itemId).exp - Data.getFood(e.itemId).exp;
                if (t.itemId == p.gem || t.itemCfg.type == m.equip)
                    return 1
            }
            return t.itemCfg.quality - e.itemCfg.quality
        }),
        this.m_lst_Reward.visible = !1,
        this.m_lst_Reward.array = s,
        this.showBoxAni(),
        this.m_blockId && O.block.reqBlockInfo(this.m_blockId).then(e => {
            this.destroyed || (this.m_canShowLike = !0, this.m_view_Like.setData(this.m_blockId, e), this.m_view_Comment.setData(this.m_blockId))
        })
    }
    showBoxAni() {
        var e = Data.getBlock_normalChest(this.m_blockId),
        t = this.dataSource.items[0].id,
        t = Data.getItem(t);
        let i = null,
        s = null;
        var a = {
            box1: v.SE_TreasureOpenSr,
            box2: v.SE_TreasureOpenSsr,
            box3: v.SE_TreasureOpenSss,
            box4: v.SE_TreasureOpenSss,
            1001: v.SE_TreasureOpenSr,
            1002: v.SE_TreasureOpenSsr,
            1003: v.SE_TreasureOpenSss,
            1004: v.SE_TreasureOpenSss
        };
        e ? (i = Ee.create({
                url: `hunt/spine/${e.icon}.json`,
                parent: this.m_box_Spine,
                px: 150,
                py: 0
            }), s = a[e.icon]) : t && t.icon && (e = {
                1001: "box1",
                1002: "box2",
                1003: "box3",
                1004: "box4"
            }, i = Ee.create({
                url: `hunt/spine/${e[t.icon]}.json`,
                parent: this.m_box_Spine,
                px: 150,
                py: 0
            }), s = a[t.icon]),
        i ? Laya.timer.once(300, this, () => {
            this.destroyed || (s && I.instance.playSound(s), i.play(0, !1, Laya.Handler.create(this, () => {
                        i.play(1, !1, Laya.Handler.create(this, () => {
                                this.showCards(),
                                Laya.Tween.to(this.m_box_Spine, {
                                    alpha: 0
                                }, 400, null, Laya.Handler.create(this, () => {
                                        this.m_box_Spine.destroyChildren()
                                    }))
                            }))
                    })))
        }) : this.showCards()
    }
    showCards() {
        var e = Mmobay.Utils.getScreenInfo(),
        s = (e.stageWidth - e.designWidth) / 2 || 0,
        i = 280 + s,
        a = this.m_lst_Reward.array;
        for (let t = 0; t < a.length && !(9 <= t); t++) {
            let e = new ua;
            e.scale(.3, .3),
            e.x = i,
            e.y = 650,
            e.zOrder = 1300,
            e.dataChanged(0, a[t]),
            Laya.timer.once(100 * t, this, (e, t) => {
                var i = 40 + t % 3 * 145 + s,
                t = 150 + 260 * Math.floor(t / 3);
                Laya.stage.addChild(e),
                Laya.Tween.to(e, {
                    x: i,
                    y: t,
                    scaleX: .8,
                    scaleY: .8,
                    alpha: .3
                }, 500, null, Laya.Handler.create(this, e => {
                        e.destroy()
                    }, [e]))
            }, [e, t])
        }
        (this.m_lst_Reward.cells || []).forEach((e, t) => {
            (e.dataSource || this.m_lst_Reward.array[t]) && (e.m_box_Con.alpha = 0, e.visible = !0, Laya.Tween.to(e.m_box_Con, {
                    alpha: 1
                }, 300, null, null, 100 * t), Laya.timer.once(200 * t + 200, this, () => {
                    e.allAniStart && e.allAniStart()
                }))
        }),
        this.m_lst_Reward.visible = !0;
        e = this.m_lst_Reward.array.length;
        Laya.timer.once(120 * e, this, () => {
            this.destroyed || (this.m_btn_Close.visible = !0, this.m_canShowLike && (this.m_view_Like.visible = !0, this.m_view_Comment.visible = !0))
        })
    }
}
class pa extends t.hunt.views.common.ItemDetailDlgUI {
    constructor(e) {
        super(),
        this.m_itemData = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        var e = this.m_itemData.itemCfg,
        t = this.m_itemData.canUse,
        i = e.type,
        e = e.id;
        this.m_view_Detail.setData(this.m_itemData),
        i == m.equip || this.m_itemData.isBag ? (this.m_btn_Comm.visible = !0, this.height = 450) : Data.getItemSell(e) ? (this.m_box_Sale.visible = !0, this.m_view_Sale.setData(1, this.m_itemData.itemNum, 1)) : t && (Data.getItemUse(e) || Data.getItemLimit(e)) ? (this.m_box_Use.visible = !0, this.m_view_Use.setData(1, this.m_itemData.itemNum, 1)) : t && (Data.getItemChooseBox(e) || Data.getItemRandBox(e)) ? (this.height = 440, this.m_view_Use.setData(1, this.m_itemData.itemNum, 1), this.m_view_Use.visible = !1, this.m_box_Use.visible = !0) : (this.m_btn_Comm.visible = !0, this.height = 450)
    }
    updateSale(e) {}
    onClickSale() {
        O.bag.reqSellItem(this.m_itemData.itemId, this.m_view_Sale.count).then(() => {
            this.closeDialog()
        })
    }
    onClickUse() {
        this.m_itemData.itemCfg.type == m.randBox ? O.bag.reqUseRandBox(this.m_itemData.itemId).then(e => {
            l(_a, {
                params: [e]
            }).then(() => {
                this.closeDialog()
            })
        }) : (this.m_itemData.itemCfg.type == m.chooseBox ? l(ea, {
                params: [{
                        boxCfg: this.m_itemData.itemCfg,
                        fromSelect: !0
                    }
                ]
            }) : O.bag.reqUseItem(this.m_itemData.itemId, this.m_view_Use.count)).then(() => {
            this.closeDialog()
        })
    }
}
r([n(c.COUNT_CHANGE)], pa.prototype, "updateSale", null);
class ga extends t.hunt.views.mistery.ElfOpenDlgUI {
    constructor(e, t) {
        super(),
        this.m_type = t,
        this.m_data = e
    }
    onAwake() {
        super.onAwake(),
        this.m_lst_Item.selectEnable = !0,
        this.updateView()
    }
    onClickOpen() {
        var e = this.m_data.cost.split(",");
        O.bag.getItemNum(e[0]) < e[1] ? h(S(2031, S(Data.getItem(e[0]).name))) : (this.m_btn_Open.disabled = !0, O.tileMap.reqOpenBlind(this.m_type).then(e => {
                this.updateView(),
                Et(e.items, e.addSkin, "box" + this.m_type, e.addSkin),
                this.m_btn_Open.disabled = !1
            }))
    }
    updateView() {
        var e = this.m_data.cost.split(","),
        t = O.bag.getItemNum(e[0]),
        i = (this.m_txt_Has.text = t + "", O.tileMap.blindBox),
        s = (this.m_txt_Left.text = S(2029, i[this.m_data.type].remainder), e[1]);
        this.m_txt_Need.text = "/" + s,
        this.m_txt_Has.color = t < s ? o.Red : o.White,
        this.m_lst_Item.array = this.getBoxData(i[this.m_data.type].boxIds),
        this.m_img_Box.skin = `hunt/ui_comm/box${this.m_type}.png`;
        this.m_txt_Title.text = S([10059, 10060, 10061, 10135][this.m_type - 1]),
        this.m_img_Item.skin = `hunt/ui_item/${Data.getItem(e[0]).icon}.png`
    }
    getBoxData(e) {
        let t = [];
        e.sort((e, t) => {
            if (Data.getBlindBox(t) && Data.getBlindBox(e))
                return Data.getBlindBox(t).sort - Data.getBlindBox(e).sort
        });
        for (var i of e) {
            i = Data.getBlindBox(i);
            if (i)
                for (var s of i.items)
                    t.push({
                        itemId: s.id,
                        itemNum: s.count,
                        itemCfg: Data.getItem(s.id),
                        notShowName: !0
                    })
        }
        return t
    }
    onSelectItem() {
        var e;
        -1 != this.m_lst_Item.selectedIndex && (e = this.m_lst_Item.getItem(this.m_lst_Item.selectedIndex), u(pa, {
                params: [{
                        itemCfg: Data.getItem(e.itemId),
                        itemId: e.itemId,
                        itemNum: e.itemNum
                    }
                ]
            }), this.m_lst_Item.selectedIndex = -1)
    }
}
class ya extends t.hunt.views.mistery.ElfShopDlgUI {
    onAwake() {
        super.onAwake(),
        this.addTitle(S(2026)),
        Promise.all([O.tileMap.reqElfBox(Be.gold), O.tileMap.reqElfBox(Be.silver), O.tileMap.reqElfBox(Be.copper), O.tileMap.reqElfBox(Be.rainbow)]).then(() => {
            this.updateView()
        })
    }
    onDestroy() {
        this.m_tick && this.m_tick.dispose(),
        super.onDestroy()
    }
    updateView() {
        var e = Data.gameConf.blindBoxCfg,
        t = O.tileMap;
        this.m_lst_Box.array = [{
                cost: e.rainbowCost,
                items: t.blindBox[Be.copper].boxIds,
                remainder: t.blindBox[Be.rainbow].remainder,
                type: Be.rainbow
            }, {
                cost: e.goldCost,
                items: t.blindBox[Be.gold].boxIds,
                type: Be.gold,
                remainder: t.blindBox[Be.gold].remainder
            }, {
                cost: e.silverCost,
                items: t.blindBox[Be.silver].boxIds,
                remainder: t.blindBox[Be.silver].remainder,
                type: Be.silver
            }, {
                cost: e.copperCost,
                items: t.blindBox[Be.copper].boxIds,
                remainder: t.blindBox[Be.copper].remainder,
                type: Be.copper
            }
        ],
        this.m_tick && this.m_tick.dispose();
        let i = this.m_tick = Ei.create(Date.getTodayZeroTime().getTime() + 864e5, 1e3, this.m_txt_Time, "D:HH:MM:ss");
        i.onEnd = () => {
            Promise.all([O.tileMap.reqElfBox(Be.gold), O.tileMap.reqElfBox(Be.silver), O.tileMap.reqElfBox(Be.copper)]).then(() => {
                this.updateView()
            })
        },
        i.start()
    }
    onSelectBox() {
        if (-1 != this.m_lst_Box.selectedIndex) {
            var e = this.m_lst_Box.getItem(this.m_lst_Box.selectedIndex);
            if (this.m_lst_Box.selectedIndex = -1, !e.remainder)
                return h(S(58));
            u(ga, {
                params: [e, e.type]
            })
        }
    }
}
r([n(c.UPDATE_BLIND)], ya.prototype, "updateView", null);
class va extends t.hunt.views.common.BindWalletDlgUI {
    onAwake() {
        super.onAwake(),
        this.m_txt_Address.on(Laya.Event.FOCUS, this, e => {
            this.onClickSearch(e)
        })
    }
    onSelectAgreement(e) {
        e.selected && !this.m_txt_Address.text ? e.selected = !1 : this.m_btn_Save.disabled = !e.selected
    }
    onClickSearch(e) {
        O.account.checkWallet().then(e => {
            e && e.wallet && (this.m_txt_Address.text = e.wallet)
        })
    }
    onClickSave(e) {
        this.m_txt_Address.text && O.account.bindWallet(this.m_txt_Address.text).then(e => {
            this.closeDialog(),
            O.event(c.TAP_TOKEN_CHANGE)
        })
    }
}
class ka extends t.hunt.views.common.WithdrawalTradeDlgUI {
    constructor(e, t = !1) {
        super(),
        this.m_costCopper = 0,
        this.m_fromSkin = !1,
        this.m_itemData = e,
        this.m_fromSkin = t
    }
    onAwake() {
        super.onAwake();
        var t = this.m_itemData.itemCfg,
        e = this.m_itemData.heroSkin,
        i = t.quality || 0;
        if (this.m_img_ItemBg.skin = `hunt/ui_comm/border${i}.png`, this.m_img_ItemRare.visible = !!e, this.m_view_Use.visible = !e, this.m_box_Con.height = e ? 450 : 520, e)
            this.m_costCopper = +Data.gameConf.drawCfg.drawSkinCostCopper || 0, this.m_img_ItemIcon.skin = `hunt/ui_hero/h${t.icon}.png`, this.m_img_ItemRare.skin = `hunt/ui_card/rare_small${t.rare}.png`;
        else {
            i = this.m_itemData.itemId;
            let e = Math.floor(this.m_itemData.itemNum);
            i == p.copper ? (this.m_costCopper = +Data.gameConf.drawCfg.drawGoldCostCopper || 0, e = Math.floor(e / 1e4)) : i == p.mcToken ? this.m_costCopper = +Data.gameConf.drawCfg.drawMCCostCopper || 0 : i == p.tapToken && (this.m_costCopper = +Data.gameConf.drawCfg.drawTapCostCopper || 0),
            this.m_img_ItemIcon.skin = `hunt/ui_item/${t.icon}.png`,
            i == p.copper && (e -= Math.floor(this.m_costCopper / 1e4)),
            e <= 0 && (e = 1),
            this.m_view_Use.setData(1, e, 1)
        }
        this.m_txt_Info.text = S(1142, S(t.name)),
        this.m_txt_CostNum.text = Math.floor(this.m_costCopper / 1e4) + ""
    }
    onClickWithdrawal(e) {
        let t = this.m_view_Use.count;
        if (t > this.m_itemData.itemNum && (t = this.m_itemData.itemNum), O.account.wallet)
            if (this.m_itemData.heroSkin) {
                if (this.m_costCopper > R.copper)
                    return h(S(25));
                O.account.reqDrawNFTSkin(this.m_itemData.logicId).then(e => {
                    this.withdrawalSuccess()
                })
            } else {
                var i = this.m_itemData.itemId;
                let e = this.m_costCopper;
                if (i == p.copper && (e += 1e4 * t), e > R.copper)
                    return h(S(25));
                if (i == p.copper)
                    O.account.reqDrawGold(t).then(e => {
                        this.withdrawalSuccess()
                    });
                else if (i == p.mcToken)
                    O.account.reqDrawMCToken(t).then(e => {
                        this.withdrawalSuccess()
                    });
                else if (i == p.tapToken) {
                    if (t < 1)
                        return h(S(61));
                    O.account.reqDrawTap(t).then(e => {
                        this.withdrawalSuccess()
                    })
                } else
                    i == p.pvpToken && O.account.reqDrawPvp(t).then(e => {
                        this.withdrawalSuccess()
                    })
            }
        else
            u(va, {
                clearPopup: !0
            })
    }
    withdrawalSuccess() {
        this.closeDialog(),
        this.m_fromSkin ? O.event(c.HERO_CHANGE) : O.event(c.ITEM_CHANGE)
    }
}
class fa extends t.hunt.views.common.WithdrawalDetailDlgUI {
    constructor(e, t = !1) {
        super(),
        this.m_ticker = null,
        this.m_fromSkin = !1,
        this.m_itemData = e,
        this.m_fromSkin = t
    }
    onAwake() {
        super.onAwake();
        var t = this.m_itemData.itemCfg,
        i = this.m_itemData.heroSkin,
        e = t.quality || 0;
        this.m_txt_Name.text = S(t.name),
        this.m_img_ItemBg.skin = `hunt/ui_comm/border${e}.png`,
        this.m_img_ItemRare.visible = !!i,
        this.m_box_Ele.visible = !!i,
        this.m_txt_Info.visible = !i,
        this.m_txt_Nid.visible = !!i;
        let s = 0,
        a = 0;
        if (i) {
            this.m_txt_Nid.text = i.tokenID + "",
            this.m_img_ItemIcon.skin = `hunt/ui_hero/h${t.icon}.png`,
            this.m_img_ItemRare.skin = `hunt/ui_card/rare_small${t.rare}.png`;
            var r = i.eles || [];
            let e = 0;
            for (const l in _)
                this["m_img_EleIcon" + e].skin = `hunt/ui_card/ele_${l}.png`, this["m_txt_EleName" + e].text = S(tt[_[l]]), this["m_txt_EleNum" + e].text = r[e] + "", e++;
            a = R.times[Fe.skin] || 0,
            s = +Data.gameConf.drawCfg.skinInterval || 0
        } else {
            this.m_img_ItemIcon.skin = `hunt/ui_item/${t.icon}.png`,
            this.m_txt_Info.text = S(t.info);
            e = this.m_itemData.itemId;
            e == p.copper ? (a = R.times[Fe.copper] || 0, s = +Data.gameConf.drawCfg.copperInterval || 0) : e == p.mcToken ? (a = R.times[Fe.mcToken] || 0, s = +Data.gameConf.drawCfg.mcInterval || 0) : e == p.tapToken && (a = R.times[Fe.tapToken] || 0, s = +Data.gameConf.drawCfg.tapInterval || 0)
        }
        let n = 0,
        o = Date.newDate();
        if (a && (i = Date.newDate(1e3 * a).addSeconds(s), n = o.getSecondsBetween(i)), this.m_btn_Withdrawal.visible = n <= 0, this.m_txt_Time.visible = 0 < n, 0 < n) {
            this.m_txt_Time.text = S(1143, Nt(1e3 * n));
            let e = this.m_ticker = Ei.create(o.addSeconds(n).getTime());
            e.onTick = e => {
                0 < e ? this.m_txt_Time.text = S(1143, Nt(1e3 * e)) : (this.m_txt_Time.visible = !1, this.m_btn_Withdrawal.visible = !0)
            },
            e.onEnd = () => {
                this.m_ticker && this.m_ticker.dispose()
            },
            e.start()
        }
    }
    onDestroy() {
        super.onDestroy(),
        this.clearTicker()
    }
    onClickWithdrawal(e) {
        u(ka, {
            params: [this.m_itemData, this.m_fromSkin],
            clearPopup: !0
        })
    }
    clearTicker() {
        this.m_ticker && (this.m_ticker.dispose(), this.m_ticker = null)
    }
}
class Ia extends t.hunt.views.card.SkinUpgradeResultDlgUI {
    constructor(e, t) {
        super(),
        this.m_tlArr = [],
        this.m_newInfo = e,
        this.m_oldInfo = t
    }
    onAwake() {
        super.onAwake(),
        this.updateSkinAvatar(this.m_oldInfo),
        this.m_ani_Bomb.on(Laya.Event.COMPLETE, this, () => {
            this.destroyed || (this.m_ani_Bomb.visible = !1)
        }),
        this.m_ani_Bomb.visible = !0,
        this.m_ani_Bomb.play(0, !1),
        this.m_ani_Up.on(Laya.Event.COMPLETE, this, () => {
            this.destroyed || (this.m_ani_Up.visible = !1)
        }),
        this.m_ani_Up.visible = !0,
        this.m_ani_Up.play(0, !1),
        this.m_newInfo.isSp && xe(!0),
        Laya.timer.once(1200, this, this.showSkinInfo)
    }
    onDestroy() {
        super.onDestroy(),
        this.clearTl(),
        this.clearTlShake(),
        Laya.timer.clearAll(this),
        O.event(c.SKIN_DETAIL_CHANGE, [this.m_newInfo])
    }
    updateSkinAvatar(e) {
        var t = Data.getItem(e.avatarId);
        this.m_img_Bg.skin = {
            0: "hunt/ui_card/cardBgN.png",
            1: "hunt/ui_card/cardBgR.png",
            2: "hunt/ui_card/cardBgSR.png",
            3: "hunt/ui_card/cardBgSSR.png",
            4: "hunt/ui_card/cardBgSP.png"
        }
        [t.rare || 0],
        4 == t.rare ? (this.m_ani_Card.visible = !0, this.m_ani_Card.source = "hunt/ue/26.atlas") : 3 == t.rare ? (this.m_ani_Card.visible = !0, this.m_ani_Card.source = "hunt/ue/27.atlas") : this.m_ani_Card.visible = !1,
        this.m_img_Hero.skin = `hunt/ui_hero/s${e.avatarId}.png`,
        this.m_txt_Name.text = S(t.name),
        t.rare && (this.m_img_Rare.skin = `hunt/ui_card/rare_big${t.rare}.png`)
    }
    showSkinInfo() {
        this.aniMove.play(0, !1),
        Laya.timer.once(250, this, () => {
            this.playLvAni(),
            this.m_ani_Shine.visible = !0,
            this.m_ani_Shine.play(0, !0);
            var e = this.m_newInfo.eles || [],
            t = this.m_oldInfo.eles || [];
            let i = 0;
            for (const a in _) {
                var s = {
                    id: _[a],
                    key: a,
                    rollNum: !0,
                    preNum: t[i],
                    curNum: e[i]
                };
                this.playEleAni(i, s, 300 * i),
                i++
            }
            this.m_newInfo.isSp && Laya.timer.once(1200, this, () => {
                this.aniMark.play(0, !1),
                Laya.timer.once(1e3, this, this.playShakeAni)
            })
        })
    }
    playLvAni() {
        var i = this.m_newInfo.level;
        for (let e = 0; e < 5; e++) {
            let t = this.m_box_Lv.getChildAt(e);
            i > e && Laya.timer.once(180 * e, this, () => {
                t.gray = !1;
                let e = new Laya.TimeLine;
                e.to(t, {
                    scaleX: 1.5,
                    scaleY: 1.5
                }, 100).to(t, {
                    scaleX: 1,
                    scaleY: 1
                }, 80),
                e.play(0, !1),
                this.m_tlArr.push(e)
            })
        }
    }
    playEleAni(t, i, e) {
        Laya.timer.once(e, this, () => {
            let e = this.m_box_Ele.getChildAt(t);
            e.visible = !0,
            e.setData(i),
            Laya.Tween.from(e, {
                x: 150,
                alpha: 0
            }, 150)
        })
    }
    playShakeAni() {
        var e = this.m_box_Skin;
        let t = this.m_tlShake = new Laya.TimeLine;
        t.to(e, {
            pivotX: 2,
            pivotY: 2
        }, 10).to(e, {
            pivotX: 0,
            pivotY: 0
        }, 10, null, 10).to(e, {
            pivotX: -2,
            pivotY: -2
        }, 10, null, 10).to(e, {
            pivotX: 0,
            pivotY: 0
        }, 10, null, 10).to(e, {
            pivotX: 2,
            pivotY: -2
        }, 10, null, 10).to(e, {
            pivotX: 0,
            pivotY: 0
        }, 10, null, 10).to(e, {
            pivotX: -2,
            pivotY: 2
        }, 10, null, 10).to(e, {
            pivotX: 0,
            pivotY: 0
        }, 10, null, 10),
        t.play(0, !0),
        Laya.timer.once(800, this, () => {
            this.m_ani_Change.on(Laya.Event.COMPLETE, this, () => {
                this.m_ani_Change.visible = !1
            }),
            this.m_ani_Change.visible = !0,
            this.m_ani_Change.play(0, !1),
            Laya.timer.once(1e3, this, () => {
                I.instance.playCv(this.m_newInfo.avatarId, lt.Get),
                this.clearTlShake(),
                this.updateSkinAvatar(this.m_newInfo),
                this.m_box_Skin.pivot(0, 0),
                xe(!1)
            })
        })
    }
    clearTl() {
        this.m_tlArr.forEach(e => {
            e.destroy()
        }),
        this.m_tlArr.length = 0
    }
    clearTlShake() {
        this.m_tlShake && (this.m_tlShake.destroy(), this.m_tlShake = null)
    }
    onClickSure(e) {
        this.closeDialog()
    }
}
class ba extends t.hunt.views.card.SkinUpgradeDlgUI {
    constructor(e, t) {
        super(),
        this.m_heroId = e,
        this.m_skinInfo = t
    }
    onAwake() {
        super.onAwake();
        var t = this.m_skinInfo.eles || [];
        let i = 0;
        for (const r in _) {
            var s = {
                id: _[r],
                preNum: t[i],
                key: r
            };
            let e = this["m_view_Ele" + i];
            e.setData(s),
            i++
        }
        var e = this.m_skinInfo.level || 0,
        e = Data.getHeroSkinUpgrade(e),
        a = O.account.GetUSDT2Tap(e.costUSDT);
        this.m_txt_CoinCost.text = a + "",
        this.m_txt_DiamondNum.text = R.MCToken + "",
        this.m_txt_DiamondNum.color = e.costMCToken > R.MCToken ? "#FF643A" : "#FFFFFF",
        this.m_txt_DiamondCost.text = "/" + e.costMCToken
    }
    onClickUpgrade(e) {
        var t = this.m_skinInfo.level || 0,
        t = Data.getHeroSkinUpgrade(t),
        i = O.account.GetUSDT2Tap(t.costUSDT),
        t = t.costMCToken;
        i > R.tapToken ? h(S(25)) : t > R.MCToken ? h(S(62)) : -1 == this.m_skinInfo.id ? O.hero.reqUpgradeWearSkin(this.m_heroId).then(e => {
            O.event(c.HERO_CHANGE);
            e = {
                id: -1,
                tokenId: e.skin.skin.tokenID,
                skinId: e.skin.skin.skinID,
                avatarId: e.skin.skin.avatarID,
                eles: e.skin.skin.eles || [],
                level: e.skin.skin.level,
                isSp: !!e.sp
            };
            u(Ia, {
                clearPopup: !0,
                params: [e, this.m_skinInfo]
            })
        }) : O.hero.reqUpgradeSkin(this.m_skinInfo.id).then(e => {
            O.event(c.HERO_CHANGE);
            e = {
                id: e.skin.id,
                tokenId: e.skin.skin.tokenID,
                skinId: e.skin.skin.skinID,
                avatarId: e.skin.skin.avatarID,
                eles: e.skin.skin.eles || [],
                level: e.skin.skin.level,
                isSp: !!e.sp
            };
            u(Ia, {
                clearPopup: !0,
                params: [e, this.m_skinInfo]
            })
        })
    }
}
class wa extends t.hunt.views.card.SkinBuyMcDlgUI {
    constructor(e) {
        super(),
        this.m_data = null,
        this.m_data = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        var e = this.m_data.itemId,
        t = Data.getItem(e),
        i = this.m_data.itemNum,
        e = (this.m_view_Detail.setData({
                itemNum: i,
                itemId: e,
                itemCfg: t
            }), this.m_txt_Num.changeText(S(1003, " " + i)), +Data.gameConf.skinBuyMcCfg.price);
        this.m_view_Money.setData(e * i)
    }
    onClickBuy() {
        var e = +Data.gameConf.skinBuyMcCfg.price,
        t = this.m_data.itemNum;
        if (R.copper < e * t)
            h(S(25));
        else {
            let e = {};
            -1 == this.m_data.skinInfo.id ? e.heroId = this.m_data.heroId : e.id = this.m_data.skinInfo.id,
            O.hero.reqSkinBuyMcToken(e).then(() => {
                this.closeDialog(d.Yes)
            })
        }
    }
}
class Ca extends t.hunt.views.card.SkinDetailDlgUI {
    constructor(e, t) {
        super(),
        this.m_isShow = !0,
        this.m_buyNum = 0,
        this.m_heroId = e,
        this.m_skinInfo = t
    }
    onAwake() {
        super.onAwake(),
        this.m_box_Rare.x -= .5 * Mmobay.adaptOffsetWidth,
        this.updateView();
        var e = Data.getHeroSkinSP(this.m_skinInfo.avatarId);
        this.m_view_Prop.visible = !!e,
        e && (e = e.addProps[0], this.m_view_Prop.dataChanged(null, {
                propId: e.key,
                propVal: e.value
            }))
    }
    resetData(e) {
        e && (this.m_skinInfo = e, this.updateView())
    }
    updateView() {
        var e = Data.getItem(this.m_skinInfo.avatarId),
        i = (this.addTitle(S(e.name)), e.rare && (this.m_img_Rare.skin = `hunt/ui_card/rare_big${e.rare}.png`), this.m_img_Hero.skin = `hunt/ui_hero/${this.m_skinInfo.avatarId}.png`, this.m_txt_Nid.text = this.m_skinInfo.tokenId + "", this.m_skinInfo.level);
        for (let t = 0; t < 5; t++) {
            let e = this.m_box_Lv.getChildAt(t);
            e.gray = t >= i
        }
        var t = this.m_skinInfo.eles || [];
        let s = 0;
        for (const r in _) {
            var a = {
                id: _[r],
                preNum: t[s],
                key: r
            };
            let e = this["m_view_Ele" + s];
            e.setData(a),
            s++
        }
        this.m_btn_Upgrade.disabled = 5 <= i,
        this.getSkinMCInfo()
    }
    getSkinMCInfo() {
        O.hero.reqSkinTokenInfo(this.m_skinInfo.tokenId).then(e => {
            var t,
            i;
            0 < e.canBuyNum && (this.m_box_Reward.visible = !0, e = Data.getItem(this.m_skinInfo.skinId), t = {
                    1: Data.gameConf.skinBuyMcCfg.countR,
                    2: Data.gameConf.skinBuyMcCfg.countSR,
                    3: Data.gameConf.skinBuyMcCfg.countSSR
                }, i = {
                    itemId: p.mcToken,
                    itemCfg: Data.getItem(p.mcToken),
                    itemNum: t[e.rare],
                    notShowName: !0
                }, this.m_view_Item.dataChanged(null, i), this.m_buyNum = t[e.rare] || 0)
        })
    }
    onClickGetReward() {
        u(wa, {
            params: [{
                    heroId: this.m_heroId,
                    skinInfo: this.m_skinInfo,
                    itemId: p.mcToken,
                    itemNum: this.m_buyNum
                }
            ]
        }).then(e => {
            e.wait().then(e => {
                e.type == d.Yes && (this.m_box_Reward.visible = !1)
            })
        })
    }
    onClickUpgrade(e) {
        u(ba, {
            params: [this.m_heroId, this.m_skinInfo]
        })
    }
    onClickHide(e) {
        let t = this.m_isShow ? this.ani1 : this.ani2;
        t.play(0, !1),
        this.m_img_Hide.mouseEnabled = !1,
        this.m_img_Hide.scaleY = this.m_isShow ? -1 : 1,
        Laya.timer.once(200, this, () => {
            this.m_img_Hide.mouseEnabled = !0
        }),
        this.m_isShow = !this.m_isShow
    }
}
r([n(c.SKIN_DETAIL_CHANGE)], Ca.prototype, "resetData", null);
class xa extends t.hunt.views.card.SkinListDlgUI {
    constructor(e, t = 0, i = !1, s = null) {
        super(),
        this.m_heroId = e,
        this.m_skinId = t,
        this.m_onlyChange = i,
        this.m_eleObj = s,
        this.m_heroData = O.hero.getHero(e)
    }
    onAwake() {
        super.onAwake(),
        this.m_box_Oper.size(Laya.stage.width, Laya.stage.height);
        var e = Data.getItem(this.m_skinId),
        t = Data.getItem(this.m_heroId);
        this.m_txt_Title.text = S(e && e.name || t.name);
        let i = [],
        s = this.m_heroData.allSkins;
        s.forEach(e => {
            this.m_eleObj && (e.isHigher = e.eles[this.m_eleObj.tEleIndex] > this.m_eleObj.cHeroEle, -1 == e.id) || this.m_skinId && e.skinId != this.m_skinId || i.push(e)
        }),
        i.sort((e, t) => {
            if (this.m_eleObj) {
                var i = e.eles[this.m_eleObj.tEleIndex] || 0,
                s = t.eles[this.m_eleObj.tEleIndex] || 0;
                if (-1 == t.id)
                    return 1;
                if (i && s)
                    return s - i;
                if (i || s)
                    return i ? -1 : 1
            } else {
                if (-1 == t.id)
                    return 1;
                if (e.level == t.level && e.avatarId != t.avatarId)
                    return s = Data.getItem(e.avatarId), (Data.getItem(t.avatarId).rare || 0) - (s.rare || 0)
            }
            return t.level - e.level
        }),
        this.m_lst_Skin.array = i
    }
    onSelectSkin(i) {
        var s = this.m_lst_Skin.getCell(i),
        a = this.m_lst_Skin.getItem(i);
        if (s && a) {
            var r = s.width,
            s = s.height,
            n = this.m_lst_Skin.height,
            o = this.m_lst_Skin.repeatX,
            l = this.m_lst_Skin.spaceX,
            h = this.m_lst_Skin.spaceY;
            let e = this.m_lst_Skin.scrollBar.value;
            var m = i % o,
            i = Math.floor(i / o) * (s + h),
            h = (i < e ? e = i : i + s > e + n && (o = i + s - (e + n), e += o), this.m_lst_Skin.scrollBar.value = e, this.m_lst_Skin.selectedIndex = -1, this.m_box_Oper.visible = !0, this.m_lst_Skin.x + m * (r + l)),
            s = this.m_lst_Skin.y + (i - e);
            this.m_box_Show.pos(h, s),
            this.m_chooseSkin = a,
            this.m_view_Skin.dataChanged(0, a);
            let t = !1;
            0 < this.m_heroData.eatLvl && -1 != a.id && (t = !0),
            this.m_btn_Change.visible = t,
            this.m_btn_Withdrawal.visible = -1 != a.id && !this.m_onlyChange,
            this.m_btn_Upgrade.visible = !this.m_onlyChange,
            this.m_btn_Change.y = this.m_onlyChange ? 262 : 402
        }
    }
    onClickMask(e) {
        this.m_box_Oper.visible = !1
    }
    onClickUpgrade(e) {
        l(Ca, {
            hideCurrent: !0,
            params: [this.m_heroId, this.m_chooseSkin]
        }).then(() => {
            this.closeDialog()
        })
    }
    onClickWithdrawal(e) {
        var t = this.m_chooseSkin;
        t && -1 != t.id && (t = {
                itemId: t.avatarId,
                itemCfg: Data.getItem(t.avatarId),
                itemNum: 1,
                logicId: t.id,
                heroSkin: R.heroSkins[t.id]
            }, u(fa, {
                params: [t, !0]
            }))
    }
    onClickChange(e) {
        O.hero.reqWearSkin(this.m_heroId, this.m_chooseSkin.id).then(e => {
            this.closeDialog(d.Yes, this.m_heroId)
        })
    }
}
class Sa extends t.hunt.views.fight.ChangeHeroDlgUI {
    constructor(e, t, i, s = !1) {
        super(),
        this.m_selIndex = 0,
        this.m_needEle = !1,
        this.m_chooseItem = null,
        this.m_selHeroId = e,
        this.m_sq = i,
        this.m_selHeroIndex = t,
        this.m_needEle = s
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        this.m_btn_Change.disabled = !0,
        this.m_lst_Hero.height = this.m_needEle ? 790 : 725,
        this.m_btn_Change.visible = !this.m_needEle;
        let i = O.hero.getChangeHeros(this.m_selHeroId, this.m_sq, !!this.m_needEle);
        var e;
        this.m_needEle && ((1 < (e = O.hero.getHero(this.m_selHeroId)).allSkins.length || 1 == e.allSkins.length && -1 != e.allSkins[0].id) && i.unshift({
                hero: e,
                isSel: !1,
                needEle: !!this.m_needEle
            }), i.forEach(e => {
                var t = O.hero.checkHigherSkinOrHero(this.m_needEle[1], e.hero, i[0].hero);
                e.highInfo = t
            })),
        i.sort((e, t) => {
            var i = R.squad.indexOf(e.hero.id),
            s = R.squad.indexOf(t.hero.id);
            return -1 != i && -1 != s ? t.hero.heroEquipAverage - e.hero.heroEquipAverage : -1 != s ? 1 : -1 != i ? -1 : t.hero.heroEquipAverage - e.hero.heroEquipAverage
        }),
        this.m_lst_Hero.array = i
    }
    onSelectHero() {
        if (-1 != this.m_lst_Hero.selectedIndex) {
            var i = this.m_lst_Hero.selectedIndex;
            let e = this.m_lst_Hero.getItem(this.m_selIndex),
            t = (e && (e.isSel = !1, this.m_lst_Hero.changeItem(this.m_selIndex, e)), this.m_selIndex = i, this.m_lst_Hero.getItem(i));
            if (this.m_needEle) {
                var s = this.m_lst_Hero.getCell(i),
                a = s.width * this.m_lst_Hero.scaleX,
                s = s.height * this.m_lst_Hero.scaleY,
                r = this.m_lst_Hero.height,
                n = this.m_lst_Hero.repeatX,
                o = this.m_lst_Hero.spaceX,
                l = this.m_lst_Hero.spaceY;
                let e = this.m_lst_Hero.scrollBar.value;
                var h = i % n,
                n = Math.floor(i / n) * (s + l),
                s = (n < e ? e = n : n + s > e + r && (l = n + s - (e + r), e += l), this.m_lst_Hero.scrollBar.value = e, this.m_lst_Hero.selectedIndex = -1, this.m_box_Oper.visible = !0, this.m_lst_Hero.x + h * (a + o)),
                r = this.m_lst_Hero.y + (n - e),
                l = (this.m_box_Show.pos(s, r), this.m_chooseItem = t, this.m_view_Skin.dataChanged(0, t), this.m_btn_ChangeHero.visible = this.m_selHeroId != t.hero.id, this.m_img_SkinTip.visible = t.highInfo.skinHigher, this.m_img_ChangeTip.visible = t.highInfo.heroHigher, 1 < t.hero.allSkins.length || 1 == t.hero.allSkins.length && -1 != t.hero.allSkins[0].id);
                this.m_btn_ChangeSkin.visible = l,
                this.m_btn_ChangeHero.y = l ? 340 : 270
            } else
                t.isSel = !0, this.m_ani_Change.isPlaying || this.m_ani_Change.play(0, !0), this.m_ani_Change.visible = !0, this.m_lst_Hero.changeItem(i, t), this.m_btn_Change.disabled = !1, this.m_lst_Hero.selectedIndex = -1
        }
    }
    onClickChange() {
        this.changeHero()
    }
    onClickMask() {
        this.m_box_Oper.visible = !1
    }
    onClickChangeSkin() {
        if (this.m_chooseItem) {
            let t = null;
            if (this.m_needEle) {
                var i,
                s = O.hero.getHero(this.m_selHeroId),
                a = {
                    0: _.earth,
                    1: _.water,
                    2: _.fire,
                    3: _.wind
                };
                let e = null;
                for (i in a)
                    a[i] == this.m_needEle[1] && (e = i);
                t = {
                    tEleIndex: e,
                    cHeroEle: s.wearingSkin && s.wearingSkin.eles[e] || 0
                }
            }
            u(xa, {
                params: [this.m_chooseItem.hero.id, 0, !0, t]
            }).then(e => {
                e.wait().then(e => {
                    var t;
                    e.type == d.Yes && e.data && (-1 != (t = this.m_sq.indexOf(e.data)) && (this.m_sq[t] = this.m_selHeroId), this.m_sq[this.m_selHeroIndex] = e.data, this.closeDialog(d.Yes, this.m_sq))
                })
            })
        }
    }
    onClickChangeHero() {
        this.changeHero()
    }
    changeHero() {
        var e = this.m_lst_Hero.getItem(this.m_selIndex).hero.id,
        t = this.m_sq.indexOf(e);
        -1 != t && (this.m_sq[t] = this.m_selHeroId),
        this.m_sq[this.m_selHeroIndex] = e,
        this.closeDialog(d.Yes, this.m_sq)
    }
}
class Aa extends t.hunt.views.fight.EnterAniUI {
    constructor(e) {
        super(),
        this.dataSource = e
    }
    onAwake() {
        super.onAwake(),
        this.doAniShow()
    }
    doAniShow() {
        let e = this.dataSource;
        this.setTeamInfo(e.self, this.m_box_Left),
        this.setTeamInfo(e.enemy, this.m_box_Right),
        this.ani1.play(0, !1),
        Laya.timer.once(2e3, this, () => {
            this.destroyed || (this.ani1.wrapMode = 1, this.ani1.play(0, !1), this.ani1.once(Laya.Event.COMPLETE, this, () => {
                    this.destroy(!0),
                    e.cb && e.cb()
                }))
        })
    }
    setTeamInfo(e, i) {
        var s = e.heroArr || [];
        for (let t = 0; t < i.numChildren; t++) {
            let e = i.getChildAt(t);
            s[t] ? e.dataChanged(null, {
                hero: s[t]
            }) : e.visible = !1
        }
    }
}
class Da extends t.hunt.views.fight.PvpBattleViewUI {
    onAwake() {
        super.onAwake();
        var e = T.battle.createOpt,
        t = new ce(e.title, !1);
        if (this.addChild(t), this.updateBlockInfo(e.blockId), e.logicMapType == Re.arena) {
            this.m_tick && this.m_tick.dispose(),
            this.m_view_Bar.m_txt_Time.visible = !0,
            this.m_view_Bar.m_img_Vs.visible = !1;
            let e = this.m_tick = Ei.create(1e3 * O.battle.arenaEndTime, 1e3, this.m_view_Bar.m_txt_Time, "ss");
            e.start(),
            e.onTick = e => {
                e <= 10 && this.m_view_Bar.ani1.play(0, !0)
            },
            e.onEnd = () => {
                this.m_view_Bar.ani1.gotoAndStop(0)
            }
        }
    }
    onDestroy() {
        super.onDestroy(),
        this.m_tick && this.m_tick.dispose()
    }
    updateBlockInfo(t) {
        t && O.block.reqBlockInfo(t).then(e => {
            this.destroyed || (this.m_view_Like.visible = !0, this.m_view_Like.setData(t, e), this.m_view_Comment.visible = !0, this.m_view_Comment.setData(t), this.m_view_Bag.visible = !0)
        })
    }
    updateHpInfo(e) {
        this.m_view_Bar.updateUIShow(e)
    }
    showKillAnime(e) {
        this.m_view_KillAnime.showKillAnime(e)
    }
    onClickBack() {
        T.end(!0),
        this.destroy()
    }
    showPickAni() {
        this.m_view_Bag.showPickAni && this.m_view_Bag.showPickAni()
    }
}
class La extends t.hunt.views.arena.ArenaBoxEnterDlgUI {
    constructor(e) {
        super(),
        this.m_num = 0,
        this.m_num = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        this.m_txt_Num.text = S(1095, this.m_num),
        this.m_view_Box.setData(Ut(+Data.gameConf.arenaCfg.winChestId, !0))
    }
    onClickBattle() {
        O.event(c.ARENA_BATTLE),
        this.closeDialog()
    }
}
class Ta extends t.hunt.views.arena.ArenaBuyDlgUI {
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        var e = Data.gameConf.arenaCfg,
        e = (this.m_txt_Price.text = e.buyBattleCountPrice, this.m_txt_Times.text = "+" + e.buyBattleAddCount, Ft(+e.buyBattleCountPrice));
        this.m_txt_Price.text = e[1],
        this.m_img_Price.skin = `hunt/ui_comm/money${e[0]}.png`
    }
    onClickBuy() {
        O.arena.reqBuyTimes().then(() => {
            this.closeDialog()
        })
    }
}
class Ea extends t.hunt.views.arena.ArenaHelpDlgUI {
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        var e = O.arena.arenaBase,
        t = Data.getArenaCupReward(e.cupReward + 1),
        e = (this.m_txt_Cup.changeText(e.cup + "/" + t.cup), t.chestId),
        t = (this.m_lst_Item.array = Ut(e), this.m_lst_Item.array.length);
        this.m_lst_Item.width = this.m_lst_Item.spaceX * (t - 1) + 100 * t,
        this.m_lst_Item.scrollBar.visible = !1,
        this.m_lst_Item.elasticEnabled = !1
    }
}
class Ma extends t.hunt.views.arena.ArenaRankDetailDlgUI {
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        let e = O.arena;
        var t = e.getArenaRankData();
        this.m_lst_Rank.array = t,
        this.m_txt_Rank.changeText(e.arenaBase.rank + ""),
        this.m_view_Rank.visible = 0 < e.arenaBase.rank,
        this.m_view_Rank.dataChanged(null, Data.getArenaMilitary(e.arenaBase.militaryGrade)),
        this.m_view_Rank.m_img_Bg.skin = "hunt/ui_comm/s9_bg19.png"
    }
}
class Ra extends t.hunt.views.arena.ArenaMainViewUI {
    constructor() {
        super(...arguments),
        this.m_selIndex = -1
    }
    onAwake() {
        super.onAwake(),
        this.updateView(),
        this.ani2.on(Laya.Event.COMPLETE, null, () => {
            Laya.timer.clear(this, this.playAni2Later),
            Laya.timer.once(5e3, this, this.playAni2Later)
        }),
        this.updateToady()
    }
    onDestroy() {
        super.onDestroy(),
        Laya.timer.clearAll(this),
        Laya.Tween.clearAll(this.m_img_Green),
        Laya.Tween.clearAll(this.m_img_Progress),
        this.tick && this.tick.dispose(),
        this.cupTicker && this.cupTicker.dispose()
    }
    updateView() {
        let e = O.arena;
        this.m_arena = e.arenaBase;
        var t = 0 < this.m_arena.militaryGrade ? this.m_arena.militaryGrade : 1;
        this.m_img_Progress.visible = this.m_arena.cupReward < Data.maxArenaMilitarys,
        this.m_box_Full.visible = this.m_arena.cupReward >= Data.maxArenaMilitarys,
        this.m_txt_Rank.text = S(Data.getArenaMilitary(t).name),
        this.m_img_Rank.skin = `hunt/ui_arena/tk${t}.png`,
        e.oldCup && e.oldCup != this.m_arena.cup && (this.m_txt_Score.text = e.oldCup + ""),
        this.updateProgress(this.m_arena.cup, e.oldCup),
        e.oldCup = 0,
        this.updateHeros({
            ids: this.m_arena.squad
        })
    }
    updateToady() {
        var e = +Data.gameConf.arenaCfg.battleCount,
        e = (this.m_txt_Count.text = "/" + e, O.arena.battleCount);
        this.m_txt_Left.text = e + "",
        this.m_txt_Left.color = 0 == e ? o.Red : o.White
    }
    updateReward() {
        var e = this.m_arena.chestNum,
        t = 0 < e;
        if (this.m_img_Winbox.visible = t, Laya.timer.clear(this, this.playAni2Later), t ? (Laya.timer.once(2e3, this, this.playAni2Later), this.m_ani_Battle.play(0, !0)) : (this.ani2.gotoAndStop(0), this.m_ani_Battle.gotoAndStop(0)), this.m_ani_Battle.visible = t, this.m_txt_Winbox.text = e + "", this.m_box_Time.visible = !e, !e) {
            this.tick && this.tick.dispose();
            let e = this.tick = Ei.create(1e3 * +this.m_arena.chestTime + 1e3 * +Data.gameConf.arenaCfg.winChestSpeed, 1e3, this.m_txt_Time);
            e.start(),
            e.onEnd = () => {
                O.arena.reqArenaInfo().then(() => {
                    this.updateView()
                })
            }
        }
    }
    updateHeros(e) {
        this.m_view_Change.setData(e.ids);
        let t = [],
        i = O.hero;
        var s;
        for (s of O.arena.arenaBase.squad)
            t.push({
                hero: s ? i.getHero(s) : null,
                isChange: !0
            });
        this.m_lst_Hero.array = t
    }
    updateProgress(a, r = 0) {
        let n = Data.getArenaCupReward(this.m_arena.cupReward + 1);
        if (this.m_box_Full.visible = !n, this.m_box_Progress.visible = !!n, this.m_txt_Progress.text = `${r||a}/` + n.cup, n) {
            var t = Data.getArenaCupReward(this.m_arena.cupReward);
            let s = t ? t.cup : 1e3,
            e = Math.min(1, Math.max(0, (r || a) - s) / (n.cup - s));
            this.m_img_Progress.visible = 1 != e,
            this.m_img_Green.skin = 1 == e ? "hunt/ui_comm/box_bar1.png" : "hunt/ui_comm/box_bar0.png",
            Laya.timer.clearAll(this),
            this.m_img_Green.width = 340 * e,
            this.m_img_Progress.x = this.m_img_Green.x + 340 * e,
            r && a != r ? Laya.timer.once(500, this, () => {
                if (!this.destroyed) {
                    e = Math.min(1, Math.max(0, a - s) / (n.cup - s)),
                    Laya.Tween.to(this.m_img_Green, {
                        width: 340 * e
                    }, 1e3),
                    Laya.Tween.to(this.m_img_Progress, {
                        x: this.m_img_Green.x + 340 * e
                    }, 1e3),
                    r < a && I.instance.playSound(v.SE_GetGem);
                    let t = Date.newDate().addMilliseconds(1e3).getTime(),
                    i = (this.cupTicker = Ei.create(t, 100), 0);
                    this.cupTicker.onTick = () => {
                        var e;
                        Date.newDate().getTime() >= t ? (this.m_txt_Progress.text = a + "/" + n.cup, this.m_txt_Score.text = a + "", this.updateFull(Math.min(1, Math.max(0, a - s) / (n.cup - s)))) : (e = Math.floor(r + (a - r) / 10 * i), this.m_txt_Score.text = e + "", this.m_txt_Progress.text = `${e}/${n.cup} `),
                        i++
                    },
                    this.cupTicker.start(),
                    this.cupTicker.onEnd = () => {
                        this.cupTicker && this.cupTicker.dispose()
                    }
                }
            }) : (this.m_img_Progress.x = Math.max(0, this.m_img_Green.x + this.m_img_Green.width), this.m_txt_Score.text = a + "", this.updateFull(e))
        }
    }
    updateFull(e) {
        var t = 1 <= e;
        (this.m_btn_Cupbox.mouseEnabled = t) ? this.ani1.play(0, !0) : this.ani1.gotoAndStop(0),
        this.m_img_Red.visible = t,
        this.m_img_Progress.visible = 1 != e,
        this.m_img_Green.skin = 1 == e ? "hunt/ui_comm/box_bar1.png" : "hunt/ui_comm/box_bar0.png"
    }
    onClickCupbox(e) {
        e.stopPropagation(),
        O.arena.reqGetCupBox().then(() => {
            this.updateView()
        })
    }
    onClickBg() {
        var e = O.arena.arenaBase;
        Data.getArenaCupReward(e.cupReward + 1) && u(Ea, {})
    }
    onClickWinBox() {
        u(La, {
            params: [+this.m_txt_Winbox.text]
        })
    }
    onClickMatch() {
        let t = O.arena;
        if (!t.battleCount)
            return t.battleBuyCount ? void u(Ta) : h(S(2053));
        O.arena && t.reqArenaMatchRival().then(i => {
            t.oldCup = t.arenaBase.cup;
            let s = [],
            a = [],
            r = (i.squad.forEach(e => {
                    var t = new Dt(e, i.rivalUser);
                    t.heroTable && (s.push(new Dt(e, i.rivalUser)), a.push(t.id))
                }), {
            info: i.rivalUser,
            heroArr: s
        }),
            n = [],
            o = [],
            l = (this.m_arena.squad.forEach(e => {
                    var t = O.hero.getHero(e);
                    t.heroTable && (o.push(O.hero.getHero(e)), n.push(t.id))
                }), {
            info: {
                name: R.name,
                militaryGrade: this.m_arena.militaryGrade,
                clubName: O.club.clubInfo && O.club.clubInfo.name,
                icon: R.icon,
                userId: R.id
            },
            heroArr: o
        });
            var e = {
                self: l,
                enemy: r,
                cb: () => {
                    hs.create(!0)
                }
            };
            E(Aa, {
                params: [e]
            }).then(t => {
                var e;
                s.length && (T.battle && T.battle.createOpt.logicMapType == Re.city && (w.set(w.s_enterFromCity, !0), T.end()), e = Data.getBattleMap(2), T.start({
                        title: S(2011),
                        mapId: +e.mapRes,
                        logicMapType: Re.arena,
                        logicMapId: i.mapLogicId,
                        selfData: l,
                        enemyData: r,
                        viewImpl: Da,
                        rank: +O.arena.myRank
                    }).then(e => {
                        e && (I.instance.playSound(v.SE_Battle), Se(t, H.Toast), O.event("closearena"))
                    }))
            })
        })
    }
    onSelectHero() {
        var e;
        O.hero.getHeroNum() <= 3 || -1 != this.m_lst_Hero.selectedIndex && (this.m_selIndex = this.m_lst_Hero.selectedIndex, e = this.m_lst_Hero.getItem(this.m_lst_Hero.selectedIndex), u(Sa, {
                params: [e.hero ? e.hero.id : 0, this.m_selIndex, O.arena.arenaBase.squad]
            }).then(e => {
                e.wait().then(e => {
                    e.type == d.Yes && O.arena.reqChangeHero(e.data)
                })
            }), this.m_lst_Hero.selectedIndex = -1)
    }
    playAni2Later() {
        this.destroyed || this.ani2.isPlaying || this.ani2.play(0, !1)
    }
    onClickHelp() {
        u(Ma)
    }
}
r([n(c.LOAD_ARENA)], Ra.prototype, "updateView", null),
r([n(c.BUY_ARENA)], Ra.prototype, "updateToady", null),
r([n(c.SELECT_HERO)], Ra.prototype, "updateHeros", null),
r([n(c.ARENA_BATTLE)], Ra.prototype, "onClickMatch", null);
class Ba extends t.hunt.views.arena.ArenaRecordDlgUI {
    onAwake() {
        super.onAwake(),
        this.addTitle(S(1087)),
        O.arena.reqRecord().then(e => {
            this.updateView(e)
        })
    }
    updateView(e) {
        this.m_txt_Num.changeText(e.totolNum + ""),
        this.m_txt_Rate.changeText( + (100 * e.winRate).toFixed(1) + "%"),
        this.m_lst_Record.array = e.recordList
    }
}
class Na extends t.hunt.views.card.HeroPropGrowDlgUI {
    constructor(e) {
        super(),
        this.m_heroData = O.hero.getHero(e)
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        this.m_lst_Prop.array = this.m_heroData.heroTable.props
    }
}
class Pa extends t.hunt.views.card.HeroPropViewUI {
    constructor(e) {
        super(),
        this.m_heroData = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        this.m_txt_Lv0.text = S(1042, ""),
        this.m_txt_Lv1.text = this.m_heroData.eatLvl + "",
        this.m_btn_Feed.visible = this.m_img_EatIco.visible = this.m_img_Tip.visible = !1,
        this.m_lst_Prop.array = this.m_heroData.heroAllProps
    }
    onClickInfo() {
        u(Na, {
            params: [this.m_heroData.id]
        })
    }
}
class qa extends t.hunt.views.card.HeroEquipPropDlgUI {
    constructor(e) {
        super(),
        this.m_heroData = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        let e = this.m_heroData.heroEquipProps;
        e.forEach(e => {
            e.isAdd = !0
        }),
        e.sort((e, t) => e.propId - t.propId),
        this.m_lst_Prop.array = e;
        var t = Math.ceil(e.length / 2),
        t = (this.m_lst_Prop.height = 40 * t + 20 * (t - 1), this.m_heroData.heroEquipSkills || []),
        i = (this.m_lst_Skill.array = t, Math.min(t.length, 4));
        this.m_lst_Skill.width = 100 * i + 5 * (i - 1),
        t.length && (this.height = 0 < t.length ? 500 : 380, this.m_lst_Prop.centerY = 0 < t.length ? -60 : 0)
    }
}
class Ua extends t.hunt.views.card.HeroEquipViewUI {
    constructor(e) {
        super(),
        this.m_heroData = e
    }
    onAwake() {
        super.onAwake(),
        this.m_box_Equip.on(Laya.Event.CLICK, this, this.onClickEquip),
        this.updateView()
    }
    onDestroy() {
        super.onDestroy(),
        this.m_box_Equip.off(Laya.Event.CLICK, this, this.onClickEquip)
    }
    updateView() {
        this.m_box_Con.visible = !0;
        let e = this.m_heroData.heroEquipProps;
        e.forEach(e => {
            e.isAdd = !0
        });
        var t = this.m_heroData.heroEquipInfos;
        for (let e = 0; e < t.length; e++)
            this["m_img_Equip" + e].visible = !t[e], t[e] ? this["m_view_Equip" + e].dataChanged(null, t[e]) : (this["m_view_Equip" + e].dataSource = null, this["m_view_Equip" + e].dataChanged()), this["m_img_Add" + e].visible = !1;
        this.m_img_Info.visible = !1
    }
    onClickEquip(e) {
        var e = e.target,
        t = e.dataSource;
        e && t && u(pa, {
            params: [{
                    itemId: t.itemId,
                    itemCfg: t.itemCfg
                }
            ]
        })
    }
    onClickInfo(e) {
        u(qa, {
            params: [this.m_heroData]
        })
    }
}
class Ha extends t.hunt.views.card.HeroSkillViewUI {
    constructor(e) {
        super(),
        this.m_heroData = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        let e = this.m_heroData.heroAndSkinSkill,
        t = [];
        e.forEach(e => {
            t.push({
                skillId: e,
                skillCfg: Data.getSkillExecute(e),
                showName: !0,
                showNew: !1
            })
        }),
        this.m_lst_Skill.array = t
    }
}
class Oa extends t.hunt.views.card.HeroInfoDlgUI {
    constructor(e) {
        super(),
        this.m_heroData = e
    }
    onAwake() {
        super.onAwake(),
        this.addTitle(S(this.m_heroData.heroTable.name));
        var e = Mmobay.adaptOffsetWidth;
        let i = this.m_tab_Info.items || [];
        if (0 < e) {
            var e = this.m_tab_Info.width + e,
            s = Math.ceil(e / i.length),
            e = s * i.length;
            this.m_tab_Info.width = e;
            for (let t = 0, e = i.length; t < e; t++) {
                let e = i[t];
                e.enableAnimating = !1,
                e.width = s,
                e.x = t * s,
                t == i.length - 1 && (e.disabled = !0)
            }
        } else
            i.forEach((e, t) => {
                e.enableAnimating = !1,
                t == i.length - 1 && (e.disabled = !0)
            });
        this.updateView()
    }
    updateView() {
        var e = `hunt/ui_hero/${this.m_heroData.avatarId}.png`;
        this.m_img_Hero.skin = e,
        this.m_box_Stack.setupCls([{
                    cls: Pa,
                    params: [this.m_heroData]
                }, {
                    cls: Ua,
                    params: [this.m_heroData]
                }, {
                    cls: Ha,
                    params: [this.m_heroData, !0]
                }
            ]),
        this.m_tab_Info.selectedIndex = 0
    }
    onSelectInfo(e) {
        this.setEquipAverage(),
        this.m_box_Prodece.visible = !1,
        this.m_box_Stack.changeIndex(e)
    }
    setEquipAverage() {
        var e;
        1 != this.m_tab_Info.selectedIndex ? this.m_box_Average.visible = !1 : (e = this.m_heroData.heroEquipAverage, this.m_box_Average.visible = 0 < e, this.m_txt_Average.text = e + "")
    }
}
class Va extends t.hunt.views.fight.ChangeHeroDetailDlgUI {
    constructor(e) {
        super(),
        this.m_heroArr = [],
        this.m_heroArr = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        this.m_btn_Start.label = S(1162),
        this.m_lst_Hero.array = this.getHero(),
        this.height = 450,
        this.m_btn_Start.visible = !0,
        this.m_txt_Tips.visible = !1,
        this.m_box_Ele.visible = !1
    }
    onSelectHero() {
        if (-1 != this.m_lst_Hero.selectedIndex) {
            var e = this.m_lst_Hero.getItem(this.m_lst_Hero.selectedIndex);
            if (e) {
                let t = this.m_heroArr;
                this.closeDialog(d.Yes),
                l(Oa, {
                    params: [e.hero]
                }).then(e => {
                    e.wait().then(() => {
                        u(Va, {
                            params: [t]
                        })
                    })
                })
            }
        }
    }
    onClickStart() {
        this.closeDialog(d.Yes)
    }
    getHero() {
        let t = [];
        for (let e = 0; e < this.m_heroArr.length; e++)
            this.m_heroArr[e] && t.push({
                isChange: !1,
                hero: this.m_heroArr[e],
                needEle: !1
            });
        return t
    }
}
class Fa extends t.hunt.views.arena.ArenaRankViewUI {
    onAwake() {
        super.onAwake(),
        O.arena.reqArenaRank().then(e => {
            this.updateView(e)
        })
    }
    onDestroy() {
        super.onDestroy(),
        this.tick && this.tick.dispose()
    }
    updateView(e) {
        let t = e.rankList,
        i = (this.updateTop(t.slice(0, 3)), this.m_lst_Rank.array = t, O.arena);
        var s = O.club.clubInfo ? O.club.clubInfo.name : "";
        this.m_view_Me.dataChanged(null, {
            rank: e.myRank,
            clubName: s,
            score: e.myScore,
            militaryGrade: i.arenaBase.militaryGrade,
            name: R.name,
            userId: R.id,
            icon: R.icon
        }),
        this.tick && this.tick.dispose();
        let a = this.tick = Ei.create(Wt(), 1e3, this.m_txt_Time, "D:HH:MM:ss");
        a.start(),
        a.onEnd = () => {
            i.reqArenaRank()
        },
        this.m_box_Time.visible = Wt() < Yt(),
        this.m_txt_End.visible = !this.m_box_Time.visible
    }
    updateTop(e) {
        var i = [256, 120, 390];
        for (let t = 0; t < 3; t++) {
            var s = e[t],
            a = t + 1;
            if (this["m_img_Top" + a].visible = !!s, !s)
                return;
            if (this["m_img_Head" + a].skin = `hunt/ui_arena/tk${s.militaryGrade}.png`, this["m_txt_Name" + a].text = s.name, s.squad[0]) {
                let e = Ee.create({
                    url: `hunt/role/${s.squad[0]}.json`
                });
                e.play(14, !0),
                e.scaleX = e.scaleY = .8,
                this.addChild(e),
                e.x = i[t],
                e.y = this["m_img_Top" + a].y + 80
            }
        }
    }
    onClickInfo() {
        u($i, {
            params: [!0]
        })
    }
    onClickRecord() {
        l(Ba)
    }
    onSelectRank() {
        var e;
        -1 != this.m_lst_Rank.selectedIndex && (e = this.m_lst_Rank.getItem(this.m_lst_Rank.selectedIndex)) && O.arena.reqArenaPlayerInfo(e.userId).then(e => {
            let t = [];
            (e.squad || []).forEach(e => {
                t.push(new Dt(e))
            }),
            u(Va, {
                params: [t]
            }),
            this.m_lst_Rank.selectedIndex = -1
        })
    }
}
r([n(c.ARENA_RANK)], Fa.prototype, "updateView", null);
class Ga extends t.hunt.views.arena.ArenaDlgUI {
    onAwake() {
        super.onAwake(),
        this.addTitle(S(2011)),
        O.club.reqClubInfo(),
        this.m_box_Stack.setupCls([{
                    cls: Ra
                }, {
                    cls: Fa
                }
            ]),
        this.m_tab_Tab.selectedIndex = 0
    }
    onSelectTab(e) {
        this.m_box_Stack.changeIndex(e)
    }
    closeArena() {
        this.closeDialog()
    }
}
r([n("closearena")], Ga.prototype, "closeArena", null);
class Wa extends ms {
    constructor() {
        super(...arguments),
        this.m_canClickMap = !0,
        this.m_npcCfg = [{
                npcId: -1,
                npcTitle: S(1127),
                name: "trader",
                showId: 1001,
                needGuide: !0,
                posInfo: {
                    x: 752,
                    y: 1320
                }
            }, {
                npcId: -2,
                npcTitle: S(1129),
                name: "earth",
                showId: 1005,
                element: _.earth,
                needGuide: !0,
                posInfo: {
                    x: 162,
                    y: 1070
                }
            }, {
                npcId: -3,
                npcTitle: S(1128),
                name: "fire",
                showId: 1003,
                element: _.fire,
                needGuide: !0,
                posInfo: {
                    x: 195,
                    y: 1920
                }
            }, {
                npcId: -4,
                npcTitle: S(1130),
                name: "wind",
                showId: 1006,
                element: _.wind,
                needGuide: !0,
                posInfo: {
                    x: 1226,
                    y: 1200
                }
            }, {
                npcId: -5,
                npcTitle: S(1131),
                name: "water",
                showId: 1004,
                element: _.water,
                needGuide: !0,
                posInfo: {
                    x: 1738,
                    y: 1920
                }
            }, {
                npcId: -6,
                npcTitle: "godness",
                name: "godness",
                showId: 1002,
                needGuide: !1,
                posInfo: {
                    x: 950,
                    y: 1670
                }
            }, {
                npcId: -7,
                npcTitle: "arena",
                name: "arena",
                build: "arena",
                needGuide: !1,
                posInfo: {
                    x: 630,
                    y: 370
                }
            }
        ],
        this.m_lastClick = null,
        this.m_heroObjs = {}
    }
    start() {
        super.start(),
        this.createNpc(),
        I.instance.playMusic(v.BGM_FairyLand)
    }
    dtor() {
        Laya.timer.clear(this, this.checkDisToNpc),
        this.m_heroObjs = {},
        super.dtor()
    }
    createSelfRoles(e) {
        e.forEach(e => {
            this.m_heroObjs[e.id] = e
        });
        var e = e[0],
        t = Data.getCharType(e.showId),
        t = {
            rid: e.id,
            showId: e.showId,
            speed: t.moveSpeed,
            type: ht.Hero,
            x: e.location.x,
            y: e.location.y,
            group: mt.Self,
            isMain: !0,
            cInfos: [],
            dir: ct.Down,
            userId: R.id,
            nameType: _t.City,
            name: R.name,
            skillIds: e.skillIds || []
        },
        e = L.createCityRole(t);
        this.setDefaultProp(e)
    }
    otherHeroEnter(e) {
        e.forEach(e => {
            this.m_heroObjs[e.id] = e
        }),
        e.forEach(e => {
            var t;
            L.getRoleById(e.id) || (t = Data.getCharType(e.showId), t = {
                    rid: e.id,
                    showId: e.showId,
                    size: t.shapRadius,
                    speed: t.moveSpeed,
                    type: ht.Hero,
                    x: e.location.x,
                    y: e.location.y,
                    group: mt.Enemy,
                    isMain: !1,
                    cInfos: [],
                    dir: ct.Down,
                    userId: e.userId,
                    nameType: _t.City,
                    name: e.name,
                    lvl: e.level
                }, e = L.createHero(t), this.setDefaultProp(e))
        })
    }
    changeHeroInfo(e) {
        (e.heros || []).forEach(e => {
            var t = L.getRoleById(e.id);
            t && L.removeRole(t),
            this.m_heroObjs[e.id] && (Object.assign(this.m_heroObjs[e.id], e), e.userId == R.id ? this.createSelfRoles([this.m_heroObjs[e.id]]) : this.otherHeroEnter([this.m_heroObjs[e.id]]))
        })
    }
    setDefaultProp(e) {
        e && e.propData && e.propData.setTo(10, 10, 0, 10, 13500, 1e4)
    }
    npcsEnter(e) {
        e.forEach(e => {
            var t,
            i;
            L.getRoleById(e.id) || (t = Data.getCharType(e.showId), i = e.userId == R.id ? mt.Self : mt.Enemy, i = {
                    rid: e.id,
                    userId: e.userId,
                    showId: t.avatar || t.icon,
                    scale: t.shapScale / yt,
                    speed: t.moveSpeed,
                    size: t.shapRadius,
                    type: ht.Hero,
                    x: e.location.x,
                    y: e.location.y,
                    group: i,
                    isMain: !1,
                    cInfos: [],
                    dir: ct.Down,
                    nameType: _t.City,
                    name: S(t.name),
                    lvl: e.level
                }, L.createMonster(i))
        })
    }
    clearMapLoop() {
        Laya.timer.clear(this, this.checkDisToNpc),
        this.m_lastClick = null
    }
    createNpc() {
        this.m_npcCfg.forEach((i, e) => {
            if (i.element) {
                var t = {
                    [_.earth]: 0,
                    [_.fire]: 1,
                    [_.water]: 2,
                    [_.wind]: 3
                };
                let e = Ee.create({
                    url: "hunt/worldmap/spine/mistery.json",
                    offset: [-50, -50]
                });
                e.size(200, 200).pivot(100, 100),
                e.x = i.posInfo.x,
                e.y = i.posInfo.y - 80,
                e.play(t[i.element], !0),
                e.npcInfo = i,
                e.on(Laya.Event.CLICK, this, this.onClickNpc),
                L.mapview.extLayer.addChild(e)
            } else if (i.build) {
                let e = new Laya.Image,
                t = (e.anchorX = .5, e.anchorY = .5, e.skin = "hunt/ui_mistery/arenaBase.png", e.pos(i.posInfo.x, i.posInfo.y - 30), L.mapview.extLayer.addChild(e), Ee.create({
                        url: "hunt/worldmap/spine/jingjichang.json",
                        offset: [-100, -100]
                    }));
                t.size(300, 300).pivot(150, 150),
                t.x = i.posInfo.x,
                t.y = i.posInfo.y - 100,
                t.play(0, !0),
                t.npcInfo = i,
                t.on(Laya.Event.CLICK, this, this.onClickNpc),
                L.mapview.extLayer.addChild(t)
            }
            if (i.showId) {
                t = {
                    rid: i.npcId,
                    showId: i.showId,
                    speed: 0,
                    type: ht.Npc,
                    x: i.posInfo.x,
                    y: "trader" != i.name ? i.posInfo.y - 230 : i.posInfo.y,
                    isMain: !1,
                    cInfos: [],
                    dir: ct.Down
                };
                let e = L.createCityRole(t);
                e.root.npcInfo = i,
                e.root.on(Laya.Event.CLICK, this, this.onClickNpc)
            }
        }),
        this.battleUI && this.battleUI.showNpcList(this.m_npcCfg)
    }
    onClickNpc(e) {
        e.stopPropagation(),
        e.target.npcInfo && this.startLoopCheck(e.target)
    }
    startLoopCheck(e) {
        this.m_lastClick = e;
        let t = L.getMainRole(),
        i = 0;
        this.m_lastClick instanceof Ee || "trader" == this.m_lastClick.npcInfo.name || "godness" == this.m_lastClick.npcInfo.name ? i = 100 : "trader" != this.m_lastClick.npcInfo.name && (i = 230),
        t.entity.role.rsyncMove(this.m_lastClick.x, this.m_lastClick.y + i),
        Laya.timer.clear(this, this.checkDisToNpc),
        Laya.timer.frameLoop(12, this, this.checkDisToNpc),
        this.checkDisToNpc()
    }
    checkDisToNpc() {
        var a = L.getMainRole();
        let e = 0;
        if (this.m_lastClick instanceof Ee || "trader" == this.m_lastClick.npcInfo.name || "godness" == this.m_lastClick.npcInfo.name ? e = 100 : "trader" != this.m_lastClick.npcInfo.name && (e = 230), vt(a.root.x, a.root.y, this.m_lastClick.x, this.m_lastClick.y + e) < 100) {
            let e = L.getMainRole(),
            t = (e.entity.role.rsyncMove(e.root.x, e.root.y), Laya.timer.clear(this, this.checkDisToNpc), w.get(w.s_talkNpcRecord) || {}),
            i = this.m_lastClick.npcInfo;
            a = t[i.npcId];
            let s = () => {
                i.element ? u(da, {
                    params: [i]
                }) : "trader" == i.name ? l(ya) : "godness" == i.name ? l(Qi) : "arena" == i.name ? O.arena.reqArenaInfo().then(() => {
                    l(Ga)
                }) : "magicField" == i.name && (T.end(!0, !0), we(as))
            };
            !a && i.talkId ? (t[i.npcId] = 1, w.set(w.s_talkNpcRecord, t), Ri.showTalk(i.talkId, () => {
                    s()
                })) : s(),
            this.m_lastClick = null
        }
    }
    getLabel() {
        let e = new Laya.Label;
        return e.anchorX = e.anchorY = .5,
        e.bold = !0,
        e.color = "#FFF",
        e.centerX = 0,
        e.stroke = 2,
        e
    }
}
class Ya extends D {
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/flyCommBeAtk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y,
            autoPlay: !0,
            autoRemove: !0,
            interval: 50
        }),
        e.mainTarget && e.mainTarget.rid != t.rid || (b.create({
                url: "hunt/effect/flyCommBeAtk.atlas",
                parent: t.root.parent,
                px: t.root.x,
                py: t.root.y,
                autoPlay: !0,
                autoRemove: !0,
                scale: 3.2
            }), I.instance.playSound(v.SE_FireballHit))
    }
    play() {
        let e = this.m_data.source;
        e.changeState(f.Attack)
    }
    showEvent(e) {
        var t = L.getRoleById(e.srcID),
        i = L.getRoleById(e.targetID),
        s = t.root.x,
        a = t.root.y;
        b.createFlyEffectNew({
            url: "hunt/effect/1020_fly.atlas",
            parent: t.root.parent,
            loop: !0,
            autoPlay: !0,
            px: s,
            py: a,
            interval: 50,
            scale: 1.5
        }, t, i, e.evtPara1)
    }
}
class Xa extends _s {
    constructor() {
        super(...arguments),
        this.m_canClickMap = !1
    }
    dtor() {
        super.dtor(),
        this.m_selfData = null,
        this.m_enemyData = null
    }
    updateHpInfo() {
        if (this.m_hpRecord) {
            let e = this.m_battleUI;
            var t = this.getSelfData().info,
            i = this.getEnemyData().info,
            t = {
                leftInfo: {
                    name: t.name,
                    totalHp: this.m_hpRecord[t.userId],
                    curHp: this.getCurHpByUserId(t.userId),
                    showId: t.icon
                },
                rightInfo: {
                    name: i.name,
                    totalHp: this.m_hpRecord[i.userId],
                    curHp: this.getCurHpByUserId(i.userId),
                    showId: i.icon
                }
            };
            e && e.updateHpInfo(t)
        }
    }
    showKillAnime(e) {
        let t = this.m_battleUI;
        var i = this.m_logicIdShowMap[e.srcId],
        e = this.m_logicIdShowMap[e.targetId];
        t && i && e && t.showKillAnime({
            isLeft: i.userId == R.id,
            atkShowId: i.showId,
            tarShowId: e.showId
        })
    }
    createSelfRoles(e) {
        super.createSelfRoles(e);
        let t = L.getArrRole(ht.Hero, mt.Self);
        t.forEach(e => {
            let t = e.entity.getComponent(k.AI);
            t && (t.noFollow = !0)
        })
    }
    npcsEnter(e) {
        e.forEach((e, t) => {
            var i,
            s;
            L.getRoleById(e.id) || (i = Data.getCharType(e.showId), s = {
                    rid: e.id,
                    userId: e.userId || -1,
                    showId: i.avatar || i.icon,
                    speed: i.moveSpeed,
                    size: i.shapRadius,
                    type: ht.Hero,
                    x: e.location.x,
                    y: e.location.y,
                    group: mt.Enemy,
                    isMain: !1,
                    cInfos: [],
                    dir: ct.DownRight,
                    nameType: _t.Comm,
                    name: S(i.name),
                    lvl: e.level,
                    dropInfo: null
                }, this.m_logicIdShowMap[e.id] = {
                    userId: e.userId,
                    showId: i.avatar || i.icon
                }, L.createMonster(s))
        });
        e = {
            name: S(1153),
            icon: e[1].showId,
            userId: -1
        };
        this.m_enemyData = {
            info: e
        }
    }
    getSelfData() {
        return this.m_selfData || (this.m_selfData = {
                info: {
                    name: R.name,
                    icon: R.icon,
                    userId: R.id
                }
            }, this.m_selfData)
    }
    getEnemyData() {
        if (this.m_enemyData)
            return this.m_enemyData
    }
}
class ja extends t.hunt.views.fight.BoxPickInBattleUI {
    constructor(e) {
        super(),
        this.m_boxInfo = e,
        this.on(Laya.Event.CLICK, this, this.clickTargetBox),
        this.anchorX = this.anchorY = .5,
        this.zOrder = 99999,
        this.visible = !1
    }
    get boxInfo() {
        return this.m_boxInfo
    }
    onAwake() {
        super.onAwake(),
        this.updateUIShow(this.m_boxInfo)
    }
    clickTargetBox(e) {
        console.log("onclick box:", this.m_boxInfo),
        T.battle.createOpt.logicMapType == Re.worldBoss && T.battle.pickBox(this),
        e.stopPropagation()
    }
    updateUIShow(e) {
        var t;
        0 == (this.m_boxInfo = e).state || 2 == e.state ? (this.m_btn_Pick.visible = !0, this.m_box_Picking.visible = !1, this.m_img_Bar.visible = !1, this.stopPickAni(), this.beforeAni.isPlaying || this.beforeAni.play(0, !0)) : 1 == e.state && (this.beforeAni.stop(), this.m_img_Bar.skin = e.picker == R.id ? "hunt/ui_fight/pick_circle.png" : "hunt/ui_fight/pick_circle2.png", this.m_img_Bg.skin = e.picker == R.id ? "hunt/ui_fight/pick_hand.png" : "hunt/ui_fight/pick_hand2.png", this.m_btn_Pick.visible = !1, this.m_box_Picking.visible = !0, e.pickTime, t = +e.pickDuration, e = +e.leftTime, this.doPickAni(t / 1e3, e / 1e3))
    }
    doPickAni(e, t) {
        this.stopPickAni();
        let i = new Laya.Sprite;
        this.m_img_Bar.mask = i;
        var s = 360 / e;
        let a = s * (e - t) - 90,
        r = s / 20;
        e = Date.newDate().addSeconds(t).getTime();
        this.m_ticker = Ei.create(e, 50),
        this.m_ticker.onTick = () => {
            a += r,
            i.graphics.clear(),
            i.graphics.drawPie(45, 45, 45, -90, a, "#FFFFFF"),
            270 <= a && this.m_ticker.dispose()
        },
        this.m_ticker.start(),
        this.m_img_Bar.visible = !0
    }
    stopPickAni() {
        this.m_ticker && (this.m_ticker.dispose(), this.m_ticker = null),
        this.m_img_Bar.mask = null,
        this.m_img_Bar.visible = !1
    }
}
class Ka extends ms {
    constructor() {
        super(...arguments),
        this.m_needTarget = !0,
        this.m_canClickMap = !0,
        this.m_lastPick = null,
        this.m_boxListObj = {}
    }
    start() {
        super.start()
    }
    end(e) {
        this.m_state = pt.end,
        this.createOpt.blockId && O.report.done(!0),
        T.end(!0),
        h(S(79))
    }
    npcsEnter(e) {
        e.forEach(e => {
            var t,
            i;
            L.getRoleById(e.id) || (t = Data.getCharType(e.showId), i = {
                    rid: e.id,
                    userId: e.userId,
                    showId: t.avatar || t.icon,
                    scale: t.shapScale / yt,
                    speed: t.moveSpeed,
                    size: t.shapRadius,
                    type: ht.Boss,
                    x: e.location.x,
                    y: e.location.y,
                    group: mt.Enemy,
                    isMain: !1,
                    cInfos: [],
                    dir: ct.Down,
                    nameType: _t.Boss,
                    name: S(t.name),
                    lvl: e.level
                }, this.m_logicIdShowMap[e.id] = {
                    userId: e.userId,
                    showId: t.avatar || t.icon
                }, L.createMonster(i))
        }),
        this.updateUserList()
    }
    checkAniPlayInBattle(e, t) {
        let i = !0;
        e = L.getRoleById(e),
        t = L.getRoleById(t),
        e = this.getPlayerInfo(e.userId),
        t = this.getPlayerInfo(t.userId);
        return i = e && (e.targetId == R.id || e.id == R.id) || t && (t.targetId == R.id || t.id == R.id) ? !1 : i
    }
    updateHpInfo() {
        if (this.m_hpRecord) {
            let e = this.m_battleUI;
            e && e && e.updateHpInfo()
        }
    }
    updateUserList() {
        let e = this.m_battleUI;
        e && e.updateRoleList()
    }
    updateBossInfo(e) {
        let t = this.m_battleUI;
        t && t.updateBossInfoShow(e)
    }
    createBoxDrop(e) {
        let r = !1;
        (e.chests || []).forEach(i => {
            this.m_boxListObj || (this.m_boxListObj = {});
            let s = this.m_boxListObj;
            if (!s[i.id]) {
                r = !0;
                var a = Data.getItem(i.itemId);
                let e = new Laya.Image,
                t = (e.skin = `hunt/ui_item/${a&&a.icon||1}.png`, e.anchorX = e.anchorY = .5, new ja(i));
                a = Ci.create({
                    itemId: i.itemId,
                    itemNum: 1,
                    fromPos: {
                        x: i.location.x,
                        y: i.location.y
                    },
                    isAuto: !1,
                    isBossBox: !0,
                    exView: t,
                    exData: i
                });
                s[i.id] = {
                    boxItem: t,
                    boxInfo: i,
                    loot: a
                },
                t.pos(i.location.x, i.location.y - 60),
                L.mapview.addExtChild(t)
            }
        }),
        r && I.instance.playSound(v.SE_WorldChest)
    }
    removeBoxDrop(e) {
        (e.ids || []).forEach(e => {
            for (var i in this.m_boxListObj)
                if (+i == e) {
                    let e = this.m_boxListObj[i],
                    t = e.loot;
                    e.boxItem.destroy(),
                    e.boxInfo.picker == R.id ? (t.bossBoxFly(), I.instance.playSound(v.SE_GetChest)) : t.recover(),
                    delete this.m_boxListObj[i]
                }
        })
    }
    updateBoxDrop(e) {
        (e.propertys || []).forEach(i => {
            for (var s in this.m_boxListObj)
                if (+s == i.id) {
                    var a = this.m_boxListObj[s].boxInfo;
                    let e = i,
                    t = (e.state = e.state || 0, e.picker = e.picker || 0, this.m_boxListObj[s].boxInfo = Object.assign(a, e), this.m_boxListObj[s].boxItem);
                    t.updateUIShow && t.updateUIShow(this.m_boxListObj[s].boxInfo)
                }
        })
    }
    pickBox(i) {
        if (i && i.boxInfo && i.boxInfo.picker != R.id)
            if (i.boxInfo.picker)
                O.battle.reqLockTarget(i.boxInfo.picker);
            else {
                O.battle.reqLockTarget();
                let t = L.getMainRole();
                var e = vt(t.root.x, t.root.y, i.x, i.y);
                if (Laya.timer.clear(this, this.pickLoop), 100 < e)
                    t.doRoleMove(i.x, i.y), this.m_lastPick = i, Laya.timer.frameLoop(12, this, this.pickLoop);
                else if (i.boxInfo && i.boxInfo.id) {
                    let e = t.entity.getComponent(k.AI);
                    e.resetClickLaterMove(),
                    O.battle.reqPickChest(i.boxInfo.id)
                } else
                    console.warn("error box data", i.boxInfo)
            }
    }
    pickLoop() {
        var e = L.getMainRole(),
        s = this.m_lastPick;
        if (s && e) {
            e = vt(e.root.x, e.root.y, s.x, s.y);
            let t = L.getArrRole(ht.Hero, mt.Self),
            i = !0;
            for (let e = 0; e < t.length; e++)
                if (t[e].entity.getComponent(k.State).state != f.Idle) {
                    i = !1;
                    break
                }
            if (e < 100 && i) {
                let e = L.getMainRole();
                e.entity.role.rsyncMove(e.root.x, e.root.y),
                Laya.timer.clear(this, this.pickLoop),
                console.log("move end"),
                s.boxInfo && s.boxInfo.id ? O.battle.reqPickChest(s.boxInfo.id) : console.warn("error box data", s.boxInfo),
                this.m_lastPick = null
            }
        } else
            Laya.timer.clear(this, this.pickLoop)
    }
    heroRevive() {
        let e = this.m_battleUI;
        e && e.hideDieBg()
    }
    showBattleEvent(t) {
        let e = this.m_battleUI;
        if (1 != t.evt || t.targetId != T.battle.selfTarget && t.attackId != R.id && t.targetId != R.id || (T.battle.selfTarget = 0), e) {
            e.showKillAnime(t),
            t.evt == Me.kill ? t.targetId == R.id && e.showChestBeRobbed(t) : t.evt == Me.luck && (e.showFinalAnime(t), I.instance.playMusic(v.BGM_Win, 1, Laya.Handler.create(this, () => {
                        I.instance.playMusic(v.BGM_BattleBoss, 1)
                    })));
            var i = L.getMainRole();
            if (i && R.id == t.attackId && Object.keys(t.robItems).length)
                for (var s in t.robItems) {
                    for (let e = 0; e < t.robItems[s]; e++)
                        Ci.create({
                            itemId: +s,
                            itemNum: 1,
                            fromPos: {
                                x: i.root.x + Math.randRange(-100, 100),
                                y: i.root.y + Math.randRange(-100, 100)
                            },
                            isAuto: !0,
                            isBossBox: !0
                        });
                    I.instance.playSound(v.SE_GetChest)
                }
        }
    }
    checkBoxState() {}
    checkPick() {
        Laya.timer.clear(this, this.pickLoop);
        let e = null;
        for (var t in this.m_boxListObj) {
            t = this.m_boxListObj[t].boxInfo;
            t.picker == R.id && (e = t)
        }
        (this.lastPick && !e || e && this.lastPick == e.id) && O.battle.reqCancelPickChest(this.lastPick),
        e && O.battle.reqCancelPickChest(e.id)
    }
    checkIsPicking() {
        let e = !1;
        for (var t in this.m_boxListObj)
            this.m_boxListObj[t].boxInfo.picker == R.id && (e = !0);
        return e
    }
}
class za extends D {
    static attackedAni(e, t) {
        b.create({
            url: "hunt/effect/1140_beAtk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y,
            autoPlay: !0,
            autoRemove: !0,
            interval: 50,
            scale: 1.5
        }),
        It(L.mapview, 2, 200)
    }
    play() {
        let e = this.m_data.source;
        var t = this.m_data.targets[0];
        let i = {
            x: t.root.x,
            y: t.root.y
        };
        this.needWarningCircle(() => {
            b.create({
                url: "hunt/effect/9001_atk.atlas",
                parent: e.root.parent,
                px: i.x,
                py: i.y,
                scale: 3,
                autoPlay: !0,
                autoRemove: !0,
                interval: 100
            }),
            I.instance.playSound(v.SE_GianSwordHit)
        })
    }
}
class $a extends D {
    static attackedAni(e, t) {}
    play() {
        let e = this.m_data.source;
        var t = this.m_data.targets[0];
        e.changeState(f.Attack),
        b.create({
            url: "hunt/effect/2080_atk.atlas",
            parent: t.root.parent,
            px: t.root.x,
            py: t.root.y - 30,
            autoPlay: !0,
            autoRemove: !0,
            scale: 1.5,
            interval: 75
        })
    }
}
class Qa extends t.hunt.views.common.LoadingViewUI {
    static show() {
        if (Qa.s_count++, Qa.s_instance)
            Qa.s_instance.play();
        else {
            let e = new Qa;
            e.openView().then(() => {
                Qa.s_instance || Qa.s_count <= 0 ? e.destroy() : (Se(Qa.s_instance = e, H.Loading), e.play())
            })
        }
    }
    static reduce() {
        Qa.s_count = Math.max(Qa.s_count - 1, 0),
        !Qa.s_instance || 0 < Qa.s_count || Qa.s_instance.stop()
    }
    static clear() {
        Qa.s_instance && (Qa.s_count = 0, Qa.s_instance.stop())
    }
    play() {
        this.visible = !0,
        this.ani1.isPlaying || this.ani1.play(0, !0)
    }
    stop() {
        this.visible = !1,
        this.ani1.stop()
    }
}
Qa.s_count = 0;
class Ja extends t.hunt.views.common.MsgBoxUI {
    constructor(e) {
        super(),
        this.m_option = e
    }
    onAwake() {
        super.onAwake(),
        this.m_option.disCloseOnSide && (this.closeOnSide = !1),
        this.m_option.leading && (Ja.s_style.leading = this.m_option.leading),
        this.m_option.fontSize && (Ja.s_style.fontSize = this.m_option.fontSize),
        Object.assign(this.m_div_Msg.style, Ja.s_style),
        this.m_div_Msg.innerHTML = this.m_option.msg,
        this.m_option.title && (this.m_txt_Title.text = this.m_option.title),
        this.m_btn_Close.visible = !this.m_option.hideClose;
        var e = (this.m_option.button & V.Yes) == V.Yes,
        t = (this.m_option.button & V.No) == V.No;
        this.m_btn_Sure.visible = e,
        this.m_btn_Cancel.visible = t,
        this.m_option.okTxt && (this.m_btn_Sure.label = this.m_option.okTxt),
        e && !t && (this.m_btn_Sure.centerX = 0),
        !e && t && (this.m_btn_Cancel.centerX = 0),
        this.m_div_Msg.x = (this.m_pan_Msg.width - this.m_div_Msg.contextWidth) / 2,
        this.m_div_Msg.y = Math.max(0, (this.m_pan_Msg.height - this.m_div_Msg.contextHeight) / 2)
    }
    onClickSure(e) {
        this.closeDialog(d.Yes)
    }
    onClickCancel(e) {
        this.closeDialog(d.No)
    }
}
Ja.s_style = {
    fontSize: 24,
    bold: !0,
    color: "#ffffff",
    leading: 4,
    wordWrap: !0
};
class Za extends t.hunt.views.store.StoreDlgUI {
    onAwake() {
        super.onAwake(),
        this.addTitle(S(1158)),
        this.m_lst_Item.array = R.getPurchaseGoods(),
        this.updateView()
    }
    updateView() {
        var e = R.diamond;
        this.m_txt_Diamond.text = e + ""
    }
    updateList() {
        this.m_lst_Item.array = R.getPurchaseGoods()
    }
}
r([n(c.DIAMOND_CHANGE)], Za.prototype, "updateView", null),
r([n(c.UPDATE_STORE_LIST)], Za.prototype, "updateList", null);
class er extends t.hunt.views.menu.UserMenuUI {
    onAwake() {
        super.onAwake(),
        this.hitTestPrior = !1,
        this.top = 0,
        this.centerX = 0,
        this.m_box_Bg.width += Mmobay.adaptOffsetWidth,
        this.m_box_Token.x += .5 * Mmobay.adaptOffsetWidth,
        this.m_box_Bind.x += .5 * Mmobay.adaptOffsetWidth,
        this.m_box_Diamond.x += .5 * Mmobay.adaptOffsetWidth,
        Mmobay.MConfig.openPurchase ? (this.m_box_Token.destroy(), this.m_box_Bind.destroy(), this.m_box_Diamond.visible = !0, Mmobay.MConfig.channelId == Mmobay.MConst.CHANNEL_FBINSTANT && Laya.Browser.onIOS && (this.m_box_Diamond.mouseEnabled = !1, this.m_btn_Diamond.visible = !1), this.updateDiamond()) : (this.m_box_Diamond.destroy(), this.updateTapToken())
    }
    updateTapToken() {
        if (!Mmobay.MConfig.openPurchase) {
            let e = R.tapToken;
            this.m_txt_Token.text = e.toFixed(4) + "";
            var t = e <= 0 && !O.account.wallet;
            this.m_box_Token.visible = !t,
            this.m_box_Bind.visible = t
        }
    }
    updateDiamond() {
        if (Mmobay.MConfig.openPurchase) {
            var t = R.diamond;
            this.m_txt_Diamond.text = t + "";
            let e = !t;
            Mmobay.MConfig.channelId == Mmobay.MConst.CHANNEL_FBINSTANT && Laya.Browser.onIOS && (e = !1),
            this.m_txt_Diamond.visible = !e,
            this.m_txt_Recharge.visible = e
        }
    }
    onClickToken(e) {
        var t,
        i = R.tapToken;
        i < 1 || (t = {
                itemId: t = p.tapToken,
                itemCfg: Data.getItem(t),
                itemNum: i,
                withdrawal: !0
            }, u(fa, {
                params: [t]
            }))
    }
    onClickBind(e) {
        u(va, {
            clearPopup: !0
        })
    }
    onClickDiamond(e) {
        l(Za, {
            clearPopup: !0
        })
    }
}
r([n(c.TAP_TOKEN_CHANGE)], er.prototype, "updateTapToken", null),
r([n(c.DIAMOND_CHANGE)], er.prototype, "updateDiamond", null);
class tr extends t.hunt.views.card.HeroCardsDlgUI {
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        let e = O.hero.allHeros || [],
        t = [];
        e.forEach(e => {
            t.push({
                showForList: !0,
                hero: e,
                showRed: !0
            })
        }),
        t.sort((e, t) => {
            e = e.hero,
            t = t.hero;
            return e.heroEquipAverage && t.heroEquipAverage ? t.heroEquipAverage - e.heroEquipAverage : e.heroEquipAverage ? -1 : t.heroEquipAverage ? 1 : e.eatLvl && t.eatLvl ? t.eatLvl - e.eatLvl : e.eatLvl ? -1 : t.eatLvl ? 1 : e.id - t.id
        }),
        this.m_lst_Hero.array = t,
        this.m_lst_Hero.visible = 0 < t.length
    }
}
r([n(c.HERO_CHANGE)], tr.prototype, "updateView", null);
class ir extends t.hunt.views.food.FoodUnLockDlgUI {
    constructor(e) {
        super(),
        this.m_food = e[0],
        this.m_formula = e[1]
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        var e,
        t = this.m_food.id;
        this.m_view_Item.setData({
            itemId: t,
            itemCfg: Data.getItem(t)
        });
        let i = [];
        for (e of Object.keys(this.m_formula))
            i.push({
                itemId: e,
                itemCfg: Data.getItem(+e),
                itemNum: this.m_formula[e]
            });
        this.m_lst_Food.array = i;
        var s = Data.gameConf.shareCfg.food.split(",");
        this.m_img_Icon.skin = `hunt/ui_item/${Data.getItem(+s[0]).icon}.png`,
        this.m_txt_Share.changeText(s[1]),
        this.m_txt_Sort.changeText(S(1046, t - 4e3))
    }
    onClickShare() {
        this.closeDialog()
    }
}
class sr extends t.hunt.views.food.FoodCreateDlgUI {
    constructor() {
        super(...arguments),
        this.m_boxFoods = [],
        this.m_baseData = []
    }
    onAwake() {
        super.onAwake(),
        this.addTitle(S(1048)),
        this.m_lst_Type.array = O.food.getFoodTypes(),
        this.m_lst_Type.height = 40 * this.m_lst_Type.array.length,
        this.initFoodBox(),
        this.m_btn_Make.gray = !0,
        this.updateView()
    }
    onDestroy() {
        super.onDestroy(),
        this.offAll(),
        this.m_ani_Make.offAll(),
        this.ani1.offAll()
    }
    initFoodBox() {
        let e = this.m_view_Food0,
        t = (e.m_pos = 0, this.m_view_Food1),
        i = (t.m_pos = 1, this.m_view_Food2);
        i.m_pos = 2,
        this.updateFoodBox()
    }
    deleteFoodBox(e) {
        let i = this.m_boxFoods[e].item.itemId;
        if (this.m_lst_Food.array.find(e => e.itemId == i))
            for (let t = 0; t < this.m_lst_Food.array.length; t++) {
                let e = this.m_lst_Food.getItem(t);
                if (e.itemId == i) {
                    var s = e.itemNum;
                    this.updateBase(i),
                    e.itemNum = s + 1,
                    this.m_lst_Food.changeItem(t, e);
                    break
                }
            }
        else
            this.updateBase(i);
        this.m_boxFoods[e] = null,
        this.m_boxFoods = this.m_boxFoods.filter(e => !!e),
        this.updateFoodBox(),
        0 == this.m_boxFoods.length && (this.m_btn_Make.gray = !0)
    }
    updateBase(t) {
        for (let e = 0; e < this.m_baseData.length; e++)
            if (this.m_baseData[e].itemId == t) {
                var i = this.m_baseData[e].itemNum;
                this.m_baseData[e].itemNum = i + 1;
                break
            }
    }
    updateFoodBox() {
        for (let t = 0; t < 3; t++) {
            let e = this["m_view_Food" + t];
            e.visible = !!this.m_boxFoods[t],
            this.m_boxFoods[t] && e.dataChanged(null, this.m_boxFoods[t])
        }
        this.m_box_Make.refresh()
    }
    updateView() {
        this.m_baseData = O.food.getFoodBag(),
        this.m_lst_Food.array = O.food.getFoodBag().filter(e => e.itemNum)
    }
    onSelectFood() {
        var e = this.m_lst_Food.selectedIndex;
        if (-1 != e) {
            let t = this.m_lst_Food.getItem(e);
            var i = t.itemId;
            if (t.itemNum) {
                if (3 <= this.m_boxFoods.filter(e => !!e).length)
                    return h(S(1049)), void(this.m_lst_Food.selectedIndex = -1);
                t.itemNum--,
                this.m_lst_Food.changeItem(e, t);
                for (let e = 0; e < this.m_baseData.length; e++)
                    if (this.m_baseData[e].itemId == i) {
                        this.m_baseData[e].itemNum = t.itemNum;
                        break
                    }
                this.m_boxFoods.push({
                    index: e,
                    item: {
                        itemCfg: t.itemCfg,
                        itemId: i
                    }
                }),
                this.updateFoodBox(),
                this.m_btn_Make.gray = !1,
                this.m_lst_Food.selectedIndex = -1
            } else
                this.m_lst_Food.selectedIndex = -1
        }
    }
    onSelectType() {
        var e = this.m_lst_Type.selectedIndex;
        if (-1 != e) {
            this.m_txt_Type.text = S(this.m_lst_Type.array[e]);
            let t = this.m_lst_Type.getItem(e);
            1050 == t ? this.m_lst_Food.array = this.m_baseData.filter(e => e.itemNum) : this.m_lst_Food.array = this.m_baseData.filter(e => e.foodCfg.type == t - 1999 && e.itemNum),
            this.m_lst_Type.visible = !1,
            this.m_box_Make.refresh(),
            this.m_lst_Type.selectedIndex = -1
        }
    }
    onClickMake() {
        if (!(this.m_boxFoods.length < 1)) {
            let i = {};
            for (var e of this.m_boxFoods) {
                var t;
                e && (e = e.item.itemId, t = i[e] || 0, i[e] = t + 1)
            }
            let s = O.food;
            s.reqCreateFood(i).then(e => {
                I.instance.playSound(v.SE_Cooking),
                this.mouseEnabled = !1;
                let t = e.foodId;
                e.isNew && (w.set(w.s_newFood, t, t + ""), s.foodUnlock[t] = 1, O.event(c.UNLOCK_FOOD)),
                this.ani1.addLabel("food", 10),
                this.ani1.once(Laya.Event.LABEL, this, () => {
                    this.m_ani_Make.once(Laya.Event.COMPLETE, this, () => {
                        e.isNew ? u(ir, {
                            params: [[Data.getCookFood(t), i]]
                        }) : Et(e.items),
                        this.m_ani_Make.visible = !1,
                        this.m_boxFoods = [],
                        this.updateFoodBox(),
                        this.mouseEnabled = !0,
                        this.m_lst_Food.array = this.m_lst_Food.array.filter(e => e.itemNum)
                    }),
                    this.m_ani_Make.visible = !0,
                    this.m_ani_Make.interval = 120,
                    this.m_ani_Make.play(0, !1)
                }),
                this.ani1.play(0, !1)
            })
        }
    }
    onClickFilter() {
        this.m_lst_Type.visible = !this.m_lst_Type.visible,
        this.once(Laya.Event.CLICK, this, () => {
            this.m_lst_Type.visible && (this.m_lst_Type.visible = !1)
        }),
        this.m_lst_Type.selectedIndex = -1
    }
}
r([n(c.CREATE_FOOD)], sr.prototype, "deleteFoodBox", null);
class ar extends t.hunt.views.food.FoodMakeDlgUI {
    constructor(e) {
        super(),
        this.m_food = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        let e = this.m_view_Food;
        var t = this.m_food.id,
        i = Data.getFood(t),
        s = Data.getItem(t),
        a = Data.getCookFood(t),
        i = (e.dataChanged(null, {
                itemId: t,
                itemCfg: s,
                notShowName: !0
            }), this.m_txt_Degree.changeText(S(1005) + i.eatVal), this.m_txt_Exp.changeText(S(1004) + i.exp), this.m_txt_Sort.changeText(S(1046, +a.id - 4e3)), this.m_txt_Name.changeText(S(s.name)), O.food.getFastCookList(t));
        this.m_view_Count.setData(1, i.maxNum, 0),
        this.m_lst_Formula.array = i.itemArr,
        this.m_lst_Formula.width = 130 * i.itemArr.length - 30
    }
    onClickPlus() {
        if (!this.m_view_Count.count)
            return h(S(1047))
    }
    onClickMake() {
        if (!this.m_view_Count.count)
            return h(S(1047));
        var e = this.m_view_Count.count;
        let t = {};
        for (let e = 0; e < this.m_lst_Formula.array.length; e++) {
            var i = this.m_lst_Formula.getItem(e);
            t[i.itemId] ? t[i.itemId] += i.needNum : t[i.itemId] = i.needNum
        }
        O.food.reqMakeFood(this.m_food.id, t, e).then(() => {
            this.closeDialog()
        })
    }
}
class rr extends t.hunt.views.bag.BagFoodViewUI {
    onAwake() {
        super.onAwake(),
        O.food.reqUnlockList().then(() => {
            this.updateView()
        })
    }
    updateView() {
        this.m_lst_Food.array = O.food.getFoodList()
    }
    onClickMake() {
        l(sr)
    }
    onSelectFood() {
        var t = this.m_lst_Food.selectedIndex;
        if (-1 != t) {
            t = this.m_lst_Food.getItem(t);
            this.m_lst_Food.selectedIndex = -1;
            let e = w.get(w.s_newFood);
            delete e[t.id],
            w.set(w.s_newFood, e),
            O.food.checkUnlock(t.id) && u(ar, {
                params: [t]
            })
        }
    }
}
r([n(c.UNLOCK_FOOD)], rr.prototype, "updateView", null);
class nr extends t.hunt.views.common.ItemArrowUI {
    onAwake() {
        super.onAwake(),
        this.ani1.play(0, !0)
    }
}
class or extends t.hunt.views.common.ItemSelectUI {
    onAwake() {
        super.onAwake(),
        this.ani1.play(0, !0)
    }
}
class lr extends t.hunt.views.common.ItemIconUI {
    dataChanged(e, t) {
        var i,
        s;
        t ? this.dataSource = t : t = this.dataSource,
        t && t.showDefault ? this.m_img_Bg.skin = "hunt/ui_comm/border0.png" : t && t.itemCfg ? (i = t.itemCfg, this.m_img_Bg.gray = t.gray, this.m_txt_Num.visible = !!t.itemNum, this.m_txt_Name.visible = !t.notShowName, this.m_txt_Name.text = t.itemStrShow || S(i.name), this.m_txt_Name.color = t.itemStrColor || "#ff864a", this.m_img_Ext.visible = this.m_txt_Ext.visible = !1, this.m_img_Bg.skin = `hunt/ui_comm/border${i.quality}.png`, i.type == m.equip ? (this.m_img_Icon.skin = `hunt/ui_item/${i.icon}.png`, s = Data.getEquip(i.id), this.m_img_Ext.visible = this.m_txt_Ext.visible = !t.notShowStar, this.m_img_Ext.scale(.6, .6), this.m_img_Ext.skin = "hunt/ui_comm/star.png", this.m_txt_Ext.text = s.lvl + "") : i.type == m.hero || i.type == m.heroSkin ? (this.m_img_Icon.skin = `hunt/ui_hero/h${i.icon}.png`, i.rare && (this.m_img_Ext.visible = !0, this.m_img_Ext.scale(1, 1), this.m_img_Ext.skin = `hunt/ui_card/rare_small${i.rare}.png`)) : (this.m_img_Icon.skin = `hunt/ui_item/${i.icon}.png`, i.type == m.food || i.type == m.cookFood ? (s = Data.getFood(i.id)) && (this.m_img_Ext.visible = this.m_txt_Ext.visible = !0, this.m_img_Ext.scale(.6, .6), this.m_img_Ext.skin = "hunt/ui_comm/food.png", this.m_txt_Ext.text = Math.floor(s.exp / 150) + "") : i.type == m.randBox && (s = Data.getItemRandBox(i.id), this.m_img_Ext.visible = this.m_txt_Ext.visible = !0, this.m_img_Ext.scale(.6, .6), this.m_img_Ext.skin = "hunt/ui_comm/star.png", this.m_txt_Ext.text = s.lvl + "")), t.itemId == p.copper ? this.m_txt_Num.text = Math.floor(t.itemNum / 1e4) + "" : this.m_txt_Num.text = 1 < t.itemNum ? t.itemNum + "" : "", (t.hasBetter || t.showAnime && 9 < i.quality) && !t.gray ? (13 < i.quality ? (this.m_ani_Shine.source = "hunt/ue/12.atlas", this.m_ani_Shine.pivot(60, 60)) : 9 < i.quality ? (this.m_ani_Shine.source = "hunt/ue/11.atlas", this.m_ani_Shine.pivot(60, 60)) : (this.m_ani_Shine.source = "hunt/ue/10.atlas", this.m_ani_Shine.pivot(50, 50)), this.m_ani_Shine.visible = !0, this.m_ani_Shine.play(0, !0)) : (this.m_ani_Shine.visible = !1, this.m_ani_Shine.stop()), this.showSelect(t.showSelect), this.showArrow(t.hasBetter)) : this.clearUI()
    }
    clearUI() {
        this.m_img_Bg.skin = "hunt/ui_comm/border1.png",
        this.m_img_Icon.skin = "",
        this.m_txt_Name.text = "",
        this.m_img_Ext.skin = "",
        this.m_txt_Ext.text = "",
        this.showArrow(!1),
        this.m_ani_Shine.visible = !1,
        this.m_ani_Shine.stop()
    }
    doChangeEquipAni() {
        this.aniEquip.play(0, !1)
    }
    showShineOnce() {
        this.m_ani_Shine.interval = 30,
        this.m_ani_Shine.wrapMode = 1,
        this.m_ani_Shine.on(Laya.Event.COMPLETE, null, () => {
            this.m_ani_Shine.visible = !1,
            this.m_ani_Shine.interval = 120,
            this.m_ani_Shine.wrapMode = 0
        }),
        this.m_ani_Shine.visible = !0,
        this.m_ani_Shine.play(0, !1)
    }
    showSelect(e) {
        e ? this.m_itemSelect ? this.m_itemSelect.visible = !0 : E(or, {}).then(e => {
            this.destroyed || this.m_itemSelect ? e.destroy() : (e.pos(-3, -3), this.m_itemSelect = e, this.addChild(e))
        }) : this.m_itemSelect && (this.m_itemSelect.visible = !1)
    }
    showArrow(e) {
        e ? this.m_itemArrow ? this.m_itemArrow.visible = !0 : E(nr, {}).then(e => {
            this.destroyed || this.m_itemArrow ? e.destroy() : (e.pos(74, -8), this.m_itemArrow = e, this.addChild(e))
        }) : this.m_itemArrow && (this.m_itemArrow.visible = !1)
    }
}
class hr extends t.hunt.views.equip.EquipHandViewUI {
    constructor(e) {
        super(),
        this.m_realHeight = 0,
        this.m_equipData = e,
        this.m_realHeight = 100 * Math.ceil(e.length / 4) + 50
    }
    get realHeight() {
        return this.m_realHeight
    }
    onAwake() {
        super.onAwake(),
        this.on(Laya.Event.CLICK, this, this.onClickEquip);
        let e = O.equip,
        a = e.sortBook(this.m_equipData);
        this.m_equipData[0] && this.m_txt_Name.changeText(S(this.m_equipData[0].equipCfg.seriesName));
        for (let s = 0; s < a.length; s++) {
            a[s].gray = !e.checkUnlock(a[s].itemId),
            a[s].notShowName = !0;
            let t = Math.floor(s / 4),
            i = s % 4;
            E(lr, {}).then(e => {
                e.dataChanged(null, a[s]),
                e.scale(.9, .9),
                e.pos(33 + 110 * i, 40 + 100 * t),
                this.addChild(e)
            })
        }
        this.height = 100 * Math.ceil(a.length / 4) + 50
    }
    onClickEquip(e) {
        var e = e.target;
        e && e instanceof lr && ((e = e.dataSource) && u(pa, {
                params: [{
                        itemId: e.itemId,
                        itemCfg: e.itemCfg
                    }
                ]
            }))
    }
}
class mr extends t.hunt.views.equip.EquipHandBookDlgUI {
    constructor() {
        super(...arguments),
        this.m_equipBooks = {},
        this.m_startY = 10,
        this.m_items = [],
        this.m_panHeight = 0
    }
    onAwake() {
        super.onAwake(),
        this.addTitle(S(2012)),
        this.m_panHeight = this.m_pan_Book.height,
        this.m_pan_Book.vScrollBar.on(Laya.Event.CHANGE, this, this.onScrollChange),
        O.equip.reqEquipBookList().then(() => {
            this.m_equipBooks = O.equip.getEquipBook() || {};
            var e = Object.keys(this.m_equipBooks);
            this.createBook(e)
        })
    }
    createBook(t) {
        if (!t.length)
            return e = this.m_startY - 20, this.m_box_Book.height = e, void this.onScrollChange();
        var e = t.shift(),
        e = this.m_equipBooks[e];
        e && E(hr, {
            params: [e]
        }).then(e => {
            this.m_items.push(e),
            e.y = this.m_startY,
            this.m_startY += e.realHeight + 20,
            this.createBook(t)
        })
    }
    onScrollChange() {
        if (this.m_items.length) {
            var e = this.m_pan_Book.vScrollBar,
            t = e.max;
            let i = e.value;
            if (!(i < 0 || i > t)) {
                let e = this.m_items;
                e.forEach(e => {
                    let t = !1;
                    e.y <= i ? e.y + e.realHeight >= i && (t = !0) : e.y <= this.m_panHeight + i && (t = !0),
                    t ? e.parent || this.m_box_Book.addChild(e) : e.parent && e.removeSelf()
                })
            }
        }
    }
}
class cr extends t.hunt.views.equip.EquipPutDlgUI {
    constructor() {
        super(...arguments),
        this.m_baseData = []
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        let e = O.equip;
        this.m_baseData = e.getPutEquips(),
        this.m_lst_Equip.array = e.getPutEquips(),
        this.m_txt_Num.text = this.m_lst_Equip.array.filter(e => e.isSel).length + " / 20",
        this.m_lst_Type.array = e.getPutTypes(e.getPutEquips()),
        -1 != e.putSortIndex && (this.m_lst_Type.selectedIndex = e.putSortIndex)
    }
    onClickPut() {
        let e = [];
        for (var t of this.m_lst_Equip.array.filter(e => !!e))
            t.isSel && e.push(t);
        var i = O.equip.getStartChangeIndex(e);
        O.equip.sumEquips = e,
        this.closeDialog(d.Yes, i)
    }
    onSelectEquip() {
        var t = this.m_lst_Equip.selectedIndex;
        if (-1 != t) {
            let e = this.m_lst_Equip.getItem(t);
            20 <= this.m_lst_Equip.array.filter(e => e.isSel).length && !e.isSel || (e.isSel = !e.isSel, this.m_lst_Equip.changeItem(t, e), this.m_txt_Num.text = this.m_lst_Equip.array.filter(e => e.isSel).length + " / 20", this.m_lst_Equip.selectedIndex = -1)
        }
    }
    onClickFilter() {
        this.m_lst_Type.visible = !this.m_lst_Type.visible
    }
    onSelectType() {
        var e = this.m_lst_Type.selectedIndex;
        if (-1 != e) {
            let t = this.m_lst_Type.getItem(e),
            i = (this.m_txt_Type.text = S(t.seriesName), O.equip.putSortIndex = e, 1050 == t.seriesName ? this.m_lst_Equip.array = this.m_baseData : this.m_lst_Equip.array = this.m_baseData.filter(e => e.equipCfg.seriesName == t.seriesName), this.m_lst_Type.visible = !1, this.m_baseData.forEach(e => e.isSel = !1), 0),
            s = (this.m_lst_Equip.scrollTo(0), this.m_lst_Equip.array);
            for (let e = 0; e < s.length; e++)
                i < 20 && (i++, s[e].isSel = !0);
            this.m_lst_Type.selectedIndex = -1
        }
    }
}
class dr extends t.hunt.views.equip.EquipShareDlgUI {
    constructor(e, t = !1, i) {
        super(),
        this.m_isNew = !1,
        this.m_isNew = t,
        this.m_equipData = {
            itemCfg: Data.getItem(e),
            equipCfg: Data.getEquip(e),
            itemId: e,
            notShowName: !0
        },
        this.m_lastEquip = Data.getEquip(i)
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        var e = this.m_equipData.equipCfg;
        this.m_view_Equip.dataChanged(null, this.m_equipData),
        this.m_lst_Prop.array = Tt(e.props),
        this.m_view_New.visible = this.m_isNew,
        this.m_txt_Equip.text = S(this.m_equipData.itemCfg.name),
        this.m_txt_Part.text = "(" + S(it[this.m_equipData.equipCfg.type]) + ")";
        let t = Tt(e.props);
        var i = Tt(this.m_lastEquip.props);
        for (let e = 0; e < t.length; e++) {
            var s = i[e];
            s ? t[e].needAni = t[e].propVal > s.propVal : t[e].needNew = !0,
            t[e].isAdd = !0
        }
        this.m_lst_Prop.array = t;
        let a = Tt(e.viceProps);
        var r = Tt(this.m_lastEquip.viceProps);
        for (let e = 0; e < a.length; e++) {
            var n = r[e];
            n ? a[e].needAni = a[e].propVal > n.propVal : a[e].needNew = !0,
            a[e].isAdd = !0
        }
        this.m_lst_OtherProp.array = a,
        this.m_lst_OtherProp.visible = 0 < t.length;
        let o = e.skills,
        l = this.m_lastEquip.skills,
        h = [];
        for (let i = 0; i < o.length; i++) {
            var m = l.find(e => e[0] == o[i][0]);
            let e = !1,
            t = !1;
            m ? e = o[i][1] > m[1] : t = !0,
            h.push({
                skillId: o[i][0],
                skillLv: o[i][1],
                skillCfg: Data.getSkillExecute(o[i][0]),
                showName: !1,
                needAni: e,
                showNew: t
            })
        }
        this.m_lst_Skill.array = h,
        this.m_lst_Skill.visible = 0 < h.length,
        this.m_txt_Effect.visible = 0 < h.length;
        e = Data.gameConf.shareCfg.equip.split(",");
        this.m_img_Icon.skin = `hunt/ui_item/${Data.getItem(+e[0]).icon}.png`,
        this.m_txt_Share.changeText(e[1])
    }
    onClickShare() {
        this.closeDialog()
    }
}
class ur extends t.hunt.views.equip.EquipUnlockDlgUI {
    constructor(e, t, i) {
        super(),
        this.m_equipData = null,
        this.m_isNew = !1,
        this.m_lastEquip = null,
        this.m_equipData = {
            itemCfg: Data.getItem(e),
            equipCfg: Data.getEquip(e),
            itemId: e
        },
        this.m_isNew = t,
        this.m_lastEquip = Data.getEquip(i)
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        this.m_view_New.visible = this.m_isNew;
        var e = this.m_equipData.equipCfg,
        t = (this.m_view_Equip.dataChanged(null, this.m_equipData), 10 <= e.lvl && e.lvl % 5 == 0);
        t && (this.m_txt_Title.text = S(1123)),
        this.m_btn_BClose.visible = !t,
        this.m_btn_Share.visible = t,
        this.m_txt_Equip.text = S(this.m_equipData.itemCfg.name),
        this.m_txt_Part.text = "(" + S(it[this.m_equipData.equipCfg.type]) + ")";
        let i = Tt(e.props);
        var s = Tt(this.m_lastEquip.props);
        for (let e = 0; e < i.length; e++) {
            var a = s[e];
            a ? i[e].needAni = i[e].propVal > a.propVal : i[e].needNew = !0,
            i[e].isAdd = !0
        }
        this.m_lst_Prop.array = i;
        let r = Tt(e.viceProps);
        var n = Tt(this.m_lastEquip.viceProps);
        for (let e = 0; e < r.length; e++) {
            var o = n[e];
            o ? r[e].needAni = r[e].propVal > o.propVal : r[e].needNew = !0,
            r[e].isAdd = !0
        }
        this.m_lst_OtherProp.array = r,
        this.m_lst_OtherProp.visible = 0 < i.length;
        let l = e.skills,
        h = this.m_lastEquip.skills,
        m = [];
        for (let i = 0; i < l.length; i++) {
            var c = h.find(e => e[0] == l[i][0]);
            let e = !1,
            t = !1;
            c ? e = l[i][1] > c[1] : t = !0,
            m.push({
                skillId: l[i][0],
                skillLv: l[i][1],
                skillCfg: Data.getSkillExecute(l[i][0]),
                showName: !1,
                needAni: e,
                showNew: t
            })
        }
        this.m_lst_Skill.array = m,
        this.m_lst_Skill.visible = 0 < m.length,
        this.m_txt_Effect.visible = 0 < m.length
    }
    onClickShare() {
        this.closeDialog()
    }
}
class _r extends t.hunt.views.bag.BagEquipViewUI {
    constructor() {
        super(...arguments),
        this.m_loop = 0,
        this.m_pause = !1,
        this.m_isPut = !1,
        this.m_isSum = !1,
        this.m_isPop = !1,
        this.m_sumCount = 1
    }
    onAwake() {
        super.onAwake(),
        this.m_lst_Equip.elasticEnabled = !1,
        this.updateView(),
        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, () => {
            this.m_loop = 0,
            this.m_img_Finger.visible = !1
        }),
        this.on(Laya.Event.MOUSE_UP, this, () => {
            Laya.timer.loop(1200, this, this.checkFinger)
        }),
        Laya.timer.loop(1200, this, this.checkFinger),
        O.equip.putSortIndex = -1
    }
    onDestroy() {
        super.onDestroy(),
        this.offAll(),
        this.m_lst_Equip.offAll(),
        Laya.timer.clearAll(this)
    }
    checkFinger() {
        if (!this.m_chb_Auto.selected)
            if (this.m_loop < 4)
                this.m_loop++;
            else if (!this.m_pause) {
                var e,
                a,
                r = this.m_lst_Equip.array;
                let t = O.equip,
                i = [],
                s;
                for (let e = 0; e < r.length; e++) {
                    var n = this.m_lst_Equip.getCell(e);
                    if (r[e]) {
                        if (1 == i.length && s == r[e].itemId) {
                            i.push(n);
                            break
                        }
                        0 == i.length && r[e] && t.checkShake(r[e].itemId) && (i.push(n), s = r[e].itemId)
                    }
                }
                2 == i.length && (e = i[0].x + 80, a = i[0].y + 80, this.m_img_Finger.x = e, this.m_img_Finger.y = a, this.m_img_Finger.visible = !0, this.m_pause = !0, this.doFinger(i))
            }
    }
    doFinger(e) {
        Laya.Tween.clearAll(this.m_img_Finger);
        let t = e[1].x + 80,
        i = e[1].y + 80;
        var s = Math.sqrt(Math.pow(e[1].y - e[0].y, 2) + Math.pow(e[1].x - e[0].x, 2));
        Laya.Tween.to(this.m_img_Finger, {
            x: t,
            y: i
        }, 800 * s / 100, null, Laya.Handler.create(this, () => {
                t = e[0].x,
                i = e[0].y,
                this.m_img_Finger.x = t + 80,
                this.m_img_Finger.y = i + 80,
                this.m_pause = !1
            }))
    }
    startAutoAni() {
        this.doAni(),
        this.m_btn_Put.gray = this.m_btn_Put.disabled = !0,
        Laya.timer.loop(500, this, this.doAni)
    }
    stopAutoAni() {
        Laya.timer.clear(this, this.doAni),
        Laya.timer.clear(this, this.checkAutoSum),
        this.m_btn_Put.gray = this.m_btn_Put.disabled = !1
    }
    updateView() {
        this.m_lst_Equip.array = O.equip.getSumEquips()
    }
    onClickPut(e) {
        this.m_isPut = !0,
        u(cr, {}).then(e => {
            e.wait().then(e => {
                e.type == d.Yes && (O.event(c.SCALE_EQUIP, e.data), this.m_chb_Auto.selected && (this.m_btn_Put.gray = this.m_btn_Put.disabled = !0), this.updatePut()),
                this.m_isPut = !1
            })
        })
    }
    updatePut() {
        let e = O.equip.sumEquips;
        e.length < 20 && (e = e.concat(new Array(20 - e.length).fill(null))),
        O.equip.sumEquips = this.m_lst_Equip.array = e
    }
    moveEquip(t) {
        let i = new lr,
        s = (i.mouseEnabled = !1, i.anchorX = i.anchorY = .5, i.dataChanged(t.index, t.equip.dataSource), this.m_lst_Equip.getCell(t.index));
        this.m_lst_Equip.once(Laya.Event.MOUSE_DOWN, this, e => {
            e = Laya.Point.TEMP.setTo(e.stageX, e.stageY),
            e = this.m_lst_Equip.globalToLocal(e);
            i.x = e.x,
            i.y = e.y,
            this.m_lst_Equip.addChild(i),
            s.visible = !1,
            O.event(c.EQUIP_MATCH, t.equip.dataSource)
        }),
        this.m_lst_Equip.on(Laya.Event.MOUSE_MOVE, this, e => {
            e = Laya.Point.TEMP.setTo(e.stageX, e.stageY),
            e = this.m_lst_Equip.globalToLocal(e);
            i.x = e.x,
            i.y = e.y
        }),
        this.m_lst_Equip.once(Laya.Event.MOUSE_UP, this, e => {
            i && (i.removeSelf(), i.destroy()),
            s.visible = !0,
            O.event(c.EQUIP_MATCH),
            this.checkChangeCell(i, t.index, e),
            this.m_lst_Equip.offAll()
        }),
        this.m_lst_Equip.once(Laya.Event.MOUSE_OUT, this, () => {
            i && (i.removeSelf(), i.destroy()),
            s.visible = !0,
            this.m_lst_Equip.offAll(),
            O.event(c.EQUIP_MATCH),
            O.event(c.SHAKE_EQUIP, !0)
        })
    }
    checkChangeCell(e, n, t) {
        var i = this.m_lst_Equip.cells;
        for (let r = 0; r < i.length; r++) {
            let a = i[r];
            if (r != n && a.hitTestPoint(t.stageX, t.stageY)) {
                if (a.dataSource && a.dataSource.itemId == e.dataSource.itemId) {
                    let i = O.equip,
                    s = a.dataSource.itemId;
                    if (!Data.getEquip(s).merge.length)
                        return;
                    this.m_lst_Equip.changeItem(n, null),
                    this.m_isSum = !0,
                    i.reqSumEquip(s).then(t => {
                        I.instance.playSound(v.SE_Merge01),
                        Laya.timer.once(500, this, () => {
                            var e = Data.getEquip(t.equipId);
                            e.merge.length ? (t.isNew || 10 <= e.lvl && e.lvl % 5 == 0) && u(ur, {
                                params: [t.equipId, t.isNew, s]
                            }) : u(dr, {
                                params: [t.equipId, t.isNew, s]
                            })
                        }),
                        i.sumEquips[n] = null;
                        var e = t.equipId;
                        a.dataSource.itemCfg = Data.getItem(e),
                        a.dataSource.itemId = e,
                        this.m_lst_Equip.changeItem(r, a.dataSource),
                        a.playSumAni(s),
                        i.sumEquips[r] = a.dataSource,
                        this.m_isSum = !1
                    })
                } else {
                    var s = i[n];
                    a.dataSource && (a.dataSource.isFade = !0, this.doMoveAni(a.dataSource, s, a, n)),
                    this.m_lst_Equip.changeItem(n, a.dataSource),
                    this.m_lst_Equip.changeItem(r, e.dataSource),
                    O.event(c.SHAKE_EQUIP, !0)
                }
                return
            }
        }
        O.event(c.SHAKE_EQUIP, !0)
    }
    doMoveAni(e, t, i, s) {
        let a = new lr;
        a.anchorX = a.anchorY = .5,
        a.scale(.8, .8),
        a.dataChanged(null, e),
        this.addChild(a),
        a.x = t.x + 94,
        a.y = t.y + 104,
        this.m_lst_Equip.mouseEnabled = !1,
        Laya.Tween.from(a, {
            x: i.x + 94,
            y: i.y + 104
        }, 100, null, Laya.Handler.create(this, () => {
                a.removeSelf(),
                a.destroy();
                let e = this.m_lst_Equip.getItem(s);
                e.isFade = !1,
                this.m_lst_Equip.changeItem(s, e),
                this.m_lst_Equip.mouseEnabled = !0
            }))
    }
    doAni() {}
    onClickBook() {
        this.m_isPut = !0,
        l(mr).then(e => {
            e.wait().then(() => {
                this.m_isPut = !1
            })
        })
    }
    onSelectAuto() {
        this.m_sumCount = 1,
        this.m_chb_Auto.selected ? this.startAuto() : (this.stopAuto(), Laya.timer.loop(1200, this, this.checkFinger))
    }
    startAuto() {
        this.m_chb_Auto.selected && (this.startAutoAni(), this.m_lst_Equip.mouseEnabled = !1, this.checkAutoSum(), Laya.timer.loop(400, this, this.checkAutoSum))
    }
    checkAutoSum() {
        if (!(this.m_isPut || this.m_isSum || this.m_isPop)) {
            let t = [];
            var s = this.m_lst_Equip.array.filter(e => !!e);
            let i = {};
            for (let e = 0; e < s.length; e++) {
                var a = s[e];
                a && (i[a.itemId] = (i[a.itemId] || 0) + 1, 2 == i[a.itemId] && t.push(a))
            }
            var o = t.sort((e, t) => e.itemCfg.quality - t.itemCfg.quality)[0];
            let r = O.equip,
            e = !1,
            n = -1;
            for (let a = 0; a < this.m_lst_Equip.array.length; a++)
                if (this.m_lst_Equip.array[a]) {
                    let s = this.m_lst_Equip.array[a].itemId;
                    if (o && s == o.itemId && Data.getEquip(s).merge.length) {
                        if (e)
                            return this.m_isSum = !0, r.sumEquips[n] = null, void r.reqSumEquip(s).then(e => {
                                I.instance.playSound(v["SE_Merge0" + this.m_sumCount]),
                                console.log(v["SE_Merge0" + this.m_sumCount]),
                                this.m_sumCount++,
                                this.m_sumCount = Math.min(5, this.m_sumCount);
                                var t = Data.getEquip(e.equipId);
                                t.merge.length ? (e.isNew || 10 <= t.lvl && t.lvl % 5 == 0) && (this.m_isPop = !0, Laya.timer.once(500, this, () => {
                                        u(ur, {
                                            params: [e.equipId, e.isNew, s]
                                        }).then(e => {
                                            e.wait().then(() => {
                                                this.m_isPop = !1
                                            })
                                        })
                                    })) : (this.m_isPop = !0, Laya.timer.once(500, this, () => {
                                        u(dr, {
                                            params: [e.equipId, e.isNew, s]
                                        }).then(e => {
                                            e.wait().then(() => {
                                                this.m_isPop = !1
                                            })
                                        })
                                    }));
                                let i = this.m_lst_Equip.getCell(a);
                                t = e.equipId;
                                i.dataSource.itemCfg = Data.getItem(t),
                                i.dataSource.itemId = t,
                                i.playSumAni(s),
                                r.sumEquips[a] = i.dataSource,
                                this.m_lst_Equip.array = r.sumEquips,
                                this.m_isSum = !1
                            });
                        n = a,
                        e = !0
                    }
                }
            this.m_btn_Put.gray = this.m_btn_Put.disabled = !1
        }
    }
    stopAuto() {
        this.stopAutoAni(),
        this.m_chb_Auto.selected = !1,
        this.m_lst_Equip.mouseEnabled = !0
    }
}
r([n(c.MOVE_EQUIP)], _r.prototype, "moveEquip", null),
r([n(c.STOP_AUTO)], _r.prototype, "stopAuto", null);
class pr extends t.hunt.views.bag.BagItemViewUI {
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        var e = O.bag.itemBag || {};
        let t = [];
        R.MCToken && (o = R.MCToken, i = p.mcToken, t.push({
                itemId: i,
                itemCfg: Data.getItem(i),
                itemNum: o,
                withdrawal: !0
            }));
        var i;
        for (const l in e) {
            var s = Data.getItem(+l),
            a = e[l];
            s.type == m.bubble || s.type == m.fish || s.id == p.copper && 0 == R.copper || a && t.push({
                itemId: +l,
                itemCfg: s,
                itemNum: a,
                withdrawal: s.id == p.pvpToken
            })
        }
        let r = [];
        for (const h in R.heroSkins) {
            var n = R.heroSkins[h];
            r.push({
                itemId: n.avatarID,
                itemCfg: Data.getItem(n.avatarID),
                itemNum: 1,
                logicId: +h,
                withdrawal: !0,
                heroSkin: n
            })
        }
        if (r.sort((e, t) => e.heroSkin.skinID == t.heroSkin.skinID ? e.heroSkin.avatarID - t.heroSkin.avatarID : e.heroSkin.skinID - t.heroSkin.skinID), t = t.concat(r), 1e4 <= R.copper && (i = R.copper, o = p.copper, t.push({
                    itemId: o,
                    itemCfg: Data.getItem(o),
                    itemNum: i,
                    withdrawal: !0
                })), R.tapToken) {
            let e = R.tapToken;
            var o = p.tapToken;
            t.push({
                itemId: o,
                itemCfg: Data.getItem(o),
                itemNum: +e.toFixed(4),
                withdrawal: !0
            })
        }
        this.m_lst_Item.array = t
    }
    onSelectItem(e) {
        -1 != e && ((e = this.m_lst_Item.getItem(e)).withdrawal ? u(fa, {
                params: [e]
            }) : u(pa, {
                params: [{
                        itemCfg: Data.getItem(e.itemId),
                        itemId: e.itemId,
                        itemNum: e.itemNum,
                        canUse: !0
                    }
                ]
            }), this.m_lst_Item.selectedIndex = -1)
    }
}
r([n(c.ITEM_CHANGE)], pr.prototype, "updateView", null);
class gr extends t.hunt.views.bag.BagDlgUI {
    onAwake() {
        super.onAwake(),
        this.m_box_Stack.setupCls([{
                    cls: _r
                }, {
                    cls: rr
                }, {
                    cls: pr
                }
            ]),
        this.m_tab_Bag.selectedIndex = 0
    }
    onSelectBag(e) {
        this.m_box_Stack.changeIndex(e),
        1 == e && O.event(c.UNLOCK_FOOD),
        0 != e && O.event(c.STOP_AUTO)
    }
}
class yr extends t.hunt.views.trade.TradeBuyViewUI {
    constructor() {
        super(...arguments),
        this.m_selBtn = null,
        this.m_selImg1 = new Laya.Image("hunt/ui_trade/ss_select.png"),
        this.m_selImg2 = new Laya.Image("hunt/ui_trade/ss_select.png"),
        this.m_selSortIndex = 0,
        this.m_equip_part = 1,
        this.m_tradeId = 0
    }
    onAwake() {
        super.onAwake(),
        this.m_pan_Panel.vScrollBarSkin = "",
        this.initBtn([this.m_box_First, this.m_box_Equip, this.m_box_Cook, this.m_box_Food, this.m_box_Lv, this.m_box_Crystal]),
        this.m_selImg1.width = 130,
        this.m_selImg2.width = 130,
        this.m_selImg1.sizeGrid = this.m_selImg2.sizeGrid = "15,23,13,19",
        this.m_selImg1.x = this.m_selImg2.x = -2,
        this.m_selImg2.height = this.m_selImg1.height = 40,
        this.m_lst_Sort.array = [{
                clang: S(1055)
            }, {
                clang: S(1056)
            }
        ],
        this.m_lst_Sort.selectedIndex = 0,
        this.initEquipClick(),
        this.initFoodClick(),
        this.initCookClick(),
        this.initLvClick(),
        this.m_lst_Out.selectEnable = this.m_lst_In.selectEnable = !0,
        this.updateOutBtn(this.m_btn_Arms)
    }
    initFoodClick() {
        let i = this.m_box_Food._children;
        for (let t of i)
            t.on(Laya.Event.CLICK, this, () => {
                t.addChild(this.m_selImg1);
                var e = i.indexOf(t);
                this.selFoodId(e)
            })
    }
    initCookClick() {
        let i = this.m_box_Cook._children;
        for (let t of i)
            t.on(Laya.Event.CLICK, this, () => {
                t.addChild(this.m_selImg1);
                var e = i.indexOf(t);
                this.selCookId(e)
            })
    }
    initEquipClick() {
        let i = this.m_box_Equip._children;
        for (let t of i)
            t.on(Laya.Event.CLICK, this, () => {
                this.m_box_Lv.removeSelf();
                var e = i.indexOf(t);
                this.selEquipLv(e + 1),
                t.addChild(this.m_selImg1)
            });
        let s = this.m_box_Crystal._children;
        for (let t of s)
            t.on(Laya.Event.CLICK, this, () => {
                this.m_box_Lv.removeSelf();
                var e = s.indexOf(t);
                this.selCrystal(e + 1),
                t.addChild(this.m_selImg1)
            })
    }
    initLvClick() {
        let i = this.m_box_Lv._children;
        for (let t of i)
            t.on(Laya.Event.CLICK, this, () => {
                var e = t.parent;
                e.parent == this.m_box_Crystal ? this.selCrystalId(this.m_box_Crystal._children.indexOf(e), i.indexOf(t)) : this.selEquipId(this.m_box_Equip._children.indexOf(e), i.indexOf(t))
            })
    }
    selEquipId(i = 0, e = 0) {
        this.m_box_Key.visible = !1;
        let s = this.m_box_Lv._children,
        t = s[e];
        var a;
        t.addChild(this.m_selImg2);
        for (let t = 0; t < s.length; t++) {
            let e = s[t].getChildAt(0);
            a = 5 * (i - 1) + t + 1,
            e.text = a + ""
        }
        let r = 5 * (i - 1) + e + 1;
        O.trade.reqGoodByLv(this.m_equip_part, r, r).then(e => {
            this.m_lst_Out.visible = !0,
            this.m_lst_In.visible = !1,
            this.initSort(),
            this.m_lst_Out.array = O.trade.getOutEquipIds(this.m_equip_part, r, e)
        })
    }
    selEquipLv(o, e = !1) {
        if (e) {
            if (this.m_equip_part == Qe.food || this.m_equip_part == Qe.cookFood || this.m_equip_part == Ve.crystal)
                return
        } else
            this.selEquipId(o, 0), this.m_box_Equip.addChildAt(this.m_box_Lv, o), this.m_box_First.refresh();
        o = this.m_box_Equip.getChildIndex(this.m_box_Lv),
        O.trade.reqCataNums(this.m_equip_part).then(r => {
            var n = this.m_box_Equip._children.filter(e => e instanceof J);
            for (let a = 0; a < n.length; a++) {
                let t = 5 * a + 1,
                i = 5 * a + 5,
                e = n[a],
                s = e.getChildByName("stock");
                s || ((s = new Laya.Image("hunt/ui_trade/stock.png")).name = "stock", s.right = 0, s.centerY = 0, e.addChild(s)),
                s.visible = !1,
                r.find(e => e.lv <= i && e.lv >= t) && a + 1 != o && (s.visible = !0)
            }
            var a = this.m_box_Lv._children;
            for (let s = 0; s < a.length; s++) {
                let e = a[s],
                t = 5 * (o - 1) + s + 1,
                i = e.getChildByName("stock");
                i || ((i = new Laya.Image("hunt/ui_trade/stock.png")).name = "stock", i.right = 0, i.centerY = 0, e.addChild(i)),
                i.visible = !1,
                r.find(e => e.lv == t) && (i.visible = !0)
            }
        })
    }
    selCrystalId(i = 0, e = 0) {
        this.m_box_Key.visible = !1;
        let s = this.m_box_Lv._children,
        t = s[e];
        var a;
        t.addChild(this.m_selImg2);
        for (let t = 0; t < s.length; t++) {
            let e = s[t].getChildAt(0);
            a = 1 == i ? 10 : 5 * (i - 2) + t + 11,
            e.text = a + ""
        }
        let r = 1 == i ? 10 : 5 * (i - 2) + e + 11;
        O.trade.reqGoodByLv(this.m_equip_part, r, r).then(e => {
            this.m_lst_Out.visible = !0,
            this.m_lst_In.visible = !1,
            this.initSort(),
            this.m_lst_Out.array = O.trade.getOutEquipIds(this.m_equip_part, r, e)
        })
    }
    selCrystal(o, e = !1) {
        if (e) {
            if (this.m_equip_part != Ve.crystal)
                return
        } else
            1 != o && this.m_box_Crystal.addChildAt(this.m_box_Lv, o), this.selCrystalId(o, 0), this.m_box_First.refresh();
        o = this.m_box_Crystal.getChildIndex(this.m_box_Lv),
        O.trade.reqCataNums(this.m_equip_part).then(r => {
            var n = this.m_box_Crystal._children.filter(e => e instanceof J);
            for (let a = 0; a < n.length; a++) {
                let t = 0 == a ? 10 : 5 * (a - 1) + 11,
                i = 0 == a ? 10 : 5 * (a - 1) + 15,
                e = n[a],
                s = e.getChildByName("stock");
                s || ((s = new Laya.Image("hunt/ui_trade/stock.png")).name = "stock", s.right = 0, s.centerY = 0, e.addChild(s)),
                s.visible = !1,
                r.find(e => e.lv <= i && e.lv >= t) && a + 1 != o && (s.visible = !0)
            }
            if (1 != o) {
                var a = this.m_box_Lv._children;
                for (let s = 0; s < a.length; s++) {
                    let e = a[s],
                    t = 1 == o ? 10 : 5 * (o - 2) + s + 11,
                    i = e.getChildByName("stock");
                    i || ((i = new Laya.Image("hunt/ui_trade/stock.png")).name = "stock", i.right = 0, i.centerY = 0, e.addChild(i)),
                    i.visible = !1,
                    r.find(e => e.lv == t) && (i.visible = !0)
                }
            }
        })
    }
    selCookId(e, t = !1) {
        if (t) {
            if (this.m_equip_part != Qe.cookFood)
                return
        } else {
            this.m_lst_Out.visible = !0,
            this.m_box_Key.visible = !1,
            this.initSort(),
            this.m_lst_In.visible = !1;
            let t = 5 * e + 1,
            i = 5 == e ? 999 : 5 * e + 5;
            O.trade.reqGoodByLv(Qe.cookFood, t, i).then(e => {
                this.m_lst_Out.array = O.trade.getFoodByExp(m.cookFood, t, i, e)
            })
        }
        O.trade.reqCataNums(Qe.cookFood).then(r => {
            var n = this.m_box_Cook._children.filter(e => e instanceof J);
            for (let a = 0; a < n.length; a++) {
                let t = 5 * a + 1,
                i = 5 * a + 5,
                e = (a == n.length - 1 && (i = 99), n[a]),
                s = e.getChildByName("stock");
                s || ((s = new Laya.Image("hunt/ui_trade/stock.png")).name = "stock", s.right = 0, s.centerY = 0, e.addChild(s)),
                s.visible = !1,
                r.find(e => e.lv <= i && e.lv >= t) && (s.visible = !0)
            }
        })
    }
    selFoodId(e, t = !1) {
        let o = [1, 2, 4, 6, 10, 16];
        if (t) {
            if (this.m_equip_part != Qe.food)
                return
        } else {
            this.m_lst_Out.visible = !0,
            this.m_box_Key.visible = !1,
            this.m_lst_In.visible = !1,
            this.initSort();
            let t = o[e],
            i = 5 == e ? 999 : o[e];
            O.trade.reqGoodByLv(Qe.food, t, i).then(e => {
                this.m_lst_Out.array = O.trade.getFoodByExp(m.food, t, i, e)
            })
        }
        O.trade.reqCataNums(Qe.food).then(r => {
            var n = this.m_box_Food._children.filter(e => e instanceof J);
            for (let a = 0; a < n.length; a++) {
                let t = o[a],
                i = o[a],
                e = n[a],
                s = e.getChildByName("stock");
                s || ((s = new Laya.Image("hunt/ui_trade/stock.png")).name = "stock", s.right = 0, s.centerY = 0, e.addChild(s)),
                s.visible = !1,
                r.find(e => e.lv <= i && e.lv >= t) && (s.visible = !0)
            }
        })
    }
    initBtn(e = []) {
        for (var t of e) {
            var i;
            for (i of t._children)
                i.enableAnimating = !1
        }
    }
    updateOutBtn(t, e = 1) {
        if (t != this.m_selBtn) {
            var i;
            for (i of this.m_box_First._children)
                i instanceof J && (i.skin = i.skin.replace("1", "0"), i.width = 148);
            t.width = 162,
            t.skin = t.skin.replace("0", "1"),
            this.m_box_Equip.removeSelf(),
            this.m_box_Food.removeSelf(),
            this.m_box_Lv.removeSelf(),
            this.m_box_Cook.removeSelf(),
            this.m_box_Crystal.removeSelf();
            var s = this.m_box_First._children.indexOf(t) + 1;
            if (1 == e) {
                var a = t == this.m_btn_Crystal;
                let e = a ? this.m_box_Crystal : this.m_box_Equip;
                this.m_box_First.addChildAt(e, s),
                e._children[0].addChild(this.m_selImg1),
                a ? this.selCrystal(1) : this.selEquipLv(1)
            } else
                2 == e ? (this.m_box_First.addChildAt(this.m_box_Cook, s), this.m_box_Cook._children[0].addChild(this.m_selImg1), this.selCookId(0)) : 3 == e && (this.m_box_First.addChildAt(this.m_box_Food, s), this.m_box_Food._children[0].addChild(this.m_selImg1), this.selFoodId(0));
            this.m_box_First.refresh(),
            this.m_selBtn = t
        }
    }
    onClickArms() {
        this.m_equip_part = Ve.arms,
        this.updateOutBtn(this.m_btn_Arms)
    }
    onClickClothes() {
        this.m_equip_part = Ve.clothes,
        this.updateOutBtn(this.m_btn_Clothes)
    }
    onClickGlove() {
        this.m_equip_part = Ve.glove,
        this.updateOutBtn(this.m_btn_Glove)
    }
    onClickHelmet() {
        this.m_equip_part = Ve.helmet,
        this.updateOutBtn(this.m_btn_Helmet)
    }
    onClickCrystal() {
        this.m_equip_part = Ve.crystal,
        this.updateOutBtn(this.m_btn_Crystal)
    }
    onClickOrnaments() {
        this.m_equip_part = Ve.ornaments,
        this.updateOutBtn(this.m_btn_Ornaments)
    }
    onClickCook() {
        this.m_equip_part = Qe.cookFood,
        this.updateOutBtn(this.m_btn_Cook, 2)
    }
    onClickFood() {
        this.m_equip_part = Qe.food,
        this.updateOutBtn(this.m_btn_Food, 3)
    }
    onClickKey() {
        this.m_lst_Out.visible = this.m_lst_In.visible = !1,
        this.initSort(),
        this.m_box_Key.visible = !0,
        this.m_inp_Key.text = "",
        this.updateOutBtn(this.m_btn_Key, 4)
    }
    onDestroy() {
        super.onDestroy(),
        Laya.timer.clearAll(this)
    }
    onSelectIn() {
        _e("clickIn"),
        this.m_lst_In.selectedIndex = -1
    }
    onSelectOut() {
        _e("clickOut") ? -1 != this.m_lst_Out.selectedIndex && (this.m_tradeId = this.m_lst_Out.getItem(this.m_lst_Out.selectedIndex).id, O.trade.reqGetTradeInfos(this.m_tradeId).then(e => {
                this.m_lst_In.visible = !0,
                this.m_lst_Out.visible = !1;
                var t = this.m_selSortIndex,
                i = -1 == t || this.m_lst_Sort.getItem(t).isUp;
                this.m_lst_In.array = O.trade.getSortTradeInfo(e, t, i),
                this.m_btn_Filter.visible = !0
            }), this.m_lst_Out.selectedIndex = -1) : this.m_lst_Out.selectedIndex = -1
    }
    initSort() {
        this.m_lst_Sort.visible = this.m_btn_Filter.visible = !1
    }
    updateBuy() {
        let e = O.trade;
        this.m_tradeId && e.reqGetTradeInfos(this.m_tradeId).then(e => {
            var t = this.m_selSortIndex,
            i = -1 == t || this.m_lst_Sort.getItem(t).isUp;
            this.m_lst_In.array = O.trade.getSortTradeInfo(e, t, i)
        })
    }
    onSelectSort() {
        var s = this.m_lst_Sort.selectedIndex;
        if (-1 != s) {
            var e = this.m_lst_Sort.getItem(s);
            let i = this.m_selSortIndex == s ? !e.isUp : e.isUp;
            -1 == this.m_selSortIndex && (i = !0);
            for (let t = 0; t < this.m_lst_Sort.length; t++) {
                let e = this.m_lst_Sort.getItem(t);
                t != s || -1 == this.m_lst_Sort.selectedIndex ? e.isSel = !1 : e.isSel = !0,
                e.isUp = i,
                this.m_lst_Sort.changeItem(t, e)
            }
            this.m_lst_Sort.visible = !1,
            this.m_txt_Sort.text = e.clang,
            this.m_selSortIndex == s && (this.m_img_Sort.skin = i ? "hunt/ui_trade/img_sortup.png" : "hunt/ui_trade/img_sortdown.png");
            e = this.m_lst_In.array;
            this.m_selSortIndex = s,
            this.m_lst_In.array = O.trade.getSortTradeInfo(e, s, i),
            this.m_lst_Sort.selectedIndex = -1
        }
    }
    onClickFilter() {
        this.m_lst_Sort.visible = !this.m_lst_Sort.visible
    }
    onClickSearch() {
        this.m_inp_Key.text && !Xt(this.m_inp_Key.text) && O.trade.reqSearch(this.m_inp_Key.text)
    }
}
r([n(c.UPDATE_RED_SELL)], yr.prototype, "selEquipLv", null),
r([n(c.UPDATE_RED_SELL)], yr.prototype, "selCrystal", null),
r([n(c.UPDATE_RED_SELL)], yr.prototype, "selCookId", null),
r([n(c.UPDATE_RED_SELL)], yr.prototype, "selFoodId", null),
r([n(c.UPDATE_UP_SELL)], yr.prototype, "updateBuy", null);
class vr extends t.hunt.views.trade.TradeSaleDlgUI {
    constructor(e) {
        super(),
        this.m_aniIndex = 0,
        this.m_item = e[0],
        this.m_aniIndex = e[1]
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        var e = Data.getTrade(this.m_item.itemId);
        this.m_view_Count.setData(1, this.m_item.itemNum, 1),
        this.m_view_Price.setData(-5, e.maxPrice, e.minPrice, 1052),
        this.m_view_Price.count = e.price,
        this.m_view_Price.m_txt_Num.visible = !1,
        this.m_view_Detail.setData({
            itemId: this.m_item.itemId,
            itemCfg: this.m_item.itemCfg,
            notShowName: !0
        })
    }
    updateCount() {
        var e = Data.getTrade(this.m_item.itemId).fee;
        this.m_view_Rate.setData(O.trade.getRateByPass(e) * this.m_view_Count.count),
        this.m_view_Money.setData(this.m_view_Count.count * this.m_view_Price.count)
    }
    onClickSale() {
        let e = O.trade;
        e.checkFull() ? h(S(22)) : O.trade.reqSellGoods(this.m_item.itemId, this.m_view_Count.count, this.m_view_Price.count, +this.m_chb_Sel.selected, this.m_aniIndex).then(() => {
            I.instance.playSound(v.SE_PutItem),
            this.closeDialog()
        })
    }
}
r([n(c.COUNT_CHANGE)], vr.prototype, "updateCount", null);
class kr extends t.hunt.views.trade.TradeSaleViewUI {
    constructor() {
        super(...arguments),
        this.m_filter = -1
    }
    onAwake() {
        super.onAwake(),
        this.m_lst_Type.array = [1050, 1010, 1045, 1011],
        this.m_lst_Type.selectedIndex = 0,
        this.on(Laya.Event.CLICK, this, () => {
            this.ani1.gotoAndStop(0),
            this.m_img_Finger.visible = !1,
            this.restartFinger()
        }),
        this.restartFinger(),
        O.trade.down_index = -1
    }
    onEnable() {
        this.m_lst_Up.array = [],
        this.m_lst_Sell.array = [],
        O.trade.reqSelfGoodsList().then(() => {
            this.updateView()
        })
    }
    restartFinger() {
        Laya.timer.clearAll(this),
        Laya.timer.loop(1e4, this, () => {
            !O.trade.checkFull() && this.visible && 0 != this.m_lst_Up.array.length && (this.m_img_Finger.visible = !0, this.ani1.play(0, !0))
        })
    }
    updateView(t = -1) {
        if (this.updateFilter(this.m_filter), 0 <= t) {
            let e = this.m_lst_Sell.getCell(t);
            e.doDown(Laya.Handler.create(this, () => {
                    this.m_lst_Sell.array = O.trade.sellGoods
                }))
        } else
            this.m_lst_Sell.array = O.trade.sellGoods
    }
    onSelectUp() {
        var e,
        t;
        -1 != this.m_lst_Up.selectedIndex && (e = this.m_lst_Up.getItem(this.m_lst_Up.selectedIndex), t = this.m_lst_Sell.array.filter(e => !!e && e.endTime).length, u(vr, {
                params: [[{
                            itemId: e.itemId,
                            itemCfg: e.itemCfg,
                            itemNum: e.itemNum
                        }, t]]
            }), this.m_lst_Up.selectedIndex = -1)
    }
    onSelectType() {
        var e = this.m_lst_Type.selectedIndex;
        -1 != e && (this.m_txt_Type.text = S(this.m_lst_Type.getItem(e)), this.m_lst_Type.visible = !1, this.m_filter = this.m_lst_Type.getItem(e), this.updateFilter(this.m_filter), this.m_lst_Type.selectedIndex = -1)
    }
    updateFilter(e) {
        let t = O.bag;
        var i;
        let s = [],
        a = [];
        for (i of t.getFoodList())
            (i.itemCfg.type == m.cookFood ? s : a).push(i);
        let r = t.getEquipList(),
        n = [];
        var o = this.m_lst_Type.array;
        e == o[0] ? n = r.concat(s).concat(a) : e == o[1] ? n = r : e == o[2] ? n = s : e == o[3] && (n = a);
        let l = [];
        n.forEach(e => {
            let t = Object.assign({}, e);
            t.showAnime = !0,
            l.push(t)
        }),
        this.m_lst_Up.array = l.filter(e => !!Data.getTrade(e.itemId) && 0 < e.itemNum),
        this.m_txt_No.visible = !this.m_lst_Up.array.length,
        this.m_lst_Up.array.length && "true" != w.get(w.s_initSale) && (this.m_img_Finger.visible = !0, this.ani1.play(0, !0), w.set(w.s_initSale, "true"))
    }
    onClickFilter() {
        this.m_lst_Type.visible = !this.m_lst_Type.visible
    }
}
r([n(c.UPDATE_SALE)], kr.prototype, "restartFinger", null),
r([n(c.UPDATE_UP_SELL)], kr.prototype, "updateView", null);
class fr extends t.hunt.views.trade.TradeDlgUI {
    constructor(e) {
        super(),
        this.m_tabIndex = 0,
        this.m_tabIndex = e
    }
    onAwake() {
        super.onAwake(),
        this.addTitle(S(2014)),
        this.m_box_Stack.setupCls([{
                    cls: yr
                }, {
                    cls: kr
                }
            ]),
        this.m_tab_Tab.selectedIndex = this.m_tabIndex
    }
    onSelectTab(e) {
        O.event(c.UPDATE_SALE),
        this.m_box_Stack.changeIndex(e)
    }
}
class Ir extends t.hunt.views.trade.TradeHorseCellViewUI {
    dataChanged(e) {
        e ? this.dataSource = e : e = this.dataSource,
        Object.assign(this.m_div_Tip.style, {
            fontSize: 18,
            bold: !0,
            color: "#FFFFFF",
            leading: 3,
            wordWrap: !0,
            width: "420"
        }),
        this.m_div_Tip.innerHTML = O.sysNotice.parseSysMsg(e),
        this.height = this.m_div_Tip.contextHeight + 4
    }
}
class br extends t.hunt.views.trade.TradeHorseDlgUI {
    onAwake() {
        super.onAwake(),
        this.m_pan_Panel.vScrollBarSkin = "",
        O.sysNotice.reqTradeHistory().then(e => {
            for (let t of e.list)
                E(Ir, {}).then(e => {
                    e.dataChanged(t),
                    this.m_box_Vbox.addChild(e)
                });
            O.sysNotice.reqWatch(Ze.tradeHistory)
        })
    }
    onDestroy() {
        super.onDestroy(),
        O.sysNotice.reqUnWatch(Ze.tradeHistory)
    }
    addSys(t) {
        100 <= this.m_box_Vbox.numChildren && this.m_box_Vbox.removeChildAt(this.m_box_Vbox.numChildren - 1),
        E(Ir, {}).then(e => {
            e.dataChanged(t),
            this.m_box_Vbox.addChildAt(e, 0)
        })
    }
}
r([n(c.UPDATE_TRADE_SYS)], br.prototype, "addSys", null);
class wr extends t.hunt.views.trade.TradeMainDlgUI {
    constructor() {
        super(...arguments),
        this.m_index = 0
    }
    onAwake() {
        super.onAwake(),
        O.trade.reqSelfGoodsList().then(e => {
            this.updateView()
        }),
        wr.instance = this,
        I.instance.playSound(v.SE_Intrade),
        this.m_btn_Info.enableAnimating = !1,
        O.sysNotice.reqTradeStatistical().then(() => {
            this.updateInfo(),
            O.sysNotice.reqWatch(Ze.tradeTotal)
        })
    }
    updateSTATISTICAL() {
        this.updateInfo()
    }
    onDestroy() {
        O.sysNotice.reqUnWatch(Ze.tradeTotal),
        I.instance.stopSound(v.SE_Intrade),
        wr.instance = null,
        super.onDestroy()
    }
    updateView() {
        let e = O.trade;
        this.m_img_Sale.visible = e.checkSaleRed()
    }
    onClickBuy() {
        I.instance.stopSound(v.SE_Intrade),
        l(fr, {
            params: [ot.Buy]
        })
    }
    onClickSale() {
        I.instance.stopSound(v.SE_Intrade),
        l(fr, {
            params: [ot.Sale]
        })
    }
    onClickSp() {
        I.instance.stopSound(v.SE_Intrade),
        l(fr, {
            params: [ot.Ticket]
        })
    }
    onClickInfo() {
        u(br)
    }
    onClickItem0() {
        this.m_index = 0,
        this.updateInfo()
    }
    onClickItem1() {
        this.m_index = 1,
        this.updateInfo()
    }
    onClickItem2() {
        this.m_index = 2,
        this.updateInfo()
    }
    updateInfo() {
        this.m_btn_Item0.labelColors = 0 == this.m_index ? "#ffffff" : "#8C8C8C",
        this.m_btn_Item1.labelColors = 1 == this.m_index ? "#ffffff" : "#8C8C8C",
        this.m_btn_Item2.labelColors = 2 == this.m_index ? "#ffffff" : "#8C8C8C";
        var e = O.sysNotice.statistical[this.m_index];
        this.m_txt_SumCount.text = e.tradeCount + "",
        this.m_view_Money.visible = e.tradeMoney < 1e4,
        this.m_txt_Gold.visible = !this.m_view_Money.visible,
        this.m_view_Money.visible ? this.m_view_Money.setData(e.tradeMoney) : this.m_txt_Gold.text = function (e) {
            for (var t = e.toString(), i = ""; 3 < t.length; )
                i = "," + t.slice(-3) + i, t = t.slice(0, t.length - 3);
            return i = t ? t + i : i
        }
        (Math.ceil(e.tradeMoney / 1e4))
    }
}
r([n(c.UPDATE_STATISTICAL)], wr.prototype, "updateSTATISTICAL", null),
r([n(c.UPDATE_UP_SELL)], wr.prototype, "updateView", null);
class Cr extends t.hunt.views.club.ClubTitleEditDlgUI {
    constructor(e) {
        super(),
        this.m_data = e
    }
    onAwake() {
        super.onAwake(),
        this.m_txt_Name.text = this.m_data.nickName,
        this.m_txt_Name.prompt = O.club.getTitle(!1, +this.m_data.cup)
    }
    onClickSure() {
        var e = this.m_txt_Name.text;
        Gt(e) > +Data.gameConf.initCfg.maxClubTitleLen ? h(S(1084, Data.gameConf.initCfg.maxClubTitleLen)) : e ? e != this.m_data.nickName && O.club.reqMemberOper(this.m_data.id, e, this.m_data.position).then(() => {
            h(S(1085)),
            this.closeDialog()
        }) : O.club.reqMemberOper(this.m_data.id, "", this.m_data.position).then(() => {
            h(S(1085)),
            this.closeDialog()
        })
    }
}
class xr extends t.hunt.views.club.ClubPlayerInfoDlgUI {
    constructor(e) {
        super(),
        this.m_data = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView(),
        this.updatePos(),
        this.on(Laya.Event.CLICK, this, this.fadeList),
        this.m_btn_Head.enableAnimating = !1
    }
    updatePos() {
        var e = this.m_data.position;
        e == qe.chairman ? this.m_lst_Sort.array = [1093, 1094] : e == qe.viceChairman ? this.m_lst_Sort.array = [1092, 1094] : this.m_lst_Sort.array = [1092, 1093]
    }
    fadeList(e) {
        e.target != this.m_btn_Filter && e.target != this.m_lst_Sort && (this.m_lst_Sort.visible = !1)
    }
    onDestroy() {
        super.onDestroy(),
        this.offAll()
    }
    updateView() {
        this.m_txt_Name.changeText(this.m_data.name),
        this.m_txt_Cup.changeText(this.m_data.cup + "");
        var e = O.club.checkClubPosition(R.id),
        t = (this.m_btn_Kick.visible = e && e > this.m_data.position, this.m_txt_Pos.changeText(S(1067, S(et[this.m_data.position || qe.civilian]))), this.m_data.nickName ? this.m_txt_Head.text = S(1066, this.m_data.nickName) : (t = O.club.getTitle(!1, this.m_data.cup), this.m_txt_Head.text = S(1066, t)), this.m_box_Name.refresh(), this.m_btn_Filter.visible = e == qe.chairman && this.m_data.id != R.id, this.m_lst_Sort.visible = !1, this.m_btn_Head.visible = e == qe.chairman, this.m_txt_Time.text = Rt(this.m_data.offTime), this.m_txt_Time.color = this.m_data.offTime ? o.Gray : o.Green, this.m_data.icon || 0);
        this.m_img_Head.skin = `hunt/ui_hero/h${t}.png`
    }
    onClickKick() {
        Ae({
            button: V.YesNo,
            msg: S(1080)
        }).then(e => {
            e.type == d.Yes && O.club.reqKickMember(this.m_data.id).then(() => {
                this.closeDialog()
            })
        })
    }
    onClickHead() {
        u(Cr, {
            params: [this.m_data]
        })
    }
    onClickFilter() {
        this.m_lst_Sort.visible = !this.m_lst_Sort.visible
    }
    onSelectSort() {
        if (-1 != this.m_lst_Sort.selectedIndex) {
            let t = this.m_lst_Sort.getItem(this.m_lst_Sort.selectedIndex),
            i = {
                1092: qe.chairman,
                1093: qe.viceChairman,
                1094: qe.civilian
            };
            1092 == t ? Ae({
                button: V.YesNo,
                msg: S(1079, S(t))
            }).then(e => {
                e.type == d.Yes && O.club.reqMemberOper(this.m_data.id, this.m_data.nickName, i[t]).then(() => {
                    h(S(1085)),
                    this.m_data.position = i[t],
                    this.updatePos()
                })
            }) : O.club.reqMemberOper(this.m_data.id, this.m_data.nickName, i[t]).then(() => {
                h(S(1085)),
                this.m_data.position = i[t],
                this.updatePos()
            }),
            this.m_lst_Sort.selectedIndex = -1
        }
    }
    updateInfo() {
        var e = O.club.members.find(e => e.id == this.m_data.id);
        e && (this.m_data = e, this.updateView())
    }
}
r([n(c.LOAD_CLUB)], xr.prototype, "updateInfo", null);
class Sr extends t.hunt.views.club.ClubHallViewUI {
    constructor() {
        super(...arguments),
        this.m_selSortIndex = 0,
        this.m_isUp = !1,
        this.m_init = !1
    }
    onAwake() {
        super.onAwake(),
        (Sr.instance = this).m_lst_Player.scrollBar.visible = !1,
        this.m_lst_Sort.array = [{
                clang: S(1061),
                isUp: !0
            }, {
                clang: S(1068),
                isUp: !0
            }, {
                clang: S(1069),
                isUp: !0
            }
        ],
        this.updateView(),
        this.m_view_Me.m_btn_Quit.visible = !0,
        this.m_view_Me.visible = !0,
        Laya.stage.on(Laya.Event.CLICK, this, this.checkClick),
        this.m_txt_Id.changeText(S(1088) + ("ID:" + O.club.clubInfo.id))
    }
    checkClick(e) {
        e.target != this.m_lst_Sort && e.target != this.m_btn_Filter && (this.m_lst_Sort.visible = !1)
    }
    onDestroy() {
        super.onDestroy(),
        Laya.timer.clearAll(this),
        Laya.stage.offAll(Laya.Event.CLICK),
        Sr.instance = null
    }
    updateView() {
        var e = O.club.clubInfo;
        this.m_lst_Player.array = O.club.members,
        this.m_txt_Cup.changeText(e.cup + ""),
        this.m_txt_Num.changeText(e.population + ""),
        this.m_init = !0,
        this.m_lst_Sort.selectedIndex = this.m_selSortIndex
    }
    updateSelf() {
        for (let e = 0; e < this.m_lst_Player.length; e++) {
            var t = this.m_lst_Player.getItem(e);
            if (t.id == R.id) {
                this.m_view_Me.dataChanged(e, Object.assign({
                        notAni: !0
                    }, t));
                break
            }
        }
    }
    onSelectSort() {
        var i = this.m_lst_Sort.selectedIndex;
        if (-1 != i) {
            var e = this.m_lst_Sort.getItem(i);
            this.m_init || (this.m_isUp = this.m_selSortIndex == i && !e.isUp),
            this.m_init = !1,
            this.m_img_Sort.skin = this.m_isUp ? "hunt/ui_trade/img_sortup.png" : "hunt/ui_trade/img_sortdown.png";
            for (let t = 0; t < this.m_lst_Sort.length; t++) {
                let e = this.m_lst_Sort.getItem(t);
                t != i ? e.isSel = !1 : e.isSel = !0,
                e.isUp = this.m_isUp,
                this.m_lst_Sort.changeItem(t, e)
            }
            this.m_txt_Sort.text = e.clang,
            this.m_selSortIndex = i,
            this.doListAni(),
            this.updateMemberSort(),
            this.m_lst_Sort.selectedIndex = -1
        }
    }
    updateMemberSort() {
        let i = this.m_isUp,
        t = this.m_lst_Player.array;
        0 == this.m_selSortIndex ? t = t.sort((e, t) => (e.cup - t.cup) * (i ? 1 : -1)) : 1 == this.m_selSortIndex ? t = t.sort((e, t) => (e.position - t.position) * (i ? 1 : -1)) : 2 == this.m_selSortIndex && (t = t.sort((e, t) => (e.offTime - t.offTime) * (i ? 1 : -1)));
        for (let e = 0; e < t.length; e++)
            i ? t[e].rank = t.length - e : t[e].rank = e + 1;
        this.m_lst_Player.array = t,
        Laya.timer.callLater(this, () => {
            this.updateSelf()
        })
    }
    onClickFilter() {
        this.m_lst_Sort.visible = !this.m_lst_Sort.visible
    }
    onSelectPlayer() {
        var e;
        -1 != this.m_lst_Player.selectedIndex && (e = this.m_lst_Player.getItem(this.m_lst_Player.selectedIndex), u(xr, {
                params: [e]
            }), this.m_lst_Player.selectedIndex = -1)
    }
    onClickHelp() {
        Ae({
            button: V.Yes,
            msg: S(1096),
            title: S(1097)
        })
    }
    doListAni() {
        this.m_lst_Player.scrollTo(0);
        for (let t = 0; t < this.m_lst_Player.array.length; t++) {
            let e = this.m_lst_Player.getCell(t);
            e.scaleX = e.scaleY = 0,
            e.visible = !1,
            Laya.timer.once(20 * t, this, () => {
                e && !e.destroyed && Laya.Tween.to(e, {
                    scaleX: 1,
                    scaleY: 1,
                    visible: !0
                }, 180, null)
            })
        }
    }
}
r([n(c.LOAD_CLUB)], Sr.prototype, "updateView", null);
class Ar extends t.hunt.views.club.ClubApplyDlgUI {
    onAwake() {
        super.onAwake(),
        this.m_lst_Player.array = [],
        this.updateView()
    }
    updateView() {
        O.club.reqClubAppliedMembers().then(e => {
            this.m_lst_Player.array = e || []
        })
    }
    onClickRefuse() {
        let e = [];
        for (var t of this.m_lst_Player.array)
            e.push(t.id);
        e.length && O.club.reqOperApply(Pe.reject, e)
    }
    onClickAgree() {
        let e = [];
        for (var t of this.m_lst_Player.array)
            e.push(t.id);
        e.length && O.club.reqOperApply(Pe.agree, e)
    }
}
r([n(c.LOAD_CLUB)], Ar.prototype, "updateView", null);
class Dr extends t.hunt.views.club.ClubTitleSetDlgUI {
    onAwake() {
        super.onAwake(),
        this.m_lst_Player.scrollBar.visible = !1,
        this.updateView()
    }
    updateView() {
        this.m_lst_Player.array = O.club.getTitles(O.club.clubInfo.setting, !1)
    }
    onSelectPlayer() {
        -1 != this.m_lst_Player.selectedIndex && (this.m_lst_Player.selectedIndex = -1)
    }
}
r([n(c.LOAD_CLUB)], Dr.prototype, "updateView", null);
class Lr extends t.hunt.views.club.ClubChangeNameDlgUI {
    onAwake() {
        super.onAwake();
        var e = Data.gameConf.clubCfg.renameCost;
        this.m_txt_Num.text = +e / 1e4 + ""
    }
    onClickChange() {
        let e = O.club;
        var t,
        i = this.m_txt_Name.text;
        Gt(i) > +Data.gameConf.initCfg.maxClubLen ? h(S(1084, Data.gameConf.initCfg.maxClubLen)) : (t = Data.gameConf.clubCfg.renameCost, R.copper < +t ? h(S(25)) : i && i != e.clubInfo.name && e.reqChangeClubName(i).then(() => {
                h(S(1085)),
                this.closeDialog()
            }))
    }
}
class Tr extends t.hunt.views.club.ClubIconDlgUI {
    constructor() {
        super(...arguments),
        this.m_pre = -1
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        let e = O.club;
        this.m_lst_Icon.array = e.getClubIcon();
        for (let t = 0; t < this.m_lst_Icon.array.length; t++)
            if (this.m_lst_Icon.array[t].icon.id == e.clubInfo.icon) {
                this.m_lst_Icon.selectedIndex = t;
                let e = this.m_lst_Icon.getItem(t);
                e.isSel = !0,
                this.m_lst_Icon.changeItem(t, e);
                break
            }
    }
    onClickChange() {
        O.club.reqChangeClubIcon(this.m_lst_Icon.getItem(this.m_pre).icon.id).then(() => {
            this.closeDialog(),
            h(S(1085))
        })
    }
    onSelectIcon() {
        var t = this.m_lst_Icon.selectedIndex;
        if (-1 != t) {
            if (this.m_pre != t) {
                let e = this.m_lst_Icon.getItem(t);
                if (!e)
                    return;
                if (e.isSel = !0, this.m_lst_Icon.changeItem(t, e), this.m_lst_Icon.getItem(this.m_pre)) {
                    let e = this.m_lst_Icon.getItem(this.m_pre);
                    e.isSel = !1,
                    this.m_lst_Icon.changeItem(this.m_pre, e)
                }
            }
            this.m_pre = this.m_lst_Icon.selectedIndex,
            this.m_lst_Icon.selectedIndex = -1
        }
    }
}
class Er extends t.hunt.views.club.ClubSetViewUI {
    onAwake() {
        super.onAwake(),
        this.updateView(),
        this.m_view_Head.on(Laya.Event.CLICK, this, () => {
            u(Tr, {})
        })
    }
    onDestroy() {
        super.onDestroy(),
        this.m_view_Head.offAll()
    }
    updateView() {
        var e = O.club.clubInfo;
        this.m_chb_Auto.selected = !!e.checkJoin,
        this.m_txt_Name.text = e.name,
        this.m_txt_Id.changeText("ID：" + e.id),
        O.club.reqClubAppliedMembers().then(e => {
            this.m_txt_Apply.text = e.length + "",
            this.m_img_Red.visible = 0 < e.length
        }),
        this.m_view_Head.setData({
            skin: `hunt/ui_club/${Data.getClubIcon(e.icon).icon}.png`,
            lv: e.kingCnt
        })
    }
    checkAddLimit(e) {
        O.club.checkClubPosition(R.id)
    }
    onClickHead() {
        u(Dr, {})
    }
    onClickApply() {
        u(Ar, {})
    }
    onSelectAuto() {
        O.club.changeClubCheckJoin(+this.m_chb_Auto.selected)
    }
    onClickName() {
        u(Lr, {})
    }
}
r([n(c.LOAD_CLUB)], Er.prototype, "updateView", null),
r([n(c.COUNT_CHANGE)], Er.prototype, "checkAddLimit", null);
class Mr extends t.hunt.views.club.ClubCreateDlgUI {
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        var e = Ft(+Data.gameConf.clubCfg.createCost);
        this.m_txt_Cost.changeText(e[1]),
        this.m_img_Cost.skin = `hunt/ui_comm/money${e[0]}.png`
    }
    onClickCreate() {
        var e = this.m_txt_Name.text;
        Gt(e) > +Data.gameConf.initCfg.maxClubLen ? h(S(1084, +Data.gameConf.initCfg.maxClubLen)) : e && O.bag.checkEnough(p.copper, +Data.gameConf.clubCfg.createCost) && O.club.reqCreateClub(e).then(() => {
            we(Wr),
            this.closeDialog(d.Yes)
        })
    }
}
class Rr extends t.hunt.views.club.ClubIntroduceDlgUI {
    constructor(e) {
        super(),
        this.m_club = e
    }
    onAwake() {
        super.onAwake(),
        (Rr.instance = this).updateView(this.m_club)
    }
    onDestroy() {
        Rr.instance = null,
        super.onDestroy()
    }
    updateView(e) {
        this.m_lst_Player.scrollBar.visible = !1;
        var t = e.club;
        t && (Rr.instance.m_set = t.setting),
        e.members.sort((e, t) => t.cup - e.cup),
        this.m_lst_Player.array = e.members,
        t.notice && (this.m_txt_Notice.text = t.notice),
        this.m_pan_Panel.scrollTo(0),
        this.m_txt_Name.changeText(t.name),
        this.m_txt_Person.changeText(t.population + ""),
        this.m_txt_Cup.changeText(t.cup + ""),
        this.m_view_Head.setData({
            skin: `hunt/ui_club/${Data.getClubIcon(t.icon).icon}.png`,
            lv: t.kingCnt
        })
    }
    onClickJoin() {
        O.club.reqApplyClub(this.m_club.club.id).then(() => {
            we(Wr),
            this.closeDialog()
        })
    }
}
class Br extends t.hunt.views.club.ClubSearchDlgUI {
    onClickSearch() {
        var e = this.m_txt_Name.text;
        O.club.reqQueryClub(+e).then(e => {
            u(Rr, {
                params: [e]
            }),
            this.closeDialog()
        })
    }
}
class Nr extends t.hunt.views.club.ClubListDlgUI {
    onAwake() {
        super.onAwake(),
        this.m_lst_Club.array = [],
        this.m_lst_Club.scrollBar.visible = !1,
        O.club.getClubList().then(e => {
            this.updateView(e)
        }),
        Nr.instance = this
    }
    checkClose() {
        O.club.clubInfo && this.closeDialog()
    }
    onDestroy() {
        Nr.instance = null,
        super.onDestroy()
    }
    updateView(e) {
        this.m_lst_Club.array = e || []
    }
    onClickSearch() {
        u(Br, {
            params: [this.m_lst_Club.array]
        })
    }
    onClickCreate() {
        u(Mr, {})
    }
    onSelectClub() {
        var e;
        -1 != this.m_lst_Club.selectedIndex && (e = this.m_lst_Club.getItem(this.m_lst_Club.selectedIndex), O.club.reqQueryClub(e.id).then(e => {
                u(Rr, {
                    params: [e]
                })
            }), this.m_lst_Club.selectedIndex = -1)
    }
}
r([n(c.CLUB_CHANGE)], Nr.prototype, "checkClose", null);
class Pr extends t.hunt.views.club.ClubManagerDlgUI {
    onAwake() {
        super.onAwake(),
        this.addTitle(O.club.clubInfo.name),
        this.m_box_Stack.setupCls([{
                    cls: Sr
                }, {
                    cls: Er
                }
            ]),
        this.m_tab_Tab.selectedIndex = 0,
        this.updateRed()
    }
    updateName() {
        this.updateTitle(O.club.clubInfo.name)
    }
    updateRed() {
        O.club.checkClubPosition(R.id) && O.club.reqClubAppliedMembers().then(e => {
            this.m_txt_Apply.text = e.length + "",
            this.m_img_Red.visible = 0 < e.length
        })
    }
    onSelectTab(e) {
        var t = O.club.checkClubPosition(R.id);
        if (1 == e && !t)
            return this.m_tab_Tab.selectedIndex = 0, void h(S(1086));
        this.m_box_Stack.changeIndex(e)
    }
    doQuit() {
        we(Nr),
        this.closeDialog()
    }
}
r([n(c.CLUB_CHANGE)], Pr.prototype, "updateName", null),
r([n(c.LOAD_CLUB)], Pr.prototype, "updateRed", null),
r([n(c.QUIT_CLUB)], Pr.prototype, "doQuit", null);
class qr extends t.hunt.views.club.ClubNoticeDlgUI {
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        let e = O.club;
        this.m_txt_Area.text = e.clubInfo.notice,
        this.m_txt_Area.vScrollBar.visible = !1;
        var t = 0 < e.checkClubPosition(R.id);
        this.m_txt_Area.editable = t,
        this.m_btn_Focus.visible = t,
        this.m_txt_Area.scrollTo(0),
        t && this.m_txt_Area.on(Laya.Event.FOCUS, this, () => {
            var e = this.m_txt_Area.focus;
            this.m_box_Wing.visible = e,
            this.m_box_Top.visible = !e,
            this.m_btn_Change.visible = !0
        })
    }
    onClickChange() {
        if (this.m_txt_Area.text == O.club.clubInfo.notice)
            return this.m_btn_Change.visible = !1, this.m_box_Wing.visible = !1, this.m_box_Top.visible = !0, void h(S(1085));
        var e = this.m_txt_Area.text;
        Gt(e) > +Data.gameConf.initCfg.maxClubNoticeLen ? h(S(1084, Data.gameConf.initCfg.maxClubNoticeLen)) : O.club.reqChangeNotice(e).then(() => {
            var e = O.club.clubInfo.notice;
            h(S(1085)),
            w.set(w.s_noticeText, e),
            this.m_btn_Change.visible = !1,
            this.m_box_Wing.visible = !1,
            this.m_box_Top.visible = !0
        })
    }
    onClickFocus() {
        this.m_txt_Area.focus = !0
    }
}
class Ur extends t.hunt.views.chat.ChatChildViewUI {
    constructor(e) {
        super(),
        this.m_data = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView(),
        this.on(Laya.Event.CLICK, this, this.onClickApply)
    }
    onDestroy() {
        super.onDestroy(),
        this.offAll()
    }
    updateTime() {
        this.m_txt_Time.text = Rt(Date.newDate(this.m_data.addTime).getTime() / 1e3)
    }
    updateView() {
        this.m_txt_Com.text = this.m_data.content,
        this.m_txt_Com.width = Math.min(240, this.m_txt_Com.width),
        this.m_txt_Com.wordWrap = !0,
        this.updateTime(),
        this.m_txt_Heart.text = Mt(this.m_data.praiseCount || 0),
        this.m_txt_Name1.text = this.m_data.userName,
        this.m_img_Rank1.skin = `hunt/ui_arena/tk${this.m_data.userMilitaryGrade}.png`,
        this.m_img_Rank1.visible = 0 < this.m_data.userMilitaryGrade,
        this.m_data.toUserName && (this.m_txt_Name2.text = this.m_data.toUserName, this.m_txt_Img.text = "▶", this.m_box_Name.refresh()),
        this.m_btn_Heart.gray = !this.m_data.isPraise,
        this.m_view_Head.setData({
            head: this.m_data.userIcon
        }),
        this.m_data.isPraise ? this.m_txt_Heart.color = "#FF643A" : this.m_txt_Heart.color = "#8D8E93";
        var e = this.m_data.userBubble || 5e3,
        t = Data.getBubbleGrid(e),
        e = (this.m_img_Bubble.sizeGrid = t && t.sizeGrid || "", this.m_img_Bubble.skin = `hunt/ui_item/${e}.png`, this.m_img_Bubble.width = Math.max(100, this.m_txt_Com.width + 45), this.m_img_Bubble.height = this.m_txt_Com.height + 70, this.height = Math.max(72, this.m_box_Vbox.height), t.iconPos);
        e.length && (this.m_img_Re.right += e[0], this.m_img_Re.bottom += e[1]),
        this.m_box_Vbox.refresh(),
        this.m_img_Bg.height = this.m_box_Vbox.y + this.m_box_Vbox.height + 7
    }
    onClickApply(e) {
        if (e.stopPropagation(), e.target == this || e.target.parent == this && e.target != this.m_btn_Heart) {
            this.m_data.toReplyId = this.m_data.id;
            let e = O.chat;
            e.chatCSel != this && O.event(c.CHAT_RESET),
            e.chatSel = null,
            e.chatCSel = this,
            O.event(c.CHAT_FOCUS, [this])
        }
    }
    onClickHeart(e) {
        e.stopPropagation();
        e = this.parent.parent.parent,
        e = {
            type: e.m_type,
            logicId: e.m_logicId,
            userId: R.id,
            actionType: this.m_data.isPraise ? 2 : 1,
            commentId: this.m_data.id
        };
        O.chat.reqChangeHeart(e).then(() => {
            this.m_data.isPraise = !this.m_data.isPraise,
            this.m_btn_Heart.gray = !this.m_data.isPraise,
            this.updateHeartNum()
        })
    }
    updateHeartNum() {
        this.m_data.isPraise ? (this.m_data.praiseCount = (this.m_data.praiseCount || 0) + 1, this.m_txt_Heart.color = "#FF643A") : (this.m_data.praiseCount--, this.m_txt_Heart.color = "#8D8E93"),
        this.m_txt_Heart.text = Mt(this.m_data.praiseCount || 0)
    }
    updateBg(e) {
        e == this ? this.ani1.play(0, !1) : this.m_img_Bg.alpha = 0
    }
}
r([n(c.CHAR_TOKEN)], Ur.prototype, "updateTime", null),
r([n(c.CHAT_BLUR), n(c.CHAT_FOCUS)], Ur.prototype, "updateBg", null);
class Hr extends t.hunt.views.chat.ChatViewUI {
    constructor(e, t, i) {
        super(),
        this.m_childChatId = [],
        this.m_replayNum = 0,
        this.m_openNum = 0,
        this.m_type = t,
        this.m_data = e,
        this.m_logicId = i
    }
    onAwake() {
        super.onAwake(),
        this.updateView(),
        this.m_box_Arraw.on(Laya.Event.CLICK, this, this.clickMore),
        this.on(Laya.Event.CLICK, this, this.onClickComm)
    }
    onDestroy() {
        super.onDestroy(),
        this.m_txt_More.offAll(),
        this.offAll()
    }
    clickMore(e) {
        if (e.stopPropagation(), this.m_txt_More.text == S(1099))
            return this.m_openNum = 0, this.m_childChatId = [], this.m_replayNum = 0, this.changeMore(), this.m_box_Vbox.destroyChildren(), this.m_box_Vbox.refresh(), this.m_box_Vcontain.refresh(), e = this.height, this.height = Math.max(110, this.m_box_Vcontain.height) + this.m_box_Vcontain.y, void O.event(c.UPDATE_CHAT_HEIGHT, this.height - e);
        e = {
            type: this.m_type,
            logicId: this.m_logicId,
            start: this.m_childChatId.length,
            count: 0 == this.m_openNum ? 3 : 10,
            commentId: this.m_data.id,
            userId: R.id
        };
        this.m_openNum = 3,
        O.chat.reqChatChildData(e).then(e => {
            let a = e.list;
            this.m_replayNum += a.length;
            for (let t = 0; t < a.length; t++)
                 - 1 == this.m_childChatId.indexOf(a[t].id) && (this.m_childChatId.push(a[t].id), a[t].toCommentId = this.m_data.id, E(Ur, {
                        params: [a[t]]
                    }).then(e => {
                        if (this.m_box_Vbox.addChild(e), t == a.length - 1) {
                            var e = this.height,
                            i = (this.m_box_Vbox.refresh(), this.m_box_Vcontain.refresh(), this.m_box_Vcontain.numChildren);
                            let t = 0;
                            for (let e = 0; e < i; e++) {
                                var s = this.m_box_Vcontain.getChildAt(e);
                                t += s.height
                            }
                            this.height = Math.max(110, t + this.m_box_Vcontain.space * (i - 1) + this.m_box_Vcontain.y),
                            this.m_box_Vbox.refresh(),
                            this.m_box_Vcontain.refresh(),
                            O.event(c.UPDATE_CHAT_HEIGHT, this.height - e)
                        }
                    }));
            this.changeMore()
        })
    }
    updateTime() {
        this.m_txt_Time.text = Rt(Date.newDate(this.m_data.addTime).getTime() / 1e3)
    }
    updateView() {
        this.m_txt_Com.text = this.m_data.content,
        this.m_txt_Com.width = Math.min(290, this.m_txt_Com.width),
        this.m_txt_Com.wordWrap = !0,
        this.m_txt_Heart.text = Mt(this.m_data.praiseCount || 0) + "",
        this.updateTime(),
        this.m_txt_Name.text = this.m_data.userName,
        this.m_img_Rank.x = this.m_txt_Name.width,
        this.m_img_Rank.skin = `hunt/ui_arena/tk${this.m_data.userMilitaryGrade}.png`,
        this.m_img_Rank.visible = 0 < this.m_data.userMilitaryGrade,
        this.m_img_CommHeart.visible = this.m_data.isPraise,
        this.changeMore(),
        this.m_view_Head.setData({
            head: this.m_data.userIcon
        }),
        this.m_box_Vcontain.refresh();
        var e = this.m_data.userBubble || 5e3,
        t = Data.getBubbleGrid(e),
        e = (this.m_img_Bubble.sizeGrid = t && t.sizeGrid || "", this.m_img_Bubble.skin = `hunt/ui_item/${e}.png`, this.m_img_Bubble.width = Math.max(100, this.m_txt_Com.width + 45), this.m_img_Bubble.height = this.m_txt_Com.height + 70, this.m_box_Vbox.refresh(), this.height = Math.max(110, this.m_box_Vcontain.height + this.m_box_Vcontain.y), t.iconPos),
        t = (e.length && (this.m_img_Re.right += e[0], this.m_img_Re.bottom += e[1]), this.m_data.isPraise ? this.m_txt_Heart.color = "#FF643A" : this.m_txt_Heart.color = "#8D8E93", this.m_img_Bubble.height + this.m_txt_Name.height + 16 + 2 * this.m_box_Vcontain.space + 6);
        this.m_img_Bg.height = Math.max(t, this.m_view_Head.y + 90) + 7
    }
    changeMore() {
        this.m_box_Arraw.visible = this.m_txt_More.visible = 0 < this.m_data.replyCount,
        this.m_data.replyCount == this.m_replayNum ? (this.m_img_Arraw.rotation = 180, this.m_txt_More.text = S(1099)) : (this.m_img_Arraw.rotation = 0, this.m_txt_More.text = S(1100, this.m_data.replyCount - this.m_replayNum)),
        this.m_box_Arraw.refresh()
    }
    onClickCommHeart(e) {
        var t = {
            type: this.m_type,
            logicId: this.m_logicId,
            userId: R.id,
            actionType: this.m_data.isPraise ? 2 : 1,
            commentId: this.m_data.id
        };
        this.heartCancel.isPlaying || this.heartSelect.isPlaying || O.chat.reqChangeHeart(t).then(() => {
            this.m_data.isPraise = !this.m_data.isPraise,
            this.m_data.isPraise ? (this.m_img_CommHeart.scale(0, 0), this.m_img_CommHeart.visible = !0, this.m_img_CommHeartBg.visible = !1, this.heartSelect.play(0, !1)) : (this.m_img_CommHeart.scale(1.1, 1.1), this.m_img_CommHeart.visible = !0, this.m_img_CommHeartBg.visible = !0, this.heartCancel.play(0, !1)),
            this.updateHeartNum()
        })
    }
    updateHeartNum() {
        this.m_data.isPraise ? (this.m_txt_Heart.color = "#FF643A", this.m_data.praiseCount = (this.m_data.praiseCount || 0) + 1) : (this.m_data.praiseCount--, this.m_txt_Heart.color = "#8D8E93"),
        this.m_txt_Heart.text = Mt(this.m_data.praiseCount || 0)
    }
    onClickComm(e) {
        if (e.stopPropagation(), e.target.parent == this && e.target != this.m_img_CommHeart && e.target != this.m_img_CommHeartBg) {
            this.m_data.toCommentId = this.m_data.id;
            let e = O.chat;
            e.chatSel != this && O.event(c.CHAT_RESET),
            e.chatSel = this,
            e.chatCSel = null,
            O.event(c.CHAT_FOCUS, [this])
        }
    }
    addChat(e) {
        this.m_childChatId.push(e.id),
        E(Ur, {
            params: [e]
        }).then(e => {
            this.m_box_Vbox.addChildAt(e, 0),
            this.m_box_Vcontain.refresh();
            var e = this.height,
            t = this.m_box_Vcontain.numChildren;
            let i = 0;
            for (let e = 0; e < t; e++) {
                var s = this.m_box_Vcontain.getChildAt(e);
                i += s.height
            }
            this.height = Math.max(110, i + this.m_box_Vcontain.space * (t - 1) + this.m_box_Vcontain.y),
            O.event(c.UPDATE_CHAT_HEIGHT, this.height - e),
            this.m_data.replyCount++,
            this.m_replayNum++,
            this.m_txt_More.visible = !0,
            this.changeMore(),
            this.m_box_Vbox.refresh()
        })
    }
    updateBg(e) {
        e == this ? this.ani1.play(0, !1) : this.m_img_Bg.alpha = 0
    }
}
r([n(c.CHAR_TOKEN)], Hr.prototype, "updateTime", null),
r([n(c.CHAT_BLUR), n(c.CHAT_FOCUS)], Hr.prototype, "updateBg", null);
class Or extends t.hunt.views.chat.ChangeBubbleDlgUI {
    constructor() {
        super(...arguments),
        this.m_lastIndex = -1
    }
    onAwake() {
        super.onAwake(),
        this.showUI()
    }
    showUI() {
        let e = [];
        for (var t in O.bag.itemBag) {
            var i = Data.getItem(+t);
            i.type == m.bubble && e.push({
                itemCfg: i,
                isSelect: +t == R.bubble
            })
        }
        var s = e.findIndex(e => e.isSelect);
        this.m_lst_Bubble.array = e,
        this.m_lastIndex = s,
        this.m_lst_Bubble.selectedIndex = s
    }
    onSelectBubble() {
        if (-1 != this.m_lst_Bubble.selectedIndex) {
            var t = this.m_lst_Bubble.selectedItem;
            if (t) {
                if (-1 != this.m_lastIndex) {
                    let e = this.m_lst_Bubble.getItem(this.m_lastIndex);
                    e.isSelect = !1,
                    this.m_lst_Bubble.changeItem(this.m_lastIndex, e)
                }
                let e = this.m_lst_Bubble.getItem(this.m_lst_Bubble.selectedIndex);
                e.isSelect = !0,
                this.m_lst_Bubble.changeItem(this.m_lst_Bubble.selectedIndex, e),
                this.m_lastIndex = this.m_lst_Bubble.selectedIndex,
                this.m_btn_Change.disabled = !!t.isEquip
            }
        }
    }
    onClickChange() {
        var e = this.m_lst_Bubble.getItem(this.m_lst_Bubble.selectedIndex);
        e && e.itemCfg && O.chat.reqChangeBubble(e.itemCfg.id).then(e => {
            this.closeDialog()
        })
    }
}
class Vr extends t.hunt.views.chat.ChatDlgUI {
    constructor(e, t = Ue.club) {
        super(),
        this.m_type = Ue.club,
        this.m_count = 0,
        this.m_focus = !1,
        this.m_logicId = e,
        this.m_type = t
    }
    onAwake() {
        super.onAwake(),
        this.updateView(),
        Laya.Browser.onPC && this.m_inp_Comm.on(Laya.Event.FOCUS, this, () => {
            if (this.upAni(0), this.m_img_Bg.visible = !0, !this.m_focus && "" == this.m_inp_Comm.text) {
                let e = O.chat;
                e.chatSel = null,
                e.chatCSel = null
            }
            this.m_focus = !1
        }),
        this.m_txt_More.on(Laya.Event.CLICK, this, () => {
            _e("chat") && this.m_txt_More.text == S(2045) && this.updateView(!1)
        }),
        this.m_pan_Panel.on(Laya.Event.CLICK, this, this.onClickPanel);
        var e = this.m_inp_Comm.getChildAt(0);
        this.ani1.play(0, !1),
        Ht(e, o.Red),
        Laya.stage.on(Laya.Event.CLICK, this, this.checkClose),
        window.chat = this
    }
    checkClose(e) {
        e.target != this && e.target != Laya.stage || this.closeAni()
    }
    onDestroy() {
        super.onDestroy(),
        Laya.stage.off(Laya.Event.CLICK, this, this.checkClose),
        this.ani2.offAll(),
        Laya.Tween.clearAll(this),
        this.m_inp_Comm.offAll(),
        this.m_pan_Panel.offAll()
    }
    updateView(t = !0) {
        var e = {
            type: this.m_type,
            logicId: this.m_logicId,
            start: this.m_count,
            count: this.m_count + 10,
            userId: R.id
        };
        this.m_count += 10,
        O.chat.reqChatData(e).then(e => {
            this.m_chatData = e,
            this.m_txt_Num.text = S(1101, this.m_chatData.totalCount),
            e.list && this.parseData(e.list, t),
            this.m_count >= this.m_chatData.totalCount ? this.m_txt_More.text = S(2044) : this.m_txt_More.text = S(2045)
        })
    }
    parseData(t, i = !0) {
        t.reverse();
        for (let e = 0; e < t.length; e++) {
            var s = t[e];
            E(Hr, {
                params: [s, this.m_type, this.m_logicId]
            }).then(e => {
                this.m_box_Panel.addChildAt(e, i ? 0 : this.m_box_Panel.numChildren - 1),
                this.m_box_Panel.refresh()
            })
        }
    }
    updateChat(e) {
        this.m_box_Panel.y = 0,
        Laya.timer.callLater(this, () => {
            this.m_box_Panel.refresh(),
            this.m_pan_Panel.refresh()
        })
    }
    onClickSend() {
        var t = this.m_inp_Comm.text;
        if (100 < t.length)
            h(S(1084, 100));
        else if (Xt(t))
            h(S(2050));
        else if (!O.account.isForbidTalk() && (this.m_inp_Comm.text = "", t)) {
            let e = {
                type: this.m_type,
                logicId: this.m_logicId,
                userId: R.id,
                userName: R.name,
                content: t,
                userIcon: R.icon,
                userBubble: R.bubble
            },
            i = O.chat;
            i.chatSel ? e.toCommentId = i.chatSel.m_data.toCommentId : i.chatCSel && (e.toCommentId = i.chatCSel.m_data.toCommentId, e.toUserId = i.chatCSel.m_data.userId, e.toUserName = i.chatCSel.m_data.userName, e.toReplyId = i.chatCSel.m_data.id),
            O.chat.reqComment(e).then(t => {
                if (this.downAni(0), i.chatSel || i.chatCSel) {
                    if (i.chatSel)
                        i.chatSel.addChat(t), O.chat.chatSel = null;
                    else if (i.chatCSel) {
                        let e = i.chatCSel.parent.parent.parent;
                        e.addChat(t),
                        O.chat.chatCSel = null
                    }
                } else
                    E(Hr, {
                        params: [t, this.m_type, this.m_logicId]
                    }).then(e => {
                        this.m_box_Panel.addChildAt(e, 0)
                    }), this.m_chatData.totalCount++;
                O.event(c.CHAT_BLUR),
                this.m_img_Bg.visible = !1,
                this.m_txt_Num.text = S(1101, this.m_chatData.totalCount)
            })
        }
    }
    onClickPanel(e) {
        this.downAni(this.m_box_Panel.y),
        this.m_box_Panel.y = 0,
        O.event(c.CHAT_BLUR)
    }
    onClickBg() {
        this.downAni(this.m_box_Panel.y),
        Laya.Tween.clearAll(this),
        Laya.Tween.to(this.m_box_Panel, {
            y: 0
        }, 100),
        O.event(c.CHAT_BLUR),
        this.m_img_Bg.visible = !1
    }
    closeAni() {
        this.ani2.isPlaying || (this.ani2.once(Laya.Event.COMPLETE, this, () => {
                this.closeDialog()
            }), this.ani2.play(0, !1))
    }
    onClickClick(e) {
        var t;
        86 == this.m_box_Comm.height ? this.closeAni() : (this.downAni(this.m_box_Panel.y), Laya.Tween.clearAll(this), t = this.m_box_Panel.y, Laya.Tween.to(this.m_box_Panel, {
                y: 0
            }, Math.abs(t / 2)), O.event(c.CHAT_BLUR), this.m_img_Bg.visible = !1)
    }
    onClickSetting() {
        u(Or)
    }
    updateFocus(e) {
        this.m_focus = !0;
        var e = e.localToGlobal(Laya.Point.TEMP.setTo(0, 0)).y,
        t = this.m_pan_Panel.localToGlobal(Laya.Point.TEMP.setTo(0, 0)).y,
        i = (Laya.Tween.clearAll(this), this.m_box_Panel.y - e + t);
        Laya.Tween.to(this.m_box_Panel, {
            y: this.m_box_Panel.y - e + t
        }, Math.abs(i / 2), null, Laya.Handler.create(this, () => {
                this.m_img_Bg.visible = !0
            }), 200),
        this.upAni(Math.abs(i / 2))
    }
    upAni(e) {
        e ? Laya.Tween.to(this.m_box_Comm, {
            height: 600
        }, e, null, Laya.Handler.create(this, () => {
                Laya.Browser.onPC && (this.m_inp_Comm.focus = !0)
            }), 200) : Laya.Tween.to(this.m_box_Comm, {
            height: 600
        }, 200, null, Laya.Handler.create(this, () => {}))
    }
    downAni(e) {
        Laya.Tween.to(this.m_box_Comm, {
            height: 86
        }, e || 200, null)
    }
    reset() {
        this.m_inp_Comm.text = ""
    }
}
r([n(c.UPDATE_CHAT_HEIGHT)], Vr.prototype, "updateChat", null),
r([n(c.CHAT_FOCUS)], Vr.prototype, "updateFocus", null),
r([n(c.CHAT_RESET)], Vr.prototype, "reset", null);
class Fr extends t.hunt.views.arena.ArenaExchangeItemDlgUI {
    constructor(e) {
        super(),
        this.m_data = e
    }
    onAwake() {
        super.onAwake(),
        this.showUI()
    }
    showUI() {
        var e,
        t;
        this.m_data && (e = this.m_data.shopInfo, t = Data.getItem(e.items[0].id), this.m_txt_Name.text = S(t.name), this.m_txt_Desc.text = S(t.info), this.m_txt_Num.text = e.costItems[0].count + "", t = {
                itemId: e.items[0].id,
                itemCfg: Data.getItem(e.items[0].id),
                notShowName: !0
            }, this.m_view_Item.dataChanged(null, t))
    }
    onClickExchange() {
        if (this.m_data) {
            let t = this.m_data.shopInfo;
            O.arena.reqArenaShopBuy(t.id).then(() => {
                var e = Data.getItem(t.items[0].id);
                e.type == m.hero && u(bt, {
                    params: [e.id, !0],
                    closeOnSide: !1
                }),
                this.closeDialog()
            })
        }
    }
}
class Gr extends t.hunt.views.arena.ArenaExchangeDlgUI {
    onAwake() {
        super.onAwake(),
        this.addTitle(S(1144)),
        this.showUI()
    }
    showUI() {
        var e,
        t = O.arena.arenaBase.shop || {};
        let i = [];
        for (e in Data.arenaShops)
            i.push({
                shopInfo: Data.getArenaShop(+e),
                isGet: !!t[e]
            });
        i.sort((e, t) => t.isGet && !e.isGet ? -1 : e.isGet && !t.isGet ? 1 : t.shopInfo.sort - e.shopInfo.sort),
        this.m_lst_Reward.array = i,
        this.m_txt_Num.text = O.bag.getItemNum(p.medal) + ""
    }
    onSelectReward() {
        var e;
        -1 != this.m_lst_Reward.selectedIndex && (e = this.m_lst_Reward.getItem(this.m_lst_Reward.selectedIndex)) && !e.isGet && (u(Fr, {
                params: [e]
            }).then(e => {
                e.wait().then(() => {
                    this.showUI()
                })
            }), this.m_lst_Reward.selectedIndex = -1)
    }
}
class Wr extends t.hunt.views.club.ClubMainDlgUI {
    onAwake() {
        super.onAwake();
        var e = w.get(w.s_noticeDay),
        t = w.get(w.s_noticeText),
        i = +Date.newDate().getDay(),
        s = O.club.clubInfo;
        !s.notice || +e == i && t == s.notice || (w.set(w.s_noticeDay, i), w.set(w.s_noticeText, s.notice), u(qr, {}))
    }
    onClickClub(e) {
        O.club.reqClubInfo().then(e => {
            e ? l(Pr) : we(Nr)
        })
    }
    onClickExChange(e) {
        O.hero.getHeroNum() < 3 ? h(S(1098)) : O.arena.reqArenaInfo().then(() => {
            l(Gr)
        })
    }
    onClickArena(e) {
        O.hero.getHeroNum() < 3 ? h(S(1098)) : O.arena.reqArenaInfo().then(() => {
            l(Ga)
        })
    }
    onClickNotice(e) {
        u(qr)
    }
    onClickChat() {
        O.club.reqClubInfo().then(e => {
            e ? O.club.clubInfo && u(Vr, {
                params: [O.club.clubInfo.id]
            }) : we(Nr)
        })
    }
    closeArena() {
        this.closeDialog()
    }
}
r([n(c.ARENA_SHOW_CHANGE)], Wr.prototype, "onClickArena", null),
r([n("closearena")], Wr.prototype, "closeArena", null);
class Yr extends t.hunt.views.individual.ChangeIcoDlgUI {
    constructor() {
        super(),
        this.m_lastIndex = -1
    }
    onAwake() {
        super.onAwake(),
        this.setUIShow()
    }
    setUIShow() {
        let e = O.account.getAllIcos(),
        s = [],
        a = -1;
        e.forEach((e, t) => {
            var i = e == R.icon;
            i && (a = t),
            s.push({
                icoId: e,
                isEquip: i,
                isSelect: i
            })
        }),
        this.m_lst_Head.array = s,
        this.m_lastIndex = a,
        this.m_lst_Head.selectedIndex = a
    }
    onSelectHead() {
        if (-1 != this.m_lst_Head.selectedIndex) {
            var t = this.m_lst_Head.selectedItem;
            if (t) {
                if (-1 != this.m_lastIndex) {
                    let e = this.m_lst_Head.getItem(this.m_lastIndex);
                    e.isSelect = !1,
                    this.m_lst_Head.changeItem(this.m_lastIndex, e)
                }
                let e = this.m_lst_Head.getItem(this.m_lst_Head.selectedIndex);
                e.isSelect = !0,
                this.m_lst_Head.changeItem(this.m_lst_Head.selectedIndex, e),
                this.m_lastIndex = this.m_lst_Head.selectedIndex,
                this.m_btn_Change.disabled = !!t.isEquip
            }
        }
    }
    onClickChange() {
        var e = this.m_lst_Head.getItem(this.m_lst_Head.selectedIndex);
        e && O.account.reqChangeAvatar(e.icoId).then(e => {
            this.closeDialog()
        })
    }
}
class Xr extends t.hunt.views.common.BuyItemDlgUI {
    constructor(e, t = 1, i = 1, s = 100) {
        super(),
        this.m_itemId = e,
        this.m_init = t,
        this.m_delta = i,
        this.m_max = s
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        this.m_view_Count.setData(this.m_init, this.m_max, this.m_delta),
        this.m_view_Detail.setData({
            itemId: this.m_itemId,
            itemCfg: Data.getItem(this.m_itemId)
        }),
        this.updateCount()
    }
    updateCount() {
        var e = Data.getItemBuy(this.m_itemId);
        e && this.m_view_Money.setData(this.m_view_Count.count * e.copper)
    }
    onClickBuy() {
        _e("buy") && (R.copper < Data.getItemBuy(this.m_itemId).copper * this.m_view_Count.count ? h(S(25)) : O.bag.reqBuyItem(this.m_itemId, this.m_view_Count.count).then(() => {
                this.closeDialog()
            }))
    }
}
r([n(c.COUNT_CHANGE)], Xr.prototype, "updateCount", null);
class jr extends t.hunt.views.individual.ChangeNameDlgUI {
    constructor() {
        super()
    }
    onAwake() {
        super.onAwake(),
        this.m_txt_Name.on(Laya.Event.INPUT, this, this.checkInput),
        this.m_btn_Change.disabled = !0,
        Ht(this.m_txt_Name.getChildAt(0), o.Red),
        this.showUI()
    }
    showUI() {
        var e = O.bag.getItemNum(p.nameCard);
        this.m_txt_Num.text = e + "",
        this.m_txt_Num.color = 0 < e ? o.Green : o.Red
    }
    onClickChange() {
        let e = this.m_txt_Name.text;
        if (e) {
            if (Gt(e) > +Data.gameConf.initCfg.maxNameLen)
                return h(S(1084, Data.gameConf.initCfg.maxNameLen));
            var t = () => {
                O.account.reqReName(e).then(() => {
                    this.closeDialog()
                })
            };
            if (1 <= O.bag.getItemNum(p.nameCard))
                return t();
            var t = Data.getItemBuy(p.nameCard);
            t && (t = Math.min(Math.floor(+R.copper / t.copper) || 1, 100), u(Xr, {
                    params: [p.nameCard, 1, 1, t]
                }).then(e => {
                    e.wait().then(() => {
                        this.showUI()
                    })
                }))
        }
    }
    checkInput() {
        var e = this.m_txt_Name.text;
        e && e != R.name ? this.m_btn_Change.disabled = !1 : this.m_btn_Change.disabled = !0
    }
}
class Kr extends t.hunt.views.individual.ExchangeGiftDlgUI {
    onAwake() {
        super.onAwake(),
        this.m_txt_Code.on(Laya.Event.INPUT, this, this.checkInput),
        this.m_btn_ExChange.disabled = !0,
        Ht(this.m_txt_Code.getChildAt(0), o.Red)
    }
    onClickExChange() {
        var e = this.m_txt_Code.text;
        e && O.account.reqUseCoupon(e).then(e => {
            Et(e.items),
            this.closeDialog()
        })
    }
    checkInput() {
        var e = this.m_txt_Code.text;
        this.m_btn_ExChange.disabled = !e
    }
}
class zr extends t.hunt.views.mail.MailDetailDlgUI {
    constructor(e) {
        super(),
        this.m_mail = e
    }
    onAwake() {
        super.onAwake(),
        this.addTitle(S(2037)),
        this.updateView()
    }
    updateView() {
        this.m_txt_Desc.text = this.m_mail.content,
        this.m_lst_Item.array = this.formatItem(this.m_mail.items);
        var e,
        t = this.m_lst_Item.array.length;
        this.m_btn_Ok.visible = 0 == t || !!this.m_mail.IsPicked,
        this.m_btn_Get.visible = 0 != t && !this.m_mail.IsPicked,
        this.m_mail.type == Ye.sys ? this.m_mail.sysMailId ? (e = Data.getSysMail(this.m_mail.sysMailId), this.m_txt_Tittle.text = S(e.title), this.m_txt_Desc.text = S(e.content, this.m_mail.replaceArgs)) : (this.m_txt_Tittle.text = this.m_mail.title, this.m_txt_Desc.text = this.m_mail.content) : this.m_txt_Tittle.text = this.m_mail.fromName,
        this.m_lst_Item.array = this.formatItem(this.m_mail.items),
        this.m_txt_Desc.height = t ? 270 : 490,
        this.m_lst_Item.selectEnable = !0
    }
    formatItem(e = {}) {
        let t = [];
        for (var i in e)
            t.push({
                itemId: i,
                itemCfg: Data.getItem(+i),
                itemNum: e[i]
            });
        return t
    }
    onClickGet() {
        O.mail.reqGetItem(this.m_mail.id).then(() => {
            this.closeDialog()
        })
    }
    onSelectItem() {
        var e;
        -1 != this.m_lst_Item.selectedIndex && (e = this.m_lst_Item.getItem(this.m_lst_Item.selectedIndex), u(pa, {
                params: [{
                        itemCfg: Data.getItem(e.itemId),
                        itemId: e.itemId
                    }
                ]
            }), this.m_lst_Item.selectedIndex = -1)
    }
}
class $r extends t.hunt.views.mail.MailDlgUI {
    onAwake() {
        super.onAwake(),
        this.addTitle(S(2037)),
        this.m_lst_Mail.scrollBar.visible = !1,
        this.updateView()
    }
    updateView() {
        this.m_lst_Mail.array = O.mail.mails,
        this.m_txt_No.visible = 0 == this.m_lst_Mail.array.length
    }
    onSelectMail() {
        var e;
        -1 != this.m_lst_Mail.selectedIndex && ((e = this.m_lst_Mail.getItem(this.m_lst_Mail.selectedIndex)).IsRead || O.mail.reqReadMail(e.id), l(zr, {
                params: [this.m_lst_Mail.getItem(this.m_lst_Mail.selectedIndex)]
            }), this.m_lst_Mail.selectedIndex = -1)
    }
}
r([n(c.MAIL_CHANGE)], $r.prototype, "updateView", null);
class Qr extends t.hunt.views.common.BindWalletResultDlgUI {
    onAwake() {
        super.onAwake(),
        this.m_txt_Address.text = O.account.wallet
    }
}
class Jr extends t.hunt.views.individual.BindAccountDlgUI {
    constructor() {
        super(...arguments),
        this.m_emailDone = !1,
        this.m_codeDone = !1,
        this.m_seconds = 180
    }
    onAwake() {
        super.onAwake(),
        this.m_txt_Email.on(Laya.Event.INPUT, this, this.checkEmail),
        this.m_txt_Code.on(Laya.Event.INPUT, this, this.checkCode)
    }
    onDestroy() {
        super.onDestroy(),
        Laya.timer.clear(this, this.updateTime)
    }
    onClickGetCode(e) {
        var t = this.m_txt_Email.text;
        O.account.reqMailCode(t).then(e => {
            h(S(90)),
            this.m_txt_GetCode.visible = !1,
            this.m_txt_Time.visible = !0,
            this.m_txt_Time.text = S(1163, this.m_seconds),
            Laya.timer.loop(1e3, this, this.updateTime)
        }),
        this.m_txt_GetCode.mouseEnabled = !1,
        Laya.timer.once(5e3, this, () => {
            this.destroyed || (this.m_txt_GetCode.mouseEnabled = !0)
        })
    }
    onClickSave(e) {
        var t = this.m_txt_Code.text,
        i = this.m_txt_Email.text;
        O.account.reqBindMail(t, i).then(() => {
            h(S(89)),
            this.closeDialog()
        })
    }
    updateTime() {
        this.m_seconds--,
        this.m_txt_Time.text = S(1163, this.m_seconds),
        this.m_seconds <= 0 && (Laya.timer.clear(this, this.updateTime), this.m_seconds = 120, this.m_txt_GetCode.visible = !0, this.m_txt_Time.visible = !1)
    }
    checkEmail() {
        var e = this.m_txt_Email.text;
        /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/.test(e) ? (this.m_txt_GetCode.color = "#ffffff", this.m_txt_GetCode.mouseEnabled = !0, this.m_emailDone = !0) : (this.m_txt_GetCode.color = "#ada8a7", this.m_txt_GetCode.mouseEnabled = !1, this.m_emailDone = !1),
        this.checkInputDone()
    }
    checkCode() {
        var e = this.m_txt_Code.text;
        /[A-Za-z0-9]{6,12}$/.test(e) ? this.m_codeDone = !0 : this.m_codeDone = !1,
        this.checkInputDone()
    }
    checkInputDone() {
        this.m_emailDone && this.m_codeDone ? this.m_btn_Save.disabled = !1 : this.m_btn_Save.disabled = !0
    }
}
class Zr extends t.hunt.views.individual.PrivacyPolicyDlgUI {
    onAwake() {
        super.onAwake(),
        Laya.loader.load("hunt/extra.json", Laya.Handler.create(this, e => {
                e && (this.m_txt_Content.text = e.privacy)
            }))
    }
    onDestroy() {
        super.onDestroy(),
        Laya.loader.clearRes("hunt/extra.json")
    }
}
class en extends t.hunt.views.individual.TermsOfServiceDlgUI {
    onAwake() {
        super.onAwake(),
        Laya.loader.load("hunt/extra.json", Laya.Handler.create(this, e => {
                e && (this.m_txt_Content.text = e.terms)
            }))
    }
    onDestroy() {
        super.onDestroy(),
        Laya.loader.clearRes("hunt/extra.json")
    }
}
class tn extends t.hunt.views.common.SettingDlgUI {
    constructor() {
        super(...arguments),
        this.m_data = []
    }
    onAwake() {
        for (var e in super.onAwake(), at)
            this.m_data.push(at[e]);
        this.m_lst_Type.array = this.m_data,
        this.updateView(),
        this.m_lst_Type.vScrollBarSkin = ""
    }
    onClickFilter() {
        this.m_lst_Type.visible = !this.m_lst_Type.visible
    }
    onSelectType() {
        var e = +Mmobay.LocalStorage.get("ttfLan");
        if (-1 != this.m_lst_Type.selectedIndex) {
            var t,
            i = this.m_lst_Type.selectedIndex,
            s = (this.m_lst_Type.visible = !1, Object.keys(We));
            for (t of s)
                if (i + 1 == We[s[t]] && e == We[s[t]])
                    return void(this.m_lst_Type.selectedIndex = -1);
            this.m_txt_Type.text = S(this.m_lst_Type.getItem(this.m_lst_Type.selectedIndex)),
            Mmobay.LocalStorage.set("ttfLan", this.m_lst_Type.selectedIndex + 1),
            Ae({
                button: V.Yes,
                msg: S(2064),
                hideClose: !0,
                disCloseOnSide: !0
            }).then(() => {
                window.location.reload()
            }),
            this.m_lst_Type.selectedIndex = -1
        }
    }
    updateView() {
        this.m_sli_Bgm.value = Mmobay.LocalStorage.get("ttfbgm") ? +Mmobay.LocalStorage.get("ttfbgm") : 100,
        this.m_sli_Sound.value = Mmobay.LocalStorage.get("ttfsound") ? +Mmobay.LocalStorage.get("ttfsound") : 100,
        this.m_chb_Sum.selected = "false" != Mmobay.LocalStorage.get("ttfShowSum"),
        this.m_chb_Equip.selected = "false" != Mmobay.LocalStorage.get("ttfShowEquip");
        var e = Mmobay.LocalStorage.get("ttfLan");
        this.m_lst_Type.visible = !1,
        this.m_txt_Type.text = S(e ? this.m_data[+e - 1] : this.m_data[0])
    }
    onChangeSound() {
        Mmobay.LocalStorage.set("ttfsound", this.m_sli_Sound.value + ""),
        I.instance.soundVolume = this.m_sli_Sound.value / 100
    }
    onChangeBgm() {
        Mmobay.LocalStorage.set("ttfbgm", this.m_sli_Bgm.value + ""),
        I.instance.bgmVolume = this.m_sli_Bgm.value / 100
    }
    onSelectEquip() {
        Mmobay.LocalStorage.set("ttfShowEquip", this.m_chb_Equip.selected + ""),
        O.event(c.UPDATE_GAMEMENU)
    }
    onSelectSum() {
        Mmobay.LocalStorage.set("ttfShowSum", this.m_chb_Sum.selected + ""),
        O.event(c.UPDATE_GAMEMENU)
    }
}
class sn extends t.hunt.views.individual.IndividualMainDlgUI {
    onAwake() {
        super.onAwake(),
        this.setUIShow(),
        this.checkBindAccount(),
        Mmobay.MConfig.channelId == Mmobay.MConst.CHANNEL_FBINSTANT ? (this.m_img_BindWallet.destroy(), this.m_img_BindAccount.destroy(), this.m_txt_Privacy.visible = !0, this.m_txt_Terms.visible = !0, this.m_btn_Share.visible = !0, this.m_btn_Invite.visible = !0) : Mmobay.MConfig.openPurchase ? (this.m_img_BindWallet.destroy(), Mmobay.MConfig.isQa && this.m_img_BindAccount.destroy()) : this.m_img_BindAccount.destroy()
    }
    setUIShow() {
        this.m_txt_Name.text = R.name + " ",
        this.m_txt_Uid.text = "UID " + R.id,
        this.m_view_Head.setData({
            head: R.icon
        }),
        this.updateMail()
    }
    onClickChange(e) {
        u(Yr).then(e => {
            e.wait().then(() => {
                this.setUIShow()
            })
        })
    }
    onClickShare(e) {
        window.mbplatform.share()
    }
    onClickInvite(e) {
        window.mbplatform.inviteFriendPlay()
    }
    onClickEdit(e) {
        u(jr).then(e => {
            e.wait().then(() => {
                this.setUIShow()
            })
        })
    }
    onClickPrivacy(e) {
        u(Zr)
    }
    onClickTerms(e) {
        u(en)
    }
    onClickBindAccount(e) {
        if (O.account.email)
            return h(S(91));
        u(Jr).then(e => {
            e.wait().then(() => {
                this.checkBindAccount()
            })
        })
    }
    onClickBindWallet(e) {
        O.account.wallet ? u(Qr, {
            clearPopup: !0
        }) : u(va, {
            clearPopup: !0
        })
    }
    onClickNotice(e) {
        l($r)
    }
    onClickSetting(e) {
        u(tn)
    }
    onClickExchange(e) {
        u(Kr)
    }
    updateMail() {
        this.m_img_Mail.visible = O.mail.checkRed()
    }
    checkBindAccount() {
        O.account.email ? this.m_txt_BindAccount.text = S(1166) : this.m_txt_BindAccount.text = S(1165)
    }
}
r([n(c.MAIL_CHANGE)], sn.prototype, "updateMail", null);
class an extends t.hunt.views.menu.MainMenuUI {
    constructor() {
        super(...arguments),
        this.m_index = -1
    }
    onAwake() {
        super.onAwake(),
        this.hitTestPrior = !1,
        this.bottom = 0,
        this.centerX = 0;
        var e = Mmobay.adaptOffsetWidth,
        t = this.m_box_Bg.width;
        0 < e && (this.m_box_Bg.width = t += e, 20 < e && (t = 528 + 5 * (e = Math.floor((t - 528) / 7)), this.m_grp_Menu.space = e, this.m_grp_Menu.width = t)),
        O.mail.reqLoadMail().then(() => {
            this.updateMailRed()
        })
    }
    initHome() {
        return B.create().then(e => (this.m_mapScene = e, this.enterHome(!0), Mmobay.gameDispatcher.event(Mmobay.MEvent.PACK_LOAD_DONE), !0))
    }
    enterHome(e = !0) {
        if (e) {
            this.m_index = nt.Home;
            var t = Data.getTileMap(O.tileMap.mapId),
            i = T.battle;
            if (this.changeSelect(this.m_btn_Home), i && i instanceof Wa)
                return me.instance.clearMain(), void T.battle.checkBattleUI();
            t.type == $e.eleMistery ? me.instance.clearMain() : t.type == $e.explore && we(as)
        }
        this.checkMapScene(e)
    }
    checkMapScene(e) {
        this.m_mapScene && !this.m_mapScene.destroyed && (e ? Se(this.m_mapScene, H.Fight) : this.m_mapScene.parent && this.m_mapScene.removeSelf())
    }
    onClickHome(e) {
        this.m_index != nt.Home && this.enterHome(!0)
    }
    onClickCard(e) {
        this.m_index != nt.Card && (this.m_index = nt.Card, we(tr).then(e => {
                this.checkMapScene(!1)
            }), this.changeSelect(this.m_btn_Card))
    }
    onClickBag(e) {
        this.m_index != nt.Bag && (this.m_index = nt.Bag, we(gr).then(e => {
                this.checkMapScene(!1)
            }), this.changeSelect(this.m_btn_Bag))
    }
    onClickTrade(e) {
        this.m_index != nt.Trade && (this.m_index = nt.Trade, we(wr).then(e => {
                this.checkMapScene(!1)
            }), this.changeSelect(this.m_btn_Trade))
    }
    onClickClub(e, t = !1) {
        if (this.m_index != nt.Club) {
            let e = O.club;
            e.reqClubInfo().then(() => {
                if (e.clubInfo)
                    we(Wr).then(() => {
                        t && O.event(c.ARENA_SHOW_CHANGE),
                        this.checkMapScene(!1)
                    });
                else {
                    if (t)
                        return this.changeSelect(this.m_btn_Home), void O.arena.reqArenaInfo().then(() => {
                            l(Ga, {
                                params: [!0]
                            })
                        });
                    we(Nr).then(() => {
                        this.checkMapScene(!1)
                    })
                }
                this.m_index = nt.Club,
                this.changeSelect(this.m_btn_Club)
            })
        }
    }
    onClickUser(e) {
        this.m_index != nt.User && (this.m_index = nt.User, we(sn).then(e => {
                this.checkMapScene(!1)
            }), this.changeSelect(this.m_btn_User))
    }
    changeSelect(e) {
        this.m_img_RedP.visible = this.m_index != nt.Card && O.hero.checkAllProduce();
        let t = O.trade;
        this.m_img_RedP.visible || (this.m_img_TipHero.visible = this.m_index != nt.Card && "false" != Mmobay.LocalStorage.get("ttfShowEquip") && O.hero.checkEquipGreen()),
        t.sellGoods ? this.m_img_Trade.visible = this.m_index != nt.Trade && t.checkSaleRed() : t.reqSelfGoodsList().then(() => {
            this.m_img_Trade.visible = this.m_index != nt.Trade && t.checkSaleRed()
        }),
        this.m_img_TipEquip.visible = this.m_index != nt.Bag && "false" != Mmobay.LocalStorage.get("ttfShowSum") && O.equip.checkCanSum(),
        this.updateMailRed(),
        e && (e = this.m_grp_Menu.x + e.parent.x + 43, this.m_img_Select.x = e)
    }
    updateMailRed() {
        this.m_img_RedU.visible = this.m_index != nt.User && O.mail.checkRed()
    }
}
r([n(c.HOME_MAP_CHANGE)], an.prototype, "onClickHome", null),
r([n(c.HOME_CARD_CHANGE)], an.prototype, "onClickCard", null),
r([n(c.HOME_BAG_CHANGE)], an.prototype, "onClickBag", null),
r([n(c.HOME_ClUB_CHANGE)], an.prototype, "onClickClub", null),
r([n(c.UPDATE_GAMEMENU)], an.prototype, "changeSelect", null),
r([n(c.MAIL_CHANGE)], an.prototype, "updateMailRed", null);
class rn extends Laya.UIComponent {
    constructor() {
        super(),
        this.m_resArr = ["hunt/atlas/hunt/ui_arena.atlas", "hunt/atlas/hunt/ui_card.atlas", "hunt/atlas/hunt/ui_club.atlas", "hunt/atlas/hunt/ui_fight.atlas", "hunt/atlas/hunt/ui_fish.atlas", "hunt/atlas/hunt/ui_food.atlas", "hunt/atlas/hunt/ui_individual.atlas", "hunt/atlas/hunt/ui_mistery.atlas", "hunt/atlas/hunt/ui_trade.atlas", "hunt/atlas/hunt/ui_unlock.atlas", "hunt/atlas/hunt/ui_warning.atlas"],
        this.size(560, 1120),
        this.zOrder = 100,
        this.centerX = this.centerY = 0,
        this.mouseThrough = !0,
        Laya.timer.loop(12e5, this, () => {
            Laya.Scene.gc()
        })
    }
    static init() {
        let e = rn.instance = new rn;
        Se(e, H.Main),
        e.createMenu()
    }
    static showMenu(e) {
        rn.instance && rn.instance.enterHome(e)
    }
    createMenu() {
        E(an, {}).then(e => (this.m_mainMenu = e, this.addChild(e), E(er, {}))).then(e => (this.m_userMenu = e, this.addChild(e), this.m_mainMenu.initHome())).then(e => {
            Laya.timer.once(5e3, this, this.silenceLoadRes)
        })
    }
    enterHome(e) {
        this.visible = e,
        this.m_mainMenu && this.m_mainMenu.enterHome(e)
    }
    silenceLoadRes() {
        var e;
        this.m_resArr.length && (e = this.m_resArr.shift(), Laya.loader.load(e, Laya.Handler.create(this, () => {
                    this.silenceLoadRes()
                })))
    }
}
class nn extends t.hunt.views.common.ToastViewUI {
    constructor(e) {
        super(),
        this.m_info = e
    }
    onAwake() {
        super.onAwake(),
        this.centerX = this.centerY = 0,
        this.m_txt_Info.text = this.m_info,
        this.ani1.once(Laya.Event.COMPLETE, null, () => {
            this.destroy()
        }),
        this.ani1.play(0, !1)
    }
}
function on() {
    O.init(),
    be({
        gameMeunImpl: rn,
        loadingImpl: Qa,
        msgBoxImpl: Ja,
        toastImpl: nn,
        modelEventsDispatcher: O,
        opCheckLimit: _e
    });
    var e,
    t = {
        baseUrl: Mmobay.MConfig.loginUrl,
        loadingImpl: () => De(),
        errorSpawnImpl: (e, t) => {
            -1 != e && -2 != e && (t = zt(e) || t, h((e = t || "未知错误", (e += "").replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;"))))
        }
    };
    for (e in t = t || P)
        q[e] = t[e];
    mi.registerComponent(k.Movement, Is),
    mi.registerComponent(k.Ani, ks),
    mi.registerComponent(k.AI, ps),
    mi.registerComponent(k.CityAI, gs),
    mi.registerComponent(k.State, Ts),
    mi.registerComponent(k.Path, Ds),
    ci.registerSystem(k.Movement, bs),
    ci.registerSystem(k.Ani, fs),
    ci.registerSystem(k.AI, ys),
    ci.registerSystem(k.CityAI, vs),
    ci.registerSystem(k.State, Es),
    ci.registerSystem(k.Path, Ls),
    yi.registerNameWrap(_t.Main, vi),
    yi.registerNameWrap(_t.Comm, ki),
    yi.registerNameWrap(_t.Boss, fi),
    yi.registerNameWrap(_t.City, Ii),
    ms.registerBattle(Re.test, _s),
    ms.registerBattle(Re.normal, _s),
    ms.registerBattle(Re.arena, ta),
    ms.registerBattle(Re.imitatePvp, Xa),
    ms.registerBattle(Re.worldBoss, Ka),
    ms.registerBattle(Re.city, Wa),
    D.registerSkill(1010, Gs),
    D.registerSkill(1011, Ms),
    D.registerSkill(1020, Ns),
    D.registerSkill(1021, Ps),
    D.registerSkill(2022, Ya),
    D.registerSkill(1030, Bs),
    D.registerSkill(1031, zs),
    D.registerSkill(1040, Ys),
    D.registerSkill(2041, Rs),
    D.registerSkill(1050, Fs),
    D.registerSkill(1060, Vs),
    D.registerSkill(2060, Vs),
    D.registerSkill(2061, Vs),
    D.registerSkill(1070, Os),
    D.registerSkill(1071, Rs),
    D.registerSkill(2071, Rs),
    D.registerSkill(1080, Rs),
    D.registerSkill(2080, $a),
    D.registerSkill(1090, ia),
    D.registerSkill(1091, qs),
    D.registerSkill(2090, qs),
    D.registerSkill(1100, Ws),
    D.registerSkill(1110, $s),
    D.registerSkill(1111, Rs),
    D.registerSkill(2111, Rs),
    D.registerSkill(1120, Ys),
    D.registerSkill(1121, js),
    D.registerSkill(2121, js),
    D.registerSkill(1130, Rs),
    D.registerSkill(1140, Ks),
    D.registerSkill(1150, Us),
    D.registerSkill(1160, Hs),
    D.registerSkill(1170, Bs),
    D.registerSkill(1171, Rs),
    D.registerSkill(2171, Bs),
    D.registerSkill(7001, na),
    D.registerSkill(7002, ca),
    D.registerSkill(7003, ra),
    D.registerSkill(7004, aa),
    D.registerSkill(7006, la),
    D.registerSkill(7007, oa),
    D.registerSkill(9001, sa),
    D.registerSkill(9002, ha),
    D.registerSkill(9003, ma),
    D.registerSkill(9005, za),
    D.registerSkill(9997, Ys),
    D.registerSkill(9998, Rs),
    D.registerSkill(9999, Rs),
    window.BaseSkill = D,
    window.test = new Xs,
    pb.pbContext = protobuf.parse('syntax = "proto3";\tpackage pb; \tmessage ItemInfo {\t  int32 id = 1;    \t  int64 num = 2;   \t  int64 delta = 3; \t}\tmessage ItemDeltaInfo {\t  int32 id = 1;    \t  int32 delta = 2; \t}\tmessage Hero {\t  int32 id = 1;                \t  map<int32, int64> props = 2; \t  int32 eatLvl = 3;            \t  int32 eatExp = 4;            \t  int32 eatVal = 5;            \t  int64 eatTime = 6;           \t  repeated int32 equips = 7;   \t  HeroSkin skin = 8;           \t  int64 produceTime = 9;       \t}\tmessage HeroSkin {\t  int32 tokenID = 1;       \t  int32 skinID = 2;        \t  int32 avatarID = 3;      \t  repeated int32 eles = 4; \t  int32 level = 5;         \t}\tmessage StarPass {\t  int32 buy = 1;          \t  repeated int32 com = 2; \t  repeated int32 pay = 3; \t  int32 boxNum = 4;       \t}\tmessage Count {\t  int32 count = 1;       \t  int64 refreshTime = 2; \t}\tmessage FishData {\t  map<int32, int32> counts = 1; \t  int64 refreshTime = 2;        \t}\tmessage SingleBlockPublicData {\t  int32 count = 1;       \t  int32 buyCount = 2;       \t  int64 refreshTime = 3; \t  int32 boxCount = 4; \t}\tmessage SingleAdData {\t  int32 count = 1;       \t  int64 lastTime = 2;    \t}\tmessage ExData {\t  map<int32, int32> times = 1;     \t  repeated int32 inviteAwards = 2; \t}\tmessage UserInfo {\t  int32 id = 1;\t  int32 accountId = 2;\t  int32 sex = 3;\t  string name = 4;\t  int32 icon = 5;\t  int64 copper = 6;\t  int64 MCToken = 7;\t  double tapToken = 8;\t  map<int32, int64> bag = 9;\t  repeated Hero heros = 10;\t  map<int32, HeroSkin> heroSkins = 11; \t  repeated int32 makeFoods = 12;       \t  repeated int32 gotEquips = 13;       \t  int32 mapId = 14;                    \t  repeated int32 mapPos = 15;          \t  repeated int32 unLockMaps = 16;      \t  repeated int32 squad = 17;           \t  StarPass starPass = 18;              \t  int32 vit = 19;                      \t  int64 vitTime = 20;                  \t  map<int32, Count> counts = 21;       \t  int32 backCity = 22;                 \t  ExData exData = 23;                  \t  int32 bubble = 24;                   \t  FishData fishData = 25;              \t  int64 Diamond = 26;                  \t  map<int32, SingleBlockPublicData> BlockPublicData = 27; \t  map<int32, SingleAdData> AdData = 28;\t}\tmessage ServerTimeInfo {\t  int64 serverTime = 1;       \t  int32 serverZoneTime = 2;   \t  int64 todayZeroTime = 3;    \t  int64 mondayZeroTime = 4;   \t  int64 seasonSettleTime = 5; \t}\tmessage ArenaRecord {\t  int32 Id = 1;             \t  int32 AId = 2;            \t  int32 AIcon = 3;          \t  string AName = 4;         \t  int32 AMilitaryGrade = 5; \t  string AClubName = 6; \t  int32 AClubRating = 7; \t  int32 AOldCup = 8; \t  int32 ANewCup = 9; \t  int32 DId = 10;    \t  int32 DIcon = 11;  \t  string DName = 12; \t  int32 DMilitaryGrade = 13; \t  string DClubName = 14; \t  int32 DClubRating = 15; \t  int32 DOldCup = 16; \t  int32 DNewCup = 17; \t  bool IsWin = 18;    \t  int64 AddTime = 19; \t}\tmessage RankUser {\t  int32 userId = 1;\t  int64 rank = 2; \t  string name = 3;\t  int32 icon = 4;\t  string clubName = 5;      \t  int32 score = 6;          \t  int32 militaryGrade = 7;  \t  repeated int32 squad = 8; \t  int32 rankKey = 9;        \t}\tmessage RankClub {\t  int32 id = 1;\t  int32 rank = 2;\t  string name = 3;\t  int32 icon = 4;\t  int32 population = 5; \t  int32 cup = 6;        \t  int32 grade = 7;      \t  int32 kingCnt = 8;    \t}\tmessage Tilemap {\t  int32 id = 1;\t  int32 userId = 2;\t  int32 mapId = 3;\t  map<int32, Block> blocks = 4;\t  int64 addTime = 5;\t}\tmessage Block {\t  int32 blockId = 1;\t  int32 blockSpawnId = 2;         \t  int32 pointName = 3;            \t  int64 nextRefreshTime = 4;      \t  repeated int32 talkRewards = 5; \t  int32 favor = 6;                \t  bool isOver = 7;\t  int64 finishTime = 8;\t  repeated int32 squad = 9; \t  Treasure treasure = 10;   \t  WorldBoss worldBoss = 11; \t}\tmessage WorldBoss { int32 logicId = 1; }\tmessage Treasure {\t  int32 isOpen = 1; \t  repeated int32 pointRewards = 2;\t  int32 finalReward = 3;\t}\tmessage Location {\t  int32 x = 1;\t  int32 y = 2;\t}\tmessage SkinInfo {\t  int32 id = 1;      \t  HeroSkin skin = 2; \t}\tmessage AdRewardReq {\t  int32 adId = 1;\t}\tmessage AdRewardAck {\t  repeated ItemInfo items = 1;\t  map<int32, SingleAdData> AdData = 2;\t}\tmessage GetArenaInfoReq {}\tmessage GetArenaInfoAck {\t  repeated int32 squad = 1;    \t  int32 cup = 2;               \t  int32 highCup = 3;           \t  float winRate = 4;           \t  int64 rank = 5;              \t  int32 chestNum = 6;          \t  int64 chestTime = 7;         \t  int32 cupReward = 8;         \t  int32 sumCup = 9;            \t  int32 militaryGrade = 10;    \t  int64 seasonStartTime = 11;  \t  map<int32, int32> shop = 12; \t  int32 battleCount = 13;      \t  int32 buyBattleCount = 14;   \t}\tmessage BuyArenaCountReq {}\tmessage BuyArenaCountAck {\t  int64 copper = 1;         \t  int32 battleCount = 2;    \t  int32 buyBattleCount = 3; \t}\tmessage ArenaMatchRivalReq {}\tmessage ArenaMatchRivalAck {\t  RankUser rivalUser = 1;\t  int32 mapLogicId = 2;\t  repeated Hero squad = 3;\t}\tmessage ArenaSetSquadReq { repeated int32 squad = 1; }\tmessage ArenaSetSquadAck {\t  repeated int32 squad = 1; \t}\tmessage ArenaEndFightReq {\t  bool isWin = 1;\t  int32 rivalId = 2; \t}\tmessage ArenaEndFightAck {\t  repeated ItemInfo items = 1; \t  int32 boxId = 2;             \t  int32 oldCup = 3;\t  int32 newCup = 4;\t  int32 sumCup = 5;\t}\tmessage ArenaCupAwardReq { int32 id = 1; }\tmessage ArenaCupAwardAck {\t  repeated ItemInfo items = 1; \t  int32 cupReward = 8;         \t}\tmessage ArenaRecordReq {}\tmessage ArenaRecordAck {\t  repeated ArenaRecord recordList = 1;\t  int32 totolNum = 2; \t  float winRate = 3;  \t}\tmessage ArenaUserRankReq {}\tmessage ArenaUserRankAck {\t  repeated RankUser rankList = 1;\t  int64 myRank = 2;\t  int64 myScore = 3;\t  int32 myMilitaryGrade = 4; \t}\tmessage ArenaShopBuyReq { int32 id = 1; }\tmessage ArenaShopBuyAck {\t  map<int32, int32> shop = 1;  \t  repeated ItemInfo items = 2; \t}\tmessage ArenaPlayerInfoReq { int32 userId = 1; }\tmessage ArenaPlayerInfoAck {\t  repeated Hero squad = 1;\t}\tmessage UseItemReq {\t  int32 id = 1;\t  int64 num = 2;\t}\tmessage UseItemAck { repeated ItemInfo items = 1; }\tmessage SellItemReq {\t  int32 id = 1;\t  int64 num = 2;\t}\tmessage SellItemAck { repeated ItemInfo items = 1; }\tmessage BuyItemReq {\t  int32 id = 1;\t  int64 num = 2;\t}\tmessage BuyItemAck { repeated ItemInfo items = 1; }\tmessage ItemChangeNtf {\t  repeated ItemInfo items = 1;\t  bool needPopup = 2;\t}\tmessage VitChangeNtf {\t  int32 vit = 1;     \t  int64 vitTime = 2; \t}\tmessage EquipMergeReq { int32 equipId = 1; }\tmessage EquipMergeAck {\t  int32 equipId = 1;\t  bool isNew = 2;\t  repeated ItemInfo items = 3;\t}\tmessage MakeFoodReq { map<int32, int64> foodIds = 1; }\tmessage MakeFoodAck {\t  int32 foodId = 1;\t  bool isNew = 2;\t  repeated ItemInfo items = 3;\t}\tmessage EquipBookReq { \t}\tmessage EquipBookAck { repeated int32 gotEquips = 1; }\tmessage CookBookReq { \t}\tmessage CookBookAck { repeated int32 makeFoods = 1; }\tmessage QuickMakeCookReq {\t  map<int32, int64> foodIds = 1; \t  int32 cookId = 2;              \t  int32 num = 3;                 \t}\tmessage QuickMakeCookAck { repeated ItemInfo items = 1; }\tmessage UseRandBoxReq { int32 id = 1; }\tmessage UseRandBoxAck {\t  int32 logicId = 1;\t  repeated ItemInfo items = 2;\t  repeated ItemInfo showItems = 3;\t  int32 swapNum = 4;\t}\tmessage SwapRandBoxReq {\t  int32 logicId = 1;\t  int32 index = 2;\t}\tmessage SwapRandBoxAck {\t  ItemInfo showItem = 1;\t  int32 swapNum = 2;\t}\tmessage ReceiveRandBoxReq { int32 logicId = 1; }\tmessage ReceiveRandBoxAck { repeated ItemInfo items = 1; }\tmessage UseChooseBoxReq {\t  int32 id = 1;\t  int32 index = 2;\t}\tmessage UseChooseBoxAck { repeated ItemInfo items = 1; }\tmessage CSMessage {\t  int32 cmdId = 1; \t  int32 transId = 2;\t  bytes body = 3; \t}\tmessage SignInfoReq { string wallet = 1; }\tmessage SignInfoAck {\t  int32 msgId = 1;\t  string message = 2;\t}\tmessage BindWalletReq {\t  int32 msgId = 1;\t  string wallet = 2;\t  string sign = 3;\t}\tmessage BindWalletAck {}\tmessage DrawCoinReq { int32 num = 1; }\tmessage DrawCoinAck {\t  int64 copper = 1;\t  int32 drawtime = 2;\t}\tmessage DrawTapReq { double num = 1; }\tmessage DrawTapAck {\t  double tapToken = 1;\t  int64 copper = 2;\t  int32 drawtime = 3;\t}\tmessage DrawMCTokenReq { int32 num = 1; }\tmessage DrawMCTokenAck {\t  int32 mcToken = 1;\t  int64 copper = 2;\t  int32 drawtime = 3;\t}\tmessage DrawNFTSkinReq { int32 id = 1; }\tmessage DrawNFTSkinAck {\t  int32 delId = 1;\t  int64 copper = 2;\t  int32 drawtime = 3;\t}\tmessage DrawPvpCoinReq { int32 num = 1; }\tmessage DrawPvpCoinAck {\t  repeated ItemInfo items = 1;\t  int32 drawtime = 2;\t}\tmessage BlockActionReq {\t  int32 blockId = 1;\t  int32 mapId = 2;\t  int32 actionType = 3;\t}\tmessage BlockActionAck {\t  bool isPraise = 1;     \t  int32 praiseCount = 2; \t}\tmessage BlockAppearNtf { Block block = 1; }\tmessage BlockOverNtf { int32 blockSpawnId = 1; }\tmessage BlockInfoReq { int32 blockId = 1; }\tmessage BlockInfoAck {\t  bool isPraise = 1;     \t  int32 praiseCount = 2; \t}\tmessage SetSquadReq { repeated int32 squad = 1; }\tmessage SetSquadAck {\t  repeated int32 squad = 1; \t}\tmessage TalkRewardReq {\t  int32 blockSpawnId = 1;\t  int32 talkId = 2;\t}\tmessage TalkRewardAck {\t  repeated ItemInfo items = 1; \t}\tmessage TalkHeroReq {\t  int32 blockSpawnId = 1;\t  int32 favor = 2;\t}\tmessage TalkHeroAck {\t  int32 heroId = 1; \t}\tmessage OpenGameplayReq { int32 blockSpawnId = 1; }\tmessage OpenGameplayAck {\t  repeated ItemInfo items = 1; \t}\tmessage TalkGoddessReq { int32 blockSpawnId = 1; }\tmessage TalkGoddessAck {\t  repeated ItemInfo items = 1; \t}\tmessage BlockNormalChestReq { int32 blockSpawnId = 1; }\tmessage BlockNormalChestAck {\t  repeated ItemInfo items = 1; \t  int32 boxId = 2;             \t}\tmessage BlockMemoryCardInfoReq { int32 blockSpawnId = 1; }\tmessage BlockMemoryCardInfoAck { \t  int32 gameCount = 1;\t  int32 buyCount = 2;\t}\tmessage BlockMemoryCardStartReq { int32 blockSpawnId = 1; }\tmessage BlockMemoryCardStartAck {}\tmessage BlockMemoryCardOpenReq { \t  int32 blockSpawnId = 1;\t  int32 cardIndex = 2; \t}\tmessage BlockMemoryCardOpenAck {\t  int32 cardId = 1;\t  int32 clearScore = 2;\t  int32 comboScore = 3;\t  int32 timeScore = 4;\t  int32 isFinish = 5;\t  int32 isNewScore = 6;\t}\tmessage BuyBlockMemoryCardCountReq {\t  int32 blockSpawnId = 1;\t}\tmessage BuyBlockMemoryCardCountAck {\t  int64 copper = 1;    \t  int32 gameCount = 2; \t  int32 buyCount = 3;\t}\tmessage MemoryCardRankListReq {\t  int32 blockSpawnId = 1;\t}\tmessage MemoryCardRankListAck { repeated RankUser rankList = 1; }\tmessage MemoryBoxInfoReq {}\tmessage MemoryBoxInfoAck {\t  int32 boxCount = 1;   \t}\tmessage OpenMemoryBoxReq {}\tmessage OpenMemoryBoxAck {\t  repeated ItemInfo items = 1; \t  int32 counts = 2;            \t}\tmessage EleMisteryLootIncrsReq {}\tmessage EleMisteryLootIncrsAck { map<int32, int32> incrs = 1; }\tmessage OpenTreasureReq { int32 blockSpawnId = 1; }\tmessage OpenTreasureAck { Block blockData = 1; }\tmessage TreasurePointRewardReq {\t  int32 blockSpawnId = 1;\t  int32 index = 2;\t}\tmessage TreasurePointRewardAck {\t  Block blockData = 1;\t  repeated ItemInfo items = 2; \t}\tmessage TreasureFinalRewardReq { int32 blockSpawnId = 1; }\tmessage TreasureFinalRewardAck {\t  Block blockData = 1;\t  repeated ItemInfo items = 2; \t}\tmessage WorldBossInfoReq { int32 blockSpawnId = 1; }\tmessage WorldBossInfoAck {\t  int32 mapLogicId = 1;\t  int32 bossHp = 2;\t  int32 playerNum = 3;\t  int32 surplusEnterCd = 4; \t}\tmessage ChatInfoNtf {\t  int32 senderId = 1;\t  string senderName = 2;\t  string content = 3;\t}\tmessage ApplyMemberInfo {\t  int32 id = 1;\t  string name = 2;\t  int32 icon = 3;\t  int32 lvl = 4;      \t  int32 cup = 5;      \t  int32 inviteId = 6; \t}\tmessage MemberInfo {\t  int32 id = 1;\t  int32 icon = 2;\t  string name = 3;\t  string nickName = 4; \t  int32 position = 5;  \t  int32 cup = 6;       \t  int32 offTime = 7;   \t}\tmessage MemberBaseInfo {\t  int32 id = 1;\t  int32 icon = 2;\t  string name = 3;\t  string nickName = 4; \t  int32 cup = 5;       \t}\tmessage ClubInfo {\t  int32 id = 1;\t  string name = 2;\t  int32 icon = 3;\t  int32 population = 4;\t  string notice = 5;\t  int32 chairmanId = 6;\t  repeated int32 viceCharimanIds = 7;\t  int32 joinLvl = 8;\t  int32 checkJoin = 9;\t  map<int32, string> setting = 10; \t  int32 kingCnt = 11;              \t  int32 gradeTop = 12;             \t  int32 cup = 13;                  \t}\tmessage ClubBaseInfo {\t  int32 id = 1;\t  string name = 2;\t  int32 icon = 3;\t  int32 population = 4;\t  string notice = 5;\t  map<int32, string> setting = 6; \t  int32 kingCnt = 7;              \t  int32 cup = 8;                  \t}\tmessage GetClubInfoReq {}\tmessage GetClubInfoAck {\t  int32 retCode = 1;               \t  ClubInfo club = 2;               \t  repeated MemberInfo members = 3; \t}\tmessage ClubListReq {}\tmessage ClubListAck { repeated ClubBaseInfo clubs = 1; }\tmessage QueryClubReq { int32 id = 1; }\tmessage QueryClubAck {\t  ClubBaseInfo club = 1;\t  repeated MemberBaseInfo members = 2;\t}\tmessage CreateClubReq { string name = 1; }\tmessage CreateClubAck {\t  ClubInfo club = 1;\t  repeated MemberInfo members = 2; \t  repeated ItemInfo items = 3; \t}\tmessage JoinClubReq { int32 id = 1; }\tmessage JoinClubAck {\t  int32 retCode = 1; \t  ClubInfo club = 2;\t  repeated MemberInfo members = 3; \t}\tmessage ExitClubReq {}\tmessage ExitClubAck {}\tmessage ClubMemberOperReq { \t  int32 id = 1;             \t  string nickName = 2;      \t  int32 position = 3;       \t}\tmessage ClubMemberOperAck {}\tmessage ChangeClubNameReq { string name = 1; }\tmessage ChangeClubNameAck {\t  repeated ItemInfo items = 1; \t}\tmessage ChangeClubIconReq { int32 icon = 1; }\tmessage ChangeClubIconAck {}\tmessage ChangeClubJoinLvlReq { int32 lvl = 1; }\tmessage ChangeClubJoinLvlAck {}\tmessage ChangeClubCheckJoinReq { int32 checkJoin = 1; }\tmessage ChangeClubCheckJoinAck {}\tmessage ChangeClubSettingReq {\t  int32 id = 1;\t  string name = 2;\t}\tmessage ChangeClubSettingAck {}\tmessage ChangeClubNoticeReq { string notice = 1; }\tmessage ChangeClubNoticeAck {}\tmessage ClubAppliedMembersReq {}\tmessage ClubAppliedMembersAck { repeated ApplyMemberInfo members = 1; }\tmessage OperAppliedMembersReq {\t  int32 agree = 1;\t  repeated int32 appliedIds = 2;\t}\tmessage OperAppliedMembersAck {}\tmessage KickClubMemberReq { int32 userId = 1; }\tmessage KickClubMemberAck {}\tmessage ClubRankReq {}\tmessage ClubRankAck {\t  repeated RankClub rankList = 1;\t  int32 myRank = 2;\t  int32 myCup = 3;\t  int32 myGrade = 4;\t}\tmessage SeasonUser {\t  int32 id = 1;\t  string name = 2;\t  repeated int32 squad = 3; \t  int32 rank = 4;\t  int32 cup = 5;\t  int32 militaryGrade = 6; \t}\tmessage ClubSeason {\t  int64 startTime = 1;\t  int64 endTime = 2;\t  int32 season = 3; \t  int32 rank = 4;\t  int32 cup = 5;\t  int32 grade = 6;               \t  repeated SeasonUser users = 7; \t}\tmessage ClubSeasonListReq {}\tmessage ClubSeasonListAck { repeated ClubSeason seasons = 1; }\tmessage ErrorAck {\t  int32 code = 1;\t  int32 langId = 2; \t}\tmessage ServerStateNtf {\t  int32 serverType = 1; \t  int32 offline = 2;    \t}\tmessage Player {\t  int32 id = 1;\t  string name = 2;\t  int32 showId = 3;\t  int32 maxhp = 4;\t  int32 hp = 5;\t  int32 targetId = 6;            \t  map<int32, int64> tempBag = 7; \t}\tmessage PlayerProperty {\t  int32 id = 1;\t  int32 targetId = 2;            \t  map<int32, int64> tempBag = 3; \t}\tmessage EnterMapReq {\t  int32 logicMapType = 1;\t  int32 logicMapId = 2;\t  repeated int32 squad = 3; \t  int32 blockSpawnId = 4;\t}\tmessage EnterMapAck {\t  int32 retCode = 1;\t  repeated EnterHeroInfo enterHeros = 2;\t  int32 tileMapId = 3;\t  repeated int32 tileMapPos = 4;\t  int64 endTime = 5; \t}\tmessage BattleEndNtf {\t  bool isWin = 1;\t  repeated ItemInfo monsterLoots = 2; \t  repeated ItemInfo finalLoots = 3;   \t}\tmessage EnterHeroInfo {\t  int32 id = 1; \t  int32 showId = 2;\t  repeated int32 skillIds = 3;\t  Location location = 5;\t}\tmessage LeaveMapReq {}\tmessage LeaveMapAck { int32 retCode = 1; }\tmessage MovePathReq {\t  int32 id = 1; \t  Location targetLocation = 2;\t  int32 isForce = 3; \t}\tmessage MovePathNtf {\t  int32 id = 1; \t  Location targetLocation = 2;\t  int32 isForce = 3; \t}\tmessage SyncLocationReq {\t  int32 id = 1; \t  Location currentLocation = 2;\t}\tmessage MoveInfo {\t  int32 id = 1; \t  Location currentLocation = 2;\t  Location targetLocation = 3;\t}\tmessage ReviveReq {\t  int32 type = 1; \t}\tmessage ReviveAck { int64 copper = 1; }\tmessage ReviveNtf {\t  repeated EHero heros = 1;\t  repeated HeroProperty propertys = 2;\t  repeated EnterHeroInfo enterHeros = 3;\t  bool isSelf = 4;\t}\tmessage ClearWorldBossCDReq { int32 blockSpawnId = 1; }\tmessage ClearWorldBossCDAck { int64 copper = 1; }\tmessage HPChange {\t  int32 id = 1;\t  int32 hp = 2;\t}\tmessage FovPlayersEnterNtf { repeated Player players = 1; }\tmessage FovPlayersLeaveNtf { repeated int32 playerIds = 1; }\tmessage FovPlayersPropertyNtf { repeated PlayerProperty propertys = 1; }\tmessage FovPlayersHPChangeNtf { repeated HPChange hps = 1; }\tmessage NPCInfo {\t  int32 id = 1;\t  int32 userId = 2; \t  string name = 3;\t  int32 showId = 4;\t  Location location = 5;\t  int32 level = 6;\t}\tmessage NPCProperty {\t  int32 id = 1;\t  int32 userId = 2; \t  int32 hp = 3;\t  int32 maxHp = 4;\t  int32 atkSpeed = 5;        \t  int32 skillFlag = 6;       \t  int32 shieldHp = 7;        \t  int32 shieldMaxHp = 8;     \t  int64 shieldBeginTime = 9; \t  int32 shieldDuration = 10; \t  int32 moveSpeed = 11;      \t}\tmessage BuffList {\t  int32 id = 1;\t  repeated int32 buffIds = 2;  \t  map<int32, int32> props = 3; \t}\tmessage FovNpcsEnterNtf { repeated NPCInfo npcs = 1; }\tmessage FovNpcsLeaveNtf { repeated int32 npcIds = 1; }\tmessage FovNpcsPropertyNtf { repeated NPCProperty propertys = 1; }\tmessage FovNpcsMoveNtf { repeated MoveInfo moves = 1; }\tmessage FovNpcsHPChangeNtf { repeated HPChange hps = 1; }\tmessage FovNpcsBuffNtf { repeated BuffList buffs = 1; }\tmessage EHero {\t  int32 id = 1;\t  int32 userId = 2;\t  int32 showId = 3;\t  bool isleader = 4; \t  string name = 5;\t  Location location = 6;\t  int32 level = 7;\t}\tmessage HeroProperty {\t  int32 id = 1;\t  int32 userId = 2; \t  int32 hp = 3;\t  int32 maxHp = 4;\t  int32 atkSpeed = 5;        \t  int32 skillFlag = 6;       \t  int32 shieldHp = 7;        \t  int32 shieldMaxHp = 8;     \t  int64 shieldBeginTime = 9; \t  int32 shieldDuration = 10; \t  int32 moveSpeed = 11;      \t}\tmessage FovHerosEnterNtf { repeated EHero heros = 1; }\tmessage FovHerosLeaveNtf { repeated int32 heroIds = 1; }\tmessage FovHerosPropertyNtf { repeated HeroProperty propertys = 1; }\tmessage FovHerosMoveNtf { repeated MoveInfo moves = 1; }\tmessage FovHerosHPChangeNtf { repeated HPChange hps = 1; }\tmessage FovHerosBuffNtf { repeated BuffList buffs = 1; }\tmessage FovHerosInfoChangeNtf { repeated EHero heros = 1; }\tmessage SyncHeroInfoNtf {\t  int32 id = 1;       \t  int32 tauntId = 2;  \t  int32 scaredId = 3; \t}\tmessage DropItem {\t  int32 id = 1; \t  int32 num = 2;\t  Location location = 3; \t}\tmessage DropItemsNtf { repeated DropItem items = 1; }\tmessage BattleMapInfoNtf {\t  int32 currStage = 1;          \t  int32 maxStage = 2;           \t  int32 endTime = 3;            \t  map<int32, int32> hpBoxs = 4; \t}\tmessage EnterMapNtf {\t  int32 mapId = 1;     \t  int32 logicType = 2; \t  int32 logicId = 3;   \t  int32 serverId = 4;  \t}\tmessage EnterWorldBossReq {}\tmessage EnterWorldBossAck {\t  int32 mapId = 1;     \t  int32 logicType = 2; \t  int32 logicId = 3;   \t  int32 serverId = 4;  \t}\tmessage LeaveWorldBossReq {}\tmessage LeaveWorldBossAck {}\tmessage LockTargetReq {\t  int32 lockedUserId = 1; \t}\tmessage LockTargetNtf {\t  int32 userId = 1;       \t  int32 lockedUserId = 2; \t}\tmessage ChestInfo {\t  int32 id = 1;     \t  int32 itemId = 2; \t  Location location = 3;\t  int32 picker = 4;       \t  int32 state = 5;        \t  int64 pickTime = 6;     \t  int64 pickDuration = 7; \t  int64 leftTime = 8;\t}\tmessage FovChestsEnterNtf { repeated ChestInfo chests = 1; }\tmessage FovChestsLeaveNtf { repeated int32 ids = 1; }\tmessage FovChestsPropertyNtf { repeated ChestInfo propertys = 1; }\tmessage PickChestReq { int32 id = 1; }\tmessage PickChestAck { repeated ItemInfo items = 1; }\tmessage CancelPickChestReq { int32 id = 1; }\tmessage CancelPickChestAck {}\tmessage BattleEventNtf {\t  int32 evt = 1;                  \t  int32 attackId = 2;             \t  int32 targetId = 3;             \t  map<int32, int64> robItems = 4; \t}\tmessage SkillProduceReq {\t  int32 heroId = 1;\t  int32 skillId = 2;\t}\tmessage SkillProduceAck {\t  int64 produceTime = 1;\t  repeated ItemInfo items = 2; \t}\tmessage SkinTokenInfoReq { int32 skinTokenID = 1; }\tmessage SkinTokenInfoAck { int32 canBuyNum = 1; }\tmessage SkinBuyMcTokenReq {\t  int32 heroId = 1; \t  int32 id = 2;     \t}\tmessage SkinBuyMcTokenAck {\t  repeated ItemInfo items = 2; \t}\tmessage EatFoodReq {\t  int32 heroId = 1;\t  int32 foodId = 2;\t  int32 num = 3;\t}\tmessage EatFoodAck {\t  int32 eatLvl = 1;            \t  int32 eatExp = 2;            \t  int32 eatVal = 3;            \t  int64 eatTime = 4;           \t  repeated ItemInfo items = 5; \t}\tmessage WearEquipReq {\t  int32 heroId = 1;\t  int32 equipId = 2;\t}\tmessage WearEquipAck {\t  repeated int32 equips = 1;   \t  repeated ItemInfo items = 2; \t}\tmessage UnWearEquipReq {\t  int32 heroId = 1;\t  int32 equipId = 2;\t}\tmessage UnWearEquipAck {\t  repeated int32 equips = 1;   \t  repeated ItemInfo items = 2; \t}\tmessage WearSkinReq {\t  int32 heroId = 1;\t  int32 id = 2; \t}\tmessage WearSkinAck {\t  int32 heroId = 1;\t  HeroSkin skin = 2;    \t  int32 delId = 3;      \t  SkinInfo addSkin = 4; \t}\tmessage UnWearSkinReq { int32 heroId = 1; }\tmessage UnWearSkinAck {\t  int32 heroId = 1;\t  SkinInfo skin = 2; \t}\tmessage UpgradeSkinReq {\t  int32 heroId = 1; \t  int32 id = 2;     \t}\tmessage UpgradeSkinAck {\t  SkinInfo skin = 1; \t  int32 sp = 2;\t  int32 MCToken = 3; \t  double tapToken = 4; \t}\tmessage SkinsChangeNtf {\t  repeated int32 delIds = 1;   \t  repeated SkinInfo skins = 2; \t}\tmessage ActHeroNtf { Hero hero = 1; }\tmessage InviteInfoReq {}\tmessage InviteInfoAck {\t  int32 num = 1;\t  repeated int32 gotAwards = 2;\t  int32 bindWalletNum = 3; \t  string inviteCode = 4;   \t}\tmessage GetInviteListReq {}\tmessage GetInviteListAck { repeated InviteUser list = 1; }\tmessage InviteUser {\t  int32 userId = 1;\t  string name = 2;\t  bool isBindWallet = 3; \t}\tmessage InviteAwardReq { int32 id = 1; }\tmessage InviteAwardAck {\t  repeated ItemInfo items = 1; \t  repeated int32 gotAwards = 2;\t}\tmessage InviteBoxInfoReq {}\tmessage InviteBoxInfoAck {\t  int32 boxCount = 1;   \t  int32 todayCount = 2; \t}\tmessage OpenInviteBoxReq {}\tmessage OpenInviteBoxAck {\t  repeated ItemInfo items = 1; \t  int32 counts = 2;            \t}\tmessage EnterGameReq {\t  int32 accountId = 1;\t  int32 serverId = 2;\t  string token = 3;\t  string name = 4;\t  int32 time = 5;\t  int32 sex = 6;         \t  string nickName = 7;   \t  int32 relogin = 8;     \t  string inviteCode = 9; \t}\tmessage EnterGameAck {\t  int32 code = 1;\t  int32 serverId = 2;\t  UserInfo userInfo = 3;\t  ServerTimeInfo serverTimeInfo = 4;\t}\tmessage CreateRoleReq {\t  int32 sex = 1; \t  string nickName = 2;\t}\tmessage CreateRoleAck {\t  UserInfo userInfo = 1;\t  ServerTimeInfo serverTimeInfo = 2;\t}\tmessage CommandReq { string command = 1; }\tmessage CommandAck {}\tmessage GetCommentTokenReq {}\tmessage GetCommentTokenAck {\t  string token = 1;\t  int64 ts = 2;\t  int32 militaryGrade = 3;\t}\tmessage UserInfoNtf { UserInfo userInfo = 1; }\tmessage GetMailListReq {}\tmessage GetMailListAck { repeated Mail mails = 1; }\tmessage ReadMailReq {\t  int32 id = 1; \t}\tmessage ReadMailAck {\t  int32 id = 1;     \t  int32 isRead = 2; \t}\tmessage PickMailItemsReq {\t  int32 id = 1; \t}\tmessage PickMailItemsAck {\t  int32 id = 1;       \t  int32 isPicked = 2; \t  repeated ItemInfo items = 3;\t  double tapToken = 4;\t  double addTapToken = 5;\t}\tmessage NewMailNtf { Mail mail = 1; }\tmessage Mail {\t  int32 id = 1;                    \t  int32 userId = 2;                \t  int32 type = 3;                  \t  int32 sysMailId = 4;             \t  string fromName = 5;             \t  string title = 6;                \t  string content = 7;              \t  repeated string replaceArgs = 8; \t  map<int32, int32> items = 9;     \t  int32 IsPicked = 10;             \t  int32 IsRead = 11;               \t  int32 DelHours = 12;             \t  int64 DelTime = 13;              \t  int64 ExpireTime = 14;           \t  int64 AddTime = 15;              \t  int32 IsDelete = 16;             \t}\tmessage RequestPayReq { int32 id = 1; }\tmessage RequestPayAck {\t  PayData payData = 1;\t}\tmessage CheckPayReq { \t  string checkData = 1; \t  PayData payData = 2;\t}\tmessage CheckPayAck {\t  int32 isSucc = 1;\t}\tmessage PayData {\t  int32 rechargeId = 1;\t  string productID = 2;\t  float price = 3;         \t  string orderNo = 4;\t}\tmessage ReportBlockReq {\t    int32 blockId = 1;\t    int64 openTime = 2;     \t    int64 enterTime = 3;    \t    int64 doneTime = 4;     \t    int64 closeTime = 5;    \t    int32 doneType = 6;     \t    int32 praise = 7;       \t    int32 share = 8;        \t}\tmessage ReportBlockAck {}\tmessage ExecuteSkillReq {\t  int32 srcID = 1;    \t  int32 skillID = 2;  \t  int32 targetID = 3; \t}\tmessage ExecuteSkillAck {\t  int32 retCode = 1;  \t  int32 srcID = 2;    \t  int32 skillID = 3;  \t  int32 targetID = 4; \t}\tmessage ExecuteSkillNtf {\t  int32 skillID = 1;  \t  int32 srcID = 2;    \t  int32 targetID = 3; \t  Location currentLocation = 4;\t  float moveTime = 5; \t}\tmessage SkillDamageNtf {\t  int32 skillID = 1;    \t  int32 srcID = 2;      \t  int32 targetID = 3;   \t  int32 damageType = 4; \t  int32 damage = 5;     \t  int32 mainTargetID = 6; \t  int32 bRepulsed = 7;    \t  int32 repulsedX = 8;    \t  int32 repulsedY = 9;    \t  int32 bPunchFly = 10; \t  int32 bHp70 = 11;     \t}\tmessage SkillRecoverNtf {\t  int32 skillID = 1;  \t  int32 srcID = 2;    \t  int32 targetID = 3; \t  int32 value = 4;    \t}\tmessage SkillEventNtf {\t  int32 skillID = 1;  \t  int32 srcID = 2;    \t  int32 targetID = 3; \t  int32 evt = 4;      \t  int32 evtPara1 = 5; \t  int32 evtPara2 = 6; \t  int32 evtPara3 = 7;\t  int32 evtPara4 = 8;\t}\tmessage SkillBeInterruptNtf {\t  int32 skillID = 1;       \t  int32 srcID = 2;         \t  int32 targetID = 3;      \t  int32 interruptType = 4; \t}\tmessage HeroDieNtf { int32 id = 1; }\tmessage NPCDieNtf { int32 id = 1; }\tmessage BuyStarPassReq {}\tmessage BuyStarPassAck { repeated ItemInfo items = 1; }\tmessage BuyStarPassDiamondReq {}\tmessage BuyStarPassDiamondAck { repeated ItemInfo items = 1; }\tmessage StarPassRewardReq {\t  int32 id = 1;\t  int32 type = 2; \t}\tmessage StarPassRewardAck { repeated ItemInfo items = 1; }\tmessage StarPassBoxRewardReq {}\tmessage StarPassBoxRewardAck {\t  int32 boxNum = 1; \t  repeated ItemInfo items = 2;\t}\tmessage SysMsgNtf { SysMsg msg = 1; }\tmessage SysMsg {\t  int32 msgType = 1; \t  int32 msgId = 2;\t  repeated SysMsgParam param = 3;\t  string msg = 4;\t}\tmessage SysMsgParam {\t  string val = 1;    \t  int32 valType = 2; \t}\tmessage TradeStatisticalReq {\t}\tmessage TradeStatisticalAck {\t  TradeTotal Hour24 = 1;\t  TradeTotal Day7 = 2;\t  TradeTotal Day30 = 3;\t}\tmessage TradeStatisticalNtf {\t  TradeTotal Hour24 = 1;\t  TradeTotal Day7 = 2;\t  TradeTotal Day30 = 3;\t}\tmessage TradeTotal {\t  int64 tradeCount = 1; \t  int64 tradeMoney = 2; \t}\tmessage TradeHistoryReq {}\tmessage TradeHistoryAck { repeated SysMsg list = 1; }\tmessage FishHistoryReq {}\tmessage FishHistoryAck { repeated SysMsg list = 1; }\tmessage WatchMsgReq {\t  int32 watchType = 1;\t  int32 extParam = 2; \t}\tmessage WatchMsgAck {}\tmessage UnWatchMsgReq { int32 watchType = 1; }\tmessage UnWatchMsgAck {}\t/*\t * @Author: WuPeng\t * @Date: 2022-03-02 14:16:04\t * @LastEditors: WuPeng\t * @LastEditTime: 2022-03-02 20:54:05\t * @FilePath: /server/src/proto/cs/teamBoss.cs.proto\t */\tmessage TeamBaseInfo {\t  int64 id = 1;\t  int32 type = 2;          \t  int32 bossId = 3;        \t  TeamMember leader = 4;   \t  int32 MemberSize = 5;    \t  int32 MemberMaxSize = 6; \t}\tmessage TeamInfo {\t  int64 id = 1;\t  int32 type = 2;                     \t  int32 bossId = 3;                   \t  int32 state = 4;                    \t  TeamMember leader = 5;              \t  repeated TeamMember memberList = 6; \t  int32 mapLogicId = 7;               \t}\tmessage TeamMember {\t  int32 userId = 1; \t  string name = 2;\t  string clubName = 3;\t  int32 icon = 4;\t  repeated TeamHero squadHeros = 5;\t}\tmessage TeamHero {\t  int32 id = 1; \t  int32 showId = 2;\t  repeated int32 equips = 3; \t}\tmessage TeamListReq {}\tmessage TeamListAck {}\tmessage TeamMemberNumNtf {}\tmessage CreateTeamReq {\t  int32 teamType = 1;\t  int32 bossId = 2;\t  repeated int32 squad = 3; \t}\tmessage CreateTeamAck { TeamInfo team = 1; }\tmessage CreateTeamNtf { TeamBaseInfo team = 1; }\tmessage JoinTeamReq {}\tmessage JoinTeamAck {}\tmessage JoinTeamNtf {}\tmessage ChangeTeamSquadReq {}\tmessage ChangeTeamSquadAck {}\tmessage ChangeTeamSquadNtf {}\tmessage ExitTeamReq {}\tmessage ExitTeamAck {}\tmessage ExitTeamNtf {}\tmessage KickTeamReq {}\tmessage KickTeamAck {}\tmessage KickTeamNtf {}\tmessage DelTeamNtf {}\tmessage GetTileMapReq {}\tmessage GetTileMapAck {\t  int32 mapId = 1;\t  repeated int32 pos = 2;\t  repeated Block blocks = 3;\t}\tmessage TileMapMoveReq { repeated int32 pos = 1; }\tmessage TileMapMoveAck { int32 newMapId = 1; }\tmessage TileMapSwitchReq { int32 switchId = 1; }\tmessage TileMapSwitchAck {\t  int32 mapId = 1;\t  repeated int32 pos = 2;\t  repeated Block blocks = 3;\t}\tmessage TileMapConveyReq { int32 mapId = 1; }\tmessage TileMapConveyAck {\t  int32 mapId = 1;\t  repeated int32 pos = 2;\t  repeated Block blocks = 3;\t}\tmessage TileMapUnlockReq { int32 mapId = 1; }\tmessage TileMapUnlockAck {\t  repeated int32 unLockMaps = 1; \t}\tmessage EnterEleMisteryReq { int32 id = 1; }\tmessage EnterEleMisteryAck {\t  int32 mapId = 1;\t  repeated int32 pos = 2;\t  repeated Block blocks = 3;\t  repeated ItemInfo items = 4;\t  int32 backCity = 5;\t}\tmessage GoodsInfo {\t  int32 tradeId = 1; \t  int32 userId = 2;  \t  int32 itemId = 3;\t  int64 itemNum = 4;\t  int64 price = 5;\t  int64 endTime = 6;      \t  int32 personal = 7;     \t  string personalKey = 8; \t}\tmessage TradeRewardInfo {\t  int32 id = 1; \t  int32 itemId = 2;\t  int64 itemNum = 3;\t  int32 state = 4; \t}\tmessage SellGoodsReq {\t  int32 itemId = 1;   \t  int64 itemNum = 2;  \t  int64 price = 3;    \t  int32 personal = 4; \t}\tmessage SellGoodsAck {\t  ItemInfo items = 2;  \t  GoodsInfo goods = 3; \t}\tmessage BuyGoodsReq {\t  int32 tradeId = 1; \t}\tmessage BuyGoodsAck {\t  int32 tradeId = 1;           \t  repeated ItemInfo items = 2; \t}\tmessage CancelGoodsReq { int32 tradeId = 1; }\tmessage CancelGoodsAck {\t  int32 tradeId = 1;\t  ItemInfo items = 2; \t}\tmessage QuerySelfGoodsListReq {}\tmessage QuerySelfGoodsListAck {\t  repeated GoodsInfo goodsList = 1;\t  repeated TradeRewardInfo rewardList = 2;\t}\tmessage QueryGoodsByIdReq { int32 tradeId = 1; }\tmessage QueryGoodsByIdAck { GoodsInfo goods = 1; }\tmessage QueryGoodsByKeyReq { string key = 1; }\tmessage QueryGoodsByKeyAck { GoodsInfo goods = 1; }\tmessage QueryGoodsListReq {\t  int32 itemId = 1; \t}\tmessage QueryGoodsListAck { repeated GoodsInfo goodsList = 1; }\tmessage QueryGoodsCataNumReq { \t  int32 cataId = 1;   \t}\tmessage GoodsCataNum {\t  int32 lv = 1;  \t  int32 num = 2; \t}\tmessage QueryGoodsCataNumAck {  \t  repeated GoodsCataNum nums = 1;\t}\tmessage QueryGoodsNumByLvReq { \t  int32 cataId = 1;  \t  int32 minLv = 2;  \t  int32 maxLv = 3;\t}\tmessage GoodsLvNum {\t  int32 itemId = 1;\t  int32 itemNum = 2;\t}\tmessage QueryGoodsNumByLvAck { \t  repeated GoodsLvNum nums = 1;\t} \tmessage RecvTradeRewardReq {\t  int32 id = 1; \t}\tmessage RecvTradeRewardAck {\t  int32 id = 1;       \t  ItemInfo items = 2; \t}\tmessage ReNameReq { string name = 1; }\tmessage ReNameAck {\t  string name = 1;\t  repeated ItemInfo items = 2; \t}\tmessage ChangeAvatarReq { int32 icon = 1; }\tmessage ChangeAvatarAck { int32 icon = 1; }\tmessage BuyVitReq {\t  int32 type = 1; \t}\tmessage BuyVitAck {\t  int32 addVit = 1;             \t  repeated ItemInfo items = 2;  \t  map<int32, Count> counts = 3; \t}\tmessage BuyVitDiamondReq {\t  int32 type = 1; \t}\tmessage BuyVitDiamondAck {\t  int32 addVit = 1;             \t  repeated ItemInfo items = 2;  \t  map<int32, Count> counts = 3; \t}\tmessage UseCouponReq { string code = 1; }\tmessage UseCouponAck {\t  repeated ItemInfo items = 1; \t}\tmessage OpenBlindBoxReq {\t  int32 type = 1; \t  int32 blockSpawnId = 2;\t}\tmessage OpenBlindBoxAck {\t  repeated ItemInfo items = 1; \t  SkinInfo addSkin = 2;        \t  int32 counts = 3;            \t  repeated int32 boxIds = 4;   \t}\tmessage GetBlindBoxInfoReq {\t  int32 type = 1; \t  int32 blockSpawnId = 2;\t}\tmessage GetBlindBoxInfoAck {\t  int32 counts = 1;          \t  repeated int32 boxIds = 2; \t}\tmessage FishingReq {\t  int32 color = 1; \t}\tmessage FishingAck {\t  repeated ItemInfo items = 1; \t  int32 weight = 2;\t  int32 myOldMax = 3; \t  int32 myNewMax = 4; \t  int32 oldMax = 5;   \t  int32 newMax = 6;   \t}\tmessage MyFishInfoReq {}\tmessage MyFishInfoAck {\t  int64 myRank = 1;\t  int32 myScore = 2;\t  int32 myRankKey = 3;\t}\tmessage FishRankListReq {}\tmessage FishRankListAck { repeated RankUser rankList = 1; }\tmessage FishInfoReq {\t  int32 id = 1; \t}\tmessage FishInfoAck {\t  int32 maxWeight = 1;\t  string name = 2; \t}\tmessage FishSellInfoReq {}\tmessage FishSellInfoAck { map<int32, int32> fishCounts = 1; }\tmessage FishSellReq {\t  int32 id = 1; \t  int32 num = 2;\t}\tmessage FishSellAck {\t  repeated ItemInfo items = 1; \t  int32 count = 2;             \t}\tmessage FishRewardPoolReq {}\tmessage FishRewardPoolAck { int64 count = 1; }\tmessage SyncRechargeNtf {\t  repeated int32 ids = 1; \t}\tmessage ReceiveRechargeReq { int32 id = 1; }\tmessage ReceiveRechargeAck {\t  int64 addCopper = 1;\t  int64 copper = 2;\t  int64 addMCToken = 3;\t  int64 MCToken = 4; \t  double addTapToken = 5;\t  double tapToken = 6; \t  SkinInfo skin = 7;   \t  int64 addDiamond = 8;\t  int64 diamond = 9;   \t}\tmessage PricesReq {}\tmessage PricesAck {\t  double mcTokenPrice = 1;  \t  double tapTokenPrice = 2; \t}\tmessage PricesNtf {\t  double mcTokenPrice = 1;  \t  double tapTokenPrice = 2; \t}\tmessage ChangeBubbleReq { int32 bubbleId = 1; }\tmessage ChangeBubbleAck {\t  int32 bubble = 1; \t}\tmessage GetMailCodeReq {\t  string mail = 1;    \t}\tmessage GetMailCodeAck {}\tmessage BindMailReq{\t  string mail = 1;    \t  string code = 2;  \t}\tmessage BindMailAck{}\tmessage UserInfoChangeNtf{\t  int32 vit = 1;      \t}\tmessage AccountInfoChangeNtf{\t  int32 status = 1;   \t}\t')
}
function ln() {
    O.loadData("hunt/data.json").then(e => (Mmobay.gameDispatcher.event(Mmobay.MEvent.LOAD_PROGRESS, Mmobay.MConst.LOAD_NET), O.login.enterGame())).then(e => {
        e || console.log("enter game error"),
        rn.init()
    })
}
class hn extends Laya.EventDispatcher {
    constructor() {
        super(...arguments),
        this._showDisconnected = !1,
        this._isFirstLogin = !0
    }
    reqEnterGame(t = !1) {
        let e = pb.EnterGameReq.create();
        var i = Mmobay.Manager.loginMgr.loginData;
        return e.accountId = i.accountId,
        e.name = i.name,
        e.token = i.token,
        e.time = i.time,
        e.sex = Mmobay.Manager.loginMgr.sex,
        e.nickName = Mmobay.Manager.loginMgr.nickName,
        e.relogin = t ? 1 : 0,
        e.inviteCode = i.inviteCode,
        A(e, pb.IEnterGameAck).then(e => e.code == C.Succ && this.onEnterGameAck(e, t))
    }
    handleErrorAck(e) {
        this._disConnectSocket(),
        Laya.timer.clear(this, this._callLateReconnect),
        Ae({
            button: V.Yes,
            msg: zt(e),
            hideClose: !0
        }).then(e => {})
    }
    onEnterGameAck(e, t) {
        var i = Mmobay.Manager.loginMgr.loginData;
        return Date.setStandard(e.serverTimeInfo.serverTime, e.serverTimeInfo.serverZoneTime),
        Date.setServerDate(e.serverTimeInfo.todayZeroTime, e.serverTimeInfo.mondayZeroTime),
        this.loginSucc(e.userInfo),
        R.seasonEndTime = +e.serverTimeInfo.seasonSettleTime,
        O.account.initAccount(i),
        this._isFirstLogin = !1,
        t ? (O.event(c.REENTER_GAME), O.tileMap.reqTileMap(!0).then(() => !0)) : Promise.resolve(!0)
    }
    loginSucc(e) {
        console.log("loginsucc"),
        R.init(e),
        I.instance.init()
    }
    enterGame() {
        return this.connectGameServer().then(() => this.reqEnterGame()).catch(e => {
            console.log("enterGame error");
            var t = Laya.Handler.create(this, e => {
                console.log("click to reconnect ..."),
                e._disConnectSocket(),
                Qt.reconnectcount = 0,
                ln()
            }, [this]),
            t = {
                type: 0,
                msg: S(2051),
                handler: t
            };
            return Mmobay.gameDispatcher.event(Mmobay.MEvent.CONNECT_GAME_ERROR, t),
            Promise.reject("enterGame error")
        })
    }
    connectGameServer() {
        return this._disConnectSocketPromise().then(() => {
            return this._watchGameSocket(),
            e = Mmobay.MConfig.addr,
            t = ni,
            Qt.isConnected && e == Qt.addr ? Promise.resolve(void 0) : (Qt.connect(e), Qt.messageHandler = t, clearTimeout(Lt), new Promise((e, t) => {
                    Qt.once(Laya.Event.OPEN, null, () => {
                        clearTimeout(Lt),
                        e(void 0)
                    }),
                    Qt.once(Laya.Event.CLOSE, null, () => {
                        clearTimeout(Lt),
                        t("socket关闭")
                    }),
                    Qt.once(Laya.Event.ERROR, null, e => {
                        clearTimeout(Lt),
                        t(e || "socket错误")
                    }),
                    Lt = setTimeout(() => {
                        var e = {
                            code: 8,
                            message: "服务器连接超时"
                        };
                        console.error(e),
                        Qt.disconnect(!1),
                        t(e)
                    }, 6e4)
                }));
            var e,
            t
        })
    }
    _disConnectSocketPromise() {
        return new Promise((e, t) => {
            let i = Qt;
            i.offAll(),
            i.isConnected ? (i.once(Laya.Event.CLOSE, this, e), i.disconnect(!1), Laya.Render.isConchApp && Qt.event(Laya.Event.CLOSE)) : e()
        })
    }
    _watchGameSocket() {
        let e = Qt;
        e.offAll(),
        e.once(Laya.Event.CLOSE, this, () => {
            O.event(c.NET_DISCONNECTED),
            Qt.reconnectcount++,
            Qt.autoReconnect && Qt.reconnectcount < 5 ? this.reconnect() : (console.log("_watchGameSocket " + Qt.reconnectcount), this._isFirstLogin || this.popDisconnectMsg("gameServer closed"))
        }),
        e.once(Laya.Event.ERROR, this, () => {})
    }
    reconnect() {
        Laya.timer.clear(this, this._callLateReconnect),
        this._disConnectSocket(),
        O.event(c.NET_DISCONNECTED),
        Laya.timer.once(1e3, this, this._callLateReconnect)
    }
    _callLateReconnect() {
        return this.connectGameServer().then(() => this.reqEnterGame(!0)).then(() => {
            this._showDisconnected = !1,
            Qt.reconnectcount = 0,
            console.log("_callLateReconnect reqEnterGame ok, GameEvent.NET_RECONNECTED"),
            O.event(c.NET_RECONNECTED)
        }).catch(e => {
            this._showDisconnected = !1
        })
    }
    _disConnectSocket() {
        let e = Qt;
        e.offAll(),
        e.disconnect(!1)
    }
    onServerState(e, t) {
        e == ze.game && 1 == t && (this._disConnectSocket(), this.popDisconnectMsg())
    }
    popDisconnectMsg(e) {
        this._showDisconnected = !0,
        Qt.reconnectcount = 0,
        Ae({
            button: V.Yes,
            msg: S(2051),
            hideClose: !0,
            okTxt: S(2052)
        }).then(e => {
            this.reconnect()
        })
    }
    clearLocal() {
        w.set(w.s_newFood, "")
    }
}
window.sendCommand = function (t) {
    let e = pb.CommandReq.create();
    return e.command = t,
    A(e, pb.ICommandAck).then(e => (console.log("command:", t), e))
};
class mn extends t.hunt.views.trade.TradeBuyDlgUI {
    constructor(e) {
        super(),
        this.m_good = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    onDestroy() {
        super.onDestroy(),
        Laya.timer.clearAll(this)
    }
    updateView() {
        var e = this.m_good.itemId,
        t = Data.getItem(e),
        i = this.m_good.itemNum,
        e = (this.m_view_Detail.setData({
                itemNum: i,
                itemId: e,
                itemCfg: t
            }), this.m_txt_Num.changeText(S(1003, " " + i)), this.m_good.price);
        this.m_view_Money.setData(e * i)
    }
    onClickBuy() {
        var e,
        t;
        this.m_good.userId == R.id ? h(S(19)) : (e = this.m_good.price, t = this.m_good.itemNum, R.copper < e * t ? h(S(25)) : O.trade.reqBuyGoods(this.m_good.tradeId, this.m_good.itemId).then(() => {
                this.closeDialog()
            }))
    }
}
class cn extends t.hunt.views.trade.TradeKeyDlgUI {
    constructor(e) {
        super(),
        this.m_key = "",
        this.m_key = e
    }
    onAwake() {
        super.onAwake(),
        this.m_txt_Area.text = this.m_key
    }
    onClickCopy() {
        navigator.clipboard && navigator.clipboard.writeText(this.m_txt_Area.text),
        h(S(1)),
        this.closeDialog()
    }
}
class dn {
    constructor() {
        this.ani_index = -1,
        this.down_index = -1
    }
    reqSellGoods(e, t, i, s = 0, a = 0) {
        let r = pb.SellGoodsReq.create();
        return r.itemId = e,
        r.itemNum = t,
        r.price = i,
        r.personal = s,
        A(r, pb.ISellGoodsAck).then(e => {
            this.ani_index = a,
            this.sellGoods.push(e.goods),
            this.initGoods();
            var t = e.goods.personalKey;
            t && u(cn, {
                params: [t]
            }),
            O.bag.updateItem([e.items]),
            O.event(c.UPDATE_UP_SELL)
        })
    }
    reqBuyGoods(e, t) {
        let i = pb.BuyGoodsReq.create();
        return i.tradeId = e,
        A(i, pb.IBuyGoodsAck).then(e => {
            O.bag.updateItem(e.items),
            Et(e.items),
            O.event(c.UPDATE_UP_SELL),
            O.event(c.UPDATE_RED_SELL, [null, !0])
        })
    }
    reqCancelGoods(e, i) {
        let t = pb.CancelGoodsReq.create();
        return t.tradeId = e,
        A(t, pb.ICancelGoodsAck).then(t => {
            for (let e = 0; e < this.sellGoods.length; e++)
                if (this.sellGoods[e] && this.sellGoods[e].tradeId == t.tradeId) {
                    this.sellGoods[e] = null;
                    break
                }
            this.down_index = i,
            this.initGoods(),
            O.bag.updateItem([t.items]),
            O.event(c.UPDATE_UP_SELL, i)
        })
    }
    initGoods() {
        this.sellGoods = this.sellGoods.filter(e => !!e),
        this.sellGoods.sort((e, t) => t.endTime || 0 - e.endTime || 0);
        var t = 6 - this.sellGoods.length;
        for (let e = 0; e < t; e++)
            this.sellGoods.push(null)
    }
    reqSelfGoodsList() {
        return A(pb.QuerySelfGoodsListReq.create(), pb.IQuerySelfGoodsListAck).then(t => {
            this.sellGoods = [];
            for (let e = 0; e < t.goodsList.length; e++)
                this.sellGoods.push(t.goodsList[e]);
            for (let e = 0; e < t.rewardList.length; e++)
                this.sellGoods.push(t.rewardList[e]);
            return this.initGoods(),
            t.rewardList
        })
    }
    reqGoodsById(e) {
        let t = pb.QueryGoodsByIdReq.create();
        return t.tradeId = e,
        A(t, pb.IQueryGoodsByIdAck).then(e => {})
    }
    reqGetTradeInfos(e) {
        let t = pb.QueryGoodsListReq.create();
        return t.itemId = e,
        A(t, pb.IQueryGoodsListAck).then(e => e.goodsList)
    }
    reqCataNums(e) {
        let t = pb.QueryGoodsCataNumReq.create();
        return t.cataId = e,
        A(t, pb.IQueryGoodsCataNumAck).then(e => e.nums)
    }
    reqGoodByLv(e, t, i) {
        let s = pb.QueryGoodsNumByLvReq.create();
        return s.cataId = e,
        s.maxLv = i,
        s.minLv = t,
        A(s, pb.IQueryGoodsNumByLvAck).then(e => e.nums)
    }
    reqRecvReward(e, s = !1) {
        let t = pb.RecvTradeRewardReq.create();
        return t.id = e,
        A(t, pb.IRecvTradeRewardAck).then(t => {
            t.items && (I.instance.playSound(v.SE_GetGold), O.bag.updateItem([t.items]), Et([t.items], null, "", null, s ? S(85) : ""));
            for (let e = 0; e < this.sellGoods.length; e++) {
                var i = this.sellGoods[e];
                if (!i.endTime && i.id == t.id) {
                    this.sellGoods[e] = null;
                    break
                }
            }
            this.initGoods(),
            O.event(c.UPDATE_UP_SELL)
        })
    }
    getSpData() {
        return []
    }
    checkSaleRed() {
        return 0 < this.sellGoods.filter(e => e && (e.state == Je.sold || e.state == Je.expire)).length
    }
    getOutEquipIds(e, i, s) {
        var a;
        let r = [];
        for (let t of this.getAllEquips())
            t.type == e && i == t.lvl && (a = s.find(e => e.itemId == t.id), r.push({
                    id: t.id,
                    num: a ? a.itemNum : 0
                }));
        return r.sort((e, t) => Data.getEquip(e.id).lvl - Data.getEquip(t.id).lvl)
    }
    getFoodByExp(e, i, s, a) {
        let r = [];
        for (var n of this.getAllFoods()) {
            let t = Data.getItem(n.id);
            var n = n.exp / 150;
            t.type == e && i <= n && n <= s && (n = a.find(e => e.itemId == t.id), r.push({
                    id: t.id,
                    num: n ? n.itemNum : 0
                }))
        }
        return r.sort((e, t) => Data.getFood(e.id).exp - Data.getFood(t.id).exp),
        r
    }
    getAllEquips() {
        if (this.allEquips)
            return this.allEquips;
        var e;
        this.allEquips = [];
        for (e of Object.keys(Data.equips))
            Data.getTrade(+e) && this.allEquips.push(Data.getEquip(+e));
        return this.allEquips
    }
    getAllFoods() {
        if (this.allFoods)
            return this.allFoods;
        var e;
        this.allFoods = [];
        for (e of Object.keys(Data.foods))
            Data.getTrade(+e) && this.allFoods.push(Data.getFood(+e));
        return this.allFoods
    }
    getSortTradeInfo(e, t, i) {
        let s = i ? 1 : -1;
        return e ? 0 == t ? e.sort((e, t) => (e.price - t.price) * s) : 1 == t ? e.sort((e, t) => (+e.price * +e.itemNum - +t.price * +t.itemNum) * s) : void 0 : []
    }
    checkFull() {
        var e = this.sellGoods.filter(e => !!e).length;
        return O.pass.passBuy ? 6 <= e : 5 <= e
    }
    getRateByPass(e) {
        return Math.ceil(e * (O.pass.passBuy ? +Data.gameConf.starPassCfg.tradeRate : 1))
    }
    reqSearch(e) {
        let t = pb.QueryGoodsByKeyReq.create();
        return t.key = e,
        A(t, pb.QueryGoodsByKeyAck.create()).then(e => {
            u(mn, {
                params: [e.goods]
            })
        })
    }
}
class un {
    constructor() {
        this.titles = []
    }
    checkClubPosition(e) {
        return e == this.clubInfo.chairmanId ? qe.chairman : -1 != this.clubInfo.viceCharimanIds.indexOf(e) ? qe.viceChairman : 0
    }
    reqClubSeason() {
        return A(pb.ClubSeasonListReq.create(), pb.IClubSeasonListAck).then(e => e)
    }
    reqClubInfo() {
        return A(pb.GetClubInfoReq.create(), pb.IGetClubInfoAck).then(e => e.retCode == C.NoClub ? (this.clubInfo = null, this.members = null) : (this.clubInfo = e.club, this.members = e.members.sort((e, t) => e.id - t.id), O.event(c.LOAD_CLUB), e))
    }
    reqCreateClub(e) {
        let t = pb.CreateClubReq.create();
        return t.name = e,
        A(t, pb.ICreateClubAck).then(e => {
            O.bag.updateItem(e.items),
            this.clubInfo = e.club,
            this.members = e.members,
            O.event(c.LOAD_CLUB),
            O.event(c.CLUB_CHANGE)
        })
    }
    getClubList() {
        return A(pb.ClubListReq.create(), pb.IClubListAck).then(e => e.clubs)
    }
    reqQueryClub(e) {
        let t = pb.QueryClubReq.create();
        return t.id = e,
        A(t, pb.IQueryClubAck).then(e => e)
    }
    reqApplyClub(e) {
        let t = pb.JoinClubReq.create();
        return t.id = e,
        A(t, pb.IJoinClubAck).then(e => {
            e.retCode == C.NoClub ? h(S(38)) : (this.clubInfo = e.club, this.members = e.members, O.event(c.CLUB_CHANGE))
        })
    }
    reqQuitClub() { {
            if (!(R.id == this.clubInfo.chairmanId && 1 < this.members.length))
                return A(pb.ExitClubReq.create(), pb.IExitClubAck).then(e => {
                    this.clubInfo = null,
                    this.members = null,
                    O.event(c.QUIT_CLUB)
                });
            h(S(47))
        }
    }
    reqChangeClubName(t) {
        let e = pb.ChangeClubNameReq.create();
        return e.name = t,
        A(e, pb.IChangeClubNameAck).then(e => {
            this.clubInfo && (this.clubInfo.name = t),
            O.bag.updateItem(e.items),
            O.event(c.LOAD_CLUB)
        })
    }
    reqChangeClubIcon(t) {
        let e = pb.ChangeClubIconReq.create();
        return e.icon = t,
        A(e, pb.IChangeClubIconAck).then(e => {
            this.clubInfo && (this.clubInfo.icon = t),
            O.event(c.LOAD_CLUB)
        })
    }
    reqChangeNotice(t) {
        let e = pb.ChangeClubNoticeReq.create();
        return e.notice = t,
        A(e, pb.IChangeClubNoticeAck).then(e => (this.clubInfo && (this.clubInfo.notice = t), e))
    }
    reqChangeClubJoinLvl(t) {
        let e = pb.ChangeClubJoinLvlReq.create();
        return e.lvl = t,
        A(e, pb.IChangeClubJoinLvlAck).then(e => {
            this.clubInfo && (this.clubInfo.joinLvl = t)
        })
    }
    changeClubCheckJoin(t) {
        let e = pb.ChangeClubCheckJoinReq.create();
        return e.checkJoin = t,
        A(e, pb.IChangeClubCheckJoinAck).then(e => {
            this.clubInfo && (this.clubInfo.checkJoin = t)
        })
    }
    reqMemberOper(e, t, i) {
        let s = pb.ClubMemberOperReq.create();
        return s.id = e,
        s.nickName = t,
        s.position = i,
        A(s, pb.IClubMemberOperReq).then(e => {
            this.reqClubInfo()
        })
    }
    reqChangeClubSetting(e, t) {
        let i = pb.ChangeClubSettingReq.create();
        return i.id = e,
        i.name = t,
        A(i, pb.IChangeClubSettingAck).then(e => {
            this.reqClubInfo()
        })
    }
    reqClubAppliedMembers() {
        return A(pb.ClubAppliedMembersReq.create(), pb.IClubAppliedMembersAck).then(e => (O.event(c.CLUB_APPLY, [e.members]), e.members))
    }
    reqOperApply(t, e) {
        let i = pb.OperAppliedMembersReq.create();
        return i.agree = t,
        i.appliedIds = e,
        A(i, pb.IOperAppliedMembersAck).then(e => {
            t == Pe.agree && h(S(1102)),
            this.reqClubInfo()
        })
    }
    reqKickMember(e) {
        let t = pb.KickClubMemberReq.create();
        return t.userId = e,
        A(t, pb.IKickClubMemberAck).then(e => {
            this.reqClubInfo()
        })
    }
    reqClubRanks() {
        return A(pb.ClubRankReq.create(), pb.IClubRankAck).then(e => e)
    }
    getTitles(e, t) {
        var i;
        let s = [];
        for (i of this.getTitleData()) {
            var a = e[i.id];
            s.push([i.id + "", a && !t ? a : S(i.title)])
        }
        return s
    }
    getTitleData() {
        if (this.titles.length)
            return this.titles;
        var e;
        for (e of Object.keys(Data.clubTitles)) {
            var t = Data.getClubTitle(+e);
            this.titles.push(t)
        }
        return this.titles
    }
    getClubIcon() {
        var e;
        let t = [];
        for (e of Object.keys(Data.clubIcons)) {
            var i = Data.getClubIcon(+e);
            t.push({
                icon: i,
                isSel: !1
            })
        }
        return t
    }
    getTitle(e, t, i = this.clubInfo.setting) {
        var s;
        let a = "";
        for (s of this.getTitles(i, e))
            t >= Data.getClubTitle(+s[0]).score && (a = s[1]);
        return a
    }
}
class _n {
    constructor() {
        this.chatUrl = Mmobay.MConfig.chatUrl
    }
    reqChatData(t) {
        return this.reqToken().then(e => (t.token = e.token, t.ts = e.ts, $t(this.chatUrl + "/commentList", "get", t, {
                    noLoading: !!t.noLoading
                }).then(e => e)))
    }
    reqChatChildData(t) {
        return this.reqToken().then(e => (t.token = e.token, t.ts = e.ts, $t(this.chatUrl + "/commentList", "get", t, {
                    noLoading: !1
                }).then(e => e)))
    }
    reqChangeHeart(t) {
        return this.reqToken().then(e => (t.token = e.token, t.ts = e.ts, $t(this.chatUrl + "/praise", "get", t, {
                    noLoading: !0
                })))
    }
    reqComment(i) {
        return this.reqToken().then(t => (i.token = t.token, i.ts = t.ts, i.userMilitaryGrade = t.militaryGrade, $t(this.chatUrl + "/comment", "get", i, {
                    noLoading: !1
                }).then(e => ({
                        id: e.addId,
                        addTime: Date.newDate(),
                        content: i.content,
                        praiseCount: 0,
                        replyCount: 0,
                        userIcon: i.userIcon,
                        userBubble: i.userBubble,
                        userMilitaryGrade: t.militaryGrade,
                        userId: R.id,
                        userName: R.name,
                        isHeart: !1,
                        toCommentId: i.toCommentId,
                        toUserName: i.toUserName
                    }))))
    }
    reqToken() {
        return A(pb.GetCommentTokenReq.create(), pb.IGetCommentTokenAck).then(e => (O.event(c.CHAR_TOKEN), e))
    }
    reqChangeBubble(e) {
        let t = pb.ChangeBubbleReq.create();
        return t.bubbleId = e,
        A(t, pb.IChangeBubbleAck).then(e => (R.bubble = e.bubble, e))
    }
}
class pn extends t.hunt.views.fish.FishExDlgUI {
    constructor(e) {
        super(),
        this.m_data = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        this.m_view_Item.dataChanged(null, {
            itemCfg: Data.getItem(this.m_data.id),
            itemId: this.m_data.id,
            notShowName: !0
        });
        var e = O.fish.fishExInfo[this.m_data.id] || 0;
        this.m_txt_Red.text = "" + e,
        this.m_txt_All.text = "/" + this.m_data.sellNum,
        this.m_box_Out.refresh(),
        this.m_txt_Red.color = o.White,
        this.m_view_Count.setData(1, Math.max(1, Math.min(O.bag.getItemNum(this.m_data.id), this.m_data.sellNum - e)), 1),
        this.updateCount()
    }
    updateCount() {
        this.m_view_Cost.setData(this.m_view_Count.count * this.m_data.sellWorth)
    }
    onClickExchange() {
        O.bag.getItemNum(this.m_data.id) < this.m_view_Count.count ? h(S(16)) : O.fish.reqFishEx(this.m_data.id, this.m_view_Count.count).then(() => {
            this.closeDialog()
        })
    }
}
r([n(c.COUNT_CHANGE)], pn.prototype, "updateCount", null);
class gn extends t.hunt.views.fish.FishExChangeViewUI {
    onEnable() {
        this.updateView()
    }
    updateView() {
        O.fish.reqFishSellInfo().then(() => {
            this.updateLst()
        }),
        this.tick && this.tick.dispose(),
        this.tick = Ei.create(Date.getTodayZeroTime().getTime() + 864e5, 1e3, this.m_txt_Time),
        this.tick.start(),
        this.tick.onEnd = () => {}
    }
    updateLst() {
        this.m_lst_Ex.array = O.fish.getFishArr()
    }
    onSelectEx(e) {
        var t;
        -1 != this.m_lst_Ex.selectedIndex && (e = this.m_lst_Ex.getItem(e), this.m_lst_Ex.selectedIndex = -1, (t = O.fish.fishExInfo[e.id]) && t == Data.getFish(e.id).sellNum ? h(S(58)) : u(pn, {
                params: [e]
            }))
    }
}
r([n(c.FISH_EX)], gn.prototype, "updateLst", null);
class yn extends t.hunt.views.fish.FishRewardDetailDlgUI {
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        this.m_lst_Rank.array = O.fish.getRankDetail(),
        O.fish.reqFishSelf().then(e => {
            var t = this.getRank(+e.myRank);
            t && this.m_view_Me.dataChanged(null, t),
            this.m_view_Me.visible = !!t,
            this.m_txt_Rank.text = "" + Math.max(0, +e.myRank)
        })
    }
    getRank(e) {
        if (!e)
            return null;
        for (var t in Data.fishSettles) {
            t = Data.getFishSettle(+t);
            if (+t.start <= e && +t.end >= e)
                return t
        }
    }
}
class vn extends t.hunt.views.fish.FishRankViewUI {
    onEnable() {
        O.fish.reqFishRank().then(e => {
            this.updateView(e)
        })
    }
    onDestroy() {
        super.onDestroy(),
        this.tick && this.tick.dispose()
    }
    updateView(e) {
        this.m_lst_Rank.array = e,
        this.tick && this.tick.dispose();
        let t = this.tick = Ei.create(Wt(), 1e3, this.m_txt_Time);
        t.start(),
        t.onEnd = () => {
            O.fish.reqFishRank().then(e => {
                this.updateView(e)
            })
        },
        O.fish.reqFishSelf().then(e => {
            this.m_view_Me.visible = e.myRank && 0 < e.myRank,
            this.m_view_Me.visible && this.m_view_Me.dataChanged(null, {
                rank: e.myRank,
                score: e.myScore,
                rankKey: e.myRankKey,
                name: R.name,
                clubName: O.club.clubInfo ? O.club.clubInfo.name : "",
                icon: R.icon
            })
        }),
        this.updatePool()
    }
    updatePool() {
        O.fish.reqFishPool().then(() => {
            this.m_view_M.setData(O.fish.m_fishPool),
            this.m_view_M.m_img_Gold.visible = this.m_view_M.m_img_Center.visible = !1
        })
    }
    onClickDetail() {
        u(yn)
    }
}
class kn extends t.hunt.views.fish.FishInfoDlgUI {
    constructor(e) {
        super(),
        this.m_data = null,
        this.m_data = e
    }
    onAwake() {
        super.onAwake(),
        this.showUI()
    }
    showUI() {
        if (this.m_data) {
            this.m_txt_Name.text = S(this.m_data.itemCfg.name);
            let t = this.m_data.itemStrShow,
            e = Object.assign({}, this.m_data);
            e.notShowName = !0,
            this.m_view_Item.dataChanged(null, e),
            O.fish.reqFishInfo(this.m_data.itemId).then(e => {
                this.m_txt_Desc.text = S(1146, t),
                this.m_txt_Biggest.text = S(1147, e.maxWeight && O.fish.formatWeight(e.maxWeight) || "???"),
                this.m_txt_UserFind.text = S(1148, e.name || "???")
            })
        }
    }
}
class fn extends t.hunt.views.fish.FishRuleDlgUI {
    onAwake() {
        super.onAwake(),
        this.showUI()
    }
    showUI() {
        let e = [],
        i = 0;
        for (var t in Data.fishs) {
            var s = Data.getFish(+t);
            s && (e.push({
                    itemId: +t,
                    itemCfg: Data.getItem(+t)
                }), i += s.weight)
        }
        e.forEach(e => {
            var t = Data.getFish(e.itemId);
            e.itemStrShow = (t.weight / i * 100).toFixed(0) + "%",
            e.itemStrColor = o.White
        }),
        this.m_lst_Fish.array = e;
        var a = Math.ceil(e.length / 4);
        this.m_lst_Fish.height = 120 * a + 15 * (a - 1)
    }
    onSelectFish() {
        var e;
        -1 != this.m_lst_Fish.selectedIndex && (e = this.m_lst_Fish.getItem(this.m_lst_Fish.selectedIndex), u(kn, {
                params: [e]
            }), this.m_lst_Fish.selectedIndex = -1)
    }
}
class In extends t.hunt.views.fish.FishSuccDlgUI {
    constructor(e) {
        super(),
        this.m_data = null,
        this.m_data = e
    }
    onAwake() {
        super.onAwake(),
        this.showUI()
    }
    showUI() {
        let e = this.m_data;
        this.m_txt_Top.text = S(1149, O.fish.formatWeight(e.newMax)),
        this.m_txt_My.text = S(1150, O.fish.formatWeight(e.myNewMax)),
        this.m_txt_FishWeight.text = O.fish.formatWeight(e.weight);
        var t = (e.items || []).find(e => 0 < e.delta),
        t = (t && (this.m_img_Fish.skin = `hunt/ui_fish/${t.id}.png`), e.newMax == e.myNewMax && e.newMax > e.oldMax ? (this.m_view_TopNew.visible = !0, this.m_view_MyNew.visible = !0, this.m_img_Top.visible = !0) : e.myNewMax > e.myOldMax && (this.m_view_MyNew.visible = !0), this.showFishBait(), O.fish.block);
        t && this.updateBlockInfo(t.id)
    }
    onClickContinue() {
        var e;
        1 <= O.bag.getItemNum(p.bait) ? this.closeDialog(d.Yes) : (e = Data.getItemBuy(p.bait)) && u(Xr, {
            params: [p.bait, 10, 10, Math.min(100, Math.max(10, Math.floor(+R.copper / e.copper)))]
        }).then(e => {
            e.wait().then(() => {
                this.showFishBait()
            })
        })
    }
    showFishBait() {
        var e = O.bag.getItemNum(p.bait);
        this.m_txt_Num.text = e + "",
        this.m_txt_Num.color = 0 < e ? o.Green : o.Red
    }
    updateBlockInfo(t) {
        O.block.reqBlockInfo(t).then(e => {
            this.destroyed || (this.m_view_Like.visible = !0, this.m_view_Like.setData(t, e), this.m_view_Comment.visible = !0, this.m_view_Comment.setData(t))
        })
    }
}
class bn extends t.hunt.views.fish.FishHistoryCellViewUI {
    dataChanged(e) {
        e ? this.dataSource = e : e = this.dataSource,
        Object.assign(this.m_div_Tip.style, {
            fontSize: 18,
            bold: !0,
            color: +e.param[1] == Data.getItem(101).name ? o.Yellow : o.White,
            leading: 3,
            wordWrap: !0,
            width: 450
        }),
        this.m_div_Tip.innerHTML = O.sysNotice.parseSysMsg(e),
        this.height = this.m_div_Tip.contextHeight + 4
    }
}
class wn extends t.hunt.views.fish.FishViewUI {
    constructor() {
        super(),
        this.m_tl = null,
        this.m_Cfg = [[334, 334, 25, 4], [284, 284, 70, 3], [244, 244, 120, 2], [160, 160, 160, 1], [120, 120, 244, 2], [70, 70, 284, 3], [25, 25, 334, 4]]
    }
    onDestroy() {
        super.onDestroy(),
        this.clearTimeLine(),
        O.sysNotice.reqUnWatch(Ze.fish)
    }
    onAwake() {
        super.onAwake(),
        this.barStopAni.on(Laya.Event.COMPLETE, this, this.doEndFish),
        this.showUI(),
        this.m_btn_Start.visible = !0,
        O.sysNotice.reqFishHistory().then(e => {
            for (let t of e.list)
                E(bn, {}).then(e => {
                    e.dataChanged(t),
                    this.m_box_Vbox.addChild(e)
                });
            O.sysNotice.reqWatch(Ze.fish)
        })
    }
    showUI() {
        O.fish.reqFishSelf().then(e => {
            e.myRank && -1 != e.myRank ? (this.m_txt_Rank.text = S(1151, e.myRank + ""), this.m_txt_Weight.text = O.fish.formatWeight(e.myScore), this.m_view_Item.visible = !0, this.m_view_Item.dataChanged(null, {
                    itemCfg: Data.getItem(+e.myRankKey),
                    itemId: e.myRankKey,
                    notShowName: !0
                })) : (this.m_txt_Rank.text = S(1145), this.m_txt_Weight.text = "", this.m_view_Item.visible = !1)
        }),
        this.m_pan_Panel.vScrollBarSkin = "",
        this.showFishBait()
    }
    showFishBait() {
        var e = O.bag.getItemNum(p.bait);
        this.m_txt_Num.text = e + "",
        this.m_txt_Num.color = 0 < e ? o.Green : o.Red
    }
    showFishAni() {
        let e = b.create({
            url: "hunt/ue/23.atlas",
            parent: this.m_box_Ani,
            px: this.m_img_Rod.x,
            py: this.m_img_Rod.y,
            autoPlay: !1,
            interval: 100
        });
        this.m_box_Ani.visible = !0,
        this.m_btn_Start.visible = !1,
        this.m_img_Rod.visible = !1,
        this.m_box_Area.visible = !1,
        e.play(0, !1, Laya.Handler.create(null, () => {
                e.recover(),
                this.m_img_Rod.visible = !0,
                this.m_img_Bar.visible = !0,
                this.m_btn_Fish.visible = !0,
                this.m_btn_Fish.disabled = !1,
                this.showBarAni()
            }))
    }
    showBarAni() {
        let e = this.m_img_Icon;
        this.clearTimeLine(),
        this.m_tl = new Laya.TimeLine,
        e.x = 30,
        this.m_tl.to(e, {
            x: 350
        }, 1e3).to(e, {
            x: 30
        }, 1e3),
        this.m_tl.play(0, !0)
    }
    doEndFish() {
        var e = this.m_Cfg.find(e => this.m_img_Icon.x > e[0]);
        e && O.fish.reqFishing(e[3]).then(e => {
            u(In, {
                params: [e],
                closeOnSide: !1
            }).then(e => {
                e.wait().then(e => {
                    this.destroyed || (e.type == d.No ? (this.m_btn_Fish.visible = !1, this.m_img_Bar.visible = !1, this.m_btn_Start.visible = !0) : e.type == d.Yes && this.onClickStart(), this.showUI())
                })
            })
        })
    }
    onClickStart() {
        if (1 <= O.bag.getItemNum(p.bait))
            return this.showFishAni();
        var e = Data.getItemBuy(p.bait);
        e && u(Xr, {
            params: [p.bait, 10, 10, Math.min(100, Math.max(10, Math.floor(+R.copper / e.copper)))]
        }).then(e => {
            e.wait().then(() => {
                this.showFishBait()
            })
        })
    }
    onClickFish() {
        let e = b.create({
            url: "hunt/ue/24.atlas",
            parent: this.m_box_Ani,
            px: this.m_img_Rod.x,
            py: this.m_img_Rod.y,
            autoPlay: !1,
            interval: 100
        });
        this.m_img_Rod.visible = !1,
        e.play(0, !1, Laya.Handler.create(null, () => {
                e.recover(),
                this.m_img_Rod.visible = !0
            })),
        this.clearTimeLine(),
        this.showArea(),
        this.barStopAni.play(0, !1),
        this.m_btn_Fish.disabled = !0
    }
    showArea() {
        var e = this.m_Cfg.find(e => this.m_img_Icon.x > e[0]);
        e ? (this.m_box_Area.left = e[1], this.m_box_Area.right = e[2], this.m_box_Area.visible = !0) : this.m_box_Area.visible = !1
    }
    onClickInfo() {
        u(fn)
    }
    clearTimeLine() {
        this.m_tl && (this.m_tl.destroy(), this.m_tl = null)
    }
    addSys(t) {
        100 <= this.m_box_Vbox.numChildren && this.m_box_Vbox.removeChildAt(this.m_box_Vbox.numChildren - 1),
        E(bn, {}).then(e => {
            e.dataChanged(t),
            this.m_box_Vbox.addChildAt(e, 0)
        })
    }
}
r([n(c.UPDATE_FISH_SYS)], wn.prototype, "addSys", null);
class Cn extends t.hunt.views.fish.FishDlgUI {
    onAwake() {
        super.onAwake(),
        this.addTitle(S(2046)),
        this.m_box_Stack.setupCls([{
                    cls: wn
                }, {
                    cls: gn
                }, {
                    cls: vn
                }
            ]),
        this.m_tab_Tab.selectedIndex = 0
    }
    onSelectTab(e) {
        this.m_box_Stack.changeIndex(e)
    }
}
class xn extends t.hunt.views.invite.InviteDetailDlgUI {
    onAwake() {
        super.onAwake(),
        this.m_pan_Panel.vScrollBarSkin = "",
        this.m_lst_Invite.elasticEnabled = !1,
        this.updateView()
    }
    updateView() {
        this.m_txt_Info.text = S(2049),
        O.invite.reqInviteDetail().then(e => {
            this.m_lst_Invite.array = e,
            this.m_txt_No.visible = 0 == e.length,
            this.m_lst_Invite.height = 80 * this.m_lst_Invite.array.length,
            this.m_box_Vbox.height = this.m_lst_Invite.height + this.m_txt_Info.height + this.m_txt_Desc.height,
            this.m_pan_Panel.refresh()
        })
    }
}
class Sn extends t.hunt.views.invite.InviteBoxDlgUI {
    onAwake() {
        super.onAwake(),
        this.m_lst_Invite.array = [],
        O.invite.reqInviteInfo().then(() => {
            this.updateView()
        })
    }
    updateView() {
        let i = O.invite,
        e = (this.m_lst_Invite.vScrollBarSkin = "", i.getInviteItems());
        this.m_lst_Invite.array = e.sort((e, t) => +i.checkGet(e.id) - +i.checkGet(t.id)),
        this.m_txt_Url.text = "" + Mmobay.MConfig.inviteUrl + O.invite.m_code
    }
    onClickCopy() {
        navigator.clipboard && navigator.clipboard.writeText(this.m_txt_Url.text),
        h(S(1))
    }
    onSelectInvite() {
        if (-1 != this.m_lst_Invite.selectedIndex) {
            var t = this.m_lst_Invite.getItem(this.m_lst_Invite.selectedIndex);
            let e = O.invite;
            !e.checkGet(t.id) && e.m_bind >= t.num && e.reqGetInviteReward(t.id).then(() => {
                this.updateView()
            }),
            this.m_lst_Invite.selectedIndex = -1
        }
    }
    onClickInfo() {
        u(xn).then(e => {
            e.wait().then(() => {
                this.visible = !0,
                Laya.Tween.from(this, {
                    alpha: 0,
                    scaleX: .8,
                    scaleY: .8
                }, 200, Laya.Ease.backOut)
            })
        }),
        this.visible = !1
    }
}
class An extends t.hunt.views.invite.InviteDlgUI {
    onAwake() {
        super.onAwake(),
        this.addTitle(S(2048)),
        O.invite.reqBoxInfo().then(() => {
            this.updateView()
        })
    }
    updateView() {
        let e = O.invite;
        var t = Data.gameConf.inviteCfg.cost.split(",");
        this.m_lst_Item.array = this.getBoxData(e.getBoxIds()),
        this.m_img_Item.skin = `hunt/ui_item/${Data.getItem(+t[0]).icon}.png`,
        this.updateItem()
    }
    updateItem() {
        let e = O.invite;
        var t = Data.gameConf.inviteCfg.cost.split(","),
        i = O.bag.getItemNum(+t[0]),
        t = (this.m_txt_Has.text = i + "", this.m_txt_Left.text = S(2029, e.m_boxNum), +t[1]);
        this.m_txt_Need.text = "/" + t,
        this.m_txt_Has.color = i < t ? o.Red : o.White,
        this.m_btn_Get.visible = i < t,
        this.m_btn_Open.visible = !this.m_btn_Get.visible,
        this.m_img_Red.visible = this.m_btn_Get.visible && e.checkInviteRed()
    }
    getBoxData(e) {
        let t = [];
        e.sort((e, t) => Data.getInviteBox(+t).sort - Data.getInviteBox(+e).sort);
        for (var i of e) {
            var s;
            for (s of Data.getInviteBox(+i).items)
                t.push({
                    itemId: s.id,
                    itemNum: s.count,
                    itemCfg: Data.getItem(s.id),
                    notShowName: !0
                })
        }
        return t
    }
    onClickGet() {
        this.ani1.wrapMode = 0,
        this.ani1.once(Laya.Event.COMPLETE, this, () => {
            u(Sn).then(e => {
                e.wait().then(() => {
                    this.ani1.wrapMode = 1,
                    this.ani1.play(0, !1)
                })
            })
        }),
        this.ani1.play(0, !1)
    }
    onClickOpen() {
        var e = Data.gameConf.inviteCfg.cost.split(",");
        O.bag.getItemNum(+e[0]) < +e[1] ? h(S(2031, S(Data.getItem(+e[0]).name))) : (this.ani1.once(Laya.Event.COMPLETE, this, () => {
                O.invite.reqGetBox().then(e => {
                    Et(e.items, null, "box2").then(() => {
                        this.ani1.wrapMode = 1,
                        this.ani1.play(0, !1)
                    }),
                    this.updateView()
                })
            }), this.ani1.wrapMode = 0, this.ani1.play(0, !1))
    }
    onSelectItem() {
        var e;
        -1 != this.m_lst_Item.selectedIndex && (e = this.m_lst_Item.getItem(this.m_lst_Item.selectedIndex), u(pa, {
                params: [{
                        itemCfg: Data.getItem(e.itemId),
                        itemId: e.itemId,
                        itemNum: e.itemNum
                    }
                ]
            }), this.m_lst_Item.selectedIndex = -1)
    }
}
r([n(c.ITEM_CHANGE)], An.prototype, "updateItem", null);
class Dn extends t.hunt.views.block.BlockEnterDlgUI {
    constructor(e, t) {
        super(),
        this.m_enterCdTime = null,
        this.m_data = t,
        this.m_block = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        this.m_txt_Cost.changeText(this.m_data.cost + ""),
        this.m_box_Vit.visible = 0 < this.m_data.cost;
        var l,
        h = this.m_data.playType,
        m = (this.m_txt_Title.changeText(S(rt[h])), Data.getBlock(this.m_block.blockId)),
        c = this.m_box_Show.width / 2,
        d = this.m_box_Show.height / 3;
        let u = [[c - 40, d], [c, d - 40], [40 + c, d]];
        switch (h) {
        case M.normalBoss:
            var _ = Data.getBlock_normalBattle(this.m_block.blockId);
            if (!_)
                return;
            var p,
            g,
            y = Data.getCharType(_.bossId);
            this.m_txt_Lv.text = m.star + "",
            this.checkEleShow(_);
            let e = Ee.create({
                url: `hunt/role/${y.avatar}.json`
            }),
            t = (e.scale(.8, .8), e.x = this.m_box_Show.width / 2, e.y = 130, e.play(14, !0), this.m_box_Show.addChild(e), []);
            for (p of _.finalLoots)
                 - 1 == t.indexOf(p.k) && t.push(p.k);
            for (g of _.monsterLoots)
                (g || []).forEach(e => {
                    -1 == t.indexOf(e) && t.push(e)
                });
            this.setReward(qt(t, !0, !0, !0), "box2");
            y = O.condition.checkOpenLimit(_.cond);
            y ? (this.m_btn_Start.visible = !y.limit, this.m_txt_Tips.visible = y.limit, this.m_txt_Tips.text = y.info) : (this.m_txt_Tips.visible = !1, this.m_btn_Start.visible = !0);
            break;
        case M.normalMonster:
            _ = Data.getBlock_normalBattle(this.m_block.blockId);
            if (!_)
                return;
            y = Data.getMonsterGroup(_.monsterGroup[0]);
            if (!y || !y.monsters.length)
                return;
            var v,
            k,
            f = Data.getCharType(y.monsters[0]);
            this.m_txt_Lv.text = m.star + "",
            this.checkEleShow(_);
            for (let t = 0; t < 3; t++) {
                let e = Ee.create({
                    url: `hunt/role/${f.avatar}.json`
                });
                e.x = u[t][0],
                e.y = u[t][1],
                e.play(14, !0),
                this.m_box_Show.addChild(e)
            }
            let i = [];
            for (v of _.finalLoots)
                 - 1 == i.indexOf(v.k) && i.push(v.k);
            for (k of _.monsterLoots)
                (k || []).forEach(e => {
                    -1 == i.indexOf(e) && i.push(e)
                });
            this.setReward(qt(i, !0, !0, !0), "box1");
            break;
        case M.imitatePvp:
            this.m_txt_Lv.text = m.star + "",
            this.m_box_Star.centerX = -1,
            this.m_box_Ele.visible = !1,
            u = [[c - 140, 50 + d], [c, d], [140 + c, 50 + d]];
            for (let t = 0; t < 3; t++)
                if (this.m_block.squad[t]) {
                    let e = Ee.create({
                        url: `hunt/role/${this.m_block.squad[t]}.json`
                    });
                    e.x = u[t][0],
                    e.y = u[t][1],
                    e.play(14, !0),
                    this.m_box_Show.addChild(e)
                }
            let s = [];
            for (l of Data.getBlock_imitatePvp(this.m_block.blockId).loots)
                 - 1 == s.indexOf(l.k) && s.push(l.k);
            this.setReward(qt(s, !0, !0, !0), "box1", !0);
            break;
        case M.worldBoss:
            y = Data.getBlock_worldBoss(this.m_block.blockId);
            if (!y)
                return;
            this.m_box_Star.centerX = -1;
            var I,
            b,
            _ = Data.getCharType(y.bossId);
            this.m_txt_Lv.text = m.star + "";
            let a = Ee.create({
                url: `hunt/role/${_.avatar}.json`
            }),
            r = (a.scale(.8, .8), a.x = this.m_box_Show.width / 2, a.y = 130, a.play(14, !0), this.m_box_Show.addChild(a), []);
            for (I of y.hpLoots)
                r.push(I.k);
            for (b of y.finalLoots)
                r.push(b.k);
            r.push(y.luckLoot);
            let n = qt(r, !0, !0, !0),
            o = [];
            n.forEach(e => {
                let t = Data.getItemRandBox(e.itemId);
                t && t.loots.forEach(e => {
                    o.push(e.k)
                })
            }),
            this.setReward(qt(o, !0, !0, !0), "box3", !1, 1),
            this.m_txt_Tips.visible = !1,
            this.m_btn_Start.disabled = !0,
            O.battle.reqWorldBossInfo(this.m_block.blockSpawnId).then(e => {
                this.destroyed || (this.m_txt_PlayerNum.text = e.playerNum + "", this.m_txt_PlayerNum.visible = !0, this.m_btn_Start.disabled = !1, e.surplusEnterCd ? this.m_enterCdTime = Date.newDate().addSeconds(e.surplusEnterCd) : this.m_enterCdTime = null)
            })
        }
        this.setAuthor(this.m_data.authors),
        this.updateBlockInfo(this.m_block.blockId)
    }
    checkEleShow(e) {
        var t,
        e = e.cond.find(e => e[0] == He.eleLimit);
        e ? (this.m_box_Star.centerX = -45, this.m_box_Ele.visible = !0, t = {
                [_.earth]: "earth",
                [_.water]: "water",
                [_.fire]: "fire",
                [_.wind]: "wind"
            }, this.m_img_Ele.skin = `hunt/ui_card/ele_${t[e[1]]}.png`, this.m_txt_Ele.text = e[2] + "") : (this.m_box_Star.centerX = -1, this.m_box_Ele.visible = !1)
    }
    setAuthor(e = []) {
        this.m_view_Author.setData(e)
    }
    setReward(t, e, i = !1, s = 0) {
        if (i) {
            i = t.find(e => e.itemId == p.gem);
            let e = [];
            for (i && e.push(i); e.length < 4; )
                e.push({
                    showDefault: !0
                });
            t = e
        }
        this.m_view_Box.setData(t, e, s)
    }
    updateBlockInfo(t) {
        O.block.reqBlockInfo(t).then(e => {
            this.destroyed || (this.m_view_Like.visible = !0, this.m_view_Like.setData(t, e), this.m_view_Comment.visible = !0, this.m_view_Comment.setData(t))
        })
    }
    enterBlock() {
        switch (this.m_data.playType) {
        case M.normalBoss:
        case M.normalMonster:
        case M.imitatePvp:
        case M.worldBoss:
            this.closeDialog(d.Yes)
        }
    }
    onClickStart() {
        var e = this.m_data.preStartTalk;
        R.checkVitEnough(+this.m_txt_Cost.text) && (e.length ? Ri.showTalk(e[R.sex] || e[0], () => {
                this.enterBlock()
            }) : this.enterBlock())
    }
}
class Ln extends t.hunt.views.block.BlockChestDlgUI {
    constructor(e, t) {
        super(),
        this.m_data = t,
        this.m_block = e
    }
    onAwake() {
        super.onAwake(),
        this.m_txt_Cost.changeText(this.m_data.cost + "");
        var e = this.m_data.playType,
        t = (this.m_txt_Title.changeText(S(rt[e])), Data.getBlock_normalChest(this.m_data.id));
        e == M.normalChest && this.setReward(Ut(t.chestId, !0), t.icon),
        this.setAuthor(this.m_data.authors),
        this.updateBlockInfo(this.m_block.blockId)
    }
    setAuthor(e = []) {
        this.m_view_Author.setData(e)
    }
    setReward(e, t) {
        e = e.find(e => e.itemId == p.gem);
        let i = [];
        for (e && i.push(e); i.length < 4; )
            i.push({
                showDefault: !0
            });
        this.m_view_Box.setData(i, t)
    }
    updateBlockInfo(t) {
        O.block.reqBlockInfo(t).then(e => {
            this.destroyed || (this.m_view_Like.visible = !0, this.m_view_Like.setData(t, e), this.m_view_Comment.visible = !0, this.m_view_Comment.setData(t))
        })
    }
    onClickStart() {
        var e = this.m_data.preStartTalk;
        R.checkVitEnough(+this.m_txt_Cost.text) && (e.length ? Ri.showTalk(e[R.sex] || e[0], () => {
                this.closeDialog(d.Yes)
            }) : this.closeDialog(d.Yes))
    }
}
class Tn extends t.hunt.views.tileMap.TileLogicDlgUI {
    constructor(e) {
        super(),
        this.m_have = 0,
        this.m_cost = 0,
        this.m_block = e
    }
    onAwake() {
        if (super.onAwake(), this.m_block) {
            var t,
            i,
            e = Data.getBlock(this.m_block.blockId).playType;
            if (this.m_txt_Title.changeText(S(rt[e])), e == M.openBurrow) {
                let e = Ee.create({
                    url: "hunt/worldmap/spine/didong.json"
                });
                e.play(this.m_block.isOver ? 2 : 0, !0),
                e.y = 170,
                e.x = 230,
                Laya.timer.frameOnce(2, this, () => {
                    this.m_img_Area.addChild(e)
                }),
                this.m_block.isOver ? this.m_btn_Click.label = S(1119) : ((i = Data.getBlock_openGameplay(this.m_block.blockId)) && (i.costItems.length ? (this.m_box_Cost.visible = !0, t = i.costItems[0], this.m_have = O.bag.getItemNum(t.id), this.m_cost = t.count, this.m_txt_Cost.text = "/" + this.m_cost, this.m_txt_Have.text = "" + this.m_have, this.m_txt_Have.color = this.m_have >= this.m_cost ? o.White : o.Red, t = Data.getItem(t.id).icon, this.m_img_Cost.skin = `hunt/ui_item/${t}.png`) : i.cond.length && (t = i.cond[0])[0] == He.haveItemNum && (this.m_box_Cost.visible = !0, this.m_cost = t[2], this.m_txt_Cost.text = "/" + this.m_cost, this.m_have = O.bag.getItemNum(t[1]), this.m_txt_Have.text = "" + this.m_have, i = Data.getItem(t[1]).icon, this.m_img_Cost.skin = `hunt/ui_item/${i}.png`, this.m_txt_Have.color = this.m_have >= this.m_cost ? o.White : o.Red)), this.m_btn_Click.label = S(1106))
            } else if (e == M.openWharf)
                this.m_img_Area.skin = "hunt/ui_tilemap/banner3.png", this.m_block.isOver ? this.m_btn_Click.label = S(1110) : (this.m_btn_Click.label = S(1106), (t = Data.getBlock_openGameplay(this.m_block.blockId)) && (t.costItems.length ? (this.m_box_Cost.visible = !0, i = t.costItems[0], this.m_have = O.bag.getItemNum(i.id), this.m_cost = i.count, this.m_txt_Cost.text = "/" + this.m_cost, this.m_txt_Have.text = "" + this.m_have, this.m_txt_Have.color = this.m_have >= this.m_cost ? o.White : o.Red, this.m_img_Cost.skin = `hunt/ui_item/${Data.getItem(i.id).icon}.png`) : t.cond.length && (i = t.cond[0])[0] == He.haveItemNum && (this.m_box_Cost.visible = !0, this.m_cost = i[2], this.m_txt_Cost.text = "/" + this.m_cost, this.m_have = O.bag.getItemNum(i[1]), this.m_txt_Have.text = "" + this.m_have, this.m_img_Cost.skin = `hunt/ui_item/${Data.getItem(i[1]).icon}.png`, this.m_txt_Have.color = this.m_have >= this.m_cost ? o.White : o.Red)));
            else if (e == M.talkGoddess) {
                let e = Ee.create({
                    url: "hunt/worldmap/spine/nvshenxiang.json"
                });
                e.play(O.block.getGodState(this.m_block), !0),
                e.y = 170,
                e.x = 230,
                Laya.timer.frameOnce(2, this, () => {
                    this.m_img_Area.addChild(e)
                }),
                this.m_btn_Click.label = S(2025),
                this.m_img_Area.skin = "hunt/ui_tilemap/banner4.png"
            }
        }
    }
    onDestroy() {
        super.onDestroy(),
        this.m_canvasUrl && Laya.Loader.clearRes(this.m_canvasUrl)
    }
    onClickClick() {
        var e = Data.getBlock(this.m_block.blockId),
        t = e.playType;
        t == M.openWharf || t == M.openBurrow ? this.m_block.isOver ? this.closeDialog(d.Yes) : this.m_cost > this.m_have ? Ri.showTalk(e.preStartTalk) : O.block.reqOpenGame(this.m_block.blockSpawnId).then(() => {
            this.closeDialog(d.Yes)
        }) : t == M.talkGoddess && this.closeDialog(d.Yes)
    }
}
class En extends t.hunt.views.block.HeroBlockDlgUI {
    constructor(e, t = !0) {
        super(),
        this.m_blockId = null,
        this.m_enable = !1,
        this.m_ticker = null,
        this.m_blockId = e,
        this.m_enable = t
    }
    onDestroy() {
        super.onDestroy(),
        this.clearTicker()
    }
    onAwake() {
        super.onAwake(),
        this.showUI()
    }
    showUI() {
        if (this.m_blockId) {
            this.clearTicker();
            var i = O.tileMap.blocks.find(e => e.blockId == this.m_blockId),
            t = Data.getBlock_talkHero(this.m_blockId),
            s = 0 == R.sex ? t.heroMale : t.heroFemale,
            s = O.hero.getHero(s);
            if (this.m_view_Hero.dataChanged(null, {
                    hero: s,
                    notShowLv: !0,
                    heroBlock: !0
                }), this.m_enable) {
                let e = 0;
                s = i.finishTime;
                i.finishTime && (e = s + t.cd - Date.newDate().getTime() / 1e3);
                for (let t = 0; t < 5; t++) {
                    let e = this.m_box_Heart.getChildAt(t);
                    e.gray = i.favor <= t
                }
                i.isOver || (this.m_btn_Talk.disabled = 0 < e, 0 < e ? (this.m_ticker = Ei.create(Date.newDate().addSeconds(e + 1).getTime()), this.m_txt_Time.text = Nt(1e3 * e), this.m_txt_Time.visible = !0, this.m_ticker.onTick = e => {
                            0 < e ? this.m_txt_Time.text = Nt(1e3 * e) : this.showUI()
                        }, this.m_ticker.start(), this.m_ticker.onEnd = () => {
                        this.m_ticker && this.m_ticker.dispose()
                    }) : this.m_txt_Time.visible = !1),
                this.height = i.isOver ? 445 : 490,
                this.m_btn_Talk.visible = !i.isOver,
                this.m_txt_Get.visible = i.isOver,
                this.m_box_Heart.visible = !0
            } else
                this.m_btn_Look.visible = !0
        }
    }
    onClickTalk() {
        this.closeDialog(d.Yes)
    }
    onClickLook() {
        this.closeDialog(d.Yes)
    }
    clearTicker() {
        this.m_ticker && (this.m_ticker.dispose(), this.m_ticker = null)
    }
}
class Mn extends t.hunt.views.treasure.TreasureStartDlgUI {
    constructor(e, t = !1) {
        super(),
        this.m_open = !1,
        this.m_open = t,
        this.m_block = Data.getBlock_treasure(e) || null
    }
    onAwake() {
        super.onAwake(),
        this.ani1.play(0, !1),
        this.updateView(),
        this.m_btn_Open.visible = !this.m_open,
        this.m_btn_Ok.visible = !!this.m_open,
        I.instance.playSound(v.SE_ScrollOpen)
    }
    updateView() {
        this.m_txt_Area.text = S(this.m_block.startWord[this.m_open ? 1 : 0])
    }
    onClickOpen() {
        this.closeDialog(d.Yes)
    }
}
class Rn extends Laya.Box {
    constructor(e = !1, t) {
        super(),
        this.m_end = !1,
        this.m_index = t,
        this.m_end = e,
        b.create({
            url: "hunt/ue/39.atlas",
            parent: this,
            px: 0,
            py: 0,
            autoPlay: !0,
            loop: !0,
            scale: 1.5
        }),
        this.width = 50,
        this.height = 50,
        this.updateView(),
        O.on(c.UPDATE_TREASURE, this, () => {
            this.updateView()
        })
    }
    onAwake() {
        super.onAwake()
    }
    updateView() {
        let e = O.tileMap.getTreasureBlock();
        var t,
        i;
        this.visible = !1,
        e && e.treasure && (t = e.treasure, this.m_end ? (i = e.treasure.pointRewards.length, this.visible = i && i == e.treasure.pointRewards.filter(e => !!e).length && !e.treasure.finalReward) : this.visible = t.isOpen && (!t.pointRewards.length || e.treasure.pointRewards.length && !e.treasure.pointRewards[this.m_index]))
    }
}
r([n(c.UPDATE_TREASURE)], Rn.prototype, "updateView", null);
class Bn extends t.hunt.views.treasure.TreasureDlgUI {
    onAwake() {
        super.onAwake(),
        this.addTitle(S(2055)),
        this.m_block = O.tileMap.getTreasureBlock(),
        this.updateView()
    }
    updateView() {
        this.updateBtn(),
        this.m_lst_Item.array = this.getBoxData(),
        this.m_btn_Open.mouseEnabled = !1,
        this.ani3.once(Laya.Event.COMPLETE, this, () => {
            this.showDesc(),
            this.m_btn_Open.mouseEnabled = !0
        });
        var e = Data.getBlock_treasure(this.m_block.blockId).endWord[O.account.wallet ? 1 : 0];
        this.m_txt_Word.text = S(e),
        this.ani3.play(0, !1)
    }
    updateBtn() {
        var e = !!O.account.wallet;
        this.m_btn_Bind.visible = !e,
        this.m_btn_Open.visible = !!e
    }
    showDesc() {
        var e;
        "true" != Mmobay.LocalStorage.get("treasure") && ((e = Data.getBlock_treasure(this.m_block.blockId)).endTalk && Ri.showTalk(e.endTalk[O.account.wallet ? 1 : 0]), Mmobay.LocalStorage.set("treasure", "true"))
    }
    getBoxData() {
        var e = O.tileMap.getTreasureBlock();
        return qt([Data.getBlock_treasure(e.blockId).finalLoot])
    }
    onClickBind() {
        u(va)
    }
    onClickOpen() {
        this.ani5.once(Laya.Event.COMPLETE, this, () => {
            O.treasure.reqReward(O.tileMap.getTreasureBlock().blockSpawnId).then(e => {
                Et(e.items, null, "box3"),
                Laya.timer.once(2e3, this, () => {
                    this.closeDialog()
                })
            })
        }),
        this.ani5.play(0, !1)
    }
    onClickCopy() {
        navigator.clipboard && navigator.clipboard.writeText(this.m_txt_Url.text),
        h(S(1))
    }
}
r([n(c.TAP_TOKEN_CHANGE)], Bn.prototype, "updateBtn", null);
class Nn extends t.hunt.views.treasure.TreasureRewardDlgUI {
    constructor(e) {
        super();
        let t = [];
        if (e)
            for (var i of e)
                0 < i.delta && t.push({
                    itemId: i.id,
                    itemCfg: Data.getItem(i.id),
                    itemNum: i.delta
                });
        this.m_data = t
    }
    onAwake() {
        super.onAwake(),
        this.m_ani_Show.visible = !0,
        this.m_ani_Show.once(Laya.Event.COMPLETE, this, () => {
            this.m_ani_Show.visible = !1
        }),
        this.m_ani_Show.play(0, !1),
        this.updateView(),
        I.instance.playSound(v.SE_Reword)
    }
    updateView() {
        this.m_pan_Panel.hScrollBarSkin = "";
        for (let t of this.m_data)
            E(lr, {}).then(e => {
                e.dataChanged(null, t),
                this.m_box_Hbox.addChildAt(e, 0)
            })
    }
}
class Pn extends t.hunt.views.treasure.TreasureMapDlgUI {
    constructor(e, t) {
        super(),
        this.m_talkId = t,
        this.m_index = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        xe(!0),
        this.m_img_1.visible = 0 <= this.m_index,
        this.m_img_2.visible = 1 <= this.m_index,
        this.m_img_3.visible = 2 <= this.m_index,
        this.unlockMap(this.m_index + 1)
    }
    unlockMap(e) {
        I.instance.playSound(v.SE_ScrollNew),
        this["ani" + e].once(Laya.Event.COMPLETE, this, () => {
            xe(!1),
            this.m_img_1.visible && this.m_img_2.visible && this.m_img_3.visible ? (this.closeDialog(), l(Zi, {
                    params: [B.instance.getMapProp("name"), B.instance.getMapProp("scale")]
                }).then(() => {
                    this.m_talkId && Ri.showTalk(this.m_talkId)
                })) : this.m_talkId ? Ri.showTalk(this.m_talkId, () => {
                this.closeDialog()
            }) : this.closeDialog()
        }),
        this["ani" + e].play(0, !1)
    }
}
class qn extends t.hunt.views.remember.RememberDetailDlgUI {
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        this.m_lst_Rank.array = O.remember.getRankDetail()[0],
        O.remember.reqRank().then(e => {
            var t,
            e = e.find(e => e.userId == R.id);
            this.m_view_Me.visible = !!e,
            e && (t = this.getRank(+e.rank), this.m_view_Me.visible = !0, this.m_view_Me.dataChanged(t, O.remember.getRankDetail()[0][t]), this.m_txt_Rank.text = "" + Math.max(0, +e.rank))
        })
    }
    getRank(t) {
        if (!t)
            return null;
        for (let e = 0; e < O.remember.getRankDetail()[0].length; e++) {
            var i = O.remember.getRankDetail()[0][e];
            if (i[0] <= t && i[1] >= t)
                return e
        }
    }
}
class Un extends t.hunt.views.remember.RememberRankViewUI {
    onEnable() {
        O.remember.reqRank().then(e => {
            this.updateView(e)
        })
    }
    updateView(e) {
        this.m_lst_Rank.array = e,
        this.tick && this.tick.dispose();
        let t = this.tick = Ei.create(Wt(), 1e3, this.m_txt_Time);
        t.start(),
        t.onEnd = () => {
            O.remember.reqRank().then(e => {
                this.updateView(e)
            })
        };
        e = e.find(e => e.userId == R.id);
        this.m_view_Me.visible = !!e,
        e && this.m_view_Me.dataChanged(null, e)
    }
    onClickInfo() {
        u(qn)
    }
}
class Hn extends t.hunt.views.remember.RememberGameDlgUI {
    constructor() {
        super(...arguments),
        this.gameValue = 0
    }
    onAwake() {
        super.onAwake(),
        this.addTitle(S(2054)),
        this.startGame(),
        I.instance.stopMusic()
    }
    onDestroy() {
        super.onDestroy()
    }
    startGame() {
        this.gameValue = 0,
        this.gameImg = null,
        this.m_txt_Time.color = o.White,
        this.initGame(),
        this.startTick(),
        this.startFirst(),
        this.m_txt_Score.text = "0",
        this.combo = 0,
        this.updateCombo(),
        this.m_img_Mask.visible = !1
    }
    updateCombo() {
        this.m_txt_Combo.text = this.combo + "",
        2 <= this.combo && this.ani5.play(0, !1)
    }
    startTick() {
        this.tick && this.tick.dispose();
        var e = Data.getBlock_memoryCard(O.remember.blockId);
        let t = this.tick = Ei.create(Date.newDate().getTime() + 1e3 * +e.gameTime, 1e3, this.m_txt_Time, "MM:ss");
        t.start(),
        t.onEnd = () => {
            this.m_view_Game.doWin(!1),
            this.m_img_Mask.visible = !0
        },
        t.onTick = e => {
            e <= 10 && (this.m_txt_Time.color = o.Red, this.ani4.play(0, !1))
        }
    }
    startFirst() {
        this.gameImg = null,
        this.m_box_Game2.visible = this.m_box_Game3.visible = !1,
        this.m_box_Game1.visible = !0,
        this.m_img_Banner.skin = "hunt/ui_remember/banner1.jpg",
        this.ani1.play(0, !1),
        this.m_img_AdaptBg.skin = "hunt/ui_bg/card1_bg.jpg";
        let s = "hunt/ui_remember/bg1.png";
        I.instance.playSound(v.SE_RememberStart);
        var e = this.m_box_Game1._children;
        let t = O.remember;
        for (let i of e)
            i.offAll(), i.on(Laya.Event.CLICK, this, () => {
                var e = +i.name - 1;
                this.gameImg != i && (this.unAbleBox(), t.reqBlockMemoryOpen(e).then(t => {
                        if (this.gameValue && this.gameImg) {
                            this.clipCard(i, `hunt/ui_remember/${t.cardId}.png`);
                            let e = this.gameImg;
                            this.gameValue != t.cardId ? (this.combo = 0, this.updateCombo(), Laya.timer.once(500, this, () => {
                                    this.clipCard(i, s),
                                    this.clipCard(e, s, !0)
                                })) : (this.addScore(t), Laya.timer.once(200, this, () => {
                                    this.sumImg(i, e, this.m_box_Game1, 40),
                                    t.isFinish && Laya.timer.once(1e3, this, () => {
                                        this.startSec()
                                    })
                                })),
                            this.gameValue = 0,
                            this.gameImg = null
                        } else
                            this.gameImg = i, this.gameValue = t.cardId, this.clipCard(i, `hunt/ui_remember/${t.cardId}.png`, !0), i.skin = `hunt/ui_remember/${t.cardId}.png`
                    }))
            })
    }
    startSec() {
        I.instance.playSound(v.SE_RememberStart),
        this.gameImg = null,
        this.m_box_Game1.visible = this.m_box_Game3.visible = !1,
        this.m_box_Game2.visible = !0,
        this.m_img_Banner.skin = "hunt/ui_remember/banner2.jpg",
        this.ani2.play(0, !1);
        let s = "hunt/ui_remember/bg2.png";
        this.m_img_AdaptBg.skin = "hunt/ui_bg/fishery_bg.jpg";
        var e = this.m_box_Game2._children;
        let t = O.remember;
        for (let i of e)
            i.offAll(), i.on(Laya.Event.CLICK, this, () => {
                var e = +i.name - 1;
                this.gameImg != i && (this.unAbleBox(), t.reqBlockMemoryOpen(e).then(t => {
                        if (this.gameValue && this.gameImg) {
                            let e = this.gameImg;
                            this.clipCard(i, `hunt/ui_remember/${t.cardId}.png`),
                            this.gameValue != t.cardId ? (this.combo = 0, this.updateCombo(), Laya.timer.once(500, this, () => {
                                    this.clipCard(i, s),
                                    this.clipCard(e, s, !0)
                                })) : (this.addScore(t), Laya.timer.once(200, this, () => {
                                    this.sumImg(i, e, this.m_box_Game2, 41),
                                    t.isFinish && Laya.timer.once(1e3, this, () => {
                                        this.startThd()
                                    })
                                })),
                            this.gameImg = null,
                            this.gameValue = 0
                        } else
                            this.gameImg = i, this.gameValue = t.cardId, this.clipCard(i, `hunt/ui_remember/${t.cardId}.png`, !0), i.skin = `hunt/ui_remember/${t.cardId}.png`
                    }))
            })
    }
    startThd() {
        I.instance.playSound(v.SE_RememberStart),
        this.gameImg = null,
        this.m_box_Game1.visible = this.m_box_Game2.visible = !1,
        this.m_box_Game3.visible = !0;
        let s = "hunt/ui_remember/bg3.png";
        this.m_img_Banner.skin = "hunt/ui_remember/banner3.jpg",
        this.m_img_AdaptBg.skin = "hunt/ui_bg/card3_bg.jpg",
        this.ani3.play(0, !1);
        var e = this.m_box_Game3._children;
        let a = O.remember;
        for (let i of e)
            i.offAll(), i.on(Laya.Event.CLICK, this, e => {
                var t = +i.name - 1;
                this.gameImg != i && (this.unAbleBox(), a.reqBlockMemoryOpen(t).then(t => {
                        if (this.gameValue) {
                            this.clipCard(i, `hunt/ui_remember/${t.cardId}.png`);
                            let e = this.gameImg;
                            this.gameValue != t.cardId ? (this.combo = 0, this.updateCombo(), Laya.timer.once(500, this, () => {
                                    this.clipCard(i, s),
                                    this.clipCard(e, s, !0)
                                })) : (this.addScore(t), Laya.timer.once(200, this, () => {
                                    this.sumImg(i, e, this.m_box_Game3, 7),
                                    t.isFinish && Laya.timer.once(1e3, this, () => {
                                        this.m_img_Mask.visible = !0,
                                        O.remember.reqBlindBox().then(e => {
                                            this.m_view_Game.m_txt_Num.text = e.counts + "",
                                            this.m_view_Game.doWin(!0, t, e),
                                            this.tick && this.tick.dispose(),
                                            this.ani4.gotoAndStop(0)
                                        })
                                    })
                                })),
                            this.gameValue = 0,
                            this.gameImg = null
                        } else
                            this.gameImg = i, this.gameValue = t.cardId, this.clipCard(i, `hunt/ui_remember/${t.cardId}.png`, !0), i.skin = `hunt/ui_remember/${t.cardId}.png`
                    }))
            })
    }
    initGame() {
        this.gameImg = null,
        this.gameValue = 0,
        this.m_view_Game.visible = !1;
        for (let i = 1; i <= 3; i++) {
            let e = this["m_box_Game" + i],
            t = (e.visible = !1, `hunt/ui_remember/bg${i}.png`);
            e._children.forEach(e => {
                e.skin = t,
                e.visible = !0
            })
        }
    }
    clipCard(e, t, i = !1) {
        Laya.Tween.to(e, {
            scaleX: 0
        }, 100, null, Laya.Handler.create(this, () => {
                Laya.Tween.to(e, {
                    scaleX: 1
                }, 100, null),
                e.skin = t,
                i && this.ableBox()
            }))
    }
    sumImg(e, t, i, s) {
        var a = (e.x + t.x) / 2,
        r = (e.y + t.y) / 2;
        this.combo++,
        this.updateCombo(),
        I.instance.playSound(v.SE_RememberClear),
        Laya.Tween.to(e, {
            x: a,
            y: r
        }, 200, null, Laya.Handler.create(this, () => {
                e.visible = !1
            })),
        Laya.Tween.to(t, {
            x: a,
            y: r
        }, 200, null, Laya.Handler.create(this, () => {
                t.visible = !1,
                this.ableBox()
            })),
        b.create({
            url: `hunt/ue/${s}.atlas`,
            parent: i,
            px: a,
            py: r,
            scale: 1,
            autoPlay: !0,
            autoRemove: !0,
            interval: 100
        })
    }
    addScore(e) {
        O.remember.comboscore = e.comboScore,
        this.m_txt_Score.text = e.comboScore + ""
    }
    doClose() {
        this.closeDialog(),
        l(Vn)
    }
    doOpen() {
        _e("open") && (O.remember.reqOpenBox().then(e => {
                Et(e.items, null, "box3")
            }), Laya.timer.once(2e3, this, () => {
                l(Vn),
                this.closeDialog()
            }))
    }
    onClickBack(e) {
        Ae({
            button: V.YesNo,
            msg: S(2066)
        }).then(e => {
            e.type == d.Yes && (this.closeDialog(), B.instance && B.instance.playBgm())
        })
    }
    ableBox() {
        this.m_box_Game1.mouseEnabled = this.m_box_Game2.mouseEnabled = this.m_box_Game3.mouseEnabled = !0
    }
    unAbleBox() {
        this.m_box_Game1.mouseEnabled = this.m_box_Game2.mouseEnabled = this.m_box_Game3.mouseEnabled = !1
    }
}
r([n(c.REMEMBER_CLOSE)], Hn.prototype, "doClose", null),
r([n(c.REMEMBER_OPEN)], Hn.prototype, "doOpen", null);
class On extends t.hunt.views.remember.RememberViewUI {
    onAwake() {
        super.onAwake(),
        O.remember.reqMemoryInfo().then(() => {
            this.updateView()
        })
    }
    updateView() {
        var e = O.remember,
        t = Data.getBlock_memoryCard(e.blockId),
        i = t.dailyBuyCount;
        this.m_btn_Buy.visible = !e.playCount && e.buyCount < i,
        this.m_btn_Start.visible = !!e.playCount,
        this.m_txt_Has.text = e.playCount + "",
        this.m_txt_Has.color = e.playCount ? o.White : o.Red,
        this.m_txt_Need.text = "/" + t.dailyCount,
        this.m_txt_Price.text = t.buyCountCost / 100 + "",
        Laya.timer.callLater(this, () => {
            this.m_box_Times.refresh()
        }),
        this.updateBlockInfo(O.remember.blockId)
    }
    updateBlockInfo(t) {
        O.block.reqBlockInfo(t).then(e => {
            this.destroyed || (this.m_view_Like.visible = !0, this.m_view_Like.setData(t, e), this.m_view_Comment.visible = !0, this.m_view_Comment.setData(t))
        })
    }
    onClickStart() {
        O.remember.reqBlockMemoryCardStart().then(e => {
            l(Hn).then(() => {
                O.event(c.REMEMBER_START)
            })
        })
    }
    onClickBuy() {
        var e = Data.getBlock_memoryCard(O.remember.blockId);
        R.copper < e.buyCountCost ? h(S(25)) : O.remember.reqBuy().then(() => {
            this.onClickStart()
        })
    }
}
class Vn extends t.hunt.views.remember.RememberDlgUI {
    constructor(e = !1) {
        super(),
        this.m_rank = !1,
        this.m_rank = e
    }
    onAwake() {
        super.onAwake(),
        this.addTitle(S(2054)),
        this.m_box_Stack.setupCls([{
                    cls: On
                }, {
                    cls: Un
                }
            ]),
        this.m_tab_Tab.selectedIndex = this.m_rank ? 1 : 0,
        B.instance && B.instance.playBgm()
    }
    updateView() {
        this.closeDialog()
    }
    onSelectTab(t) {
        1 == t ? O.remember.reqRank().then(e => {
            this.m_box_Stack.changeIndex(t)
        }) : this.m_box_Stack.changeIndex(t)
    }
    onClickBack(e) {
        this.closeDialog()
    }
}
r([n(c.REMEMBER_START)], Vn.prototype, "updateView", null);
class Fn extends t.hunt.views.remember.RememberInfoDlgUI {
    constructor(e, t) {
        super(),
        this.m_title = e,
        this.m_block = t
    }
    onAwake() {
        super.onAwake(),
        this.m_txt_Title.text = this.m_title,
        this.setAuthor(Data.getBlock(this.m_block.id).authors),
        O.remember.blockId = this.m_block.id,
        this.updateBlockInfo(this.m_block.id),
        O.remember.reqBlindBox().then(e => {
            this.m_view_Box.setData(O.remember.getBoxData(e.boxIds), "box3"),
            this.m_txt_Num.text = e.counts + "",
            this.m_txt_Num.color = e.counts ? o.White : o.Red,
            this.m_box_Num.visible = !0,
            this.m_box_Num.refresh()
        });
        let e = Ee.create({
            url: "hunt/spine/remember.json"
        }),
        t = Ee.create({
            url: "hunt/spine/remember.json"
        }),
        i = Ee.create({
            url: "hunt/spine/remember.json"
        });
        e.x = 230,
        t.x = 70,
        i.x = 390,
        t.y = i.y = e.y = 20,
        e.scaleX = t.scaleX = i.scaleX = e.scaleY = t.scaleY = i.scaleY = 1.5,
        Laya.timer.frameOnce(3, this, () => {
            this.m_img_Type.addChild(e),
            this.m_img_Type.addChild(t),
            this.m_img_Type.addChild(i),
            e.play(0, !0),
            t.play(1, !0),
            i.play(2, !0)
        })
    }
    setAuthor(e = []) {
        this.m_view_Author.setData(e)
    }
    updateBlockInfo(t) {
        O.block.reqBlockInfo(t).then(e => {
            this.destroyed || (this.m_view_Like.visible = !0, this.m_view_Like.setData(t, e), this.m_view_Comment.visible = !0, this.m_view_Comment.setData(t))
        })
    }
    onClickClick() {
        this.closeDialog(d.Yes)
    }
}
class Gn {
    constructor() {
        this.blocks = [],
        this.blindBox = [],
        this.isNight = !1
    }
    init(e, t, i) {
        this.mapId = e,
        this.mapPos = t,
        this.blocks = i,
        O.event(c.BLOCK_CHANGE),
        Data.getTileMap(e).type == $e.eleMistery && 0 == i.length && u(ns, {
            params: [!0]
        })
    }
    reqTileMap(t = !1) {
        return A(pb.GetTileMapReq.create(), pb.IGetTileMapAck).then(e => {
            this.init(e.mapId, e.pos, e.blocks),
            t && B.instance && (this.initLogic(), this.initConvey())
        })
    }
    reqSwitchMap(e) {
        let t = pb.TileMapSwitchReq.create();
        return t.switchId = e,
        A(t, pb.TileMapSwitchAck.create()).then(e => {
            var t = this.mapId;
            return this.init(e.mapId, e.pos, e.blocks),
            [t, e.mapId]
        }, () => {
            B.instance && (B.instance.m_stopMove = !1)
        })
    }
    reqConvey(e) {
        let t = pb.TileMapConveyReq.create();
        return t.mapId = e,
        A(t, pb.ITileMapConveyAck).then(e => {
            this.init(e.mapId, e.pos, e.blocks),
            O.event(c.CONVEY_MAP)
        })
    }
    reqMoveTo(t) {
        let e = pb.TileMapMoveReq.create();
        return e.pos = t,
        A(e, pb.ITileMapMoveAck).then(e => {
            this.mapPos = t
        })
    }
    reqUnlock(e) {
        let t = pb.TileMapUnlockReq.create();
        return t.mapId = e,
        A(t, pb.ITileMapUnlockAck).then(e => {
            this.unlockMapIds = e.unLockMaps
        })
    }
    reqEnterEleMistery(e) {
        let t = pb.EnterEleMisteryReq.create();
        return t.id = e,
        A(t, pb.IEnterEleMisteryAck).then(e => (this.init(e.mapId, e.pos, e.blocks), e.items && O.bag.updateItem(e.items), e.mapId))
    }
    checkUnlockMap(e) {
        return -1 != this.unlockMapIds.indexOf(e)
    }
    checkProps(e, t) {
        if (!e || !e.properties)
            return null;
        for (var i of e.properties)
            if (i.name == t)
                return i.value;
        return null
    }
    reqElfBox(t) {
        let e = new pb.GetBlindBoxInfoReq;
        return e.type = t,
        A(e, pb.IGetBlindBoxInfoAck).then(e => {
            this.blindBox[t] = {
                remainder: e.counts,
                boxIds: e.boxIds
            }
        })
    }
    reqOpenBlind(t) {
        let e = new pb.OpenBlindBoxReq;
        return e.type = t,
        A(e, pb.IOpenBlindBoxAck).then(e => (this.blindBox[t].remainder = e.counts, this.blindBox[t].boxIds = e.boxIds, e.addSkin && (R.heroSkins[e.addSkin.id] = e.addSkin.skin), O.bag.updateItem(e.items), O.event(c.UPDATE_BLIND), e))
    }
    getClockIndex() {
        var e = (Yt() - Date.newDate().getTime()) / 864e5;
        return e <= 1 ? 6 : 6 - Math.ceil(e / 15)
    }
    reqEleMisteryLoot() {
        return A(pb.EleMisteryLootIncrsReq.create(), pb.IEleMisteryLootIncrsAck).then(e => e.incrs)
    }
    doEndPath(r) {
        let n = B.instance;
        if (n) {
            let a = O.block;
            if (r.type == y.Tower) {
                if (n.m_openTower)
                    return n.openTower(), n.m_openTower = !1, n.m_stopMove = !1, void(n.m_waitDlg = !1);
                l(Zi, {
                    params: [n.getMapProp("name"), n.getMapProp("scale")]
                }).then(e => {
                    e.wait().then(() => {
                        n.m_stopMove = !1,
                        n.m_waitDlg = !1
                    })
                })
            } else {
                if (r.type == y.City)
                    return e = (r.properties || []).find(e => "cityType" == e.name), this.checkProps(r, "arena") ? (n.m_waitDlg = !1, O.hero.getHeroNum() < 3 ? void h(S(1098)) : void O.arena.reqArenaInfo().then(() => {
                            l(Ga)
                        })) : this.checkProps(r, "arenanpc") ? (n.m_waitDlg = !1, O.hero.getHeroNum() < 3 ? void h(S(1098)) : void O.arena.reqArenaInfo().then(() => {
                            l(Gr)
                        })) : void(e && (e = Data.getBattleMap(e.value), T.start({
                                mapId: +e.mapRes,
                                logicMapType: Re.city,
                                squad: [R.icon],
                                viewImpl: rs
                            }), n.m_waitDlg = !1));
                if (r.type == y.Block) {
                    let s = n.m_logincPoint[r.name];
                    if (s) {
                        var e = s.blockId;
                        let i = Data.getBlock(e);
                        if (i) {
                            switch (i.playType) {
                            case M.normalMonster:
                            case M.normalBoss:
                            case M.imitatePvp:
                            case M.worldBoss:
                                break;
                            default:
                                a.reqBlockAction(s.blockId, Ne.enter),
                                O.report.enter()
                            }
                            switch (i.playType) {
                            case M.normalMonster:
                            case M.normalBoss:
                            case M.imitatePvp:
                                a.blockBattle(s),
                                n.m_waitDlg = !1;
                                break;
                            case M.worldBoss:
                                a.blockWorldBattle(s),
                                n.m_waitDlg = !1;
                                break;
                            case M.normalChest:
                                a.blockChest(s),
                                n.m_waitDlg = !1;
                                break;
                            case M.openWharf:
                                var o = this.checkConvey(s.x, s.y);
                                n.showBoatAni(o, r);
                                break;
                            case M.openBurrow:
                                let e = Laya.Handler.create(this, () => {
                                    var e = this.checkConvey(s.x, s.y);
                                    this.reqSwitchMap(e.id).then(e => {
                                        e && (n.m_ani.play(14, !0), O.event(c.TRANSANI), n.showTransAni(() => {
                                                n.createMap(e[1])
                                            }))
                                    })
                                });
                                if (!n.m_openBurrow)
                                    return void e.run();
                                n.m_openBurrow = !1,
                                n.openPlace(e);
                                break;
                            case M.talk:
                                o = i.preStartTalk;
                                o.length && Ri.showTalk(o[R.sex] || o[0], e => {
                                    n.m_waitDlg = !1,
                                    e.rewardTalk && a.reqTalkReward(e.rewardTalk, s.blockSpawnId)
                                }, s.blockId);
                                break;
                            case M.talkHero:
                                a.blockHero(s);
                                break;
                            case M.talkGoddess:
                                let t = this.checkConvey(s.x, s.y);
                                if (!t)
                                    return;
                                o = Data.getBlock_talkGoddess(s.blockId);
                                s.isOver ? (h(S(90106)), a.blockSwitch(t)) : o && Bi.showTalk(o.langs, Laya.Handler.create(this, () => {
                                        a.reqGodTalk(s.blockSpawnId).then(e => {
                                            e && Et(e).then(() => {
                                                i.endTalk && Ri.showTalk(i.endTalk, () => {
                                                    a.blockSwitch(t)
                                                })
                                            })
                                        })
                                    }));
                                break;
                            case M.fish:
                                O.fish.block = i,
                                l(Cn).then(e => {
                                    e.wait().then(() => {
                                        O.report.done(),
                                        O.report.close()
                                    })
                                }),
                                n.m_waitDlg = !1;
                                break;
                            case M.invite:
                                l(An),
                                n.m_waitDlg = !1;
                                break;
                            case M.treasure:
                                O.treasure.reqOpen(s.blockSpawnId).then(() => {
                                    l(Zi, {
                                        params: [B.instance.getMapProp("name"), B.instance.getMapProp("scale")]
                                    }).then(() => {
                                        var e = Data.getBlock_treasure(s.blockId);
                                        e && Ri.showTalk(e.startTalk[O.account.wallet ? 1 : 0]),
                                        n.m_waitDlg = !1
                                    })
                                });
                                break;
                            case M.memoryCard:
                                l(Vn),
                                n.m_waitDlg = !1
                            }
                        }
                    } else
                        n.m_waitDlg = !1
                } else if (r.type == y.Treasure) {
                    e = this.getTreasureBlock();
                    let i = Data.getBlock_treasure(e.blockId);
                    var t = +r.name == +i.finalPoint;
                    if (n.m_waitDlg = !1, t)
                        l(Bn);
                    else {
                        let t = i.points.indexOf(+r.name);
                        O.treasure.reqPoint(e.blockSpawnId, t).then(e => {
                            u(Nn, {
                                params: [e.items]
                            }).then(e => {
                                e.wait().then(() => {
                                    t = O.treasure.getTreasureIndex() - 1,
                                    O.treasure.m_treashow = !0;
                                    var e = 2 == t && !!O.account.wallet;
                                    u(Pn, {
                                        params: [t, i.pointTalks[(e ? 1 : 0) + t]]
                                    })
                                })
                            })
                        })
                    }
                }
            }
        }
    }
    clickBlock(e, s) {
        let a = B.instance;
        if (a) {
            var r = a.m_logincPoint[e.name];
            if (r) {
                let i = Data.getBlock(r.blockId);
                if (i) {
                    e = i.clickTalk;
                    e.length && Ri.showTalk(e[R.sex] || e[0]),
                    O.block.reqBlockAction(r.blockId, Ne.click),
                    O.report.begin(r.blockId);
                    let t = () => {
                        O.report.close()
                    };
                    switch (i.playType) {
                    case M.normalMonster:
                    case M.normalBoss:
                    case M.imitatePvp:
                    case M.worldBoss:
                        u(Dn, {
                            params: [r, i]
                        }).then(e => {
                            e.wait().then(e => {
                                e.type == d.Yes ? s.run() : t()
                            })
                        });
                        break;
                    case M.normalChest:
                        u(Ln, {
                            params: [r, i]
                        }).then(e => {
                            e.wait().then(e => {
                                e.type == d.Yes ? s.run() : t()
                            })
                        });
                        break;
                    case M.openBurrow:
                    case M.openWharf:
                        if (r.isOver)
                            return void u(Tn, {
                                params: [r]
                            }).then(e => {
                                e.wait().then(e => {
                                    e.type == d.Yes && s.run()
                                })
                            });
                        u(Tn, {
                            params: [r]
                        }).then(e => {
                            e.wait().then(e => {
                                i.playType == M.openBurrow && (a.m_openBurrow = !0),
                                e.type == d.Yes && s.run()
                            })
                        });
                        break;
                    case M.talk:
                        s.run();
                        break;
                    case M.talkHero:
                        u(En, {
                            params: [r.blockId]
                        }).then(e => {
                            e.wait().then(e => {
                                e.type == d.Yes && s.run()
                            })
                        });
                        break;
                    case M.talkGoddess:
                        if (O.block.checkBlockLimit(r.blockId))
                            return;
                        u(Tn, {
                            params: [r]
                        }).then(e => {
                            e.wait().then(e => {
                                e.type == d.Yes && s.run()
                            })
                        });
                        break;
                    case M.fish:
                        u(Ui, {
                            params: [M.fish, S(13007), !1, i]
                        }).then(e => {
                            e.wait().then(e => {
                                e.type == d.Yes ? s.run() : t()
                            })
                        });
                        break;
                    case M.invite:
                        u(Ui, {
                            params: [M.invite, S(2048), !1, i]
                        }).then(e => {
                            e.wait().then(e => {
                                e.type == d.Yes && s.run()
                            })
                        });
                        break;
                    case M.treasure:
                        if (!this.checkUnlockMap(this.mapId))
                            return void h(S(2056));
                        var n = this.getTreasureBlock();
                        if (!n)
                            return void s.run();
                        n.treasure && n.treasure.finalReward || u(Mn, {
                            params: [r.blockId, n.treasure && n.treasure.isOpen],
                            closeOnSide: !1
                        }).then(e => {
                            e.wait().then(e => {
                                e.type == d.Yes && s.run()
                            })
                        });
                        break;
                    case M.memoryCard:
                        O.remember.blockSpawnId = r.blockSpawnId,
                        u(Fn, {
                            params: [S(2054), i]
                        }).then(e => {
                            e.wait().then(e => {
                                e.type == d.Yes && s.run()
                            })
                        })
                    }
                }
            }
        }
    }
    createBlock(w, C) {
        var x = w.blockId;
        let S = Data.getBlock(x);
        if (S) {
            var A = S.playType;
            let b = B.instance;
            if (b)
                switch (A) {
                case M.normalBoss:
                    var D = Data.getBlock_normalBattle(x);
                    if (!D)
                        return;
                    var D = Data.getCharType(D.bossId),
                    L = Data.getSpineParam(D.avatar);
                    let e = 0,
                    t = 0,
                    i = (L && (e = L.offset[0] || 0, t = L.offset[1] || 0), b.createSpine(`hunt/role/${D.avatar}.json`, C.x, C.y, 13, .5, [e, t]));
                    Laya.timer.frameOnce(2, this, () => {
                        b.logicLayer.addChild(i),
                        E(Vi, {
                            params: [w]
                        }).then(e => {
                            e.mouseThrough = !0,
                            e.anchorX = .5,
                            e.anchorY = 1,
                            e.x = C.x,
                            e.y = C.y + 40,
                            b.logicLayer.addChild(e)
                        }),
                        502 == w.blockId && !w.isOver && R.heros[6070] && E(os, {}).then(e => {
                            e.x = C.x - 30,
                            e.y = C.y - 10,
                            b.logicLayer && b.logicLayer.addChild(e)
                        })
                    });
                    break;
                case M.normalMonster:
                    L = Data.getBlock_normalBattle(x);
                    if (!L)
                        return;
                    let s = 0,
                    a = 0;
                    D = Data.getMonsterGroup(L.monsterGroup[0]);
                    if (!D || !D.monsters.length)
                        return;
                    L = Data.getCharType(D.monsters[0]),
                    D = Data.getSpineParam(L.avatar);
                    D && (s = D.offset[0] || 0, a = D.offset[1] || 0);
                    let r = b.createSpine(`hunt/role/${L.avatar}.json`, C.x, C.y, 13, .7, [s, a]);
                    Laya.timer.frameOnce(2, this, () => {
                        b.logicLayer.addChild(r),
                        E(Vi, {
                            params: [w]
                        }).then(e => {
                            e.mouseThrough = !0,
                            e.anchorX = .5,
                            e.anchorY = 1,
                            e.x = C.x,
                            e.y = C.y + 40,
                            b.logicLayer.addChild(e)
                        })
                    });
                    break;
                case M.imitatePvp:
                    D = w.squad[1],
                    L = Data.getSpineParam(D);
                    let n = 0,
                    o = 0,
                    l = (L && (n = L.offset[0] || 0, o = L.offset[1] || 0), b.createSpine(`hunt/role/${D}.json`, C.x, C.y, 13, .7, [n, o]));
                    Laya.timer.frameOnce(2, this, () => {
                        b.logicLayer.addChild(l),
                        E(Vi, {
                            params: [w]
                        }).then(e => {
                            e.mouseThrough = !0,
                            e.anchorX = .5,
                            e.anchorY = 1,
                            e.x = C.x,
                            e.y = C.y + 40,
                            b.logicLayer.addChild(e)
                        })
                    });
                    break;
                case M.worldBoss:
                    L = Data.getBlock_worldBoss(x);
                    if (!L)
                        return;
                    D = Data.getCharType(L.bossId),
                    L = Data.getSpineParam(D.avatar);
                    let h = 0,
                    m = 0,
                    c = (L && (h = L.offset[0] || 0, m = L.offset[1] || 0), b.createSpine(`hunt/role/${D.avatar}.json`, C.x, C.y - 100, 13, 1, [h, m])),
                    d = new Laya.Image;
                    d.skin = "hunt/ui_fight/boss_crown.png",
                    d.anchorX = d.anchorY = .5;
                    L = C.y - 200;
                    d.x = C.x,
                    d.y = L;
                    let u = new Laya.TimeLine;
                    d.timeLine = u,
                    d.onDestroy = () => {
                        d.timeLine && (d.timeLine.destroy(), delete d.timeLine)
                    },
                    u.to(d, {
                        y: 5 + L
                    }, 1e3).to(d, {
                        y: L - 10
                    }, 2e3).to(d, {
                        y: L
                    }, 1e3),
                    u.play(0, !0),
                    Laya.timer.frameOnce(2, this, () => {
                        b.logicLayer.addChild(c),
                        b.logicLayer.addChild(d),
                        E(Vi, {
                            params: [w]
                        }).then(e => {
                            e.mouseThrough = !0,
                            e.anchorX = .5,
                            e.anchorY = 1,
                            e.x = C.x,
                            e.y = C.y + 40,
                            b.logicLayer.addChild(e)
                        })
                    });
                    break;
                case M.talkGoddess:
                    let _ = (this.getPointType(C.x, C.y) || {}).properties;
                    var D = _ ? _.find(e => "placeX" == e.name) : {},
                    L = _ ? _.find(e => "placeY" == e.name) : {},
                    T = O.block.getGodState(w);
                    b.m_place = b.createSpine("hunt/worldmap/spine/nvshenxiang.json", C.x, C.y, T, 1, [-D.value || 0, -L.value || 0]),
                    Laya.timer.frameOnce(2, this, () => {
                        b.logicLayer.addChild(b.m_place)
                    });
                    break;
                case M.normalChest:
                    T = Data.getBlock_normalChest(x);
                    if (!T)
                        return;
                    let p = new Laya.Image;
                    p.skin = `hunt/ui_comm/${T.icon}_shadow.png`,
                    p.anchorX = p.anchorY = .5,
                    p.size(90, 90),
                    p.x = C.x,
                    p.y = C.y,
                    Laya.timer.frameOnce(2, this, () => {
                        b.logicLayer.addChild(p)
                    });
                    break;
                case M.openBurrow:
                    let g = (this.getPointType(C.x, C.y) || {}).properties;
                    D = g ? g.find(e => "placeX" == e.name) : {},
                    L = g ? g.find(e => "placeY" == e.name) : {};
                    b.m_place = b.createSpine("hunt/worldmap/spine/didong.json", C.x, C.y, w.isOver ? 2 : 0, 1, [-D.value || 0, -L.value || 0]),
                    Laya.timer.frameOnce(2, this, () => {
                        b.logicLayer.addChild(b.m_place)
                    });
                    break;
                case M.openWharf:
                    E(Hi, {
                        params: [null, [], {
                                icon: 28
                            }
                        ]
                    }).then(e => {
                        e.name = "chuan",
                        e.x = C.x + (S.bubblePos[0] || 0),
                        e.y = C.y - 20,
                        b.logicLayer && b.logicLayer.addChild(e)
                    });
                    break;
                case M.talk:
                    if (S.clickTalk.length + S.endTalk.length + S.startTalk.length + S.preStartTalk.length == 0)
                        return;
                    E(Vi, {
                        params: [w]
                    }).then(e => {
                        e.anchorX = .5,
                        e.anchorY = 1,
                        e.x = C.x + (S.bubblePos[0] || 0),
                        e.y = C.y + (S.bubblePos[1] || 0),
                        b.logicLayer && b.logicLayer.addChild(e)
                    });
                    break;
                case M.talkHero:
                    w.isOver || (E(Vi, {
                            params: [w]
                        }).then(e => {
                            e.anchorX = .5,
                            e.anchorY = 1,
                            e.x = C.x + (S.bubblePos[0] || 0),
                            e.y = C.y + (S.bubblePos[1] || 0),
                            b.logicLayer && b.logicLayer.addChild(e)
                        }), 7 == w.blockId && E(os, {}).then(e => {
                            e.x = C.x - 50,
                            e.y = C.y - 50,
                            b.logicLayer && b.logicLayer.addChild(e)
                        }));
                    break;
                case M.fish:
                    let y = C.properties;
                    T = y && y.find(e => "placeX" == e.name) ? y.find(e => "placeX" == e.name) : {},
                    D = y && y.find(e => "placeY" == e.name) ? y.find(e => "placeY" == e.name) : {};
                    let v = b.createSpine("hunt/role/6070.json", C.x, C.y, 15, .7, [-T.value || 0, -D.value || 0]);
                    Laya.timer.frameOnce(2, this, () => {
                        b.logicLayer.addChild(v),
                        E(Vi, {
                            params: [null]
                        }).then(e => {
                            e.mouseThrough = !0,
                            e.m_box_Block.visible = !0,
                            e.m_img_Block.skin = "hunt/ui_tilemap/img32.png",
                            e.anchorX = .5,
                            e.anchorY = 1,
                            e.x = C.x - 20,
                            e.y = C.y - 10,
                            b.logicLayer.addChild(e)
                        })
                    });
                    break;
                case M.invite:
                    L = Data.getSpineParam(1008);
                    let k = b.createSpine("hunt/role/1008.json", C.x, C.y, 14, .7, [-L.offset[0] || 0, L.offset[1] || 0]);
                    Laya.timer.frameOnce(2, this, () => {
                        b.logicLayer.addChild(k),
                        E(Vi, {
                            params: [null]
                        }).then(e => {
                            e.mouseThrough = !0,
                            e.m_box_Block.visible = !0,
                            e.m_img_Block.skin = "hunt/ui_tilemap/img35.png",
                            e.anchorX = .5,
                            e.anchorY = 1,
                            e.x = C.x - 20,
                            e.y = C.y - 10,
                            b.logicLayer.addChild(e)
                        })
                    });
                    break;
                case M.treasure:
                    if (w.isOver)
                        return;
                    if (!this.getTreasureBlock())
                        return;
                    let f = b.createSpine("hunt/spine/treasure.json", C.x, C.y - 55, 0, .5);
                    Laya.timer.frameOnce(2, this, () => {
                        b.logicLayer.addChild(f)
                    });
                    break;
                case M.memoryCard:
                    if (w.isOver)
                        return;
                    let I = b.createSpine("hunt/spine/remember.json", C.x, C.y - 125, 0, 1.5);
                    Laya.timer.frameOnce(2, this, () => {
                        b.logicLayer.addChild(I)
                    })
                }
        }
    }
    createClouds(e = !1) {
        let i = B.instance;
        if (i && i.logicLayer && !i.logicLayer.destroyed)
            if (e) {
                var s = Laya.stage.width,
                a = Laya.stage.height;
                for (let t = 0; t < 4; t++) {
                    let e = new Laya.Image(`hunt/ui_tilemap/blackCloud${Math.floor(4*Math.random())}.png`);
                    e.scaleX = e.scaleY = Math.random() + .5,
                    e.name = "cloud";
                    var r = i.logicLayer.globalToLocal(new Laya.Point(s, a / 4 * t));
                    e.x = r.x + 2 * s,
                    e.y = r.y,
                    i.logicLayer.addChild(e),
                    Laya.Tween.to(e, {
                        x: r.x - 2 * s
                    }, 2e4 * (2 * Math.random() + 1), null, Laya.Handler.create(this, () => {
                            e.removeSelf(),
                            e.destroy()
                        }))
                }
            } else {
                var n = i.tMap.width,
                o = i.tMap.height;
                for (let t = 0; t < o / 400; t++) {
                    let e = new Laya.Image(`hunt/ui_tilemap/blackCloud${Math.floor(4*Math.random())}.png`);
                    e.scaleX = e.scaleY = Math.random() + .5,
                    e.name = "cloud",
                    i.logicLayer.addChild(e);
                    var l = i.logicLayer.globalToLocal(new Laya.Point(n, 400 * t));
                    e.x = l.x,
                    e.y = l.y,
                    Laya.Tween.to(e, {
                        x: 0
                    }, n / 560 * 1e4 * (2 * Math.random() + 1), null, Laya.Handler.create(this, () => {
                            e.removeSelf(),
                            e.destroy()
                        }))
                }
            }
    }
    showScaredCat(a) {
        let r = B.instance;
        if (r) {
            let e = new Laya.Image,
            t = (e.skin = "hunt/ui_block/surprise.png", e.anchorX = .5, e.anchorY = 1, e.scale(0, 0), Ee.create({
                    url: "hunt/role/6070.json"
                })),
            i = (t.pos(240, 325), t.scale(.7, .7), r.tMap.mapSprite().addChild(t), t.play(14, !0), t.addChild(e), e.centerX = 0, e.y = 100, new Laya.TimeLine),
            s = (i.to(e, {
                    scaleX: 1.2,
                    scaleY: 1.2,
                    y: 50
                }, 150).to(e, {
                    scaleX: 1,
                    scaleY: 1
                }, 100, Laya.Ease.bounceOut).to(e, {
                    scaleX: 1
                }, 500), new Laya.TimeLine);
            s.to(t, {
                scaleY: .3,
                scaleX: 1.4
            }, 50, null).to(t, {
                scaleX: .3,
                scaleY: 1.4,
                y: 230
            }, 50).to(t, {
                scaleX: .7,
                scaleY: .7,
                y: 250
            }, 400, Laya.Ease.bounceOut),
            i.on(Laya.Event.COMPLETE, this, () => {
                e.destroy(),
                s.play(0, !1)
            }),
            s.on(Laya.Event.COMPLETE, this, () => {
                t.play(5, !0),
                Laya.Tween.to(t, {
                    y: -100
                }, 1300, null, Laya.Handler.create(this, () => {
                        t.destroy(),
                        a && a()
                    }), 250)
            }),
            i.play(0, !1)
        }
    }
    initConvey() {
        let n = B.instance;
        if (n && n.logicLayer) {
            var o = n.getLayarJsonByName("convey");
            if (o) {
                o = o.objects;
                if (o) {
                    n.m_conveys = [];
                    let e = null,
                    i,
                    s,
                    a = O.tileMap;
                    var l,
                    h = a.getTreasureBlock();
                    let t = null,
                    r = [];
                    h && (h = Data.getBlock_treasure(h.blockId), r = h.points, t = h.finalPoint);
                    for (l of o) {
                        if (t && l.name == t) {
                            let e = new Rn(!0);
                            e.x = l.x,
                            e.y = l.y,
                            n.logicLayer.addChild(e)
                        } else if (-1 != r.indexOf(+l.name)) {
                            let e = new Rn(!1, r.indexOf(+l.name));
                            e.x = l.x,
                            e.y = l.y,
                            n.logicLayer.addChild(e)
                        }
                        var m = n.hex.screenToScreen(l.x, l.y);
                        if (l.x = m.x, l.y = m.y, n.m_logincPoint[l.name] = l, n.m_conveys.push(l), l.type == y.Tower)
                            e = l;
                        else if (a.checkProps(l, "arena")) {
                            let e = l.properties;
                            var m = e && e.find(e => "placeX" == e.name) ? e.find(e => "placeX" == e.name) : {},
                            c = e && e.find(e => "placeY" == e.name) ? e.find(e => "placeY" == e.name) : {};
                            let t = n.createSpine("hunt/worldmap/spine/jingjichang.json", l.x, l.y, 0, .577, [-m.value || 0, -c.value || 0]);
                            Laya.timer.frameOnce(2, this, () => {
                                n.logicLayer.addChild(t)
                            })
                        } else if (a.checkProps(l, "arenanpc")) {
                            let e = l.properties;
                            m = e && e.find(e => "placeX" == e.name) ? e.find(e => "placeX" == e.name) : {},
                            c = e && e.find(e => "placeY" == e.name) ? e.find(e => "placeY" == e.name) : {};
                            let t = n.createSpine("hunt/role/1001.json", l.x, l.y, 13, .7, [-m.value || 0, -c.value || 0]);
                            Laya.timer.frameOnce(2, this, () => {
                                n.logicLayer.addChild(t)
                            })
                        } else
                            l.type == y.City ? i = l : l.type == y.Exit && (s = l);
                        m = a.checkProps(l, "arrow");
                        if (m && !this.checkArea(l.x + n.tMap.viewPortX, l.y + n.tMap.viewPortY)) {
                            let e = new Fi;
                            e.anchorX = e.anchorY = .5,
                            e.x = l.x,
                            e.y = l.y,
                            e.rotation = 90 * m - 90,
                            n.logicLayer.addChild(e)
                        }
                    }
                    if (e && n.initTower(e), i) {
                        let e = i.properties;
                        h = e && e.find(e => "placeX" == e.name) ? e.find(e => "placeX" == e.name) : {},
                        o = e && e.find(e => "placeY" == e.name) ? e.find(e => "placeY" == e.name) : {};
                        let t = n.createSpine("hunt/worldmap/spine/shalou.json", i.x, i.y, a.getClockIndex(), 1, [-h.value || 0, -o.value || 0]);
                        Laya.timer.frameOnce(2, this, () => {
                            n.logicLayer.addChild(t)
                        })
                    }
                    if (s) {
                        let e = s.properties;
                        var h = e && e.find(e => "placeX" == e.name) ? e.find(e => "placeX" == e.name) : {},
                        o = e && e.find(e => "placeY" == e.name) ? e.find(e => "placeY" == e.name) : {},
                        d = {
                            22: 1005,
                            21: 1004,
                            20: 1003,
                            23: 1006
                        };
                        let t = n.createSpine("hunt/worldmap/spine/mistery.json", s.x, s.y - 10, {
                            22: 0,
                            21: 2,
                            20: 1,
                            23: 3
                        }
                                [a.mapId], .6, [-h.value || 0, -o.value || 0]),
                        i = n.createSpine(`hunt/role/${d[a.mapId]}.json`, s.x, s.y - 100, 14, .8, [-h.value || 0, -o.value || 0]);
                        Laya.timer.frameOnce(2, this, () => {
                            n.logicLayer.addChild(t),
                            n.logicLayer.addChild(i)
                        })
                    }
                }
            }
        }
    }
    checkArea(e, t) {
        let i = B.instance;
        if (!i || !i.areaLayer)
            return null;
        e = i.hex.screenToScreen(-i.tMap.viewPortX + e, -i.tMap.viewPortY + t);
        return i.areaLayer.getTileDataByScreenPos(i.m_ani.x, i.m_ani.y) == i.areaLayer.getTileDataByScreenPos(e.x + i.tMap.viewPortX, e.y + i.tMap.viewPortY)
    }
    getBgProps(e, t) {
        let i = B.instance;
        if (i && i.bgLayer)
            return e = i.bgLayer.getTileDataByScreenPos(e, t), i.tMap.getTilePropertiesByGid(e, 0, "noPass")
    }
    getPointType(e, t) {
        let i = B.instance;
        if (!i)
            return null;
        var s = this.checkLogic(e, t);
        if (s)
            return s;
        let a = this.checkConvey(e, t);
        if (a) {
            if (a.type == y.Concat) {
                let t = a.properties.find(e => "targetPoint" == e.name);
                return (a = (a = i.m_logics.find(e => e.id == t.value)) || i.m_conveys.find(e => e.id == t.value)) || null
            }
            if (a.type == y.Obstacles)
                return a;
            if (a.type == y.Tower)
                return a;
            if (a.type == y.City || a.type == y.Exit)
                return a;
            if (a.type == y.Switch && O.tileMap.checkProps(a, "boat"))
                return a;
            if (a.type == y.Treasure)
                return a
        }
        return null
    }
    checkLogic(e, t) {
        let i = B.instance;
        if (!i)
            return null;
        var s,
        a = i.hex.screenToHex(e, t);
        for (s of i.m_logics) {
            var r = i.hex.screenToHex(s.x, s.y);
            if (r.q == a.q && r.r == a.r && r.s == a.s)
                return s
        }
        return null
    }
    checkConvey(e, t) {
        let i = B.instance;
        if (!i)
            return null;
        var s,
        a = i.hex.screenToHex(e, t);
        for (s of i.m_conveys) {
            var r = i.hex.screenToHex(s.x, s.y);
            if (r.q == a.q && r.r == a.r && r.s == a.s)
                return s
        }
        return null
    }
    initLogic() {
        let e = B.instance;
        if (e && e.logicLayer) {
            e.clearClouds();
            var i = e.getLayarJsonByName("logic");
            if (i) {
                e.logicLayer.destroyChildren();
                i = i.objects;
                if (i) {
                    e.m_logics = [],
                    e.m_logincPoint = {};
                    for (let t of i) {
                        var s = e.hex.screenToScreen(t.x, t.y),
                        a = (t.x = s.x, t.y = s.y, this.blocks.find(e => e.pointName == t.name && Math.floor(e.blockSpawnId / 1e3) == this.mapId));
                        a && this.checkArea(s.x + e.tMap.viewPortX, s.y + e.tMap.viewPortY) && ((e.m_logincPoint[t.name] = t).blockId = a.blockId, t.blockSpawnId = a.blockSpawnId, t.isOver = a.isOver, t.squad = a.squad, e.m_logics.push(t), this.createBlock(a, t))
                    }
                }
            }
        }
    }
    getTreasureBlock() {
        var e = this.blocks.find(e => !!Data.getBlock_treasure(e.blockId));
        return !e || e.treasure && e.treasure.finalReward ? null : e
    }
    deleteBlock(t) {
        for (let e = 0; e < this.blocks.length; e++)
            if (this.blocks[e].blockSpawnId == t) {
                this.blocks.splice(e, 1),
                this.initLogic(),
                this.initConvey();
                break
            }
    }
    appearBlock(e) {
        this.addBlocks(e) && (this.initLogic(), this.initConvey(), O.event(c.BLOCK_CHANGE))
    }
    addBlocks(t) {
        if (Math.floor(t.blockSpawnId / 1e3) != this.mapId)
            return !1;
        if (Data.getBlock(t.blockId).playType != M.worldBoss)
            return this.blocks.push(t), !0;
        var e = this.blocks.findIndex(e => e.blockId == t.blockId);
        return -1 != e ? this.blocks[e] = t : this.blocks.push(t),
        !0
    }
}
class Wn {
    constructor() {
        this.arenaEndTime = 0,
        this.worldLogic = 0,
        this.worldBossEnterCd = null
    }
    reqEnterMap(e) {
        if (e.logicMapType == Re.worldBoss)
            return this.reqEnterWorldBoss(e);
        let t = pb.EnterMapReq.create();
        return t.logicMapType = e.logicMapType,
        t.logicMapId = e.logicMapId,
        t.blockSpawnId = e.blockSpawnId,
        t.squad = e.squad,
        A(t, pb.IEnterMapAck).then(e => (this.arenaEndTime = +e.endTime, e))
    }
    reqEnterWorldBoss(i) {
        return A(pb.EnterWorldBossReq.create(), pb.IEnterWorldBossAck).then(e => {
            let t = pb.EnterMapReq.create();
            return t.logicMapType = i.logicMapType,
            t.logicMapId = i.logicMapId,
            t.blockSpawnId = i.blockSpawnId,
            t.squad = i.squad,
            A(t, pb.IEnterMapAck).then(e => e)
        })
    }
    reqLeaveMap() {
        return A(pb.LeaveMapReq.create(), pb.ILeaveMapAck).then(e => e)
    }
    reqMovePath(t, i, s, a = 0) {
        if (T.battle.createOpt.logicMapType != Re.arena) {
            let e = pb.MovePathReq.create();
            e.id = t,
            e.targetLocation = pb.Location.create(),
            e.targetLocation.x = Math.floor(i),
            e.targetLocation.y = Math.floor(s),
            e.isForce = a,
            Jt(e)
        }
    }
    reqSyncLocation(t, i, s) {
        if (T.battle && T.battle.createOpt && T.battle.createOpt.logicMapType != Re.arena) {
            let e = pb.SyncLocationReq.create();
            e.id = t,
            e.currentLocation = pb.Location.create(),
            e.currentLocation.x = Math.floor(i),
            e.currentLocation.y = Math.floor(s),
            Jt(e)
        }
    }
    reqExecuteSkill(e, t, i) {
        let s = pb.ExecuteSkillReq.create();
        return s.skillID = e,
        s.srcID = t,
        s.targetID = i,
        A(s, pb.IExecuteSkillAck).then(e => e)
    }
    fovPlayersEnterNtf(e) {
        T.playerEnter(e)
    }
    fovPlayersPropertyNtf(e) {
        T.playerUpdate(e)
    }
    fovPlayersLeaveNtf(e) {
        T.playerLeave(e)
    }
    fovHerosEnterNtf(e) {
        T.otherHeroEnter(e)
    }
    reviveNtf(e) {
        T.heroRevive(e),
        T.herosPropertyNtf(e)
    }
    fovHerosLeaveNtf(e) {
        T.herosLeaveNtf(e.heroIds || [])
    }
    heroMovePathNtf(e) {
        T.heroMovePathNtf(e)
    }
    fovHerosPropertyNtf(e) {
        T.herosPropertyNtf(e)
    }
    fovHerosHPChangeNtf(e) {
        T.herosHPChangeNtf(e)
    }
    fovHerosBuffNtf(e) {
        T.herosBuffNtf(e)
    }
    fovHerosInfoChangeNtf(e) {
        T.herosChangeInfoNtf(e)
    }
    fovNpcsEnterNtf(e) {
        T.npcsEnterNtf(e.npcs || [])
    }
    fovNpcsLeaveNtf(e) {
        T.npcsLeaveNtf(e.npcIds || [])
    }
    fovNpcsMoveNtf(e) {
        T.npcsMoveNtf(e.moves || [])
    }
    fovNpcsPropertyNtf(e) {
        T.npcsPropertyNtf(e)
    }
    fovNpcsHPChangeNtf(e) {
        T.npcsHPChangeNtf(e)
    }
    fovNpcsBuffNtf(e) {
        T.npcsBuffNtf(e)
    }
    fovChestsEnterNtf(e) {
        T.chestsEnterNtf(e)
    }
    fovChestsLeaveNtf(e) {
        T.chestsLeaveNtf(e)
    }
    fovChestsPropertyNtf(e) {
        T.chestsPropertyNtf(e)
    }
    battleEventNtf(e) {
        T.battleEventNtf(e)
    }
    executeSkillNtf(e) {
        T.executeSkillNtf(e)
    }
    skillDamageNtf(e) {
        T.skillDamageNtf(e)
    }
    skillEventNtf(e) {
        T.skillEventNtf(e)
    }
    skillRecoverNtf(e) {
        T.skillRecoverNtf(e)
    }
    syncHeroInfoNtf(e) {
        T.syncHeroInfoNtf(e)
    }
    npcDieNtf(e) {
        T.npcDieNtf(e)
    }
    heroDieNtf(e) {
        T.heroDieNtf(e.id)
    }
    arenaEndFightAck(e) {
        T.arenaEndFightAck(e)
    }
    battleEndNtf(e) {
        T.battleEndNtf(e)
    }
    battleDropNtf(e) {
        T.battleDropNtf(e)
    }
    battleMapInfoNtf(e) {
        T.battleMapInfoNtf(e)
    }
    reqWorldBossInfo(e) {
        let t = pb.WorldBossInfoReq.create();
        return t.blockSpawnId = e,
        this.worldBossEnterCd = null,
        A(t, pb.IWorldBossInfoAck).then(e => (this.worldLogic = e.mapLogicId, e.surplusEnterCd && (this.worldBossEnterCd = Date.newDate().addSeconds(e.surplusEnterCd + 1).getTime()), e))
    }
    reqLockTarget(e = 0) {
        T.battle && (T.battle.checkPick(), T.battle.selfTarget = e);
        let t = pb.LockTargetReq.create();
        return t.lockedUserId = e,
        Jt(t)
    }
    reqPickChest(e) {
        let t = pb.PickChestReq.create();
        return t.id = e,
        T.battle && (T.battle.checkPick(), T.battle.lastPick = e),
        Jt(t)
    }
    reqCancelPickChest(e) {
        let t = pb.CancelPickChestReq.create();
        return t.id = e,
        T.battle && (T.battle.lastPick = 0),
        Jt(t)
    }
    reqReviveReq(e = 0) {
        let t = pb.ReviveReq.create();
        return t.type = e,
        A(t, pb.IReviveAck).then(e => (R.copper = e.copper || 0, e))
    }
    reqClearWorldBossCDReq(e) {
        let t = pb.ClearWorldBossCDReq.create();
        return t.blockSpawnId = e,
        A(t, pb.IClearWorldBossCDAck).then(e => (console.log("clearboss", e), e))
    }
}
class Yn extends t.hunt.views.fight.ChangeHeroDetailDlgUI {
    constructor(e = 0) {
        super(),
        this.m_blockId = 0,
        this.m_blockId = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        let t,
        i = this.getHero();
        if (this.m_blockId) {
            let e = Data.getBlock_normalBattle(this.m_blockId);
            if (t = e.cond.find(e => e[0] == He.eleLimit)) {
                var s = {
                    [_.earth]: "earth",
                    [_.water]: "water",
                    [_.fire]: "fire",
                    [_.wind]: "wind"
                },
                a = S({
                    [_.earth]: 1134,
                    [_.water]: 1135,
                    [_.fire]: 1136,
                    [_.wind]: 1137
                }
                        [t[1]]);
                if (this.m_img_EleCur.skin = this.m_img_EleNeed.skin = `hunt/ui_card/ele_${s[t[1]]}.png`, this.m_txt_Need.text = S(1140, a), this.m_txt_Cur.text = S(1139, a), this.m_txt_NeedV.text = t[2] + "", this.m_txt_CurV.text = this.getSquadEleNum(t[1]) + "", t[2] > this.getSquadEleNum(t[1]))
                    return this.height = 560, this.m_txt_Tips.text = S(1141, a), this.m_txt_Tips.visible = !0, this.m_btn_Start.visible = !1, this.m_box_Ele.visible = !0, i.forEach(e => {
                        e.hasHigher = O.hero.checkHigherEleSkin(t[1], e.hero, i)
                    }), void(this.m_lst_Hero.array = i)
            }
        }
        this.m_lst_Hero.array = i,
        this.height = 450,
        this.m_btn_Start.visible = !0,
        this.m_txt_Tips.visible = !1,
        this.m_box_Ele.visible = !1
    }
    onSelectHero() {
        if (-1 != this.m_lst_Hero.selectedIndex) {
            var e = this.m_lst_Hero.selectedIndex;
            let t = null;
            if (this.m_blockId) {
                let e = Data.getBlock_normalBattle(this.m_blockId);
                t = e.cond.find(e => e[0] == He.eleLimit)
            }
            u(Sa, {
                params: [R.squad[e], e, R.squad, t]
            }).then(e => {
                e.wait().then(e => {
                    e.type == d.Yes && (this.m_btn_Start.mouseEnabled = !1, O.block.reqSetSq(e.data).then(() => {
                            this.m_btn_Start.mouseEnabled = !0,
                            this.m_lst_Hero.array = this.getHero(),
                            this.updateView()
                        }))
                })
            }),
            this.m_lst_Hero.selectedIndex = -1
        }
    }
    onClickStart() {
        this.closeDialog(d.Yes)
    }
    getSquadEleNum(e) {
        let t = 0;
        var i,
        s,
        a = {
            0: _.earth,
            1: _.water,
            2: _.fire,
            3: _.wind
        };
        let r = null;
        for (i in a)
            a[i] == e && (r = i);
        for (let e = 0; e < R.squad.length; e++)
            !R.squad[e] || (s = O.hero.getHero(R.squad[e])).wearingSkin && r && (t += s.wearingSkin.eles[r]);
        return t
    }
    getHero() {
        let t = [],
        i = O.hero;
        for (let e = 0; e < R.squad.length; e++)
            R.squad[e] && t.push({
                isChange: !0,
                hero: i.getHero(R.squad[e]),
                needEle: !!this.m_blockId
            });
        return t
    }
}
class Xn extends t.hunt.views.fight.BossReviveDlgUI {
    constructor(e) {
        super(),
        this.m_ticker = null,
        this.m_dieTime = null,
        this.m_dieTime = e
    }
    onAwake() {
        super.onAwake(),
        this.showUI()
    }
    onDestroy() {
        super.onDestroy(),
        this.clearTicker()
    }
    showUI() {
        var e = T.battle.createOpt.blockId,
        e = Data.getBlock_worldBoss(e),
        t = (1e4 <= e.reviveCost ? (this.m_txt_Price.text = e.reviveCost / 1e4 + "", this.m_img_Price.skin = "hunt/ui_comm/money1.png") : 100 <= e.reviveCost && (this.m_txt_Price.text = e.reviveCost / 100 + "", this.m_img_Price.skin = "hunt/ui_comm/money2.png"), this.clearTicker(), Date.newDate(this.m_dieTime).addSeconds(e.reviveCd).getTime());
        this.m_txt_Time.text = S(1156, e.reviveCd),
        this.m_txt_Time.visible = !0,
        Date.newDate(t).isAfter(Date.newDate()) && (this.m_ticker = Ei.create(t), this.m_ticker.onTick = e => {
                0 < e ? this.m_txt_Time.text = e + "s" : this.doRevive()
            }, this.m_ticker.start(), this.m_ticker.onEnd = () => {
            this.m_ticker && this.m_ticker.dispose()
        })
    }
    clearTicker() {
        this.m_ticker && (this.m_ticker.dispose(), this.m_ticker = null)
    }
    onClickBuy() {
        var e = T.battle.createOpt.blockId,
        e = Data.getBlock_worldBoss(e);
        if (this.m_btn_Buy.disabled = !0, R.copper < e.reviveCost)
            return h(S(25));
        this.doRevive(1)
    }
    doRevive(e = 0) {
        O.battle.reqReviveReq(e).then(() => {
            I.instance.playSound(v.SE_WorldRevive),
            this.closeDialog(d.Yes),
            I.instance.playMusic(v.BGM_BattleBoss)
        })
    }
}
class jn extends t.hunt.views.fight.BossKilledLoseChestDlgUI {
    constructor(e) {
        super(),
        this.m_tlArr = [],
        this.m_shakeArr = [],
        this.m_reward = e
    }
    onAwake() {
        super.onAwake(),
        this.showUI()
    }
    onDestroy() {
        super.onDestroy(),
        this.clearTlArr(),
        this.clearShakeArr(),
        Laya.timer.clearAll(this)
    }
    showUI() {
        let t = [],
        e = Object.keys(this.m_reward);
        e.forEach(e => {
            t.push({
                itemId: e,
                itemCfg: Data.getItem(e),
                itemNum: this.m_reward[e]
            })
        }),
        this.m_lst_Reward.array = t,
        this.clearTlArr();
        for (let s = 0; s < e.length; s++) {
            let i = this.m_lst_Reward.getCell(s);
            if (i.visible) {
                let e = new Laya.TimeLine,
                t = (i.alpha = 1, e.to(i, {
                        alpha: 0
                    }, 300, null, 800), e.play(0, !1), this.m_tlArr.push(e), new Laya.TimeLine);
                i.m_img_Bg.anchorX = .5,
                i.m_img_Bg.anchorY = .5,
                t.to(i.m_img_Bg, {
                    scaleX: 1.05 == i.m_img_Bg.scaleX ? .95 : 1.05,
                    scaleY: 1.05 == i.m_img_Bg.scaleY ? .95 : 1.05
                }, 25),
                this.m_shakeArr.push(t),
                Laya.timer.once(100, this, () => {
                    t.play(0, !0)
                });
                var a = this.m_lst_Reward.x - 10,
                r = this.m_lst_Reward.y - 10,
                a = b.create({
                    url: "hunt/ue/38.atlas",
                    parent: this,
                    px: a + 50 * (s + 1),
                    py: r + 50 * (s + 1),
                    autoPlay: !0,
                    autoRemove: !0,
                    interval: 60
                });
                this.addChild(a)
            }
        }
        Laya.timer.once(600, this, this.clearShakeArr),
        Laya.timer.once(1100, this, this.clearTlArr),
        Laya.timer.once(1400, this, () => {
            this.closeDialog()
        })
    }
    clearTlArr() {
        this.m_tlArr.forEach(e => {
            e.destroy()
        }),
        this.m_tlArr = []
    }
    clearShakeArr() {
        this.m_shakeArr.forEach(e => {
            e.destroy()
        }),
        this.m_shakeArr = []
    }
    onClickClose() {
        this.closeDialog()
    }
}
class Kn extends t.hunt.views.fight.BossBattleViewUI {
    constructor() {
        super(...arguments),
        this.m_effect = null
    }
    onAwake() {
        super.onAwake(),
        O.on(c.BATTLE_ALLDIE, this, this.showHeroAllDie),
        O.on(c.BATTLE_KILL_PLAYER, this, this.showKillAnime),
        O.on(c.BATTLE_UPDATE_LIST, this, this.updateRoleList),
        this.m_box_BSkill.on(Laya.Event.CLICK, this, () => {
            var e = L.getOneRole(ht.Boss, mt.Enemy);
            e && O.battle.reqLockTarget(e.rid)
        });
        var e = T.battle.createOpt;
        let t = new ce(e.title, !1);
        t.zOrder = 11,
        this.addChild(t),
        this.updateBlockInfo(e.blockId),
        this.updateRoleList(),
        this.showEndView()
    }
    onDestroy() {
        super.onDestroy(),
        this.m_tickEnd && this.m_tickEnd.dispose(),
        this.reBuffEffect(),
        O.off(c.BATTLE_ALLDIE, this, this.showHeroAllDie),
        O.off(c.BATTLE_KILL_PLAYER, this, this.showKillAnime),
        O.off(c.BATTLE_UPDATE_LIST, this, this.updateRoleList)
    }
    showEndView() {
        this.m_tickEnd && (this.m_tickEnd.dispose(), this.m_tickEnd = null);
        var e = L.battleMapInfo;
        e && (this.m_tickEnd && this.m_tickEnd.dispose(), this.m_tickEnd = Ei.create(Date.newDate(1e3 * e.endTime).getTime(), 1e3, this.m_txt_End, "MM:ss"), this.m_tickEnd.onTick = e => {
                this.m_box_End.visible = e < 30,
                this.m_box_Hbox.refresh()
            }, this.m_tickEnd.start())
    }
    updateBlockInfo(t) {
        t && O.block.reqBlockInfo(t).then(e => {
            this.destroyed || (this.m_view_Like.visible = !0, this.m_view_Like.setData(t, e), this.m_view_Comment.visible = !0, this.m_view_Comment.setData(t), this.m_view_Bag.visible = !0)
        })
    }
    updateHpInfo() {
        let e = null,
        t = T.battle,
        i = L.getMainRole();
        var s,
        a = !!i && jt(i.lockTarget);
        i && i.lockTarget && !a ? (a = L.getRoleByUserId(i.lockTarget), s = (t.playerList || []).find(e => e.id == i.lockTarget), a.length && s && (e = {
                    leftInfo: {
                        name: R.name,
                        totalHp: t.hpRecord[R.id],
                        curHp: t.getCurHpByUserId(R.id),
                        showId: R.icon
                    },
                    rightInfo: {
                        name: s.name,
                        totalHp: t.hpRecord[s.id],
                        curHp: t.getCurHpByUserId(s.id),
                        showId: s.showId
                    }
                })) : i && (a = (t.playerList || []).find(e => e.targetId == R.id)) && L.getRoleByUserId(a.id).length && (e = {
                leftInfo: {
                    name: R.name,
                    totalHp: t.hpRecord[R.id],
                    curHp: t.getCurHpByUserId(R.id),
                    showId: R.icon
                },
                rightInfo: {
                    name: a.name,
                    totalHp: t.hpRecord[a.id],
                    curHp: t.getCurHpByUserId(a.id),
                    showId: a.showId
                }
            }),
        this.m_view_Bar.visible = !1,
        this.m_view_Bar.updateUIShow(e),
        this.updateRoleList()
    }
    updateRoleList() {
        let t = [];
        var e = L.getOneRole(ht.Boss, null);
        e && t.push({
            head: e.showId,
            userId: e.rid,
            rName: "BOSS",
            isBoss: !0
        });
        for (let e = 0; e < T.battle.playerList.length; e++) {
            var i = T.battle.playerList[e],
            s = T.battle.getCurHpByUserId(i.id) || 0;
            i.id != R.id && 0 < s && t.push({
                head: i.showId,
                userId: i.id,
                rName: i.name
            })
        }
        let a = L.getMainRole();
        t.sort((e, t) => {
            if (e.isBoss || t.isBoss)
                return e.isBoss ? -1 : 1;
            var i = T.battle.getPlayerInfo(e.userId),
            s = T.battle.getPlayerInfo(t.userId),
            i = i.targetId == R.id,
            s = s.targetId == R.id;
            if (i || s)
                return i ? -1 : 1;
            s = L.getRoleByUserId(e.userId),
            i = L.getRoleByUserId(t.userId);
            return s.length && i.length && a ? vt(a.root.x, a.root.y, s[0].root.x, s[0].root.y) - vt(a.root.x, a.root.y, i[0].root.x, i[0].root.y) : t.userId - e.userId
        }),
        t = t.splice(0, 7),
        this.m_lst_Player.array = t,
        this.m_lst_Player.height = 130 * Math.min(t.length, 5.5),
        this.checkBossLockAni(),
        this.updateBagChestShow()
    }
    updateBagChestShow() {
        var t,
        i = T.battle.playerList.find(e => e.id == R.id);
        if (i) {
            let e = !1;
            for (t in i.tempBag || {})
                if (10 < Data.getItem(+t).quality) {
                    e = !0;
                    break
                }
            0 < Object.keys(i.tempBag).length ? (this.m_view_Bag.m_img_Chest.visible = !0, this.m_view_Bag.m_img_Chest.skin = e ? "hunt/ui_fight/box_red.png" : "hunt/ui_fight/box_normal.png") : this.m_view_Bag.m_img_Chest.visible = !1
        } else
            this.m_view_Bag.m_img_Chest.visible = !1
    }
    updateBossInfoShow(t) {
        var i = L.getRoleById(t.id);
        if (!i)
            return this.reBuffEffect(), void(this.m_box_BSkill.visible = !1);
        if (this.m_img_BHead.skin = "hunt/ui_monster/" + (i.showId || 0) + ".png", this.checkBossLockAni(), 0 < t.shieldHp) {
            this.m_effect || (this.m_effect = b.create({
                    url: "hunt/effect/eShield.atlas",
                    parent: i.root,
                    px: 50,
                    py: 50,
                    autoPlay: !0,
                    loop: !0,
                    scale: 4,
                    interval: 90
                }), I.instance.playSound(v.SE_WorldClock)),
            this.m_img_Pointer.rotation = 0;
            var i = Date.newDate(t.shieldBeginTime).addSeconds(t.shieldDuration / 1e3).getTime() - Date.newDate().getTime(),
            s = 360 * (1 - i / t.shieldDuration);
            this.m_img_Pointer.rotation = s,
            Laya.Tween.clearTween(this.m_img_Pointer),
            Laya.Tween.to(this.m_img_Pointer, {
                rotation: 360
            }, i);
            let e = 270 - t.shieldHp / t.shieldMaxHp * 360;
            e <= -90 && (e = -89),
            this.m_img_CircleBg.mask = null,
            this.m_maskS = new Laya.Sprite,
            this.m_maskS.pos(72, 72),
            this.m_maskS.graphics.drawPie(0, 0, 72, e, -90, "#ff0000"),
            this.m_img_CircleBg.mask = this.m_maskS,
            this.m_box_BSkill.visible = !0
        } else
            this.m_box_BSkill.visible = !1, I.instance.stopSound(v.SE_WorldClock), this.reBuffEffect()
    }
    checkBossLockAni() {
        var e = L.getOneRole(ht.Boss, mt.Enemy);
        e ? T.battle.selfTarget == e.rid ? (this.m_img_BossLock.visible = !0, this.bossLockAni.isPlaying || this.bossLockAni.play(0, !0)) : (this.m_img_BossLock.visible = !1, this.bossLockAni.stop()) : this.bossLockAni.stop()
    }
    onSelectPlayer() {
        var e;
        -1 != this.m_lst_Player.selectedIndex && this.m_lst_Player.selectedItem && (e = this.m_lst_Player.getItem(this.m_lst_Player.selectedIndex), O.battle.reqLockTarget(e.userId), this.m_lst_Player.selectedIndex = -1)
    }
    reBuffEffect() {
        this.m_effect && this.m_effect.recover(),
        this.m_effect = null
    }
    showHeroAllDie() {
        this.m_img_AdaptBg.visible = !0,
        this.m_dieTime = Date.newDate(),
        I.instance.playMusic(v.BGM_Lose, 1)
    }
    showChestBeRobbed(e) {
        Object.keys(e.robItems).length ? u(jn, {
            params: [e.robItems]
        }).then(e => {
            e.wait().then(e => {
                this.showReviveDlg()
            })
        }) : this.showReviveDlg()
    }
    hideDieBg() {
        this.m_img_AdaptBg.visible = !1
    }
    onClickAdaptBg() {
        this.setReviveLoop(),
        this.showReviveDlg()
    }
    showReviveDlg() {
        u(Xn, {
            params: [this.m_dieTime]
        }).then(e => {
            e.wait().then(e => {
                e.type != d.Yes && this.setReviveLoop(!0)
            })
        })
    }
    setReviveLoop(e = !1) {
        Laya.timer.clear(this, this.checkReviveLoop),
        e && Laya.timer.loop(1e3, this, this.checkReviveLoop)
    }
    checkReviveLoop() {
        var e = T.battle.createOpt.blockId,
        e = Data.getBlock_worldBoss(e),
        e = Date.newDate(this.m_dieTime).addSeconds(e.reviveCd).getTime();
        0 < Date.newDate().getTime() - e && (Laya.timer.clear(this, this.checkReviveLoop), I.instance.playSound(v.SE_WorldRevive), I.instance.playMusic(v.BGM_BattleBoss), O.battle.reqReviveReq())
    }
    showKillAnime(e) {
        this.m_view_Kill.showKillAnime(e),
        e.attackId != R.id || jt(e.targetId) || I.instance.playSound(v.SE_WorldKill)
    }
    showFinalAnime(e) {
        this.m_view_FinalKill.showFinalAnime(e)
    }
    onClickBack() {
        L.getOneRole(ht.Boss, mt.Enemy) ? (T.end(!0), this.destroy()) : Ae({
            button: V.YesNo,
            msg: S(1164)
        }).then(e => {
            e.type == d.Yes && (T.end(!0), this.destroy())
        })
    }
    showPickAni() {
        this.m_view_Bag.showPickAni && this.m_view_Bag.showPickAni()
    }
}
class zn extends t.hunt.views.fight.BossEnterCheckDlgUI {
    constructor(e, t) {
        super(),
        this.m_ticker = null,
        this.m_Time = null,
        this.m_block = null,
        this.m_Time = e,
        this.m_block = t
    }
    onAwake() {
        super.onAwake(),
        this.showUI()
    }
    onDestroy() {
        super.onDestroy(),
        this.clearTicker()
    }
    showUI() {
        var e = Data.getBlock_worldBoss(this.m_block.blockId),
        e = (1e4 <= e.reviveCost ? (this.m_txt_Price.text = e.reviveCost / 1e4 + "", this.m_img_Price.skin = "hunt/ui_comm/money1.png") : 100 <= e.reviveCost && (this.m_txt_Price.text = e.reviveCost / 100 + "", this.m_img_Price.skin = "hunt/ui_comm/money2.png"), this.clearTicker(), Math.ceil((this.m_Time - Date.newDate().getTime()) / 1e3));
        this.m_txt_Time.text = e + "s",
        this.m_txt_Time.visible = !0,
        Date.newDate(this.m_Time).isAfter(Date.newDate()) && (this.m_ticker = Ei.create(Date.newDate(this.m_Time).getTime()), this.m_ticker.onTick = e => {
                0 < e ? this.m_txt_Time.text = e + "s" : this.closeDialog(d.Yes)
            }, this.m_ticker.start(), this.m_ticker.onEnd = () => {
            this.m_ticker && this.m_ticker.dispose()
        })
    }
    clearTicker() {
        this.m_ticker && (this.m_ticker.dispose(), this.m_ticker = null)
    }
    onClickBuy() {
        var e = Data.getBlock_worldBoss(this.m_block.blockId);
        if (R.copper < e.reEnterCost)
            return h(S(25));
        O.battle.reqClearWorldBossCDReq(this.m_block.blockSpawnId).then(() => {
            this.closeDialog(d.Yes)
        }),
        this.m_btn_Buy.disabled = !0
    }
}
class $n {
    reqOpenGame(i) {
        let e = pb.OpenGameplayReq.create(),
        s = (e.blockSpawnId = i, O.tileMap.blocks);
        return A(e, pb.OpenGameplayAck.create()).then(e => {
            let t = s.find(e => e.blockSpawnId == i);
            t && (t.isOver = !0),
            O.bag.updateItem(e.items)
        })
    }
    blockHero(t, e = !0) {
        let i = O.tileMap;
        var s = Data.getBlock(t.blockId);
        s.playType == M.talkHero && Data.getBlock_talkHero(t.blockId) && (e ? (s = s.preStartTalk[R.sex] || s.preStartTalk[0]) ? Ri.showTalk(s, e => {
                i.blocks.find(e => e.blockId == t.blockId).isOver || (e = e.favor, this.reqTalkHero(e, t.blockSpawnId)),
                B.instance && (B.instance.m_waitDlg = !1)
            }, t.blockId) : B.instance && (B.instance.m_waitDlg = !1) : u(En, {
                params: [t.blockId, e]
            }).then(e => {
                e.wait().then(() => {
                    B.instance && (B.instance.m_waitDlg = !1)
                })
            }))
    }
    reqSetSq(e) {
        let t = pb.SetSquadReq.create();
        return t.squad = e,
        A(t, pb.ISetSquadAck).then(e => {
            R.squad = e.squad
        })
    }
    blockBattle(t) {
        var e,
        i = R.squad.filter(e => !!e).length;
        let s = t.blockId,
        a = Data.getBlock(t.blockId),
        r = S(rt[a.playType]),
        n = Data.getBlock_normalBattle(t.blockId),
        o = null,
        l = (o = a.playType == M.imitatePvp ? (e = Data.getBlock_imitatePvp(t.blockId), Data.getBattleMap(e.mapId)) : Data.getBattleMap(n.mapId), () => {
        this.reqBlockAction(t.blockId, Ne.enter),
        O.report.enter(),
        T.start({
            title: r,
            mapId: +o.mapRes,
            logicMapType: a.playType == M.imitatePvp ? Re.imitatePvp : Re.normal,
            logicMapId: 0,
            blockId: s,
            blockSpawnId: t.blockSpawnId,
            viewImpl: a.playType == M.imitatePvp ? Da : ls,
            squad: R.squad
        });
        let e = "";
        e = a.playType == M.imitatePvp ? v.BGM_BattleArena : n && n.bossId ? v.BGM_BattleBoss : v.BGM_BattleNormal,
        I.instance.playMusic(e)
    }),
        h = n && n.cond.find(e => e[0] == He.eleLimit) && t.blockId || 0,
        m = Object.keys(R.heros);
        if (2 <= i)
            if (2 == i) {
                if (2 < m.length)
                    for (let t = 0; t < m.length; t++)
                        if (-1 == R.squad.indexOf(+m[t]))
                            for (let e = 0; e < 3; e++)
                                if (!R.squad[e]) {
                                    R.squad[e] = +m[t];
                                    break
                                }
                this.reqSetSq(R.squad).then(() => {
                    u(Yn, {
                        params: [h]
                    }).then(e => {
                        e.wait().then(e => {
                            e.type == d.Yes ? l() : O.report.close()
                        })
                    })
                })
            } else
                u(Yn, {
                    params: [h]
                }).then(e => {
                    e.wait().then(e => {
                        e.type == d.Yes ? l() : O.report.close()
                    })
                });
        else {
            let t = m.filter(e => -1 == R.squad.indexOf(+e));
            if (2 <= m.length) {
                for (let e = 0; e < 3; e++)
                    R.squad[e] || t.length && (R.squad[e] = +t.shift());
                this.reqSetSq(R.squad).then(() => {
                    u(Yn, {
                        params: [h]
                    }).then(e => {
                        e.wait().then(e => {
                            e.type == d.Yes ? l() : O.report.close()
                        })
                    })
                })
            } else {
                for (let e = 0; e < 3; e++)
                    R.squad[e] || t.length && (R.squad[e] = +t.shift());
                l()
            }
        }
    }
    blockWorldBattle(t) {
        let e = t.blockId;
        var i = Data.getBlock(t.blockId);
        let s = S(rt[i.playType]);
        i = Data.getBlock_worldBoss(t.blockId);
        let a = null,
        r = (a = Data.getBattleMap(i.mapId), () => {
        this.reqBlockAction(t.blockId, Ne.enter),
        O.report.enter(),
        T.start({
            title: s,
            mapId: +a.mapRes,
            logicMapType: Re.worldBoss,
            logicMapId: O.battle.worldLogic,
            blockId: e,
            blockSpawnId: t.blockSpawnId,
            viewImpl: Kn,
            squad: R.squad
        }),
        I.instance.playMusic(v.BGM_BattleBoss)
    });
        u(Yn, {
            params: null
        }).then(e => {
            e.wait().then(e => {
                e.type == d.Yes ? !O.battle.worldBossEnterCd || 0 < Date.newDate().getTime() - O.battle.worldBossEnterCd ? r() : u(zn, {
                    params: [O.battle.worldBossEnterCd, t]
                }).then(e => {
                    e.wait().then(e => {
                        e.type == d.Yes ? r() : O.report.close()
                    })
                }) : O.report.close()
            })
        })
    }
    blockChest(e) {
        this.reqBlockNormalChest(e.blockSpawnId, e.blockId)
    }
    reqGodTalk(i) {
        let e = pb.TalkGoddessReq.create();
        return e.blockSpawnId = i,
        A(e, pb.ITalkGoddessAck).then(e => {
            O.bag.updateItem(e.items);
            let t = O.tileMap.blocks.find(e => e.blockSpawnId == i);
            return t && (t.isOver = !0),
            O.tileMap.initLogic(),
            e.items
        })
    }
    reqTalkReward(e, t) {
        let i = pb.TalkRewardReq.create();
        return i.talkId = e || 0,
        i.blockSpawnId = t,
        A(i, pb.ITalkRewardAck).then(e => {
            O.bag.updateItem(e.items),
            Et(e.items);
            let t = O.tileMap;
            t.reqTileMap().then(() => {
                B.instance && (t.initLogic(), t.initConvey())
            })
        })
    }
    reqTalkHero(e, t) {
        let i = pb.TalkHeroReq.create();
        return i.favor = e || 0,
        i.blockSpawnId = t,
        A(i, pb.ITalkHeroAck).then(e => {
            e.heroId && u(bt, {
                params: [e.heroId, !0],
                closeOnSide: !1
            });
            let t = O.tileMap;
            t.reqTileMap().then(() => {
                B.instance && (t.initLogic(), t.initConvey())
            })
        })
    }
    reqBlockNormalChest(e, i) {
        let t = pb.BlockNormalChestReq.create();
        return t.blockSpawnId = e,
        A(t, pb.IBlockNormalChestAck).then(e => {
            O.bag.reqUseRandBox(e.boxId).then(e => {
                I.instance.playMusic(v.BGM_JunglePickUp),
                l(_a, {
                    params: [e, i]
                }).then(e => {
                    e.wait().then(() => {
                        B.instance && B.instance.playBgm(),
                        O.report.close()
                    })
                }),
                O.report.done()
            }),
            O.bag.updateItem(e.items);
            let t = O.tileMap;
            t.reqTileMap().then(() => {
                B.instance && (t.initLogic(), t.initConvey())
            })
        })
    }
    blockSwitch(e) {
        O.tileMap.reqSwitchMap(e.id).then(e => {
            O.event(c.TRANSANI),
            B.instance && B.instance.showTransAni(() => {
                B.instance.createMap(e[1])
            })
        })
    }
    reqBlockAction(e, t) {
        let i = new pb.BlockActionReq;
        return i.mapId = O.tileMap.mapId,
        i.blockId = e,
        i.actionType = t,
        A(i, pb.IBlockActionAck)
    }
    reqBlockInfo(e) {
        let t = new pb.BlockInfoReq;
        return t.blockId = e,
        A(t, pb.IBlockInfoAck)
    }
    checkBlockLimit(e) {
        e = Data.getBlock_talkGoddess(e);
        if (e.cond.length)
            for (let t of e.cond) {
                var i = O.tileMap.blocks.find(e => e.blockId == t[1]);
                if (i && !i.isOver)
                    return !0
            }
        return !1
    }
    getGodState(e) {
        return e.isOver ? 3 : this.checkBlockLimit(e.blockId) ? 0 : 2
    }
}
class Qn {
    checkOpenLimit(e) {
        for (var t of e) {
            t = this.checkOpen(t);
            if (t.limit)
                return t
        }
        return null
    }
    checkOpen(e) {
        let t = {};
        switch (e[0]) {
        case He.haveHero:
            var i = Data.getHero(e[1]);
            t.limit = !this.checkHero([e[1]]),
            t.info = S(2024, S(i.name));
            break;
        case He.haveItemNum:
        }
        return t
    }
    checkHero(e) {
        for (var t of e)
            if (!R.heros[t])
                return !1;
        return !0
    }
}
class Jn {
    constructor() {
        this.passComGot = [],
        this.passPayGot = [],
        this.passBuy = !1,
        this.passBoxNum = 0
    }
    reset() {
        this.passBuy = !1,
        this.passBoxNum = 0,
        this.passComGot = [],
        this.passPayGot = []
    }
    get passLv() {
        let e = 0;
        for (var t of this.getPassData())
            t && this.passExp >= t.total && (e = t.id);
        return e
    }
    get passExp() {
        return O.bag.getItemNum(p.gem)
    }
    initPassInfo(e) {
        this.passComGot = e.com,
        this.passBoxNum = e.boxNum,
        this.passPayGot = e.pay,
        this.passBuy = !!e.buy
    }
    getPassData() {
        if (this.m_passData)
            return this.m_passData;
        for (var e in this.m_passData = [], Data.starPasss) {
            e = Data.getStarPass(+e);
            this.m_passData.push(e)
        }
        return this.m_passData.push(null),
        this.m_passData
    }
    reqPassReward(t, i = 0) {
        let e = pb.StarPassRewardReq.create();
        return e.id = t,
        e.type = i,
        A(e, pb.IStarPassRewardAck).then(e => {
            return (0 == i ? this.passComGot : this.passPayGot).push(t),
            e.items.filter(e => {
                var t = Data.getItemRandBox(e.id);
                return e.id == p.vit || !t
            }).length && Et(e.items),
            O.bag.updateItem(e.items),
            O.event(c.PASS_UPDATE),
            e
        })
    }
    reqPassBoxReward() {
        return A(pb.StarPassBoxRewardReq.create(), pb.IStarPassBoxRewardAck).then(e => (this.passBoxNum++, O.bag.updateItem(e.items), O.event(c.PASS_UPDATE), e))
    }
    reqBuyPass() {
        let e,
        t;
        return t = Mmobay.MConfig.openPurchase ? (e = pb.BuyStarPassDiamondReq.create(), pb.IBuyStarPassDiamondAck) : (e = pb.BuyStarPassReq.create(), pb.IBuyStarPassAck),
        A(e, t).then(e => {
            this.passBuy = !0,
            O.bag.updateItem(e.items),
            O.event(c.PASS_UPDATE),
            O.event(c.PASS_BUY)
        })
    }
    getNextExpByLv(e) {
        e = Data.getStarPass(e + 1);
        return e ? e.total - this.passExp : 0
    }
    getNowExpByLv() {
        return 0 == this.passLv ? this.passExp : this.passExp - Data.getStarPass(this.passLv).total
    }
    getScrolIndex() {
        var t = this.passLv;
        let i = 0;
        for (let e = 1; e <= t; e++) {
            if (-1 == this.passPayGot.indexOf(e) || -1 == this.passComGot.indexOf(e)) {
                i = e - 1;
                break
            }
            i++
        }
        return i
    }
    getBoxRewardExp() {
        var e = Data.getStarPass(Data.maxStarPasss).total,
        e = this.passExp - e - this.passBoxNum * +Data.gameConf.starPassCfg.boxCost;
        return Math.max(0, e)
    }
    checkRed() {
        for (let e = 1; e <= this.passLv; e++)
            if (-1 == this.passComGot.indexOf(e) || this.passBuy && -1 == this.passPayGot.indexOf(e))
                return !0;
        return this.checkBigRed()
    }
    checkBigRed() {
        return !!this.passBuy && this.getBoxRewardExp() >= +Data.gameConf.starPassCfg.boxCost
    }
}
class Zn {
    constructor() {
        this.tapTokenPrice = .013
    }
    initAccount(e) {
        this.accountId = e.accountId,
        this.wallet = e.wallet,
        this.bcid = e.bcid,
        this.email = e.email,
        this.status = e.status,
        this.statueEndTime = Date.newDate(e.statusEndTime)
    }
    isForbidTalk() {
        return this.status == Ke.forbidTalk
    }
    accountInfoChange(e) {
        this.status = e.status
    }
    checkWallet() {
        return window.mbplatform.checkWallet().then(e => (console.log("bindWallet:", e), e.err && (console.log("提示:" + e.err), h(e.err)), e))
    }
    signuture(e, t) {
        return window.mbplatform.signuture([e, t], t).then(e => (console.log("signuture data:", e), e))
    }
    validationWallet(e) {
        if (!e.startsWith("0x"))
            return !1;
        if (42 != e.length)
            return !1;
        e = e.slice(2);
        return !!/^[A-Fa-f0-9]+$/i.test(e)
    }
    bindWallet(s) {
        if (this.wallet)
            return console.log("already binding wallet !!!!"), h(S(75)), Promise.reject("wallet already bound");
        if (!s || "" == s)
            return h(S(74)), Promise.reject("no wallet");
        if (!this.validationWallet(s))
            return console.log("wallet address wrong"), h(S(74)), Promise.reject("wallet address wrong");
        let a = pb.SignInfoReq.create();
        return a.wallet = s,
        A(a, pb.ISignInfoAck).then(i => (console.log("reqSignInfo ", i), this.signuture(i.message, s).then(e => {
                    if (e.err)
                        return h(S(74)), Promise.reject("wallet address wrong");
                    let t = pb.BindWalletReq.create();
                    return t.msgId = i.msgId,
                    t.wallet = a.wallet,
                    t.sign = e.data,
                    A(t, pb.IBindWalletAck).then(e => (console.log("BindWalletReq ", e), this.wallet = s, e))
                })))
    }
    reqDrawGold(t) {
        if (!(R.copper < 1e4 * t)) {
            let e = pb.DrawCoinReq.create();
            return e.num = t,
            A(e, pb.IDrawCoinAck).then(e => (R.copper = e.copper || 0, e.drawtime && (R.times[Fe.copper] = e.drawtime), e))
        }
        console.log("not enough gold to draw")
    }
    reqDrawTap(t) {
        if (!(R.tapToken < t)) {
            let e = pb.DrawTapReq.create();
            return e.num = t,
            A(e, pb.IDrawTapAck).then(e => (R.tapToken = e.tapToken || 0, R.copper = e.copper || 0, e.drawtime && (R.times[Fe.tapToken] = e.drawtime), e))
        }
        console.log("not enough tap to draw")
    }
    reqDrawMCToken(t) {
        if (!(R.MCToken < t)) {
            let e = pb.DrawMCTokenReq.create();
            return e.num = t,
            A(e, pb.IDrawMCTokenAck).then(e => (R.MCToken = e.mcToken || 0, R.copper = e.copper || 0, e.drawtime && (R.times[Fe.mcToken] = e.drawtime), e))
        }
        console.log("not enough mctoken to draw")
    }
    reqDrawNFTSkin(t) {
        if (R.heroSkins[t]) {
            let e = pb.DrawNFTSkinReq.create();
            return e.id = t,
            A(e, pb.IDrawNFTSkinAck).then(e => (e.delId && delete R.heroSkins[e.delId], R.copper = e.copper || 0, e.drawtime && (R.times[Fe.skin] = e.drawtime), e))
        }
        console.log("not have skin ", t)
    }
    reqDrawPvp(t) {
        if (!(O.bag.getItemNum(p.pvpToken) < t)) {
            let e = pb.DrawPvpCoinReq.create();
            return e.num = t,
            A(e, pb.IDrawPvpCoinAck).then(e => (O.bag.updateItem(e.items), e))
        }
        console.log("not enough pvpToken to draw")
    }
    reqPrices() {
        return A(pb.PricesReq.create(), pb.IPricesAck).then(e => (this.tapTokenPrice = e.tapTokenPrice, e))
    }
    reqReName(e) {
        let t = pb.ReNameReq.create();
        return t.name = e,
        A(t, pb.IReNameAck).then(e => (R.name = e.name, O.bag.updateItem(e.items), e))
    }
    reqChangeAvatar(e) {
        let t = pb.ChangeAvatarReq.create();
        return t.icon = e,
        A(t, pb.IChangeAvatarAck).then(e => (R.icon = e.icon, B.instance && B.instance.reSetRoleSpine(), e))
    }
    reqUseCoupon(e) {
        let t = pb.UseCouponReq.create();
        return t.code = e,
        A(t, pb.IUseCouponAck).then(e => (O.bag.updateItem(e.items), e))
    }
    getAllIcos() {
        let e = {
            [R.sex]: 1
        };
        for (var t in R.heroSkins) {
            t = R.heroSkins[t];
            e[t.skinID] || (e[t.skinID] = 1),
            e[t.avatarID] || (e[t.avatarID] = 1)
        }
        for (var i in R.heros) {
            e[i] || (e[i] = 1);
            i = R.heros[i].wearingSkin;
            i && (e[i.avatarID] || (e[i.avatarID] = 1), e[i.skinID] || (e[i.skinID] = 1))
        }
        return Object.keys(e)
    }
    updatePrices(e) {
        this.tapTokenPrice = e,
        console.log("updatePrices ", this.tapTokenPrice)
    }
    GetUSDT2Tap(e) {
        let t = e / this.tapTokenPrice;
        e = t.toFixed(8);
        return t = parseFloat(e)
    }
    reqMailCode(e) {
        let t = pb.GetMailCodeReq.create();
        return t.mail = e,
        A(t, pb.IGetMailCodeAck).then(e => (console.log("get mail code done"), e))
    }
    reqBindMail(e, t) {
        let i = pb.BindMailReq.create();
        return i.code = e,
        i.mail = t,
        A(i, pb.IBindMailAck).then(e => (console.log("bind mail done"), this.email = t, e))
    }
}
class eo {
    constructor() {
        this.mails = []
    }
    reqLoadMail() {
        return A(new pb.GetMailListReq, pb.IGetMailListAck).then(e => {
            this.mails = e.mails,
            this.sortMail()
        })
    }
    reqReadMail(i) {
        let e = new pb.ReadMailReq;
        return e.id = i,
        A(e, pb.IReadMailAck).then(e => {
            let t = this.getMail(i);
            t && (t.IsRead = 1),
            this.sortMail()
        })
    }
    reqGetItem(i) {
        let e = new pb.PickMailItemsReq;
        return e.id = i,
        A(e, pb.IPickMailItemsAck).then(e => {
            let t = this.getMail(i);
            t && (t.IsPicked = 1),
            this.sortMail(),
            0 < e.addTapToken && (R.tapToken = e.tapToken, Et([{
                            id: p.tapToken,
                            num: e.tapToken,
                            delta: e.addTapToken
                        }
                    ])),
            Et(e.items),
            O.bag.updateItem(e.items)
        })
    }
    updateMail(e) {
        this.mails.push(e),
        this.sortMail()
    }
    sortMail() {
        let e = [],
        t = [];
        for (var i of this.mails)
            (i.IsRead ? e : t).push(i);
        e.sort((e, t) => e.IsPicked != t.IsPicked ? e.IsPicked - t.IsPicked : +t.AddTime - +e.AddTime),
        t.sort((e, t) => t.AddTime - +e.AddTime),
        this.mails = t.concat(e),
        O.event(c.MAIL_CHANGE)
    }
    getMail(t) {
        return this.mails.find(e => e.id == t) || null
    }
    checkRed() {
        return !!this.mails.find(e => {
            return (Object.keys(e.items || {}).length || 0) && !e.IsPicked || !e.IsRead
        })
    }
}
class to {
    constructor() {
        this.fishExInfo = {},
        this.m_fishPool = 0
    }
    reqFishRank() {
        return A(new pb.FishRankListReq, pb.IFishRankListAck).then(e => e.rankList)
    }
    reqFishSelf() {
        return A(new pb.MyFishInfoReq, pb.IMyFishInfoAck).then(e => e)
    }
    reqFishEx(t, e) {
        let i = new pb.FishSellReq;
        return i.id = t,
        i.num = e,
        A(i, pb.IFishSellAck).then(e => {
            O.bag.updateItem(e.items),
            this.fishExInfo[t] = e.count,
            Et(e.items),
            O.event(c.FISH_EX)
        })
    }
    reqFishSellInfo() {
        return A(new pb.FishSellInfoReq, pb.IFishSellInfoAck).then(e => {
            this.fishExInfo = e.fishCounts
        })
    }
    reqFishPool() {
        return A(new pb.FishRewardPoolReq, pb.IFishRewardPoolAck).then(e => {
            this.m_fishPool = +e.count
        })
    }
    getFishArr() {
        if (this.m_fishs)
            return this.m_fishs;
        for (var e in this.m_fishs = [], Data.fishs) {
            e = Data.getFish(+e);
            this.m_fishs.push(e)
        }
        return this.m_fishs
    }
    getRankDetail() {
        if (this.m_fishRewards)
            return this.m_fishRewards;
        for (var e in this.m_fishRewards = [], Data.fishSettles) {
            e = Data.getFishSettle(+e);
            this.m_fishRewards.push(e)
        }
        return this.m_fishRewards
    }
    reqFishing(e) {
        let t = pb.FishingReq.create();
        return t.color = e,
        A(t, pb.IFishingAck).then(e => (O.bag.updateItem(e.items), e))
    }
    reqFishInfo(e) {
        let t = pb.FishInfoReq.create();
        return t.id = e,
        A(t, pb.IFishInfoAck).then(e => e)
    }
    formatWeight(e) {
        return 1e3 < e ? e / 1e3 + "T" : e + "KG"
    }
}
class io {
    constructor() {
        this.m_gotIds = [],
        this.m_inviteNum = 0,
        this.m_bind = 0,
        this.m_boxNum = 0
    }
    reqInviteInfo() {
        return A(new pb.InviteInfoReq, pb.IInviteInfoAck).then(e => {
            this.m_gotIds = e.gotAwards,
            this.m_inviteNum = e.num,
            this.m_bind = e.bindWalletNum,
            this.m_code = e.inviteCode
        })
    }
    reqInviteDetail() {
        return A(new pb.GetInviteListReq, pb.IGetInviteListAck).then(e => e.list)
    }
    reqGetInviteReward(e) {
        let t = new pb.InviteAwardReq;
        return t.id = e,
        A(t, pb.IInviteAwardAck).then(e => {
            O.bag.updateItem(e.items),
            Et(e.items),
            this.m_gotIds = e.gotAwards,
            O.event(c.INVITE_CHANGE)
        })
    }
    reqBoxInfo() {
        return A(new pb.InviteBoxInfoReq, pb.IInviteBoxInfoAck).then(e => {
            this.m_boxNum = e.boxCount
        })
    }
    reqGetBox() {
        return A(new pb.OpenInviteBoxReq, pb.IOpenInviteBoxAck).then(e => (this.m_boxNum = e.counts, O.bag.updateItem(e.items), O.event(c.INVITE_CHANGE, [!0]), e))
    }
    getBoxIds() {
        return this.m_boxIds || (this.m_boxIds = Object.keys(Data.inviteBoxs), this.m_boxIds)
    }
    getInviteItems() {
        if (this.m_inviteReward)
            return this.m_inviteReward;
        for (var e in this.m_inviteReward = [], Data.inviteRewards) {
            e = Data.getInviteReward(+e);
            this.m_inviteReward.push(e)
        }
        return this.m_inviteReward
    }
    getNextInvte() {
        for (var e of this.getInviteItems())
            if (this.m_inviteNum < e.num)
                return e;
        return null
    }
    checkGet(e) {
        return -1 != this.m_gotIds.indexOf(e)
    }
    getRed() {
        var e = Data.gameConf.inviteCfg.cost.split(","),
        t = O.bag.getItemNum(+e[0]);
        return +e[1] <= t
    }
    checkInviteRed() {
        let e = !1;
        for (var t in Data.inviteRewards) {
            var i = Data.getInviteReward(+t);
            if (this.m_bind >= i.num && !this.checkGet(+t)) {
                e = !0;
                break
            }
        }
        return e
    }
}
class so {
    constructor() {
        this.reportBlock = pb.ReportBlockReq.create()
    }
    resetBlock() {
        this.reportBlock.blockId = 0,
        this.reportBlock.openTime = 0,
        this.reportBlock.enterTime = 0,
        this.reportBlock.doneTime = 0,
        this.reportBlock.closeTime = 0,
        this.reportBlock.doneType = 0,
        this.reportBlock.praise = 0,
        this.reportBlock.share = 0
    }
    begin(e) {
        this.resetBlock(),
        this.reportBlock.blockId = e,
        this.reportBlock.openTime = Math.floor(Date.newDate().getTime())
    }
    enter() {
        this.reportBlock.enterTime = Math.floor(Date.newDate().getTime())
    }
    done(e = !0) {
        var t = Math.floor(Date.newDate().getTime());
        this.reportBlock.doneTime = t,
        this.reportBlock.doneType = e ? 1 : 0
    }
    close() {
        this.reportBlock.closeTime = Math.floor(Date.newDate().getTime()),
        this.reportToServer()
    }
    praise(e) {
        this.reportBlock.praise += e
    }
    reportToServer() {
        return A(this.reportBlock, pb.IReportBlockAck).then(e => {
            this.resetBlock()
        })
    }
}
class ao {
    constructor() {
        this.blockSpawnId = 0,
        this.timescore = 0,
        this.comboscore = 0,
        this.blockId = 0,
        this.playCount = 0,
        this.buyCount = 0
    }
    reqMemoryInfo() {
        let e = pb.BlockMemoryCardInfoReq.create();
        return e.blockSpawnId = this.blockSpawnId,
        A(e, pb.IBlockMemoryCardInfoAck).then(e => {
            this.playCount = e.gameCount,
            this.buyCount = e.buyCount
        })
    }
    reqBlockMemoryCardStart() {
        let e = pb.BlockMemoryCardStartReq.create();
        return e.blockSpawnId = this.blockSpawnId,
        A(e, pb.IBlockMemoryCardStartAck).then(() => {
            this.timescore = this.comboscore = 0
        })
    }
    reqBlockMemoryOpen(e) {
        let t = pb.BlockMemoryCardOpenReq.create();
        return t.cardIndex = e,
        t.blockSpawnId = this.blockSpawnId,
        A(t, pb.IBlockMemoryCardOpenAck).then(e => (I.instance.playSound(v.SE_CardTurn), e))
    }
    reqBuy() {
        let e = pb.BuyBlockMemoryCardCountReq.create();
        return e.blockSpawnId = this.blockSpawnId,
        A(e, pb.IBuyBlockMemoryCardCountAck).then(e => {
            R.copper = e.copper,
            this.buyCount++
        })
    }
    reqRank() {
        let e = pb.MemoryCardRankListReq.create();
        return e.blockSpawnId = this.blockSpawnId,
        A(e, pb.IMemoryCardRankListAck).then(e => e.rankList)
    }
    reqOpenBox() {
        let e = new pb.OpenBlindBoxReq;
        return e.type = Be.memoryCard,
        e.blockSpawnId = this.blockSpawnId,
        A(e, pb.IOpenBlindBoxAck).then(e => (O.bag.updateItem(e.items), e.addSkin && (R.heroSkins[e.addSkin.id] = e.addSkin.skin), e))
    }
    getRankDetail() {
        var e = Data.getBlock_memoryCard(this.blockId);
        return [e.rank, e.rankReward]
    }
    getBoxData(e) {
        let t = [],
        i = [];
        for (var s of e)
            i.push(Data.getBlindBox(s));
        i.sort((e, t) => t.sort - e.sort);
        for (var a of i)
            for (var r of a.items)
                t.push({
                    itemId: r.id,
                    itemNum: r.count,
                    itemCfg: Data.getItem(r.id),
                    notShowName: !0
                });
        return t
    }
    reqBlindBox() {
        let e = new pb.GetBlindBoxInfoReq;
        return e.blockSpawnId = this.blockSpawnId,
        e.type = Be.memoryCard,
        A(e, pb.IGetBlindBoxInfoAck).then(e => e)
    }
}
class ro extends t.hunt.views.common.SystemNoticeUI {
    static showSystemMsg(e) {
        ro.s_msgData.push(e),
        ro.s_loadinged ? ro.s_instance && ro.s_instance.reset() : (ro.s_loadinged = !0, E(ro, {}).then(e => {
                (ro.s_instance = e).top = 200,
                e.centerX = 0,
                Se(e, H.System),
                e.playMsg()
            }))
    }
    onAwake() {
        super.onAwake(),
        this.mouseEnabled = !1,
        this.mouseThrough = !0,
        Object.assign(this.m_div_Tip.style, {
            fontSize: 18,
            bold: !0,
            color: "#FFFFFF",
            leading: 3,
            wordWrap: !0
        }),
        this.m_div_Tip._element.width = 2e3
    }
    onDestroy() {
        super.onDestroy(),
        ro.s_loadinged = !1,
        ro.s_instance = null
    }
    reset() {
        this.m_tl && (this.m_tl.destroy(), this.m_tl = null),
        ro.s_msgData.length ? this.playMsg() : (this.m_div_Tip.innerHTML = "", this.visible = !1, this.destroy())
    }
    playMsg() {
        var e = ro.s_msgData.shift(),
        e = (this.m_div_Tip._element.width = 2e3, this.m_div_Tip.innerHTML = e, this.m_div_Tip.contextWidth < this.m_pan_Con.width ? (e = (this.m_pan_Con.width - this.m_div_Tip.contextWidth) / 2, this.m_div_Tip.x = e < 140 ? 140 : e) : this.m_div_Tip.x = 140, this.visible = !0, this.m_tl = new Laya.TimeLine, +this.m_div_Tip.contextWidth + 100),
        t = 1e3 * Math.floor(e / 100);
        this.m_tl.to(this.m_div_Tip, {
            x: -e
        }, t, null, 1500),
        this.m_tl.once(Laya.Event.COMPLETE, this, () => {
            this.reset()
        }),
        this.m_tl.play()
    }
}
ro.s_loadinged = !1,
ro.s_msgData = [];
class no {
    constructor() {
        this.statistical = [],
        this.watchTypes = {},
        O.on(c.REENTER_GAME, this, this.reEnterGame)
    }
    updateSys(e) {
        switch (e.msg.msgType) {
        case Xe.roll:
            var t = this.parseSysMsg(e.msg);
            ro.showSystemMsg(t);
            break;
        case Xe.trade:
            O.event(c.UPDATE_TRADE_SYS, e.msg);
            break;
        case Xe.fish:
            O.event(c.UPDATE_FISH_SYS, e.msg)
        }
    }
    reqTradeStatistical() {
        return A(pb.TradeStatisticalReq.create(), pb.ITradeStatisticalAck).then(e => {
            this.statistical = [e.Hour24, e.Day7, e.Day30]
        })
    }
    reqTradeHistory() {
        return A(pb.TradeHistoryReq.create(), pb.ITradeHistoryAck).then(e => e)
    }
    parseSysMsg(e) {
        if (e.msg && !e.msgId)
            return e.msg;
        var i;
        let s = [];
        for (i of e.param)
            if (i.valType == je.lang)
                s.push(S(+i.val));
            else if (i.valType == je.copper) {
                let e = "money3",
                t = i.val;
                1 < +i.val / 1e4 ? (e = "money1", t = (+i.val / 1e4).toFixed(1)) : 1 < +i.val / 100 && (e = "money2", t = (+i.val / 100).toFixed(1)),
                s.push(t + `<img style='height: 20px;width:20px' src='hunt/ui_comm/${e}.png' />`)
            } else
                i.valType == je.fishweight ? s.push(+i.val / 1e3 + "t") : s.push(i.val);
        e = Data.getSysMsg(e.msgId);
        return e ? S(e.msg, s) : ""
    }
    reqWatch(e) {
        let t = pb.WatchMsgReq.create();
        return t.watchType = e,
        this.watchTypes[e] = 1,
        Jt(t)
    }
    reqUnWatch(e) {
        let t = pb.UnWatchMsgReq.create();
        return t.watchType = e,
        delete this.watchTypes[e],
        Jt(t)
    }
    reqFishHistory() {
        return A(pb.FishHistoryReq.create(), pb.IFishHistoryAck).then(e => e)
    }
    updateStc(e) {
        this.statistical = [e.Hour24, e.Day7, e.Day30],
        O.event(c.UPDATE_STATISTICAL)
    }
    reEnterGame() {
        for (var e in this.watchTypes)
            this.reqWatch(parseInt(e))
    }
    testNotice(e, t) {
        let i = [];
        for (var s of t)
            if (s.valType == je.lang)
                i.push(S(+s.val));
            else if (s.valType == je.copper) {
                let e = "money3",
                t = s.val;
                1 < +s.val / 1e4 ? (e = "money1", t = (+s.val / 1e4).toFixed(1)) : 1 < +s.val / 100 && (e = "money2", t = (+s.val / 100).toFixed(1)),
                i.push(t + `<img style='height: 20px;width:20px' src='hunt/ui_comm/${e}.png' />`)
            } else
                s.valType == je.fishweight ? i.push(+s.val / 1e3 + "t") : i.push(s.val);
        t = Data.getSysMsg(e);
        if (!t)
            return "";
        e = S(t.msg, i);
        ro.showSystemMsg(e)
    }
}
class oo {
    constructor() {
        this.m_treashow = !1
    }
    reqOpen(e) {
        let t = new pb.OpenTreasureReq;
        return t.blockSpawnId = e,
        A(t, pb.IOpenTreasureAck).then(e => (Mmobay.LocalStorage.set("treasure", "false"), this.updateTreasure(e.blockData), e.blockData))
    }
    reqPoint(e, t) {
        let i = new pb.TreasurePointRewardReq;
        return i.blockSpawnId = e,
        i.index = t,
        A(i, pb.ITreasurePointRewardAck).then(e => (O.bag.updateItem(e.items), this.updateTreasure(e.blockData), e))
    }
    reqReward(e) {
        let t = new pb.TreasureFinalRewardReq;
        return t.blockSpawnId = e,
        A(t, pb.ITreasureFinalRewardAck).then(e => (O.bag.updateItem(e.items), this.updateTreasure(e.blockData, !0), O.tileMap.initLogic(), O.tileMap.initConvey(), e))
    }
    updateTreasure(t, i = !1) {
        var s = O.tileMap.blocks;
        for (let e = 0; e < s.length; e++)
            if (s[e].blockId == t.blockId) {
                i ? O.tileMap.blocks.splice(e, 1) : O.tileMap.blocks[e] = t,
                O.event(c.UPDATE_TREASURE);
                break
            }
    }
    getTreasureIndex() {
        let e = O.tileMap.getTreasureBlock();
        return e && e.treasure && e.treasure.pointRewards ? e.treasure.pointRewards.filter(e => !!e).length : 0
    }
}
class lo {
    getTeamsData() {
        if (this._teamData)
            return this._teamData;
        for (var e in this._teamData = [], Data.teamBoss) {
            e = Data.getTeamBoss(+e);
            this._teamData.push(e)
        }
        return this._teamData
    }
    reqCreateTeam() {
        return Promise.resolve()
    }
    reqJoinTeam() {
        return Promise.resolve()
    }
}
class ho extends Laya.EventDispatcher {
    constructor() {
        super(...arguments),
        this._dataLoaded = !1
    }
    init() {
        this.teamBoss = new lo,
        this.treasure = new oo,
        this.remember = new ao,
        this.sysNotice = new no,
        this.invite = new io,
        this.fish = new to,
        this.mail = new eo,
        this.account = new Zn,
        this.pass = new Jn,
        this.condition = new Qn,
        this.tileMap = new Gn,
        this.chat = new _n,
        this.arena = new Zt,
        this.trade = new dn,
        this.hero = new ri,
        this.bag = new ei,
        this.login = new hn,
        this.equip = new ti,
        this.food = new ii,
        this.trade = new dn,
        this.club = new un,
        this.battle = new Wn,
        this.block = new $n,
        this.report = new so
    }
    loadData(i, s = !1) {
        return new Promise((e, t) => {
            Laya.loader.loadP(i).then(() => {
                Data.buildData(Laya.Loader.getRes(i)),
                Laya.loader.clearRes(i),
                s && (this._dataLoaded = !0, this.dispatch(c.DATA_LOADED)),
                e(0)
            })
        })
    }
    get dataLoaded() {
        return this._dataLoaded
    }
    dispatch(...e) {
        e.forEach(e => this.event(e))
    }
}
var O = new ho;
class mo extends t.hunt.views.block.CommentViewUI {
    constructor() {
        super(),
        this.m_blockId = 0
    }
    setData(e) {
        this.m_blockId = e,
        this.refreshChatNum()
    }
    refreshChatNum() {
        var e = {
            type: Ue.block,
            logicId: this.m_blockId,
            start: 0,
            count: 0,
            userId: R.id,
            noLoading: !0
        };
        O.chat.reqChatData(e).then(e => {
            this.destroyed || (this.m_txt_Num.text = e.totalCount)
        })
    }
    onClickChat() {
        this.m_blockId && u(Vr, {
            params: [this.m_blockId, Ue.block],
            closeOnSide: !0
        }).then(e => {
            e.wait().then(() => {
                this.refreshChatNum()
            })
        })
    }
}
class co extends t.hunt.views.block.LikeViewUI {
    constructor() {
        super(),
        this.m_blockId = 0,
        this.m_isClick = !1
    }
    setData(e, t) {
        var i = t.praiseCount || 0,
        t = t.isPraise || !1;
        this.m_blockId = e,
        this.m_txt_Num.text = Mt(i),
        this.m_img_Like.visible = t,
        this.m_img_LikeBg.visible = !t
    }
    onClickLike() {
        this.heartShow.isPlaying || this.heartCancel.isPlaying || !this.m_blockId || this.m_isClick || (this.m_isClick = !0, O.block.reqBlockAction(this.m_blockId, Ne.praise).then(e => {
                var t;
                this.destroyed || (this.m_isClick = !1, t = e.praiseCount || 0, e = e.isPraise || !1, this.m_txt_Num.text = Mt(t), e ? (this.m_img_LikeBg.visible = !1, this.heartShow.play(0, !1), this.m_img_Like.visible = !0) : (this.m_img_LikeBg.visible = !0, this.heartCancel.play(0, !1)), O.report.praise(e ? 1 : -1))
            }))
    }
}
class uo extends t.hunt.views.common.BoxShowViewUI {
    onAwake() {
        super.onAwake(),
        this.m_lst_Item.selectEnable = !0,
        this.m_lst_Item.elasticEnabled = !1,
        this.m_lst_Item.scrollBar.visible = !1
    }
    onSelectItem() {
        var e;
        -1 != this.m_lst_Item.selectedIndex && (e = this.m_lst_Item.getItem(this.m_lst_Item.selectedIndex)) && e.itemId && (u(pa, {
                params: [{
                        itemCfg: Data.getItem(e.itemId),
                        itemId: e.itemId,
                        itemNum: e.itemNum
                    }
                ]
            }), this.m_lst_Item.selectedIndex = -1)
    }
    setData(e, t = "box1", i = 0) {
        1 == i ? e.sort((e, t) => {
            if (4 == e.itemId)
                return -1;
            if (4 == t.itemId)
                return 1;
            var i = Data.getEquip(e.itemId),
            s = Data.getEquip(t.itemId);
            if (!i || !s) {
                if (!i && s)
                    return -1;
                if (!s && i)
                    return 1
            }
            if (i && s)
                return i.lvl == s.lvl ? s.type - i.type : s.lvl - i.lvl;
            if (!t.itemCfg || !e.itemCfg) {
                if (!e.itemCfg)
                    return -1;
                if (!t.itemCfg)
                    return 1
            }
            return t.itemCfg.quality - e.itemCfg.quality
        }) : e.sort((e, t) => {
            if (4 == e.itemId)
                return -1;
            if (4 == t.itemId)
                return 1;
            if (!t.itemCfg || !e.itemCfg) {
                if (!e.itemCfg)
                    return -1;
                if (!t.itemCfg)
                    return 1
            }
            return t.itemCfg.quality - e.itemCfg.quality
        }),
        this.m_lst_Item.array = e,
        this.m_img_Box.skin = `hunt/ui_comm/${t}.png`
    }
}
class _o extends Laya.Box {
    constructor() {
        super(...arguments),
        this._constructors = [],
        this._items = {},
        this._creatings = {}
    }
    onDestroy() {
        for (const t in this._items) {
            let e = this._items[t];
            e.destroyed || e.destroy()
        }
        this._items = {}
    }
    setupCls(e) {
        this._constructors = e
    }
    changeIndex(e) {
        var t = "item" + e;
        if (this._curName != t) {
            if (this._curName) {
                let e = this._items[this._curName];
                e && e.removeSelf()
            }
            this._curName = t;
            t = this._items[t];
            t ? this.addChild(t) : this.createItem(e)
        }
    }
    createItem(e) {
        let t = "item" + e;
        this._creatings[t] || (e = this._constructors[e]) && (this._creatings[t] = !0, E(e.cls, {
                params: e.params || []
            }).then(e => {
                this.destroyed ? e.destroy() : (this._creatings[t] = !1, e.name = t, this._items[t] = e, t == this._curName && this.addChild(e))
            }))
    }
}
class po extends t.hunt.views.arena.ArenaExchangeItemUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource;
        var i = t.shopInfo,
        t = t.isGet,
        s = Data.getItem(i.items[0].id),
        s = (this.m_txt_Name.text = S(s.name), this.m_txt_Num.text = i.costItems[0].count + "", this.m_box_Need.visible = !t, this.m_txt_Get.visible = t, this.m_img_Bg.gray = t, {
        itemId: i.items[0].id,
        itemCfg: Data.getItem(i.items[0].id),
        notShowName: !0
    });
        this.m_view_Item.dataChanged(null, s)
    }
}
class go extends t.hunt.views.fight.ChangeHeroViewUI {
    setData(i) {
        let s = O.hero;
        this.m_box_Spine.destroyChildren(),
        this.m_heros && this.showAni(i),
        this.m_heros = [...i];
        for (let t = 0; t < i.length; t++) {
            var a = this["m_txt_Name" + (t + 1)];
            if (i[t]) {
                var r = s.getHero(i[t]),
                n = (this["m_img_hero" + t].visible = !1, Data.getSpineParam(r.avatarId)),
                n = n ? n.offset : [],
                o = 1 == t ? 70 : 125;
                let e = Ee.create({
                    url: `hunt/role/${r.avatarId}.json`,
                    offset: [n[0] || 0, (n[1] || 0) - o]
                });
                e.play(14, !0),
                e.name = "spine",
                this.m_box_Spine.addChild(e),
                e.x = 50 + a.x
            }
        }
    }
    showAni(e) {
        for (let t = 0; t < e.length; t++)
            if (e[t] != this.m_heros[t]) {
                let e = this["m_ani_show" + t];
                e.visible = !0,
                e.once(Laya.Event.COMPLETE, this, () => {
                    e.visible = !1
                }),
                e.play(0, !1)
            }
    }
}
class yo extends t.hunt.views.fight.ChangeHeroCellViewUI {
    dataChanged(e, t) {
        if (t ? this.dataSource = t : t = this.dataSource, this.m_box_Show.visible = !!t.hero, t.hero) {
            var i = t.hero,
            s = (this.m_txt_Name.text = S(i.heroTable.name), this.m_img_Hero.skin = `hunt/ui_hero/s${i.avatarId}.png`, this.m_txt_Lv.visible = this.m_img_LvBg.visible = 0 < i.eatLvl, this.m_txt_Lv.text = i.eatLvl + "", this.m_img_Change.visible = !!t.isChange, this.m_img_Select.visible = t.isSel, {
            0: "hunt/ui_card/cardBgN.png",
            1: "hunt/ui_card/cardBgR.png",
            2: "hunt/ui_card/cardBgSR.png",
            3: "hunt/ui_card/cardBgSSR.png",
            4: "hunt/ui_card/cardBgSP.png"
        });
            if (this.m_img_Bg.skin = s[i.heroSkinTable.rare || 0], 4 == i.heroSkinTable.rare ? (this.m_ani_Card.visible = !0, this.m_ani_Card.source = "hunt/ue/26.atlas") : 3 == i.heroSkinTable.rare ? (this.m_ani_Card.visible = !0, this.m_ani_Card.source = "hunt/ue/27.atlas") : this.m_ani_Card.visible = !1, this.m_box_Average.visible = 0 < i.heroEquipAverage, this.m_txt_Average.text = i.heroEquipAverage + "", t.needEle) {
                let e = 0,
                i = [];
                var a = t.hero.wearingSkin;
                for (const n in _)
                    a && a.eles[e] && i.push({
                        id: _[n],
                        curNum: a.eles[e],
                        key: n
                    }), e++;
                for (let t = 0; t < 4; t++) {
                    let e = this["m_view_Ele" + t];
                    var r = i[t];
                    e.visible = !!r,
                    r && e.setData(r)
                }
                t.isChange && t.hasHigher ? (this.ani1.play(0, !0), this.m_img_SkinTip.visible = !1) : t.isChange ? (this.ani1.stop(), this.m_img_Change.scale(1, 1), this.m_img_SkinTip.visible = !1) : this.m_img_SkinTip.visible = t.highInfo && (t.highInfo.heroHigher || t.highInfo.skinHigher)
            } else
                for (let t = 0; t < 4; t++) {
                    let e = this["m_view_Ele" + t];
                    e.visible = !1
                }
        }
    }
}
class vo extends t.hunt.views.arena.ArenaRankCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        t && (this.m_txt_Rank.visible = 3 < t.rank, this.m_img_Rank.visible = t.rank <= 3, 3 < t.rank ? this.m_txt_Rank.text = t.rank + "" : this.m_img_Rank.skin = `hunt/ui_arena/rank_ico${t.rank}.png`, this.m_txt_Club.text = t.clubName, this.m_txt_Name.text = t.name, this.m_txt_Score.text = t.score + "", this.m_img_Metal.skin = `hunt/ui_arena/tk${t.militaryGrade}.png`, this.m_view_Head.setData({
                head: t.icon
            }))
    }
}
class ko extends t.hunt.views.common.HeadViewUI {
    setData(e) {
        e.bg && (this.m_img_Bg.skin = e.bg),
        e.isMonster ? this.m_img_Head.skin = "hunt/ui_monster/" + (e.head || 0) + ".png" : this.m_img_Head.skin = "hunt/ui_hero/h" + (e.head || 0) + ".png"
    }
}
class fo extends t.hunt.views.arena.ArenaRankDetailCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        t && (this.m_txt_Name.text = S(t.name), this.m_txt_Rank.text = 0 == e ? S(2038, t.area[1] + "%") : S(2038, t.area[0] + "%~" + t.area[1]) + "%", this.m_img_Rank.skin = `hunt/ui_arena/tk${t.id}.png`)
    }
}
class Io extends t.hunt.views.arena.ArenaRecordCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        t.AId == R.id ? (this.m_txt_Name.text = t.DName, this.m_txt_ClubName.text = t.DClubName || "", this.m_txt_Delta.text = Math.abs(t.ANewCup - t.AOldCup) + "", this.m_txt_Score.text = t.ANewCup + "", this.m_view_Head.setData({
                head: t.DIcon
            }), this.m_img_Up.skin = "hunt/ui_comm/arrow_up.png", this.m_img_Rank.skin = `hunt/ui_arena/tk${t.DMilitaryGrade||1}.png`, this.m_txt_ClubNum.text = t.DClubRating + "", this.m_img_Attack.skin = "hunt/ui_arena/attack.png") : (this.m_img_Attack.skin = "hunt/ui_arena/defance.png", this.m_txt_ClubName.text = t.AClubName || "", this.m_txt_Name.text = t.AName, this.m_txt_Delta.text = Math.abs(t.DNewCup - t.DOldCup) + "", this.m_txt_Score.text = t.DNewCup + "", this.m_view_Head.setData({
                head: t.AIcon
            }), this.m_txt_ClubNum.text = t.AClubRating + "", this.m_img_Rank.skin = `hunt/ui_arena/tk${t.AMilitaryGrade||1}.png`);
        var i = t.AId == R.id ? t.IsWin : !t.IsWin;
        this.m_txt_Time.text = Bt(1e3 * +t.AddTime),
        this.m_txt_Delta.color = i ? "#52A716" : o.Red,
        this.m_txt_W.visible = i,
        this.m_txt_F.visible = !i,
        this.m_img_Up.skin = `hunt/ui_comm/arrow_${i?"up":"down"}.png`
    }
}
class bo extends t.hunt.views.equip.EquipSumViewUI {
    constructor() {
        super(...arguments),
        this.m_isMatch = !1
    }
    onAwake() {
        super.onAwake(),
        this.on(Laya.Event.MOUSE_DOWN, this, () => {
            O.event(c.MOVE_EQUIP, {
                equip: this,
                index: this.m_index
            })
        })
    }
    onDestroy() {
        Laya.timer.clearAll(this),
        super.onDestroy(),
        this.offAll()
    }
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.visible = !!t,
        t && (this.m_ani_Sum.visible = !1, this.m_index = e, t.notShowName = !0, this.m_view_Item.dataChanged(null, t), this.checkShake(!0), this.visible = !t.isFade)
    }
    playSumAni(e) {
        this.checkShake(!1),
        this.mouseEnabled = !1;
        var t = this.dataSource.itemId;
        this.m_img_Sum3.skin = `hunt/ui_item/${Data.getItem(t).icon}.png`,
        this.m_img_Sum2.skin = this.m_img_Sum1.skin = `hunt/ui_item/${Data.getItem(e).icon}.png`,
        this.ani1.addLabel("sum", 5),
        this.m_ani_Sum.once(Laya.Event.COMPLETE, this, () => {
            this.m_ani_Sum.visible = !1,
            O.event(c.SHAKE_EQUIP, !0),
            this.m_view_Item.showShineOnce()
        }),
        Laya.timer.once(600, this, () => {
            this.mouseEnabled = !0
        }),
        this.ani1.once(Laya.Event.LABEL, this, () => {
            this.m_ani_Sum.visible = !0,
            this.m_ani_Sum.play(0, !1)
        }),
        this.ani1.play(0, !1)
    }
    matchEquip(e) {
        this.checkShake(!1),
        e && this.dataSource && e.itemId == this.dataSource.itemId && Data.getEquip(e.itemId).merge.length ? (this.ani2.play(0, !0), this.m_isMatch = !0) : (this.ani2.gotoAndStop(0), this.m_isMatch = !1)
    }
    checkShake(e = !1) {
        e && this.dataSource && O.equip.checkShake(this.dataSource.itemId) && !this.m_isMatch ? this.ani3.play(0, !0) : this.ani3.gotoAndStop(0)
    }
    scaleEquip(e) {
        this.m_index >= e && this.ani4.play(0, !1)
    }
}
r([n(c.EQUIP_MATCH)], bo.prototype, "matchEquip", null),
r([n(c.SHAKE_EQUIP)], bo.prototype, "checkShake", null),
r([n(c.SCALE_EQUIP)], bo.prototype, "scaleEquip", null);
class wo extends t.hunt.views.bag.BagFoodCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource;
        var i = O.food.checkUnlock(t.id),
        s = Data.getItem(t.id),
        a = {
            itemId: t.id,
            itemCfg: s,
            notShowName: !0
        };
        this.m_view_Item.dataChanged(null, a),
        this.m_txt_Name.text = S(s.name),
        this.m_view_New.visible = O.food.checkNew(t.id),
        this.m_box_Lock.visible = !i,
        (this.m_box_Unlock.visible = i) ? this.m_txt_Title.text = S(1046, +t.id - 4e3) : this.m_txt_Gray.text = S(1046, +t.id - 4e3),
        this.checkRed()
    }
    checkRed() {
        var e = this.dataSource.id,
        t = O.food.checkUnlock(e),
        e = O.food.getFastCookList(e);
        this.m_img_Red.visible = t && e && e.maxNum && !(1 == e.itemArr.length && 1 == e.itemArr[0].needNum)
    }
}
r([n(c.ITEM_CHANGE)], wo.prototype, "checkRed", null);
class Co extends t.hunt.views.block.AuthorItemUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource;
        t = Data.getAuthor(t);
        this.m_img_Ico.skin = "hunt/ui_author/" + t.icon + ".png"
    }
}
class xo extends t.hunt.views.block.AuthorViewUI {
    constructor() {
        super()
    }
    setData(e = []) {
        var t;
        this.m_box_Info.visible = 1 == e.length,
        1 == e.length && (t = Data.getAuthor(e[0]), this.m_txt_Name.text = t.name),
        this.m_lst_Author.array = e || []
    }
}
class So extends Laya.EventDispatcher {
    constructor(e = !1) {
        super(),
        this._percent = 0,
        this._totalTime = 1e3,
        this.sa = -90,
        this.ea = 270,
        this._isReverse = !1,
        this._showTime = 0,
        this._isReverse = e
    }
    set showTime(e) {
        this._showTime = e
    }
    get showTime() {
        return this._showTime
    }
    get totalTime() {
        return this._totalTime
    }
    set totalTime(e) {
        this._totalTime != e && (this._totalTime = e)
    }
    get isReverse() {
        return this._isReverse
    }
    set isReverse(e) {
        this._isReverse != e && (this._isReverse = e)
    }
    bindTarget(e, t, i, s, a, r) {
        this.target && this.target.off(Laya.Event.UNDISPLAY, this, this.dispose),
        e && e.off(Laya.Event.UNDISPLAY, this, this.dispose),
        (this.target = e).once(Laya.Event.UNDISPLAY, this, this.dispose),
        this.mx = t,
        this.my = i,
        this.rad = s || e.width >> 1,
        a && (this.perLabel = a),
        r && (this.timeLabel = r),
        this.updateValue()
    }
    set percent(e) {
        this._percent != e && (this._percent = e, this.updateValue())
    }
    get percent() {
        return this._percent
    }
    get currentAngle() {
        var e = this._percent * this.totalAngle;
        return this._isReverse ? this.ea - e : this.sa + e
    }
    updateValue() {
        this.mask || (this.mask = new Laya.Sprite);
        let e = this.mask.graphics;
        e.clear();
        var t = Math.max(this._percent, .01) * this.totalAngle;
        this._percent < 1 ? this._isReverse ? e.drawPie(this.mx, this.my, this.rad, this.ea - t, this.ea, "#ff0000") : e.drawPie(this.mx, this.my, this.rad, this.sa, this.sa + t, "#ff0000") : e.drawCircle(this.mx, this.my, this.rad, "#ff0000"),
        this.target && (this.target.mask = this.mask),
        this._showTime && this.timeLabel && (this.timeLabel.text = Ti((this._showTime - Date.newDate().getTime()) / 1e3)),
        this.perLabel && (this.perLabel.text = 100 - Math.floor(100 * this._percent) + "%"),
        this.update && this.update.run(),
        this.event(Laya.Event.CHANGED)
    }
    tweenValue(e, t, i) {
        this.clearTween(),
        t = t || (e - this._percent) * this._totalTime,
        this.tween = Laya.Tween.to(this, {
            percent: e
        }, t, Laya.Ease.linearIn, Laya.Handler.create(this, () => {
                    i && i.run(),
                    this.tween = null
                }))
    }
    clearTween() {
        this.tween && (this.tween.clear(), this.tween = null)
    }
    set startAngle(e) {
        this.sa = e
    }
    set endAngle(e) {
        this.ea = e
    }
    get totalAngle() {
        return this.ea - this.sa
    }
    dispose() {
        this.clearTween(),
        this.target && this.target.off(Laya.Event.UNDISPLAY, this, this.dispose),
        this.target && (this.target.mask = null),
        this.target = null,
        this.mask && this.mask.destroy(!0),
        this.mask = null,
        this.perLabel = null,
        this.timeLabel = null,
        this.update = void 0
    }
}
class Ao extends t.hunt.views.common.ProduceDetailDlgUI {
    constructor(e, t) {
        super(),
        this.m_itemId = e,
        this.m_endTime = t
    }
    onDestroy() {
        super.onDestroy(),
        this.m_ticker && this.m_ticker.dispose()
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        this.m_ticker && this.m_ticker.dispose();
        let e = this.m_ticker = Ei.create(this.m_endTime - 1e3, 1e3, this.m_txt_Time);
        e.start(),
        this.m_view_Detail.setData({
            itemCfg: Data.getItem(this.m_itemId),
            itemId: this.m_itemId
        })
    }
}
class Do extends t.hunt.views.common.PropViewAniUI {
    constructor(e) {
        super(),
        this.m_tlArr = [],
        this.dataSource = e
    }
    onDestroy() {
        super.onDestroy(),
        this.m_ticker && (this.m_ticker.disposed || this.m_ticker.dispose(), this.m_ticker = null),
        this.m_tlArr.forEach(e => {
            e.destroy()
        }),
        this.m_tlArr.length = 0
    }
    onAwake() {
        super.onAwake(),
        this.doAniShow()
    }
    doAniShow() {
        this.m_img_Prop.skin = `hunt/ui_comm/icoProp_${this.dataSource.old.propId}.png`,
        this.m_txt_Prop.text = S(st[this.dataSource.old.propId]),
        this.scale(1, 1),
        this.x = this.dataSource.pos[0],
        this.y = this.dataSource.pos[1];
        let e = new Laya.TimeLine,
        s = (this.m_tlArr.push(e), e.to(this, {
                x: 0,
                alpha: 1
            }, 300, Laya.Ease.backOut), this.dataSource.new.propVal - this.dataSource.old.propVal),
        t = [g.critical, g.dodge, g.hpPercent, g.atkPercent],
        a = -1 != t.indexOf(this.dataSource.new.propId);
        e.on(Laya.Event.COMPLETE, null, () => {
            let t = Date.newDate().addMilliseconds(400).getTime(),
            i = (this.m_ticker = Ei.create(t, 50), 0),
            e = (this.m_ticker.onTick = () => {
                var e;
                Date.newDate().getTime() >= t ? (e = Math.floor(this.dataSource.new.propVal), this.m_txt_Value.text = a ? (e / 100).toFixed(1) + "%" : e + "", this.m_txt_Value.font = "2") : (e = Math.floor(this.dataSource.old.propVal + s / 8 * i), this.m_txt_Value.text = a ? (e / 100).toFixed(1) + "%" : e + ""),
                i++
            }, this.m_ticker.start(), new Laya.TimeLine);
            this.m_tlArr.push(e),
            e.to(this.m_txt_Value, {
                scaleX: .9,
                scaleY: .9
            }, 400, Laya.Ease.backOut).to(this.m_txt_Value, {
                scaleX: .8,
                scaleY: .8
            }, 200, null, 200),
            e.on(Laya.Event.COMPLETE, null, () => {
                let e = this.m_txt_Add.parent;
                s = Math.floor(s),
                e.width = 24 * (s + "").length + 24,
                this.m_txt_Add.text = "+" + (a ? (s / 100).toFixed(1) + "%" : s.toFixed(0))
            }),
            e.play(0, !1)
        }),
        e.play(0, !1)
    }
    playLoopAni() {
        this.ani1.play(0, !0)
    }
}
r([n(c.HERO_PROP_ANI)], Do.prototype, "playLoopAni", null);
class Lo extends t.hunt.views.card.HeroLvlUpDlgUI {
    constructor(e) {
        super(),
        this.m_tlArr = [],
        this.dataSource = e
    }
    onDestroy() {
        super.onDestroy(),
        Laya.timer.clear(this, this.shakingAni),
        this.m_tlArr.forEach(e => {
            e.destroy()
        }),
        this.m_tlArr.length = 0
    }
    onAwake() {
        super.onAwake(),
        this.updateView(),
        this.doLvUpAnime()
    }
    updateView() {
        var e;
        this.dataSource && (this.m_txt_Name.text = S(this.dataSource.heroCfg.name), this.m_txt_Lv.text = this.dataSource.newLv - this.dataSource.diffLv + "", this.m_img_Hero.skin = `hunt/ui_hero/s${this.dataSource.skin}.png`, e = this.dataSource.rare, this.m_img_Bg.skin = {
                0: "hunt/ui_card/cardBgN.png",
                1: "hunt/ui_card/cardBgR.png",
                2: "hunt/ui_card/cardBgSR.png",
                3: "hunt/ui_card/cardBgSSR.png",
                4: "hunt/ui_card/cardBgSP.png"
            }
            [e || 0], 4 == e ? (this.m_ani_Card.visible = !0, this.m_ani_Card.source = "hunt/ue/26.atlas") : 3 == e ? (this.m_ani_Card.visible = !0, this.m_ani_Card.source = "hunt/ue/27.atlas") : this.m_ani_Card.visible = !1)
    }
    doLvUpAnime() {
        this.m_ani_Up.visible = !0,
        this.m_ani_Up.play(0, !1),
        this.m_ani_Shine.visible = !0,
        this.m_ani_Shine.play(0, !1),
        Laya.timer.once(1e3, null, () => {
            this.destroyed || (this.m_txt_Lv.font = "3", this.m_txt_Lv.text = this.dataSource.newLv, Laya.timer.clear(this, this.shakingAni), this.m_txt_Lv.anchorX = this.m_txt_Lv.anchorY = .5)
        });
        let t = [];
        for (let e = 0; e < this.dataSource.oldProp.length; e++)
            this.dataSource.newProp[e].propVal != this.dataSource.oldProp[e].propVal && t.push({
                old: this.dataSource.oldProp[e],
                new: this.dataSource.newProp[e]
            });
        let e = new Laya.TimeLine,
        i = (this.m_tlArr.push(e), e.to(this.m_txt_Lv, {
                scaleX: 1.1,
                scaleY: 1.1
            }, 1e3).to(this.m_txt_Lv, {
                scaleX: 1.5,
                scaleY: 1.5
            }, 200).to(this.m_txt_Lv, {
                scaleX: .8,
                scaleY: .8
            }, 200), new Laya.TimeLine);
        this.m_tlArr.push(i),
        i.to(this.m_box_Con, {
            x: 70
        }, 300, null, 300),
        e.on(Laya.Event.COMPLETE, this, () => {
            i.play(0, !1)
        }),
        i.on(Laya.Event.COMPLETE, this, () => {
            this.m_ani_Bg.visible = !0;
            for (let e = 0; e < t.length; e++)
                Laya.timer.once(500 * e, null, () => {
                    t[e].pos = [100, 5 + 65 * e],
                    E(Do, {
                        params: [t[e]]
                    }).then(e => {
                        this.m_box_Ani.addChild(e)
                    })
                });
            Laya.timer.once(500 * (t.length - 1) + 1500, null, () => {
                O.event(c.HERO_PROP_ANI)
            })
        }),
        e.play(0, !1),
        Laya.timer.loop(2, this, this.shakingAni)
    }
    shakingAni() {
        var e = .5 < Math.random() ? 1 : -1;
        this.m_txt_Lv.anchorX = .5 + Math.randRange(1, 10) / 200 * e,
        this.m_txt_Lv.anchorY = .5 + Math.randRange(1, 10) / 200 * e
    }
}
class To extends t.hunt.views.card.TasteFoodDlgUI {
    constructor(e) {
        super(),
        this.m_lastIndex = -1,
        this.m_tlArr = [],
        this.m_txtArr = [],
        this.m_heroData = O.hero.getHero(e)
    }
    onDestroy() {
        super.onDestroy(),
        this.m_tl && (this.m_tl.destroy(), this.m_tl = null),
        this.m_tlArr && (this.m_tlArr.forEach(e => {
                e.destroy()
            }), this.m_tlArr.length = 0),
        this.m_txtArr && (this.m_txtArr.forEach(e => {
                e.destroyed || e.destroy()
            }), this.m_txtArr.length = 0),
        this.m_tlChange && (this.m_tlChange.destroy(), this.m_tlChange = null)
    }
    onAwake() {
        super.onAwake(),
        this.updateView(!0)
    }
    updateView(t = !1) {
        if (this.m_heroData) {
            var i = this.m_heroData.heroTable.maxEat,
            s = this.m_heroData.curEatVal,
            a = this.m_heroData.eatExp,
            r = this.m_heroData.eatLvl || 1,
            n = Data.getHeroLvlUp(r);
            Laya.Tween.clearAll(this.m_img_Cur),
            this.m_img_Cur.visible = !0,
            r >= Data.maxHeroLvlUps ? (this.m_txt_Cur.text = this.m_txt_Add.text = "", this.m_txt_Total.text = "max") : (this.m_txt_Cur.text = s + "", this.m_txt_Cur.color = i <= s ? o.Green : o.White, this.m_txt_Total.text = "/" + this.m_heroData.heroTable.maxEat),
            this.m_txt_Lvl.text = S(1042, r),
            this.m_img_Cur.width = 400 * Math.min(a / n.exp, 1),
            i <= s ? t ? this.m_img_EatIco.skin = "hunt/ui_card/eat_ico_1.png" : this.eatImgChange() : this.m_img_EatIco.skin = "hunt/ui_card/eat_ico_0.png";
            let e = O.bag.getFoodList();
            e.forEach(e => {
                e.showSelect = !1,
                e.notShowName = !0
            }),
            e.sort((e, t) => e.itemCfg.type != t.itemCfg.type ? e.itemCfg.type == m.food ? 1 : -1 : t.foodCfg && e.foodCfg ? t.foodCfg.exp - e.foodCfg.exp : 0),
            this.m_lst_Food.array = e || [],
            this.m_lst_Food.visible = 0 < e.length,
            this.m_txt_NoFood.visible = 0 == e.length,
            e.length || (this.m_img_Next.width = 0),
            this.m_lst_Food.selectedIndex = 0 <= this.m_lastIndex ? this.m_lastIndex : 0,
            this.m_btn_UseItem.gray = r >= Data.maxHeroLvlUps || 0 == e.length || this.m_heroData.curEatVal >= this.m_heroData.heroTable.maxEat
        }
    }
    onSelectFood() {
        if (-1 != this.m_lst_Food.selectedIndex) {
            var t = this.m_lst_Food.selectedItem;
            if (!t)
                return this.m_view_Count.setData(1, 1, 0), void(this.m_lst_Food.selectedIndex = 0);
            if (-1 != this.m_lastIndex) {
                let e = this.m_lst_Food.getItem(this.m_lastIndex);
                e ? (e.showSelect = !1, this.m_lst_Food.changeItem(this.m_lastIndex, e)) : this.m_lastIndex = 0
            }
            let e = this.m_lst_Food.getItem(this.m_lst_Food.selectedIndex);
            e.showSelect = !0,
            this.m_lst_Food.changeItem(this.m_lst_Food.selectedIndex, e),
            this.m_lastIndex = this.m_lst_Food.selectedIndex,
            this.m_view_Count.setData(1, this.getMaxNum(t) || 1, 0)
        }
    }
    onClickUseItem() {
        var e = this.m_lst_Food.selectedItem;
        if (!e)
            return h(S(1002));
        if (this.m_btn_UseItem.gray)
            return h(S(1001));
        if (!this.m_view_Count.count)
            return h(S(1043));
        let t = this.m_txt_TotalAdd.text;
        I.instance.playSound(v.SE_Eat),
        O.hero.reqEatFood(this.m_heroData.id, e.itemId, this.m_view_Count.count).then(e => {
            0 < e.diffLv ? (this.visible = !1, u(Lo, {
                    params: [e]
                }).then(e => {
                    I.instance.playSound(v.SE_LvUp),
                    e.wait().then(() => {
                        this.visible = !0
                    })
                })) : this.doExpAni(t),
            this.m_heroData = O.hero.getHero(this.m_heroData.id),
            this.m_lst_Food.selectedIndex = -1,
            this.updateView()
        })
    }
    eatImgAni() {
        this.m_tl && (this.m_tl.destroy(), this.m_tl = null),
        this.m_tl = new Laya.TimeLine,
        this.m_tl.to(this.m_img_EatIco, {
            scaleX: 1.5,
            scaleY: 1.5
        }, 40).to(this.m_img_EatIco, {
            scaleX: 1,
            scaleY: 1
        }, 20, null),
        this.m_tl.once(Laya.Event.COMPLETE, null, () => {
            this.m_tl.destroy(),
            this.m_tl = null
        }),
        this.m_tl.play()
    }
    doExpAni(e) {
        let t = new Laya.Label,
        i = (t.fontSize = this.m_txt_TotalAdd.fontSize, t.bold = !0, t.color = this.m_txt_TotalAdd.color, t.anchorX = t.anchorY = .5, t.centerX = 0, t.text = e, this.addChild(t), t.y = this.m_txt_TotalAdd.y, new Laya.TimeLine);
        this.m_tlArr.push(i),
        i.to(t, {
            scaleX: 1.4,
            scaleY: 1.4
        }, 150).to(t, {
            y: t.y - 50,
            scaleX: 1.1,
            scaleY: 1.1
        }, 700, null),
        i.once(Laya.Event.COMPLETE, null, () => {
            t.destroy()
        }),
        i.play()
    }
    eatImgChange() {
        this.m_tlChange || (this.m_tlChange = new Laya.TimeLine, this.m_tlChange.to(this.m_img_EatIco, {
                scaleX: 0,
                scaleY: 0
            }, 10).to(this.m_img_EatIco, {
                scaleX: 1.3,
                scaleY: 1.3
            }, 200).to(this.m_img_EatIco, {
                scaleX: 1,
                scaleY: 1
            }, 500), Laya.timer.once(200, null, () => {
                this.destroyed || (this.m_img_EatIco.skin = "hunt/ui_card/eat_ico_1.png")
            }), this.m_tlChange.once(Laya.Event.COMPLETE, null, () => {
                this.m_tlChange.destroy(),
                this.m_tlChange = null
            }), this.m_tlChange.play())
    }
    changeCountNum() {
        var e = this.m_lst_Food.selectedItem;
        if (e && !(this.m_heroData.eatLvl >= Data.maxHeroLvlUps)) {
            var i = this.m_heroData.heroTable.maxEat,
            s = this.m_view_Count.count,
            e = e.foodCfg.exp,
            a = this.m_heroData.eatExp,
            t = Data.getHeroLvlUp(this.m_heroData.eatLvl),
            r = (this.m_txt_Total.text = "/" + i, this.getAddLv());
            if (this.m_txt_LvlAdd.visible = 0 < r, this.m_txt_LvlAdd.text = "+" + r, 0 < r) {
                this.m_img_Cur.visible = !1;
                i = Data.getHeroLvlUp(this.m_heroData.eatLvl + r);
                let t = 0;
                for (let e = 0; e < r; e++) {
                    var n = Data.getHeroLvlUp(this.m_heroData.eatLvl + e);
                    t += n.exp
                }
                this.m_img_Next.width = i ? 400 * Math.min((a + s * e - t) / i.exp, 1) : 400
            } else
                this.m_img_Cur.visible = !0, this.m_img_Cur.width = 400 * Math.min(a / t.exp, 1), this.m_img_Next.width = 400 * Math.min((a + s * e) / t.exp, 1);
            this.m_txt_TotalAdd.text = "+" + s * e,
            this.m_txt_Lvl.text = S(1042, this.m_heroData.eatLvl)
        }
    }
    getMaxNum(e) {
        var t = this.m_heroData.curEatVal,
        i = this.m_heroData.heroTable.maxEat,
        i = Math.ceil((i - t) / e.foodCfg.eatVal),
        s = Math.min(e.itemNum, i);
        let a = 0;
        var r = this.m_heroData.eatExp,
        t = Data.getHeroLvlUp(this.m_heroData.eatLvl);
        let n = Math.ceil((t.exp - r) / e.foodCfg.exp),
        o = t.exp;
        for (; n < s; ) {
            var l = Data.getHeroLvlUp(this.m_heroData.eatLvl + a + 1);
            if (!l)
                break;
            o += l.exp,
            n = Math.ceil((o - r) / e.foodCfg.exp),
            a++
        }
        return Math.min(s, n)
    }
    getAddLv() {
        var e = this.m_lst_Food.selectedItem;
        if (!e)
            return 0;
        var t = this.m_heroData.eatExp,
        e = e.foodCfg.exp,
        i = this.m_view_Count.count * e;
        let s = 0,
        a = 0;
        var r = Data.getHeroLvlUp(this.m_heroData.eatLvl);
        for (s += r.exp - t; i > s && (r = Data.getHeroLvlUp(this.m_heroData.eatLvl + a + 1)); )
            a++, s += r.exp;
        return a
    }
}
r([n(c.COUNT_CHANGE)], To.prototype, "changeCountNum", null);
class Eo extends t.hunt.views.card.HeroPropViewUI {
    constructor(e) {
        super(),
        this.m_heroId = e,
        this.m_heroData = O.hero.getHero(this.m_heroId)
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    refresh() {
        this.m_heroData = O.hero.getHero(this.m_heroId),
        this.updateView()
    }
    updateView() {
        var e = O.bag.getFoodList(),
        t = this.m_heroData.curEatVal,
        i = this.m_heroData.heroTable.maxEat;
        this.m_txt_Lv0.text = S(1042, ""),
        this.m_txt_Lv1.text = this.m_heroData.eatLvl + "",
        60 <= this.m_heroData.eatLvl ? (this.m_txt_Val.text = "", this.m_txt_Max.text = "Max", this.m_img_Tip.visible = !1) : (this.m_txt_Val.text = t + "", this.m_txt_Val.color = i <= t ? o.Green : o.White, this.m_txt_Max.text = "/" + i, this.m_img_Tip.visible = t < i && !!e.length),
        i <= t || !e.length ? (this.m_img_EatIco.skin = i <= t ? "hunt/ui_card/eat_ico_1.png" : "hunt/ui_card/eat_ico_0.png", this.m_img_EatIco.rotation = 0, this.m_ani_Btn.visible = !1) : e.length && (this.m_img_EatIco.skin = "hunt/ui_card/eat_ico_0.png", this.m_ani_Btn.visible = !0),
        this.m_lst_Prop.array = this.m_heroData.heroAllProps
    }
    onClickBtnFeed() {
        u(To, {
            params: [this.m_heroId]
        })
    }
    onClickInfo() {
        u(Na, {
            params: [this.m_heroId]
        })
    }
}
r([n(c.HERO_CHANGE)], Eo.prototype, "refresh", null);
class Mo extends t.hunt.views.card.ChangeEquipDlgUI {
    constructor(e, t = 0) {
        super(),
        this.m_lastIndex = -1,
        this.m_heroData = O.hero.getHero(e),
        this.m_part = t
    }
    onDestroy() {
        super.onDestroy(),
        O.event(c.HERO_EQUIP_CHANGE)
    }
    onAwake() {
        super.onAwake(),
        this.m_txt_Title.text = S(1044, S(it[this.m_part + 1]));
        var s = O.bag.getEquipList(!1, this.m_part + 1);
        let a = [];
        var e = this.m_heroData.equips[this.m_part];
        let r = Data.getEquip(e);
        for (let i = 0; i < s.length; i++)
            for (let e = 0, t = s[i].itemNum || 1; e < t; e++) {
                let e = Object.assign({}, s[i]);
                e.notShowName = !0,
                e.itemNum = 0,
                e.hasBetter = r && e.equipCfg.seriesName == r.seriesName && e.equipCfg.lvl > r.lvl,
                a.push(e)
            }
        a.sort((e, t) => {
            if (e.itemCfg.quality != t.itemCfg.quality)
                return t.itemCfg.quality - e.itemCfg.quality;
            if (r) {
                if (r.seriesName == e.equipCfg.seriesName)
                    return -1;
                if (r.seriesName == t.equipCfg.seriesName)
                    return 1
            }
            return e.equipCfg.seriesName == t.equipCfg.seriesName ? t.itemId - e.itemId : e.itemId - t.itemId
        }),
        e && a.unshift({
            itemId: e,
            itemCfg: Data.getItem(e),
            equipCfg: Data.getEquip(e),
            notShowName: !0,
            isCurEquip: !0
        }),
        this.m_lst_Equip.array = a,
        this.m_lst_Equip.selectedIndex = 0
    }
    updateEquipInfo() {
        let e = this.m_lst_Equip.selectedItem;
        if (e) {
            this.m_box_Equip.visible = !0,
            this.m_txt_NoEquip.visible = !1,
            this.m_view_Item.dataChanged(null, e),
            this.m_txt_Equip.text = S(e.itemCfg.name),
            this.m_txt_Part.text = "(" + S(it[e.equipCfg.type]) + ")";
            let t = [],
            i = (e.equipCfg.props.forEach(e => {
                    t.push({
                        isAdd: !0,
                        propId: e.key,
                        propVal: e.value
                    })
                }), this.m_lst_Prop.array = t, []);
            e.equipCfg.viceProps.forEach(e => {
                i.push({
                    isAdd: !0,
                    propId: e.key,
                    propVal: e.value
                })
            }),
            this.m_lst_OtherProp.array = i;
            var a = e.equipCfg.skills;
            let s = [];
            for (let e = 0; e < a.length; e++)
                s.push({
                    skillId: a[e][0],
                    skillLv: a[e][1],
                    skillCfg: Data.getSkillExecute(a[e][0]),
                    showName: !1
                });
            this.m_lst_Skill.array = s,
            this.m_lst_Skill.visible = 0 < s.length,
            this.m_txt_Effect.visible = 0 < s.length
        } else
            this.m_txt_NoEquip.visible = !0, this.m_box_Equip.visible = !1, this.m_btn_Change.disabled = !0
    }
    onSelectEquip() {
        if (-1 != this.m_lst_Equip.selectedIndex) {
            this.updateEquipInfo();
            var t = this.m_lst_Equip.selectedItem;
            if (t) {
                if (-1 != this.m_lastIndex) {
                    let e = this.m_lst_Equip.getItem(this.m_lastIndex);
                    e.showSelect = !1,
                    this.m_lst_Equip.changeItem(this.m_lastIndex, e)
                }
                let e = this.m_lst_Equip.getItem(this.m_lst_Equip.selectedIndex);
                e.showSelect = !0,
                this.m_lst_Equip.changeItem(this.m_lst_Equip.selectedIndex, e),
                this.m_lastIndex = this.m_lst_Equip.selectedIndex,
                this.m_btn_Change.disabled = !!t.isEquip,
                this.m_btn_UnWear.visible = !!e.isCurEquip,
                this.m_btn_Change.visible = !e.isCurEquip
            }
        }
    }
    onSelectSkill() {
        -1 != this.m_lst_Skill.selectedIndex && (this.m_lst_Skill.selectedIndex = -1)
    }
    onClickChange() {
        var e = this.m_lst_Equip.selectedItem;
        e && O.hero.reqWearEquip(this.m_heroData.id, e.itemId).then(() => {
            I.instance.playSound(v.SE_Equip),
            this.closeDialog()
        })
    }
    onClickUnWear() {
        var e = this.m_lst_Equip.selectedItem;
        e && O.hero.reqUnWearEquip(this.m_heroData.id, e.itemId).then(() => {
            this.closeDialog()
        })
    }
}
class Ro extends t.hunt.views.card.HeroEquipViewUI {
    constructor(e) {
        super(),
        this.m_tlArr = [],
        this.m_heroId = e,
        this.m_heroData = O.hero.getHero(e)
    }
    onAwake() {
        super.onAwake(),
        this.m_box_Equip.on(Laya.Event.CLICK, this, this.onClickEquip),
        this.updateView(),
        this.m_ani_Show.on(Laya.Event.COMPLETE, null, () => {
            this.m_ani_Show.visible = !1
        })
    }
    onDestroy() {
        super.onDestroy(),
        this.clearTimeLine(),
        this.m_box_Equip.off(Laya.Event.CLICK, this, this.onClickEquip)
    }
    refresh() {
        this.m_heroData = O.hero.getHero(this.m_heroId),
        this.updateView()
    }
    updateView() {
        var a,
        e = !!this.m_heroData.eatLvl;
        if (this.m_box_Con.visible = e, this.m_txt_Not.visible = !e, e) {
            let e = this.m_heroData.heroEquipProps,
            i = (e.forEach(e => {
                    e.isAdd = !0
                }), this.m_heroData.heroEquipInfos),
            s = !1;
            for (let t = 0; t < i.length; t++) {
                this["m_img_Equip" + t].visible = !i[t];
                let e = O.bag.getEquipList(!1, t + 1);
                i[t] ? (14 != i[t].itemCfg.quality ? (a = e.find(e => e.equipCfg.seriesName == i[t].equipCfg.seriesName && e.equipCfg.lvl > i[t].equipCfg.lvl), i[t].hasBetter = !!a) : i[t].hasBetter = !1, this["m_view_Equip" + t].dataChanged(null, i[t])) : (this["m_view_Equip" + t].dataSource = null, this["m_view_Equip" + t].dataChanged()),
                this["m_img_Add" + t].visible = !i[t] && 0 < e.length,
                i[t] && (s = !0)
            }
            this.m_img_Info.visible = s,
            this.resetAddImgAni()
        }
    }
    onClickEquip(e) {
        let a = e.target.name;
        if (a) {
            let t = e.target,
            i = a.replace("Equip", ""),
            s = this.m_heroData.equips[+i];
            u(Mo, {
                params: [this.m_heroData.id, +i]
            }).then(e => {
                e.wait().then(() => {
                    var e = this.m_heroData.equips[+i];
                    e && s != e && (this.m_ani_Show.pos((e = [[-36, -43], [113, -43], [-36, 82], [263, -43], [263, 82], [113, 82]])[i][0], e[i][1]), this.m_ani_Show.visible = !0, this.m_ani_Show.play(0, !1), t.doChangeEquipAni && t.doChangeEquipAni())
                })
            })
        }
    }
    onClickInfo(e) {
        u(qa, {
            params: [this.m_heroData]
        })
    }
    resetAddImgAni() {
        this.clearTimeLine();
        for (let e = 0; e < 6; e++) {
            let t = this["m_img_Add" + e];
            var i = t.visible;
            if (t.scale(1, 1), i) {
                let e = new Laya.TimeLine;
                this.m_tlArr.push(e),
                e.to(t, {
                    scaleX: 1.2,
                    scaleY: 1.2
                }, 600).to(t, {
                    scaleX: 1,
                    scaleY: 1
                }, 600),
                e.play(0, !0)
            }
        }
    }
    clearTimeLine() {
        this.m_tlArr.forEach(e => {
            e.destroy()
        }),
        this.m_tlArr.length = 0
    }
}
r([n(c.HERO_CHANGE)], Ro.prototype, "refresh", null);
class Bo extends t.hunt.views.card.HeroSkillViewUI {
    constructor(e) {
        super(),
        this.m_heroId = e,
        this.m_heroData = O.hero.getHero(e)
    }
    onAwake() {
        super.onAwake(),
        this.m_ani_Lock.on(Laya.Event.COMPLETE, null, () => {
            this.m_ani_Lock.visible = !1
        }),
        this.updateView(),
        Bo.s_newSkillAni && this.showLockAni()
    }
    refresh() {
        this.m_heroData = O.hero.getHero(this.m_heroId),
        this.updateView()
    }
    updateView() {
        let e = this.m_heroData.heroAndSkinSkill,
        i = w.get(w.s_skinSkill) || {},
        s = [];
        e.forEach((e, t) => {
            s.push({
                skillId: e,
                skillCfg: Data.getSkillExecute(e),
                showName: !0,
                showNew: e && 2 == t && !i[e]
            })
        }),
        this.m_lst_Skill.array = s
    }
    showLockAni() {
        this.m_ani_Lock.isPlaying || (this.m_ani_Lock.once(Laya.Event.COMPLETE, null, () => {
                Bo.s_newSkillAni = !1
            }), this.m_ani_Lock.visible = !0, this.m_ani_Lock.play(0, !1), I.instance.playSound(v.SE_Unlock))
    }
}
Bo.s_newSkillAni = !1,
r([n(c.HERO_CHANGE)], Bo.prototype, "refresh", null),
r([n(c.JUMP_HERO_SKILL)], Bo.prototype, "showLockAni", null);
class No extends t.hunt.views.card.HeroSkinItemUI {
    constructor() {
        super(...arguments),
        this.m_index = 0
    }
    dataChanged(e, t) {
        var i;
        t = t || this.dataSource,
        this.m_index = e,
        -1 == t.heroId ? this.visible = !1 : (this.visible = !0, e = Data.getItem(t.avatarId || t.skinId), this.m_img_Bg.skin = {
                    0: "hunt/ui_card/cardBgN.png",
                    1: "hunt/ui_card/cardBgR.png",
                    2: "hunt/ui_card/cardBgSR.png",
                    3: "hunt/ui_card/cardBgSSR.png",
                    4: "hunt/ui_card/cardBgSP.png"
                }
                [e.rare || 0], 4 == e.rare ? (this.m_ani_Card.visible = !0, this.m_ani_Card.source = "hunt/ue/26.atlas") : 3 == e.rare ? (this.m_ani_Card.visible = !0, this.m_ani_Card.source = "hunt/ue/27.atlas") : this.m_ani_Card.visible = !1, this.m_img_Hero.skin = t.skinId && `hunt/ui_hero/s${t.avatarId}.png`, this.m_img_Mask.visible = !t.isGet, this.m_img_Select.visible = !!t.isSelect, this.m_view_Skill.zOrder = t.isSelect ? 2 : 1, this.m_img_Mask.zOrder = t.isSelect ? 1 : 2, this.m_txt_Name.text = e && S(e.name), (e = Data.getHeroSkin(t.skinId)) ? (e = {
                        skillId: e.skillId,
                        skillCfg: Data.getSkillExecute(e.skillId),
                        showName: !1
                    }, this.m_view_Skill.visible = !0, this.m_view_Skill.dataChanged(null, e)) : this.m_view_Skill.visible = !1, e = (w.get(w.s_heroSkin) || {})[t.heroId] || {}, i = O.hero.getHero(t.heroId), this.m_view_New.visible = i.eatLvl && t.isGet && !e[t.skinId])
    }
}
class Po extends t.hunt.views.card.HeroSkinViewUI {
    constructor(e) {
        super(),
        this.m_lastIndex = -1,
        this.m_selectAvatar = -1,
        this.m_isShow = !0,
        this.m_canMouseDown = !0,
        this.m_isMouseDown = !1,
        this.m_changeDir = 0,
        this.m_isMouseMove = !1,
        this.m_skinArr = [],
        this.m_newSkillGet = [],
        this.m_heroId = e,
        this.m_heroData = O.hero.getHero(e)
    }
    onDestroy() {
        super.onDestroy(),
        this.checkSkillStorage()
    }
    onAwake() {
        super.onAwake(),
        this.m_box_Ele.x -= .5 * Mmobay.adaptOffsetWidth,
        this.m_img_Mask.width += Mmobay.adaptOffsetWidth,
        this.m_pan_Skin.on(Laya.Event.MOUSE_DOWN, this, this.onPanelMouse),
        this.m_pan_Skin.on(Laya.Event.MOUSE_UP, this, this.onPanelMouse),
        this.m_pan_Skin.on(Laya.Event.MOUSE_OUT, this, this.onPanelMouse),
        this.m_pan_Skin.on(Laya.Event.MOUSE_MOVE, this, this.onPanelMouse),
        this.m_pan_Skin.hScrollBar.on(Laya.Event.CHANGE, this, this.onScrollChange),
        this.updateView()
    }
    resetData() {
        this.m_heroData = O.hero.getHero(this.m_heroId),
        this.m_lastIndex = -1,
        this.m_selectAvatar = -1,
        this.updateView()
    }
    updateView() {
        let e = this.m_heroData.heroTable.skins,
        i = 0 < this.m_heroData.eatLvl,
        s = this.m_heroData.wearingSkin;
        var t = {
            heroId: -1
        };
        let a = [t],
        r = (a.push({
                heroId: this.m_heroId,
                skinId: this.m_heroId,
                avatarId: this.m_heroId,
                isGet: !0,
                isWear: !s,
                hasHero: i
            }), e.forEach(e => {
                let t = {
                    heroId: this.m_heroId,
                    skinId: e,
                    avatarId: e,
                    isGet: this.m_heroData.checkHasSkin(e),
                    isWear: !1,
                    hasHero: i
                };
                s && s.skinID == e && (t.avatarId = s.avatarID, t.isWear = !0),
                a.push(t)
            }), a.push(t), this.m_pan_Skin.destroyChildren(), a.forEach((t, i) => {
                E(No, {}).then(e => {
                    e.on(Laya.Event.CLICK, this, this.onCellMouse),
                    e.pos(170 * i, 35),
                    e.dataSource = t,
                    this.m_pan_Skin.addChild(e),
                    e.dataChanged(i, t)
                })
            }), (this.m_skinArr = a).findIndex(e => e.isWear));
        -1 == r && (r = 1),
        Laya.timer.callLater(this, () => {
            this.onScrollChange(),
            this.selectSkin(r - 1)
        })
    }
    onPanelMouse(t) {
        if (t.type == Laya.Event.MOUSE_DOWN)
            this.m_canMouseDown && (this.m_isMouseDown = !0);
        else if (t.type == Laya.Event.MOUSE_MOVE)
            this.m_isMouseDown && (this.m_isMouseMove = !0);
        else if (this.m_canMouseDown = !1, this.m_isMouseMove) {
            var t = this.m_pan_Skin.hScrollBar,
            i = t.max,
            t = t.value;
            let e = Math.ceil((t + 85) / 170) - 1;
            var s = Math.floor(i / 170);
            e > s && (e = s),
            t < 0 || i < t ? (s = this.m_pan_Skin.hScrollBar.elasticBackTime, Laya.timer.once(s, this, this.selectSkin, [e])) : this.selectSkin(e)
        } else
            Laya.timer.once(100, this, () => {
                this.m_canMouseDown = !0,
                this.m_isMouseDown = !1
            })
    }
    onCellMouse(e) {
        e = e.currentTarget.x,
        e = Math.floor(e / 170) - 1;
        this.selectSkin(e)
    }
    onScrollChange() {
        var e = this.m_pan_Skin.hScrollBar,
        i = e.value,
        e = e.max;
        if (!(i < 0 || e < i)) {
            var t = this.m_pan_Skin.numChildren;
            for (let e = 0; e < t; e++) {
                let t = this.m_pan_Skin.getChildAt(e);
                if (t.visible) {
                    let e = Math.abs(t.x - i - 170);
                    170 < e && (e = 170);
                    var s = 1 + (e = Math.abs(e - 170)) / 170 * .2;
                    t.m_box_Con.scale(s, s)
                }
            }
        }
    }
    selectSkin(e) {
        let t = this.m_pan_Skin.hScrollBar;
        var i = t.max,
        i = Math.floor(i / 170);
        i < e ? e = i : e < 0 && (e = 0);
        let s = 0,
        a = 170 * e;
        a != t.value && (i = Math.max(85, Math.abs(a - t.value)), s = i / 170 * 200, t.stopScroll(), Laya.Tween.to(t, {
                value: a
            }, s)),
        Laya.timer.once(s + 10, this, () => {
            t.value = a,
            this.m_canMouseDown = !0,
            this.m_isMouseDown = !1,
            this.m_isMouseMove = !1,
            this.changeSkinState(e + 1)
        })
    }
    changeSkinState(t) {
        if (this.m_lastIndex != t) {
            if (-1 != this.m_lastIndex) {
                let t = this.m_pan_Skin.getChildAt(this.m_lastIndex);
                if (t) {
                    let e = t.dataSource;
                    e.isSelect = !1,
                    t.dataChanged(this.m_lastIndex, e)
                }
            }
            let e = this.m_pan_Skin.getChildAt(t);
            if (e) {
                let i = e.dataSource;
                if (i.isSelect = !0, e.dataChanged(t, i), i.isGet) {
                    let e = w.get(w.s_heroSkin) || {},
                    t = e[i.heroId] || {};
                    var s = O.hero.getHero(i.heroId);
                    !t[i.skinId] && s.eatLvl && (t[i.skinId] = 1, e[i.heroId] = t, w.set(w.s_heroSkin, e))
                }
                -1 == this.m_lastIndex ? this.m_changeDir = 0 : this.m_changeDir = t < this.m_lastIndex ? 1 : 2,
                this.updateBtnState(i)
            }
            this.m_lastIndex = t
        }
    }
    onClickChange(e) {
        var t = this.m_skinArr.find(e => e.isSelect);
        t && (t.heroId == t.skinId ? t.hasHero && O.hero.reqUnWearSkin(t.heroId).then(e => {
                O.event(c.HERO_CHANGE)
            }) : u(xa, {
                params: [t.heroId, t.skinId]
            }))
    }
    onClickHide(e) {
        let t = this.m_isShow ? this.aniHide : this.aniOpen;
        t.play(0, !1),
        this.m_img_Hide.mouseEnabled = !1,
        this.m_img_Hide.scaleY = this.m_isShow ? -1 : 1,
        Laya.timer.once(200, this, () => {
            this.m_img_Hide.mouseEnabled = !0
        }),
        this.m_isShow = !this.m_isShow
    }
    onClickJumpTo(e) {
        Bo.s_newSkillAni = !0,
        O.event(c.JUMP_HERO_SKILL),
        this.resetUIShow()
    }
    updateBtnState(e) {
        if (e && e.avatarId != this.m_selectAvatar)
            if (this.m_selectAvatar = e.avatarId, O.event(c.HERO_SKIN_CHANGE, [e.avatarId, this.m_changeDir]), e.heroId == e.skinId)
                this.m_btn_Change.visible = e.hasHero, this.m_btn_Change.disabled = e.isWear, this.m_btn_Change.label = e.isWear ? S(1104) : S(1103), this.m_ani_Btn.visible = !!e.isGet && !e.isWear, this.m_box_Ele.visible = !1;
            else {
                this.m_btn_Change.visible = !!e.isGet,
                this.m_btn_Change.disabled = !1,
                this.m_btn_Change.label = S(1107);
                var t = this.m_heroData.wearingSkin,
                e = t && t.skinID == e.skinId;
                if (this.m_box_Ele.visible = !!e, e) {
                    var s = t.eles || [];
                    let i = [],
                    e = 0;
                    for (const r in _)
                        s[e] && i.push({
                            id: _[r],
                            curNum: s[e],
                            key: r
                        }), e++;
                    for (let t = 0; t < 4; t++) {
                        let e = this.m_box_Ele.getChildAt(t);
                        var a = i[t];
                        e.visible = !!a,
                        a && e.setData(a)
                    }
                }
            }
    }
    showNewSkill(e) {
        this.checkSkillStorage(),
        this.m_box_Con.visible = !1,
        this.m_img_Hide.visible = !1,
        this.aniSkill.play(0, !1);
        e = e.shift();
        let t = Object.assign({}, e);
        t.skillLv = 0,
        t.showName = !1,
        t.showNew = !0,
        this.m_view_Skill.visible = !0,
        this.m_view_Skill.dataChanged(null, t),
        this.m_txt_Name.text = S(e.skillCfg.name),
        this.m_txt_SkillInfo.text = S(e.skillCfg.info),
        (w.get(w.s_skinSkill) || {})[e.skillId] || this.m_newSkillGet.push(e.skillId)
    }
    resetUIShow() {
        this.m_box_Con.visible = !0,
        this.m_img_Hide.visible = !0,
        this.m_img_NewSkill.visible = !1;
        let e = this.m_skinArr.findIndex(e => e.isWear);
        -1 == e && (e = 1),
        this.selectSkin(e - 1)
    }
    checkSkillStorage() {
        if (this.m_newSkillGet.length) {
            let t = w.get(w.s_skinSkill) || {};
            this.m_newSkillGet.forEach(e => {
                t[e] = 1
            }),
            w.set(w.s_skinSkill, t)
        }
        this.m_newSkillGet.length = 0
    }
}
r([n(c.HERO_CHANGE)], Po.prototype, "resetData", null),
r([n(c.HERO_NEW_SKINSKILL)], Po.prototype, "showNewSkill", null),
r([n(c.RESET_HERO_SKIN_VIEW)], Po.prototype, "resetUIShow", null);
class qo extends t.hunt.views.card.HeroPropGrowUI {
    constructor(e) {
        super(),
        this.m_heroData = O.hero.getHero(e)
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        this.m_lst_Prop.array = this.m_heroData.heroTable.props
    }
}
class Uo extends t.hunt.views.card.HeroInfoDlgUI {
    constructor(e) {
        super(),
        this.m_mask = new So,
        this.m_isPlaying = !1,
        this.m_avatarId = -1,
        this.m_avatarUrls = [],
        this.m_heroData = e
    }
    onAwake() {
        super.onAwake(),
        this.addTitle(S(this.m_heroData.heroTable.name));
        var e = Mmobay.adaptOffsetWidth;
        let i = this.m_tab_Info.items || [];
        if (0 < e) {
            var e = this.m_tab_Info.width + e,
            s = Math.ceil(e / i.length),
            e = s * i.length;
            this.m_tab_Info.width = e;
            for (let t = 0, e = i.length; t < e; t++) {
                let e = i[t];
                e.enableAnimating = !1,
                e.width = s,
                e.x = t * s
            }
        } else
            i.forEach(e => {
                e.enableAnimating = !1
            });
        if (this.m_heroData.eatLvl) {
            let e = w.get(w.s_heroInfo) || {};
            e[this.m_heroData.id] = 1,
            w.set(w.s_heroInfo, e)
        }
        this.m_mask.bindTarget(this.m_img_Bar2, this.m_img_Bar2.width / 2, this.m_img_Bar2.height / 2, null, null, this.m_txt_Produce),
        this.updateView(),
        this.m_img_Hero.on(Laya.Event.CLICK, this, e => {
            this.m_isPlaying || (this.m_isPlaying = !0, I.instance.stopSound(), I.instance.playCv(this.m_avatarId, lt.Click, Laya.Handler.create(this, () => {
                        this.m_isPlaying = !1
                    })))
        })
    }
    onDestroy() {
        super.onDestroy(),
        I.instance.stopSound(),
        this.m_img_Hero.offAll(),
        this.m_mask && this.m_mask.dispose(),
        Bo.s_newSkillAni = !1,
        this.m_avatarUrls.length && (this.m_avatarUrls.forEach(e => {
                Laya.Loader.clearRes(e)
            }), this.m_avatarUrls.length = 0)
    }
    updateView() {
        var e = `hunt/ui_hero/${this.m_heroData.avatarId}.png`,
        e = (this.addAvatarUrl(e), this.m_img_Hero.skin = e, this.m_avatarId = this.m_heroData.avatarId, this.m_heroData.id);
        this.m_box_Stack.setupCls([{
                    cls: this.m_heroData.eatLvl ? Eo : qo,
                    params: [e]
                }, {
                    cls: Ro,
                    params: [e]
                }, {
                    cls: Bo,
                    params: [e, !0]
                }, {
                    cls: Po,
                    params: [e]
                }
            ]),
        this.m_tab_Info.selectedIndex = 0
    }
    updateRed() {
        this.m_img_TipSkill.visible = 2 != this.m_tab_Info.selectedIndex && O.hero.checkProdect(this.m_heroData) && !!R.heros[this.m_heroData.id]
    }
    onSelectInfo(e) {
        this.changeBgHero(this.m_heroData.avatarId);
        var t = O.hero.heroMap[this.m_heroData.id];
        this.m_img_TipEquip.visible = 1 != e && t && (this.m_heroData.hasBetterEquip || O.hero.checkHasEquip(this.m_heroData)),
        this.m_img_TipSkin.visible = 3 != e && this.m_heroData.hasNewSkin,
        this.setEquipAverage(),
        this.updateRed(),
        this.m_box_Prodece.visible = 2 == e && t && !!O.hero.getProduceSkill(this.m_heroData),
        2 == e && this.updateProduce(),
        3 == e && O.event(c.RESET_HERO_SKIN_VIEW),
        this.m_box_Stack.changeIndex(e)
    }
    setEquipAverage() {
        var e;
        1 != this.m_tab_Info.selectedIndex ? this.m_box_Average.visible = !1 : (e = this.m_heroData.heroEquipAverage, this.m_box_Average.visible = 0 < e, this.m_txt_Average.text = e + "")
    }
    onClickProduce() {
        this.m_mask && 1 != this.m_mask.percent ? u(Ao, {
            params: [this.getProduceItem(), this.m_mask.showTime]
        }) : O.hero.reqProduce(this.m_heroData.id, O.hero.getProduceSkill(this.m_heroData)).then(() => {
            this.updateProduce()
        })
    }
    getProduceItem() {
        var e = O.hero.getProduceSkill(this.m_heroData),
        e = Data.getSkillProduce(e);
        return Data.getLoot(e.lootId).weightOne[0].k
    }
    updateProduce() {
        var e,
        t,
        i,
        s,
        a = O.hero.getProduceSkill(this.m_heroData);
        !a || (a = Data.getSkillProduce(a)) && (a = a.cd, e = (i = this.m_heroData.produceTime) + 1e3 * a, t = Date.newDate().getTime(), i = 0 == i || e < t, (s = this.getProduceItem()) && (this.m_img_Item.skin = `hunt/ui_item/${Data.getItem(s).icon}.png`), i ? (this.m_mask.clearTween(), this.m_mask.percent = 1, this.setProduceVisible(!0), this.aniBox.play(0, !0)) : (this.aniBox.stop(), this.setProduceVisible(!1), this.m_mask.showTime = e, this.m_mask.clearTween(), this.m_mask.percent = 1 - (e - t) / a / 1e3, this.m_mask.tweenValue(1, e - t, Laya.Handler.create(this, () => {
                        this.setProduceVisible(!0),
                        this.aniBox.play(0, !0)
                    }))))
    }
    setProduceVisible(e = !1) {
        this.m_txt_Produce.visible = !e,
        this.m_img_Bar2.visible = !e,
        this.m_img_Bar1.visible = e,
        this.m_img_Box.visible = e,
        this.m_img_Item.visible = !e,
        this.m_img_RedP.visible = e
    }
    changeBgHero(e, t = 0) {
        if (e != this.m_avatarId) {
            var i = `hunt/ui_hero/${e}.png`;
            if (t) {
                this.m_img_Hero.skin = i,
                this.m_img_Hero2.skin = `hunt/ui_hero/${this.m_avatarId}.png`;
                let e = 1 == t ? this.aniChangeLeft : this.aniChangeRight;
                e.play(0, !1)
            } else
                this.m_img_Hero.skin = i;
            this.addAvatarUrl(i),
            this.m_avatarId = e
        }
    }
    changeSelectSkill() {
        this.m_tab_Info.selectedIndex = 2
    }
    addAvatarUrl(e) {
        e && -1 == this.m_avatarUrls.indexOf(e) && this.m_avatarUrls.push(e)
    }
}
r([n(c.HERO_CHANGE)], Uo.prototype, "updateRed", null),
r([n(c.HERO_EQUIP_CHANGE)], Uo.prototype, "setEquipAverage", null),
r([n(c.HERO_SKIN_CHANGE)], Uo.prototype, "changeBgHero", null),
r([n(c.JUMP_HERO_SKILL)], Uo.prototype, "changeSelectSkill", null);
class Ho extends t.hunt.views.card.HeroCardItemUI {
    dataChanged(e, t) {
        var i = (t = t || this.dataSource).hero,
        s = (this.m_txt_Name.text = S(i.heroTable.name), this.m_img_Hero.skin = `hunt/ui_hero/s${t.heroBlock?i.id:i.avatarId}.png`, {
        0: "hunt/ui_card/cardBgN.png",
        1: "hunt/ui_card/cardBgR.png",
        2: "hunt/ui_card/cardBgSR.png",
        3: "hunt/ui_card/cardBgSSR.png",
        4: "hunt/ui_card/cardBgSP.png"
    });
        this.m_img_Bg.skin = t.heroBlock ? s[0] : s[i.heroSkinTable.rare || 0],
        t.heroBlock ? this.m_ani_Card.visible = !1 : 4 == i.heroSkinTable.rare ? (this.m_ani_Card.visible = !0, this.m_ani_Card.source = "hunt/ue/26.atlas") : 3 == i.heroSkinTable.rare ? (this.m_ani_Card.visible = !0, this.m_ani_Card.source = "hunt/ue/27.atlas") : this.m_ani_Card.visible = !1;
        let a = 0;
        var s = 0 < (a = t.notShowLv ? -1 : i.eatLvl),
        r = (this.m_img_Cover.visible = this.m_img_Lock.visible = !a, this.m_txt_Lv.visible = this.m_img_LvBg.visible = s, this.m_txt_Lv.text = a + "", w.get(w.s_heroInfo) || {});
        this.m_view_New.visible = t.showForList && !r[i.id] && s,
        this.m_img_TipEquip.visible = !1,
        t.showRed && s && (this.m_img_Red.visible = O.hero.checkProdect(i), this.m_img_TipEquip.visible = !this.m_img_Red.visible && (t.hero.hasBetterEquip || O.hero.checkHasEquip(t.hero))),
        this.m_box_Average.visible = !t.heroBlock && 0 < i.heroEquipAverage,
        this.m_txt_Average.text = i.heroEquipAverage + ""
    }
    setKillAni(e, t, i, s) {
        this.m_img_Bg.skin = t,
        this.m_img_Hero.skin = `hunt/ui_hero/s${e}.png`,
        s ? (this.m_ani_Card.source = s, this.m_ani_Card.visible = !0) : this.m_ani_Card.visible = !1,
        this.m_txt_Lv.visible = this.m_img_LvBg.visible = !1,
        this.m_img_Cover.visible = this.m_img_Lock.visible = !1,
        this.m_txt_Name.text = S(i)
    }
    onClickImgBg() {
        var e = this.dataSource;
        e && e.showForList && l(Uo, {
            params: [e.hero]
        }).then(e => {
            e.wait().then(() => {
                O.event(c.HERO_CHANGE)
            })
        })
    }
}
class Oo extends t.hunt.views.common.PropViewUI {
    dataChanged(e, i) {
        if (i ? this.dataSource = i : i = this.dataSource, i.color && (this.m_txt_Prop.color = i.color), this.m_txt_Prop.text = S(st[i.propId]), !i.fromGrow) {
            let e,
            t = [g.critical, g.dodge, g.hpPercent, g.atkPercent];
            e = -1 != t.indexOf(i.propId) ? (i.propVal / 100).toFixed(1) + "%" : Math.floor(i.propVal),
            this.m_txt_Value.text = (i.isAdd ? "+" : "") + e,
            this.m_txt_Value.font = i.isAdd ? "3" : "2",
            this.m_txt_Value.scale(.7, .7)
        }
        i.needAni ? (this.arrowAni.play(0, !0), this.m_img_Arrow.visible = !0) : (this.arrowAni.stop(), this.m_img_Arrow.visible = !1),
        this.m_view_New.visible = !!i.needNew;
        let t;
        t = i.propId == g.hpPercent ? g.hp : i.propId == g.atkPercent ? g.attack : i.propId,
        this.m_img_Prop.skin = `hunt/ui_comm/icoProp_${t}.png`
    }
}
class Vo extends t.hunt.views.common.SkillTipsUI {
    constructor(e, t, i, s, a) {
        super(),
        this.m_title = "",
        this.m_desc = "",
        this.m_px = 0,
        this.m_py = 0,
        this.m_gid = -1,
        this.m_title = t,
        this.m_desc = e,
        this.m_px = i,
        this.m_py = s,
        this.m_gid = a
    }
    static showTips(e) {
        Vo.s_skillTips ? Vo.s_skillTips.update(...e) : E(Vo, {
            params: e
        }).then(e => {
            Vo.s_skillTips ? e.destroy() : Se(Vo.s_skillTips = e, H.Toast)
        })
    }
    onAwake() {
        super.onAwake(),
        Laya.stage.on(Laya.Event.CLICK, this, this.onClickStage),
        this.centerX = 0,
        this.refresh()
    }
    onDestroy() {
        super.onDestroy(),
        Laya.stage.off(Laya.Event.CLICK, this, this.onClickStage),
        Vo.s_skillTips = null
    }
    update(e, t, i, s, a) {
        this.m_title = t,
        this.m_desc = e,
        this.m_px = i,
        this.m_py = s,
        this.m_gid == a ? this.destroy() : (this.m_gid = a, this.refresh())
    }
    refresh() {
        this.m_txt_Title.changeText(this.m_title),
        Object.assign(this.m_div_Desc.style, {
            fontSize: 18,
            bold: !0,
            color: "#51413B",
            leading: 3,
            wordWrap: !0
        }),
        this.m_div_Desc._element.width = 440,
        this.m_div_Desc.innerHTML = this.m_desc;
        var e = this.m_div_Desc.y + this.m_div_Desc.height + 20;
        this.height = e,
        this.m_py > .5 * Laya.stage.height ? (this.m_img_Top.visible = !1, this.m_img_Bottom.visible = !0, this.y = this.m_py - 5 - e, this.m_img_Bottom.x = Math.min(this.m_img_Bg.width - 30, this.m_px - 50)) : (this.m_img_Top.visible = !0, this.m_img_Bottom.visible = !1, this.y = this.m_py + e / 2 + 15, this.m_img_Top.x = this.m_px - 50)
    }
    onClickStage(e) {
        e.target instanceof Fo || this.destroy()
    }
}
class Fo extends t.hunt.views.common.SkillViewUI {
    onAwake() {
        this.on(Laya.Event.CLICK, this, this.onClickBg)
    }
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_img_Lock.visible = !t.skillCfg,
        this.m_img_Skill.visible = !!t.skillCfg,
        this.m_txt_Star.visible = !!t.skillLv,
        this.m_img_Star.visible = !!t.skillLv,
        this.m_txt_Star.text = t.skillLv + "",
        this.m_img_Arrow.visible = !!t.needAni,
        t.needAni ? this.arrowAni.play(0, !0) : this.arrowAni.stop(),
        t.skillCfg ? (this.m_img_Skill.skin = `hunt/ui_skill/${t.skillCfg.icon}.png`, this.m_img_Bg.skin = `hunt/ui_comm/sborder${2==+t.skillCfg.iconBg?2:1}.png`, this.m_txt_SkillName.visible = !!t.showName, this.m_txt_SkillName.text = t.showName && S(+t.skillCfg.name)) : (this.m_img_Bg.skin = "hunt/ui_comm/sborder2.png", this.m_txt_SkillName.text = ""),
        this.m_view_New.visible = !!t.showNew
    }
    onClickBg(e) {
        var t,
        i;
        e.stopPropagation(),
        !this.dataSource || (e = this.dataSource.skillCfg) && (t = this.m_img_Bg.localToGlobal(new Laya.Point(this.m_img_Bg.x, this.m_img_Bg.y)), i = this.dataSource.skillLv || 1, i = [Fo.s_descObjVal[e.id] ? S(e.info, i * Fo.s_descObjVal[e.id]) : S(e.info), S(e.name), t.x + this.width / 2 * this.scaleX, t.y, this.$_GID], Vo.showTips(i))
    }
}
Fo.s_descObjVal = {
    7001: 1,
    7002: 2,
    7003: 10,
    7004: 1,
    7005: 2,
    7006: 2,
    7007: 2,
    7008: 6
};
class Go extends t.hunt.views.card.HeroGrowItemUI {
    dataChanged(e, i) {
        i ? this.dataSource = i : i = this.dataSource,
        this.m_view_Prop.dataChanged(null, {
            propId: i.key,
            fromGrow: !0
        });
        for (let t = 0; t < 5; t++) {
            let e = this.m_box_Con.getChildAt(t);
            i.value > t ? e.skin = "hunt/ui_comm/s9_po4.png" : e.skin = "hunt/ui_comm/s9_po0.png"
        }
    }
}
class Wo extends t.hunt.views.card.HeroPropUpItemUI {
    dataChanged(e) {
        var t = this.dataSource;
        this.m_view_PropL.dataChanged(null, t.old),
        this.m_view_PropR.dataChanged(null, t.new),
        this.m_img_Up.visible = t.old.propVal < t.new.propVal
    }
}
class Yo extends t.hunt.views.card.SkinEleSmallViewUI {
    setData(e) {
        this.m_img_Icon.skin = `hunt/ui_card/ele_${e.key}.png`,
        this.m_txt_Value.text = e.curNum + ""
    }
}
class Xo extends t.hunt.views.common.ItemDetailViewUI {
    setData(a) {
        var r = a.itemId,
        e = a.itemCfg.type,
        n = a.itemCfg;
        if (this.m_pan_Panel.vScrollBarSkin = "", e == m.equip) {
            this.m_box_Equip.visible = !0;
            var o = S(+n.name);
            this.m_txt_Equip.changeText(o);
            let e = Data.getEquip(r),
            t = (this.m_txt_Part.changeText("(" + S(it[e.type]) + ")"), []),
            i = (e.props.forEach(e => {
                    t.push({
                        isAdd: !0,
                        propId: e.key,
                        propVal: e.value
                    })
                }), this.m_lst_Prop.array = t, []);
            e.viceProps.forEach(e => {
                i.push({
                    isAdd: !0,
                    propId: e.key,
                    propVal: e.value
                })
            }),
            this.m_lst_OtherProp.array = i;
            var l = e.skills;
            let s = [];
            for (let e = 0; e < l.length; e++)
                s.push({
                    skillId: l[e][0],
                    skillLv: l[e][1],
                    skillCfg: Data.getSkillExecute(l[e][0]),
                    showName: !1
                });
            this.m_lst_Skill.array = s,
            this.m_lst_Skill.visible = 0 < s.length,
            this.m_txt_Effect.visible = 0 < s.length,
            a.notShowName = !0,
            this.m_box_Hbox.refresh()
        } else
            e == m.cookFood || e == m.food ? (this.m_box_Food.visible = !0, this.m_txt_FoodN.changeText(S(n.name)), this.m_txt_FoodN.changeText(S(n.name)), o = Data.getFood(a.itemId), this.m_txt_Food.changeText(S(1005) + o.eatVal), this.m_txt_Exp.changeText(S(1004) + o.exp)) : (this.m_box_Item.visible = !0, this.m_txt_Item.changeText(S(n.name)), this.m_txt_ItemDes.text = S(n.info));
        a.notShowName = !0,
        this.m_view_Item.dataChanged(null, a)
    }
}
class jo extends t.hunt.views.common.CostViewUI {
    onAwake() {
        super.onAwake()
    }
    onDestroy() {
        super.onDestroy()
    }
    setData(e) {
        e = Vt(e);
        this.m_txt_1.text = e[0] || "0",
        this.m_txt_2.text = " " + e[1] || "0",
        this.m_txt_3.text = " " + e[2] || "0",
        0 == +this.m_txt_1.text ? (this.m_txt_1.visible = this.m_img_1.visible = !1, this.width = 150, 0 == +this.m_txt_2.text ? (this.m_txt_2.visible = this.m_img_2.visible = !1, this.width = 80) : this.m_txt_2.visible = this.m_img_2.visible = !0) : (56 < this.m_txt_1.width ? this.width = 230 + .56 * (this.m_txt_1.width - 56) : this.width = 230, this.m_txt_1.visible = this.m_img_1.visible = !0, this.m_txt_2.visible = this.m_img_2.visible = !0)
    }
}
class Ko extends t.hunt.views.card.SkinEleBigViewUI {
    constructor() {
        super(...arguments),
        this.m_curNum = 0,
        this.m_preNum = 0,
        this.m_showNum = 0
    }
    onDestroy() {
        super.onDestroy(),
        Laya.Tween.clearAll(this),
        Laya.timer.clearAll(this),
        this.m_tlAdd && (this.m_tlAdd.destroy(), this.m_tlAdd = null)
    }
    setData(e) {
        this.m_preNum = this.m_showNum = e.preNum || 0,
        this.m_curNum = e.curNum || 0,
        this.m_txt_Name.text = S(tt[e.id]),
        this.m_img_Icon.skin = `hunt/ui_card/ele_${e.key}.png`,
        this.m_txt_Value.text = this.m_preNum + "",
        e.rollNum && this.m_preNum < this.m_curNum && Laya.timer.loop(300, this, this.playRollNum)
    }
    playRollNum() {
        if (this.m_showNum >= this.m_curNum)
            return Laya.timer.clear(this, this.playRollNum), void this.playAddAni();
        this.m_showNum += 1,
        this.m_txt_Value.text = this.m_showNum + ""
    }
    playAddAni() {
        var e = this.m_curNum - this.m_preNum;
        let t = this.m_txt_Add;
        t.visible = !0,
        t.text = "+" + e;
        var e = this.m_txt_Value.x + this.m_txt_Value.width * this.m_txt_Value.scaleX + 5,
        i = t.width,
        s = t.scaleX,
        a = t.scaleY;
        t.pivotX = .5 * i,
        t.x = e + .5 * i * s;
        let r = this.m_tlAdd = new Laya.TimeLine;
        r.to(t, {
            scaleX: 1.1 * s,
            scaleY: 1.1 * a
        }, 400).to(this.m_txt_Add, {
            scaleX: s,
            scaleY: a
        }, 400),
        r.play(0, !0)
    }
}
class zo extends t.hunt.views.card.SkinListItemUI {
    dataChanged(e, t) {
        t = t || this.dataSource;
        var i = Data.getItem(t.avatarId),
        s = (this.m_img_Bg.skin = {
                0: "hunt/ui_card/cardBgN.png",
                1: "hunt/ui_card/cardBgR.png",
                2: "hunt/ui_card/cardBgSR.png",
                3: "hunt/ui_card/cardBgSSR.png",
                4: "hunt/ui_card/cardBgSP.png"
            }
            [i.rare || 0], 4 == i.rare ? (this.m_ani_Card.visible = !0, this.m_ani_Card.source = "hunt/ue/26.atlas") : 3 == i.rare ? (this.m_ani_Card.visible = !0, this.m_ani_Card.source = "hunt/ue/27.atlas") : this.m_ani_Card.visible = !1, this.m_img_EleHigh.visible = !!t.isHigher, this.m_img_Hero.skin = `hunt/ui_hero/s${t.avatarId}.png`, this.m_txt_Name.text = S(i.name), this.m_txt_Nid.text = t.tokenId + "", i.rare && (this.m_img_Rare.skin = `hunt/ui_card/rare_big${i.rare}.png`), this.m_img_Select.visible = -1 == t.id, t.eles || []);
        let a = 0,
        r = [];
        for (const o in _)
            s[a] && r.push({
                id: _[o],
                curNum: s[a],
                key: o
            }), a++;
        for (let t = 0; t < 4; t++) {
            let e = this["m_view_Ele" + t];
            var n = r[t];
            e.visible = !!n,
            n && e.setData(n)
        }
    }
}
class $o extends t.hunt.views.common.CountViewUI {
    constructor() {
        super(...arguments),
        this.m_count = 0
    }
    get count() {
        return this.m_count
    }
    set count(e) {
        this.m_count = e,
        this.m_sli_Count.value = this.m_count,
        this.onChangeCount()
    }
    onAwake() {
        super.onAwake()
    }
    setData(e = 10, t = 100, i = 0, s = 1003) {
        this.m_txt = s,
        0 < e ? (this.m_step = e, this.m_txt_Minus.text = "-" + e, this.m_txt_Plus.text = "+" + e) : (e = Math.abs(e), this.m_step = Math.ceil((t - i) * e / 100), this.m_txt_Minus.text = "-" + e + "%", this.m_txt_Plus.text = "+" + e + "%"),
        this.m_sli_Count.value = 0,
        this.m_sli_Count.max = t,
        this.m_sli_Count.min = i,
        this.m_sli_Count.value = 1,
        this.onChangeCount()
    }
    onClickPlus() {
        var e = this.m_sli_Count.max;
        !e || this.m_count >= e || (this.m_count += this.m_step, this.m_count = Math.min(e, this.m_count), this.m_sli_Count.value = this.m_count)
    }
    onClickMinus() {
        var e = this.m_sli_Count.min;
        this.m_count <= e || (this.m_count -= this.m_step, this.m_count = Math.max(e, this.m_count), this.m_sli_Count.value = this.m_count)
    }
    onChangeCount() {
        if (this.m_sli_Count.max <= 0) {
            let e = this.m_sli_Count.getChildAt(1);
            void(e.x = 0)
        } else
            this.m_count = this.m_sli_Count.value, this.m_txt_Num.text = S(this.m_txt, this.m_count), O.event(c.COUNT_CHANGE, this.m_count)
    }
}
class Qo extends t.hunt.views.card.VitCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource;
        var i = Data.getItem(t.avatarId);
        t && i && (this.m_img_Bg.skin = {
                0: "hunt/ui_card/cardBgN.png",
                1: "hunt/ui_card/cardBgR.png",
                2: "hunt/ui_card/cardBgSR.png",
                3: "hunt/ui_card/cardBgSSR.png",
                4: "hunt/ui_card/cardBgSP.png"
            }
            [i.rare || 0], 4 == i.rare ? (this.m_ani_Card.visible = !0, this.m_ani_Card.source = "hunt/ue/26.atlas") : 3 == i.rare ? (this.m_ani_Card.visible = !0, this.m_ani_Card.source = "hunt/ue/27.atlas") : this.m_ani_Card.visible = !1, this.m_img_Hero.skin = `hunt/ui_hero/s${t.avatarId}.png`, this.m_txt_Name.text = S(i.name), this.m_img_Cover.visible = this.m_img_Lock.visible = !t.num, this.m_txt_Num.text = t.num, this.m_txt_Num.visible = 1 < t.num, this.m_img_Rare.visible = !!i.rare && 0 < t.num, i.rare && (this.m_img_Rare.skin = `hunt/ui_card/rare_big${i.rare}.png`))
    }
}
class Jo extends t.hunt.views.chat.BubbleItemUI {
    onAwake() {
        super.onAwake(),
        this.m_chb_Equip.mouseEnabled = !1
    }
    dataChanged(e, t) {
        var i;
        t ? this.dataSource = t : t = this.dataSource,
        t && (i = {
                itemId: t.itemCfg.id,
                itemCfg: Data.getItem(t.itemCfg.id),
                notShowName: !0
            }, this.m_view_Item.dataChanged(null, i), this.m_img_Select.visible = t.isSelect, this.m_chb_Equip.selected = t.isSelect)
    }
}
class Zo extends t.hunt.views.club.ClubApplyCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_txt_Name.text = t.name,
        this.m_txt_Num.text = t.cup + "",
        this.m_view_Head.setData({
            head: t.icon
        })
    }
    onClickOk() {
        O.club.reqOperApply(Pe.agree, [this.dataSource.id])
    }
    onClickNo() {
        O.club.reqOperApply(Pe.reject, [this.dataSource.id])
    }
}
class el extends t.hunt.views.club.ClubPlayerCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_txt_Name.text = t.name,
        this.m_txt_Head.text = t.nickName || O.club.getTitle(!1, t.cup);
        var i = t.icon || 0,
        i = (this.m_img_Head.skin = `hunt/ui_hero/h${i}.png`, this.m_txt_Head.color = t.nickName ? "#488dff" : "#8C8C8C", this.m_img_Txt.visible = !1, Sr.instance && (i = Sr.instance.m_selSortIndex, this.m_img_Cup.visible = 0 == i, this.m_txt_Cup.visible = !1, this.m_txt_Position.visible = !1, this.m_txt_Time.visible = !1, 0 == i ? (this.m_txt_Cup.visible = !0, this.m_txt_Cup.text = t.cup || "0", this.m_txt_Cup.font = "2", this.m_img_Txt.visible = !0) : 1 == i ? (this.m_txt_Position.visible = !0, this.m_txt_Position.text = S(et[t.position])) : 2 == i && (this.m_txt_Time.visible = !0, this.m_txt_Time.text = Rt(t.offTime || 0)), this.m_txt_Cup.scale(.7, .7)), 1 == Sr.instance.m_selSortIndex || 0 == Sr.instance.m_selSortIndex);
        3 < t.rank ? i && (this.m_txt_Rank.text = t.rank + "") : i && (this.m_img_Rank.skin = `hunt/ui_club/rank_ico${t.rank}.png`),
        this.m_txt_Rank.visible = 3 < t.rank && i,
        this.m_img_Rank.visible = t.rank <= 3 && i
    }
    onClickQuit() {
        Ae({
            button: V.YesNo,
            msg: S(1073)
        }).then(e => {
            e.type == d.Yes && O.club.reqQuitClub()
        })
    }
}
class tl extends t.hunt.views.common.SortViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_txt_Sort.changeText(t.clang),
        this.m_img_Sort.visible = this.m_img_Sel.visible = t && !!t.isSel,
        this.m_img_Sort.skin = t && t.isUp ? "hunt/ui_comm/img_up.png" : "hunt/ui_comm/img_down.png",
        this.m_img_Star.visible = !!t.showStar,
        this.m_box_Hbox.refresh()
    }
}
class il extends t.hunt.views.club.ClubHeadViewUI {
    setData(e) {
        this.m_txt_Lv.text = e.lv + "",
        this.m_img_Lv.visible = 0 < e.lv,
        this.m_img_Club.skin = e.skin,
        e.name && (this.m_txt_Name.text = e.name)
    }
}
class sl extends t.hunt.views.club.ClubHornorViewUI {
    constructor(e) {
        super(),
        this.m_data = e
    }
    onAwake() {
        this.updateView()
    }
    updateView() {
        var e = this.m_data,
        e = (this.m_txt_Time.text = S(2016) + e.season + ": " + St(new Date(+e.startTime)) + "~" + St(new Date(+e.endTime)), this.m_txt_Rank.text = e.rank + "", this.m_img_Rank.skin = `hunt/ui_club/rank_${e.grade}.png`, this.m_txt_RankName.text = S(Data.getClubGrade(e.grade).name), e.users[0]),
        t = e.militaryGrade;
        this.m_img_Mi.skin = `hunt/ui_arena/tk${t}.png`,
        this.m_txt_RankName.changeText(S(Data.getClubGrade(t).name)),
        this.m_txt_Name.changeText(e.name + ""),
        this.m_txt_Cup.changeText(e.cup + ""),
        this.updateSpine()
    }
    updateSpine() {
        var e = this.m_data.users[0];
        if (e) {
            var i = e.squad;
            for (let t = 0; t < 3; t++) {
                var s = i[t];
                let e = Ee.create({
                    url: `hunt/role/${s}.json`
                });
                e.play(14, !0),
                this.m_img_Spine.addChild(e),
                e.x = this.m_img_Spine.width / 4 * (t + 1),
                e.y = this.m_img_Spine.height / 2
            }
        }
    }
}
class al extends t.hunt.views.club.ClubIconCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_img_Sel.visible = t.isSel,
        this.m_img_Icon.skin = `hunt/ui_club/${t.icon.icon}.png`,
        this.m_chk_Sel.selected = t.isSel
    }
}
class rl extends t.hunt.views.club.ClubIntroduceCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_txt_Name.text = t.name,
        this.m_txt_Head.text = t.nickName,
        this.m_txt_Rank.visible = 2 < e,
        this.m_img_Rank.visible = e <= 2,
        this.m_txt_Rank.text = e + 1 + "",
        this.m_txt_Cup.text = t.cup + "",
        t.nickName ? this.m_txt_Head.text = t.nickName : Rr.instance && (i = O.club.getTitle(!1, t.cup, Rr.instance.m_set), this.m_txt_Head.text = i);
        var i = t.icon || 0;
        this.m_img_Head.skin = `hunt/ui_hero/h${i}.png`,
        e <= 2 && (this.m_img_Rank.skin = `hunt/ui_arena/rank_ico${e+1}.png`)
    }
}
class nl extends t.hunt.views.club.ClubListCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_txt_Name.text = t.name,
        this.m_txt_Person.text = t.population + "",
        this.m_txt_Cup.text = t.cup + "",
        this.m_view_Head.setData({
            skin: `hunt/ui_club/${Data.getClubIcon(t.icon).icon}.png`,
            lv: t.kingCnt
        })
    }
}
class ol extends t.hunt.views.common.SortCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_txt_Type.text = S(t)
    }
}
class ll extends t.hunt.views.club.ClubTitleEditDlgUI {
    constructor(e = []) {
        super(),
        this.m_data = [],
        this.m_data = e
    }
    onAwake() {
        super.onAwake(),
        this.m_txt_Name.text = this.m_data[1],
        this.m_txt_Name.prompt = O.club.getTitle(!0, +Data.getClubTitle(+this.m_data[0]).score)
    }
    onClickSure() {
        var e = this.m_txt_Name.text;
        Gt(e) > +Data.gameConf.initCfg.maxClubTitleLen ? h(S(1084, Data.gameConf.initCfg.maxClubTitleLen)) : (e ? O.club.reqChangeClubSetting(+this.m_data[0], e) : O.club.reqChangeClubSetting(+this.m_data[0], this.m_txt_Name.prompt)).then(() => {
            h(S(1085)),
            this.closeDialog()
        })
    }
}
class hl extends t.hunt.views.club.ClubTitleCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_txt_Name.text = t[1],
        this.m_txt_Num.text = ">=" + Data.getClubTitle(+t[0]).score,
        this.m_index = e
    }
    onClickChange() {
        u(ll, {
            params: [this.dataSource]
        })
    }
}
class ml extends t.hunt.views.common.MoneyIconUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        t && this.setData(t[0], t[1])
    }
    setData(e, t = 0) {
        this.m_img_Bg.skin = `hunt/ui_comm/border${[10,5,4][e-1]}.png`,
        this.m_txt_Num.text = "",
        this.m_img_Icon.skin = `hunt/ui_comm/money${e}.png`,
        this.m_txt_Num.text = t ? t + "" : ""
    }
}
class cl extends t.hunt.views.common.CostVViewUI {
    setData(e) {
        e = Vt(e);
        this.m_txt_1.text = e[0] || "0",
        this.m_txt_2.text = e[1] || "0",
        this.m_txt_3.text = e[2] || "0",
        this.m_box_Gold.visible = this.m_box_Center.visible = !0,
        this.m_box_Center.centerY = 14,
        this.m_img_Center.width = 120,
        this.m_img_S.visible = !0,
        this.m_box_S.centerX = 30,
        this.m_txt_2.visible = !0,
        e[0] || (this.m_box_Gold.visible = !1, this.m_box_Center.centerY = 0, e[1] || (this.m_txt_2.visible = !1, this.m_box_S.centerX = 0, this.m_img_Center.width = 60, this.m_img_S.visible = !1))
    }
}
class dl extends t.hunt.views.common.NpcTalkSelItemUI {
    dataChanged(e) {
        Laya.Tween.clearAll(this.m_btn_Talk),
        this.m_btn_Talk.enableAnimating = !1;
        var t = this.dataSource.talk,
        i = this.dataSource.block;
        this.m_img_Done.visible = 0 < t.items.length && 0 < i.talkRewards.length,
        this.m_img_Reward.visible = 0 < t.items.length,
        this.m_txt_Talk.text = S(t.content),
        this.m_btn_Talk.x = 600,
        this.m_btn_Talk.alpha = 0,
        Laya.Tween.to(this.m_btn_Talk, {
            x: 0,
            alpha: 1
        }, 150, null, null, 50 * e, !0)
    }
}
class ul extends t.hunt.views.common.RewardBoxItemUI {
    constructor() {
        super(...arguments),
        this.m_tlArr = [],
        this.m_aniCfg = {
            1: [0, 0],
            2: [31, 32],
            3: [33, 34],
            4: [35, 36],
            5: [31, 32],
            6: [33, 34]
        }
    }
    onDestroy() {
        super.onDestroy(),
        this.clearTl()
    }
    onAwake() {
        super.onAwake()
    }
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource;
        var i = t.itemCfg,
        i = this.m_aniCfg[i.quality];
        i && i[0] && (this.m_ani_Border.source = `hunt/ue/${i[1]}.atlas`, this.m_ani_Border.play(0, !0)),
        this.m_img_Bg.visible = !1,
        t.itemCfg.type == m.hero ? (this.m_img_Reward.skin = `hunt/ui_hero/s${t.itemCfg.icon}.png`, this.m_ani_Border.visible = !0) : (this.m_img_Reward.skin = `hunt/ui_item/${t.itemCfg.icon}.png`, this.m_txt_Num.text = t.itemNum, this.m_txt_Num.visible = 1 < t.itemNum),
        this.m_img_Reward.visible = !0,
        this.m_txt_Item.text = S(t.itemCfg.name),
        this.ani1.stop(),
        this.m_box_Con.rotation = 0,
        this.m_img_Cover.visible = !0,
        (this.m_img_Cover.alpha = 0) == t.selectState ? this.ani1.play(0, !0) : 1 == t.selectState ? this.doHideAni() : 2 == t.selectState && this.doShowAni()
    }
    doShowAni() {
        this.clearTl();
        let e = new Laya.TimeLine,
        t = (this.m_tlArr.push(e), e.to(this.m_box_Con, {
                scaleX: 1.2,
                scaleY: 1.2
            }, 300), new Laya.TimeLine);
        this.m_tlArr.push(t),
        t.to(this.m_img_Cover, {
            alpha: 0
        }, 150, null),
        e.play(0, !1),
        t.play(0, !1)
    }
    doHideAni() {
        this.clearTl();
        let e = new Laya.TimeLine,
        t = (this.m_tlArr.push(e), e.to(this.m_box_Con, {
                scaleX: .9,
                scaleY: .9
            }, 300), new Laya.TimeLine);
        this.m_tlArr.push(t),
        t.to(this.m_img_Cover, {
            alpha: .5
        }, 150, null, 150),
        e.play(0, !1),
        t.play(0, !1)
    }
    clearTl() {
        this.m_tlArr.length && this.m_tlArr.forEach(e => {
            e.destroy()
        }),
        this.m_tlArr.length = 0
    }
}
class _l extends t.hunt.views.equip.EquipPutCellViewUI {
    dataChanged(e, t) {
        var i;
        t ? this.dataSource = t : t = this.dataSource,
        this.visible = !!t,
        t && (i = {
                itemId: t.itemId,
                itemCfg: Data.getItem(t.itemId),
                notShowName: !0
            }, this.m_view_Item.dataChanged(null, i), this.m_rad_Sel.selected = t.isSel)
    }
}
class pl extends t.hunt.views.equip.EquipSortCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : (t = this.dataSource, this.m_txt_Type.text = S(t.seriesName) + `(${t.num})`)
    }
}
class gl extends t.hunt.views.fight.BattleRewardBagDlgUI {
    onAwake() {
        super.onAwake();
        let s = [];
        if (T.battle.createOpt.logicMapType == Re.worldBoss) {
            var e = T.battle.playerList.find(e => e.id == R.id);
            if (e)
                for (var t in e.tempBag) {
                    var i = Data.getItem(+t);
                    i && s.push({
                        itemId: t,
                        itemNum: e.tempBag[t],
                        itemCfg: i,
                        notShowName: !1,
                        showSelect: !1,
                        notShowStar: !1,
                        showAnime: !0
                    })
                }
        } else (T.battle.rewards || []).forEach(t => {
                var e,
                i = Data.getItem(t[0]);
                i && (-1 != (e = s.findIndex(e => e.itemId == t[0])) ? s[e].itemNum += t[1] : s.push({
                        itemId: t[0],
                        itemNum: t[1],
                        itemCfg: i,
                        notShowName: !1,
                        showSelect: !1,
                        notShowStar: !1,
                        showAnime: !0
                    }))
            });
        s.sort((e, t) => 4 == e.itemId ? -1 : 4 == t.itemId ? 1 : t.itemCfg.quality != e.itemCfg.quality ? t.itemCfg.quality - e.itemCfg.quality : t.itemId - e.itemId),
        this.m_lst_Reward.array = s,
        this.m_txt_NoReward.visible = 0 == s.length
    }
    onClickBack() {
        this.closeDialog()
    }
    onClickClose() {
        this.closeDialog()
    }
}
class yl extends t.hunt.views.fight.BattleBagViewUI {
    constructor() {
        super()
    }
    showPickAni() {
        this.ani1.play(0, !1)
    }
    onClickBag() {
        u(gl)
    }
}
class vl extends t.hunt.views.fight.BattleHurtItemUI {
    constructor() {
        super(...arguments),
        this.m_barWidth = 120,
        this.m_tlArr = []
    }
    onDestroy() {
        this.clearTimeLine(),
        super.onDestroy()
    }
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.showData()
    }
    showData() {
        let t = this.dataSource;
        if (t && t.damageInfo) {
            this.m_txt_Damage.visible = !1,
            this.m_txt_Recover.visible = !1,
            this.m_txt_Bear.visible = !1;
            var i = t.damageInfo.damage / (t.total[0].damage || 1),
            i = (this.m_img_Damage.width = this.m_barWidth * i, this.m_txt_Damage.text = t.damageInfo.damage, t.damageInfo.recover / (t.total[0].recover || 1)),
            i = (this.m_img_Recover.width = this.m_barWidth * i, this.m_txt_Recover.text = t.damageInfo.recover, t.damageInfo.bear / (t.total[0].bear || 1));
            this.m_img_Bear.width = this.m_barWidth * i,
            this.m_txt_Bear.text = t.damageInfo.bear,
            this.m_txt_Lv.text = "Lv." + (t.damageInfo.lvl || 1),
            this.m_img_Head.skin = `hunt/ui_hero/h${t.damageInfo.showId}.png`,
            this.m_img_Head.gray = t.damageInfo.isDie;
            let e = [this.m_img_Damage, this.m_img_Recover, this.m_img_Bear];
            this.m_img_Bg.x = t.isRight ? 122 : 0,
            this.m_box_Con.x = t.isRight ? 3 : 94,
            e.forEach(e => {
                e.left = t.isRight ? NaN : 2,
                e.right = t.isRight ? 2 : NaN
            }),
            this.doAnime()
        }
    }
    doAnime() {
        let e = [this.m_img_Damage, this.m_img_Recover, this.m_img_Bear],
        a = [this.m_txt_Damage, this.m_txt_Recover, this.m_txt_Bear];
        this.clearTimeLine(),
        e.forEach((e, t) => {
            var i = e.width;
            e.width = 0;
            let s = new Laya.TimeLine;
            s.to(e, {
                width: i
            }, i / this.m_barWidth * 1e3),
            s.once(Laya.Event.COMPLETE, null, () => {
                a[t].visible = !0
            }),
            this.m_tlArr.push(s),
            s.play()
        })
    }
    clearTimeLine() {
        (this.m_tlArr || []).forEach(e => {
            e.destroy()
        }),
        this.m_tlArr = []
    }
}
class kl extends t.hunt.views.fight.BattleRankItemUI {
    dataChanged(e, i) {
        if (i ? this.dataSource = i : i = this.dataSource, this.m_box_Con.visible = !!i, i) {
            this.m_txt_Name.text = i.name,
            this.m_txt_Rank.text = i.rank,
            this.m_img_Head.skin = `hunt/ui_hero/h${i.icon}.png`,
            this.m_box_Default.visible = 0 == i.squad.length,
            this.m_box_Ani.visible = 0 < i.squad.length,
            this.m_box_Ani.destroyChildren();
            for (let t = 0; t < 3; t++) {
                var s = i.squad[t];
                if (s)
                    if (Data.getCharType(s)) {
                        let e = Ee.create({
                            url: `hunt/role/${s}.json`
                        });
                        this.m_box_Ani.addChild(e),
                        e.x = 25 + 65 * t,
                        e.play(14, !0)
                    }
            }
            this.m_ani_Border.visible = !!i.showBorder
        }
    }
}
class fl extends t.hunt.views.fight.BattleVsBarUI {
    constructor(e) {
        super(),
        this.m_hpWidth = 180,
        this.m_tlLeft = null,
        this.m_tlRight = null,
        this.m_tlText = null,
        this.m_textAniNum = 0,
        this.dataSource = e
    }
    onDestroy() {
        Laya.Tween.clearAll(this.m_img_LeftHp1),
        Laya.Tween.clearAll(this.m_img_RightHp1),
        this.clearAllTl(),
        super.onDestroy()
    }
    onAwake() {
        super.onAwake();
        var e = T.battle.createOpt.logicMapType;
        e != Re.worldBoss ? (e = e == Re.arena ? 2e3 : 0, Laya.timer.once(e, this, () => {
                this.destroyed || (this.visible = !0, this.showAutoTextAni())
            })) : this.m_txt_Auto.visible = !1
    }
    updateUIShow(t) {
        if (t) {
            this.visible = !0;
            var i = t.leftInfo,
            s = t.rightInfo;
            let e = !1;
            0 == i.curHp && 0 == s.curHp && (e = !0),
            this.m_txt_NameL.text = i.name,
            this.m_txt_NameR.text = s.name;
            this.m_img_HeadL.skin = `hunt/ui_hero/h${t.leftInfo.showId}.png`;
            var i = e ? 1 : i.curHp / i.totalHp,
            a = i * this.m_hpWidth,
            i = (this.m_img_LeftHp2.width = a, i < .4 ? this.m_tlLeft || this.doHpAnime(!0) : this.stopHpAnime(!0), this.doAni(this.m_img_LeftHp1, a), this.m_img_HeadR.skin = `hunt/ui_hero/h${t.rightInfo.showId}.png`, e ? 1 : s.curHp / s.totalHp),
            a = i * this.m_hpWidth;
            this.m_img_RightHp2.width = a,
            i < .4 ? this.m_tlRight || this.doHpAnime(!1) : this.stopHpAnime(!1),
            this.doAni(this.m_img_RightHp1, a)
        } else
            this.visible = !1
    }
    showAutoTextAni() {
        2 < this.m_textAniNum || (this.m_textAniNum || (this.m_textAniNum = 1), this.m_tlText && (this.m_tlText.destroy(), this.m_tlText = null), this.m_txt_Auto.visible = !0, this.m_tlText = new Laya.TimeLine, this.m_tlText.to(this.m_txt_Auto, {
                scaleX: 1.2,
                scaleY: 1.2
            }, 250, null, 500).to(this.m_txt_Auto, {
                scaleX: 1,
                scaleY: 1
            }, 250, null), this.m_tlText.once(Laya.Event.COMPLETE, this, () => {
                this.m_textAniNum++,
                this.showAutoTextAni()
            }), this.m_tlText.play(0, !1))
    }
    doAni(e, t) {
        e.width < t ? (Laya.Tween.clearAll(e), e.width = t) : Laya.Tween.to(e, {
            width: t
        }, 300, null, null, 200, !0)
    }
    doHpAnime(e) {
        let t = new Laya.TimeLine,
        i;
        e ? (i = this.m_img_LeftHp2, this.m_tlLeft = t) : (i = this.m_img_RightHp2, this.m_tlRight = t),
        t.to(i, {
            alpha: .5
        }, 120).to(i, {
            alpha: 1
        }, 120),
        t.play(0, !0)
    }
    stopHpAnime(e) {
        let t;
        e ? (t = this.m_img_LeftHp2, this.m_tlLeft && this.m_tlLeft.destroy(), this.m_tlLeft = null) : (t = this.m_img_RightHp2, this.m_tlRight && this.m_tlRight.destroy(), this.m_tlRight = null),
        t.alpha = 1
    }
    clearAllTl() {
        this.m_tlLeft && this.m_tlLeft.destroy(),
        this.m_tlLeft = null,
        this.m_tlRight && this.m_tlRight.destroy(),
        this.m_tlRight = null,
        this.m_tlText && this.m_tlText.destroy(),
        this.m_tlText = null
    }
}
class Il extends t.hunt.views.fight.KillBossGetRewardUI {
    constructor() {
        super()
    }
    onDestroy() {
        super.onDestroy(),
        this.clearTl()
    }
    showFinalAnime(t) {
        var e,
        i;
        t.evt == Me.luck && ((i = (T.battle.playerList || []).find(e => e.id == t.attackId)) && (this.m_view_Head.setData({
                    head: i.showId
                }), this.m_txt_Name.text = i.name), e = T.battle.createOpt.blockId, (e = qt([Data.getBlock_worldBoss(e).luckLoot], !0, !0, !1)).length && (this.m_view_Item.dataChanged(null, e[0]), this.m_txt_Item.text = S(e[0].itemCfg.name), i.id == R.id && (i = L.getMainRole(), Ci.create({
                        itemId: +e[0].itemId,
                        itemNum: 1,
                        fromPos: {
                            x: i.root.x + Math.randRange(-50, 50),
                            y: i.root.y + Math.randRange(-50, 50)
                        },
                        isAuto: !0,
                        isBossBox: !0
                    }))), this.showAni())
    }
    showAni() {
        this.alpha = 0,
        this.visible = !0,
        this.clearTl(),
        this.alpha = 0;
        var e = Mmobay.Utils.getScreenInfo(),
        e = (e.stageWidth - e.designWidth) / 2;
        this.x = 604 + e,
        this.m_tl = new Laya.TimeLine,
        this.m_tl.to(this, {
            alpha: 1,
            x: 104
        }, 400).to(this, {
            alpha: 0,
            x: -384 - e
        }, 400, null, 1500),
        this.m_tl.play(0, !1),
        this.m_tl.on(Laya.Event.COMPLETE, this, () => {
            this.visible = !1
        })
    }
    clearTl() {
        this.m_tl && (this.m_tl.destroy(), this.m_tl = null)
    }
}
class bl extends t.hunt.views.fight.KillPlayerUI {
    constructor() {
        super(),
        this.m_arr = [],
        this.m_isPlaying = !1,
        this.m_shakeNum = 8
    }
    onDestroy() {
        super.onDestroy(),
        this.clearTl()
    }
    onAwake() {
        super.onAwake()
    }
    showKillAnime(t) {
        var e,
        i,
        s;
        this.m_isPlaying ? this.m_arr.push(t) : (this.m_isPlaying = !0, i = (T.battle.playerList || []).find(e => e.id == t.attackId), e = (T.battle.playerList || []).find(e => e.id == t.targetId), jt(t.attackId) ? (s = T.battle.createOpt.blockId, s = Data.getBlock_worldBoss(s), s = Data.getCharType(s.bossId), this.m_img_HeadL.skin = "hunt/ui_monster/" + (s.avatar || 0) + ".png") : i && (this.m_img_HeadL.skin = "hunt/ui_hero/h" + (i.showId || 0) + ".png"), jt(t.targetId) || t.evt == Me.luck ? (s = T.battle.createOpt.blockId, i = Data.getBlock_worldBoss(s), s = Data.getCharType(i.bossId), this.m_img_HeadR.skin = "hunt/ui_monster/" + (s.avatar || 0) + ".png") : e && (this.m_img_HeadR.skin = "hunt/ui_hero/h" + (e.showId || 0) + ".png"), this.m_tl = new Laya.TimeLine, this.m_tl.to(this, {
                scaleX: 1.4,
                scaleY: 1.4
            }, 30).to(this, {
                scaleX: 1,
                scaleY: 1
            }, 120).to(this, {}, 200), this.m_tl.on(Laya.Event.COMPLETE, this, () => {
                this.m_ani_Kill.visible = !0,
                this.m_ani_Kill.play(0, !1),
                this.playShake()
            }), this.m_tl.play(0, !1), this.visible = !0, this.alpha = 1)
    }
    playShake() {
        this.removeShakeTm(),
        this.m_shakeNum = 8,
        Laya.timer.loop(40, this, this.doShake),
        Laya.timer.once(1e3, this, () => {
            Laya.Tween.to(this, {
                alpha: 0
            }, 850, null, Laya.Handler.create(this, () => {
                    this.visible = !1,
                    this.m_isPlaying = !1,
                    this.m_arr.length && this.showKillAnime(this.m_arr.shift())
                }))
        })
    }
    doShake() {
        var e;
        this.m_shakeNum--,
        this.m_shakeNum <= 0 ? this.removeShakeTm() : (e = this.m_shakeNum % 2 ? .95 : 1, this.scale(e, e))
    }
    removeShakeTm() {
        Laya.timer.clear(this, this.doShake)
    }
    clearTl() {
        this.m_tl && (this.m_tl.destroy(), this.m_tl = null)
    }
}
class wl extends t.hunt.views.fight.RoleHeadItemUI {
    dataChanged(e, t) {
        if (t ? this.dataSource = t : t = this.dataSource, this.m_box_Hp.visible = !t.isBoss, t.isBoss)
            this.m_img_Box.visible = !1;
        else {
            T.battle.hpRecord ? (s = T.battle.getCurHpByUserId(t.userId) / T.battle.hpRecord[t.userId] || 0, this.m_img_Hp.width = Math.range(74 * s || 0, 0, 74)) : this.m_box_Hp.visible = !1;
            var i,
            s = T.battle.getPlayerInfo(t.userId);
            if (!s)
                return;
            let e = !1;
            for (i in s.tempBag || {})
                if (10 < Data.getItem(+i).quality) {
                    e = !0;
                    break
                }
            0 < Object.keys(s.tempBag).length ? (this.m_img_Box.visible = !0, this.m_img_Box.skin = e ? "hunt/ui_fight/box_red.png" : "hunt/ui_fight/box_normal.png") : this.m_img_Box.visible = !1
        }
        s = T.battle.getPlayerInfo(t.userId);
        s && s.targetId == R.id ? (this.beAttack.isPlaying || this.beAttack.play(0, !0), this.m_img_BeAttack.visible = !0, this.m_img_Attack.visible = !0) : (this.beAttack.stop(), this.m_img_BeAttack.visible = !1, this.m_img_Attack.visible = !1),
        T.battle.selfTarget == t.userId ? (this.m_img_Select.visible = !0, this.attackTarget.isPlaying || this.attackTarget.play(0, !0)) : (this.m_img_Select.visible = !1, this.attackTarget.stop()),
        this.m_view_Head.setData({
            head: t.head,
            isMonster: t.isBoss
        }),
        this.m_txt_Name.text = t.rName
    }
}
class Cl extends t.hunt.views.fight.HeroKillAnimeUI {
    constructor() {
        super(...arguments),
        this.m_timeLines = [],
        this.m_doingAnime = !1,
        this.m_isLeft = !1,
        this.m_preArr = []
    }
    get doingAnime() {
        return this.m_doingAnime
    }
    onDestroy() {
        (this.m_timeLines || []).forEach(e => {
            e.total && e.destroy()
        }),
        this.m_timeLines = [],
        super.onDestroy()
    }
    showKillAnime(e) {
        var t = e.isLeft,
        i = e.atkShowId,
        e = e.tarShowId;
        this.doAniShow(t, i, e)
    }
    getNewTimeLine() {
        var e = new Laya.TimeLine;
        return this.m_timeLines.push(e),
        e
    }
    doAniShow(e = !0, t, i) {
        this.visible = !0,
        t && i && (e ? (this.m_preArr[0] = this.m_preArr[0] || [], this.m_preArr[0].push([t, i])) : (this.m_preArr[1] = this.m_preArr[1] || [], this.m_preArr[1].push([t, i]))),
        this.m_doingAnime || (this.m_doingAnime = !0, Laya.timer.once(150, this, a => {
                if (!this.destroyed) {
                    this.m_isLeft = a;
                    let e = this.m_isLeft ? this.m_box_Left : this.m_box_Right;
                    a = (this.m_isLeft ? this.m_preArr[0] : this.m_preArr[1])[0];
                    let t = e.getChildByName("Role"),
                    i = (t.skin = `hunt/ui_hero/${a[0]}.png`, (this.m_box_Role._children || []).forEach(e => {
                            e.visible = !1,
                            e.anchorX = .5,
                            e.anchorY = .5
                        }), this.m_isLeft ? this.aniLShow : this.aniRShow),
                    s = this.m_isLeft ? this.aniLDie : this.aniRDie;
                    this.m_box_Left.visible = this.m_isLeft,
                    this.m_box_Right.visible = !this.m_isLeft,
                    i.offAll(Laya.Event.COMPLETE),
                    s.offAll(Laya.Event.COMPLETE),
                    i.once(Laya.Event.COMPLETE, null, () => {
                        this.m_box_Die.visible = !0,
                        s.play(0, !1)
                    }),
                    s.once(Laya.Event.COMPLETE, null, () => {
                        this.doItemDieShow()
                    }),
                    i.play(0, !1)
                }
            }, [e]))
    }
    doItemDieShow() {
        let h = [];
        if (this.m_isLeft ? (h = this.m_preArr[0], this.m_preArr[0] = []) : (h = this.m_preArr[1], this.m_preArr[1] = []), h.length) {
            let r = [[0, 124], [136, 41], [102, 198]],
            n = [72, 124],
            o = (this.m_isLeft || r.forEach(e => {
                    e[0] = n[0] + n[0] - e[0]
                }), []),
            l = [];
            for (let s = 0, a = h.length; s < a; s++) {
                let t = this.m_box_Role.getChildAt(s);
                if (!t)
                    return;
                o.push(t);
                let e = h[s][1];
                e % 10 != 0 && (e = 10 * Math.floor(e / 10));
                var m = Data.getItem(e);
                if (m) {
                    let e = "";
                    4 == m.rare ? e = "hunt/ue/26.atlas" : 3 == m.rare && (e = "hunt/ue/27.atlas"),
                    t.setKillAni(h[s][1], {
                        0: "hunt/ui_card/cardBgN.png",
                        1: "hunt/ui_card/cardBgR.png",
                        2: "hunt/ui_card/cardBgSR.png",
                        3: "hunt/ui_card/cardBgSSR.png",
                        4: "hunt/ui_card/cardBgSP.png"
                    }
                        [m.rare || 0], m.name, e)
                }
                t.x = (1 == a ? n : r[s])[0],
                t.y = (1 == a ? n : r[s])[1],
                t.gray = !1,
                t.visible = !0,
                t.alpha = 1;
                let i = this.getNewTimeLine();
                i.to(t, {
                    anchorX: .5 + Math.randRange(4, 6) / 100 * (.5 < Math.random() ? 1 : -1),
                    anchorY: .5 + Math.randRange(4, 6) / 100 * (.5 < Math.random() ? 1 : -1)
                }, 30),
                l.push(i)
            }
            Laya.timer.once(280, this, () => {
                l.forEach(e => {
                    e.play(0, !0)
                })
            });
            let e = this.m_box_Light._children,
            t = (e.forEach((e, t) => {
                    var i = [-98, -544];
                    1 == h.length ? (e.x = i[0], e.y = i[1]) : (e.x = i[0] - (n[0] - r[t][0]), e.y = i[1] - (n[1] - r[t][1]))
                }), this.m_isLeft ? this.aniLAttack : this.aniRAttack);
            t.play(0, !1),
            Laya.timer.once(180, this, i => {
                this.destroyed || e.forEach((e, t) => {
                    i[t] ? Laya.timer.once(30 * t, this, () => {
                        this.destroyed || (e.visible = !0, e.play(0, !1), Laya.timer.once(300, this, () => {
                                if (!this.destroyed && (e.visible = !1, o.forEach(e => {
                                            e.gray = !0;
                                            let t = this.getNewTimeLine();
                                            t.to(e, {
                                                alpha: 0
                                            }, 200, null, 50),
                                            t.play(0, !1)
                                        }), l.forEach(e => {
                                            e.total && e.destroy()
                                        }), 0 == t)) {
                                    var i = (this.m_isLeft ? this.m_preArr[0] : this.m_preArr[1]) || [];
                                    let t = (this.m_isLeft ? this.m_preArr[1] : this.m_preArr[0]) || [];
                                    if (i.length)
                                        Laya.timer.once(400, this, () => {
                                            this.destroyed || this.doItemDieShow()
                                        });
                                    else {
                                        let e = this.getNewTimeLine();
                                        i = this.m_isLeft ? this.m_box_Left : this.m_box_Right;
                                        e.to(i, {
                                            alpha: 0
                                        }, 200),
                                        e.play(0, !1),
                                        Laya.timer.once(200, this, () => {
                                            this.destroyed || (this.m_doingAnime = !1, this.m_box_Die.visible = !1, t.length ? this.doAniShow(!this.m_isLeft) : T.battle.showEndLater())
                                        })
                                    }
                                }
                            }), I.instance.playSound(v.SE_CardChange))
                    }) : e.visible = !1
                })
            }, [h])
        }
    }
}
class xl extends t.hunt.views.fish.FishExCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource;
        var i = O.fish.fishExInfo[t.id],
        s = i && i == t.sellNum,
        i = i || 0;
        this.m_txt_Left.text = O.bag.getItemNum(t.id) + "/1",
        this.m_box_Out.visible = s,
        this.m_img_Bg.gray = s,
        this.m_view_Money.visible = !s,
        this.m_txt_Red.text = "" + i,
        this.m_txt_All.text = "/" + t.sellNum,
        this.m_view_Money.setData(t.sellWorth),
        this.m_box_Out.refresh(),
        this.m_view_Item.dataChanged(null, {
            itemId: t.id,
            itemCfg: Data.getItem(t.id),
            notShowName: !0
        })
    }
}
class Sl extends t.hunt.views.fish.FishRankCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        t && (this.m_txt_Rank.visible = 3 < t.rank, this.m_img_Rank.visible = t.rank <= 3, 3 < t.rank ? this.m_txt_Rank.text = t.rank + "" : this.m_img_Rank.skin = `hunt/ui_arena/rank_ico${t.rank}.png`, this.m_txt_Club.text = t.clubName, this.m_txt_Name.text = t.name, this.m_txt_Score.text = O.fish.formatWeight(t.score), this.m_view_Head.setData({
                head: t.icon
            }), this.m_view_Fish.dataChanged(null, {
                notShowName: !0,
                itemCfg: Data.getItem(t.rankKey),
                itemId: t.rankKey
            }))
    }
}
class Al extends t.hunt.views.fish.FishRewardDetailCellViewUI {
    dataChanged(e, t) {
        var i;
        t ? this.dataSource = t : t = this.dataSource,
        !t || t && ((i = t.id <= 3) ? (this.m_txt_Name.text = S([2039, 2040, 2041][t.id - 1]), this.m_img_Rank.skin = `hunt/ui_club/rank_ico${t.id}.png`) : t.start == t.end ? this.m_txt_Rank.text = S(2042, t.start) : this.m_txt_Rank.text = S(2042, t.start + "~" + t.end), this.m_txt_Name.visible = i, this.m_txt_Rank.visible = !i, this.m_img_Rank.visible = i, i = Math.floor(O.fish.m_fishPool * t.rewardRate / 100), this.m_txt_Desc.text = S(2047, t.rewardRate), this.m_view_Money.setData(Math.floor(i)), this.m_img_Bg.visible = !0, this.m_view_Money.x = 230 - this.m_view_Money.width + 244)
    }
}
class Dl extends t.hunt.views.food.FoodCreateCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_view_Item.dataChanged(null, t),
        this.m_img_Lock.visible = !t.itemNum
    }
}
class Ll extends t.hunt.views.food.FoodDelCellViewUI {
    onAwake() {
        super.onAwake(),
        this.on(Laya.Event.CLICK, this, () => {
            this.visible && O.event(c.CREATE_FOOD, this.m_pos)
        })
    }
    onDestroy() {
        super.onDestroy(),
        this.offAll()
    }
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_view_Item.dataChanged(null, t.item)
    }
}
class Tl extends t.hunt.views.food.FoodMakeCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_need = t.needNum;
        var i = t.itemId,
        i = (this.m_view_Item.dataChanged(null, {
                itemId: i,
                itemCfg: t.itemCfg,
                notShowName: !0
            }), this.changeNum(1), this.parent.parent);
        this.m_img_Right.visible = i.array.length - 1 != e
    }
    changeNum(e) {
        var t;
        this.dataSource && (t = this.dataSource.itemNum, this.m_txt_red.text = t + "/" + this.m_need * e, this.m_txt_red.color = t < this.m_need * e ? o.Orange : o.Green)
    }
}
r([n(c.COUNT_CHANGE)], Tl.prototype, "changeNum", null);
class El extends t.hunt.views.individual.HeadIcoItemUI {
    onAwake() {
        super.onAwake(),
        this.m_chb_Equip.mouseEnabled = !1
    }
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        t && (this.m_view_Head.setData({
                head: t.icoId
            }), this.m_img_Select.visible = t.isSelect, this.m_chb_Equip.selected = t.isSelect)
    }
}
class Ml extends t.hunt.views.invite.InviteCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource;
        var i = t.items[0];
        i && this.m_view_Item.dataChanged(null, {
            itemId: i.id,
            itemCfg: Data.getItem(i.id),
            notShowName: !0,
            itemNum: i.count
        });
        let s = O.invite;
        i = s.checkGet(t.id);
        this.m_img_Mask.visible = this.m_img_Get.visible = i,
        this.m_txt_Invite.text = s.m_inviteNum + "/" + t.num,
        this.m_txt_Bind.text = s.m_bind + "/" + t.num,
        this.m_img_Red.visible = !i && s.m_bind >= t.num
    }
}
class Rl extends t.hunt.views.invite.InviteInfoCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_txt_Info.text = t.name + " UID " + t.userId,
        this.m_img_Bind.skin = `hunt/ui_comm/${t.isBindWallet?"right":"wrong"}.png`
    }
}
class Bl extends t.hunt.views.mail.MailCellViewUI {
    dataChanged(e, t) {
        var i;
        t ? this.dataSource = t : t = this.dataSource,
        this.m_txt_Time.text = St(Date.newDate(1e3 * +t.AddTime), "yyyy-mm-dd HH:MM:ss"),
        this.m_img_Item.visible = !!Object.keys(t.items).length,
        this.m_img_Title.skin = t.IsRead ? "hunt/ui_comm/ti_b1.png" : "hunt/ui_comm/ti_a1.png",
        this.m_img_Item.skin = t.IsPicked ? "hunt/ui_comm/img_get.png" : "hunt/ui_mail/img_read.png",
        this.m_img_Bg.skin = t.IsRead ? "hunt/ui_mail/img_bg_get.png" : "hunt/ui_mail/img_bg_read.png",
        t.type == Ye.sys && t.sysMailId ? (i = Data.getSysMail(t.sysMailId), this.m_txt_Tittle.text = S(i.title)) : this.m_txt_Tittle.text = t.title,
        this.m_img_Red.visible = !t.IsRead || !!Object.keys(t.items).length && !t.IsPicked
    }
}
class Nl extends t.hunt.views.mail.MailDetailCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        t.notShowName = !0,
        this.m_view_Item.dataChanged(null, t),
        this.m_view_Money.visible = t.itemId == p.copper,
        this.m_view_Money.visible && this.m_view_Money.setData(t.itemNum)
    }
}
class Pl extends t.hunt.views.menu.MoneyViewUI {
    constructor() {
        super(...arguments),
        this.m_showTips = !1,
        this.m_goldWidth = 0
    }
    onAwake() {
        super.onAwake(),
        this.x += .5 * Mmobay.adaptOffsetWidth,
        this.ani1.on(Laya.Event.COMPLETE, this, () => {
            this.m_showTips = !1
        }),
        this.updateView()
    }
    onDestroy() {
        super.onDestroy(),
        Laya.timer.clearAll(this)
    }
    updateView() {
        var e = R.copper;
        let a = e ? Vt(e) : [0],
        r = (a.reverse(), 0),
        n = 0;
        for (let s = 0; s <= 2; s++) {
            var o = a[s];
            let e = this["m_img_M" + s],
            t = this["m_txt_M" + s],
            i = !1;
            i = 0 == s || (2 != s && !!a[s + 1] || !!o),
            e.visible = i,
            (t.visible = i) && (2 == s && (r = n), t.text = o + "", e.right = n, n += e.width * e.scaleX + 2, t.right = n, n += t.width * t.scaleX + 6)
        }
        (n += 10) < 100 && (n = 100),
        this.m_box_Money.width = n,
        1e4 < e && r && (this.m_goldWidth = n - r)
    }
    onClickMoney(e) {
        var t,
        e = e.target,
        i = e.mouseX;
        if (i < this.m_goldWidth)
            return t = {
                itemId: t = p.copper,
                itemCfg: Data.getItem(t),
                itemNum: R.copper,
                withdrawal: !0
            },
        void u(fa, {
            params: [t]
        });
        this.m_showTips || (this.m_showTips = !0, this.m_img_Tips.x = e.x + i, this.ani1.play(0, !1))
    }
}
r([n(c.COPPER_CHANGE)], Pl.prototype, "updateView", null);
class ql extends t.hunt.views.card.VitDlgUI {
    onAwake() {
        this.m_lst_Skin.scrollBar.visible = !1,
        this.addTitle(S(2023)),
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        var e,
        t = O.hero.getSortSkins(),
        t = (this.m_lst_Skin.array = t, R.getCountByType(Oe.skinBuyVit)),
        i = O.hero.getNextBuyData();
        this.m_btn_None.visible = !1,
        this.m_btn_Buy.visible = !1,
        this.m_btn_Buy.disabled = !1,
        this.m_box_Active.visible = !1,
        this.m_txt_Time.visible = !1,
        this.m_txt_None.visible = !1,
        i && t < Data.maxBuyVits ? (this.m_btn_Buy.visible = !0, e = Data.getBuyVit(t + 1).price, Mmobay.MConfig.openPurchase ? (this.m_txt_Price.text = e + "", this.m_img_Price.skin = "hunt/ui_comm/diamond.png") : (e = Ft(e), this.m_img_Price.skin = `hunt/ui_comm/money${e[0]}.png`, this.m_txt_Price.text = e[1] + ""), t < i.id - 1 ? (this.m_txt_Time.text = S(2021, i.id - 1 - t), this.m_txt_Time.visible = !0) : (this.m_btn_Buy.disabled = !0, this.m_box_Active.visible = !0, this.m_txt_Left.text = S(2022, i.needSkin), this.m_txt_Leftnum.text = O.hero.getAllSkinNum() + "", this.m_box_Active.refresh())) : t == Data.maxBuyVits ? (this.m_btn_None.visible = !0, this.m_txt_None.visible = !0) : (this.m_btn_Buy.visible = !0, e = Data.getBuyVit(t + 1).price, Mmobay.MConfig.openPurchase ? (this.m_txt_Price.text = e + "", this.m_img_Price.skin = "hunt/ui_comm/diamond.png") : (i = Ft(e), this.m_img_Price.skin = `hunt/ui_comm/money${i[0]}.png`, this.m_txt_Price.text = i[1] + ""), this.m_txt_Time.text = S(2021, Data.maxBuyVits - t), this.m_txt_Time.visible = !0)
    }
    onClickBuy(e) {
        var t = R.getCountByType(Oe.skinBuyVit),
        t = Data.getBuyVit(t + 1).price;
        if (R.getVitNum() >= +Data.gameConf.vitCfg.maxVit)
            return h(S(57));
        var i = Mmobay.MConfig.openPurchase ? p.diamond : p.copper;
        O.bag.checkEnough(i, t) && R.reqBuyVit(2)
    }
    onClickInfo(e) {
        var t = S(2058);
        Ae({
            button: V.Yes,
            msg: t,
            title: S(2059),
            leading: 22,
            fontSize: 20
        })
    }
}
r([n(c.VIT_CHANGE)], ql.prototype, "updateView", null);
class Ul extends t.hunt.views.common.VitBuyDlgUI {
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        var e = Data.gameConf.vitCfg.buyVitPrices.split(","),
        t = R.getCountByType(Oe.buyVit),
        t = (this.m_txt_Time.text = e.length - t + "/" + e.length, +e[t] || +e[e.length - 1]);
        Mmobay.MConfig.openPurchase ? (this.m_txt_Price.text = t + "", this.m_img_Price.skin = "hunt/ui_comm/diamond.png") : (e = Ft(t), this.m_txt_Price.text = e[1], this.m_img_Price.skin = `hunt/ui_comm/money${e[0]}.png`)
    }
    onClickBuy(e) {
        this.closeDialog(),
        l(ql)
    }
    onClickFree(e) {
        var t = Data.gameConf.vitCfg.buyVitPrices.split(","),
        i = t.length,
        s = R.getCountByType(Oe.buyVit);
        if (i <= s)
            return h(S(58));
        if (R.getVitNum() >= +Data.gameConf.vitCfg.maxVit)
            return h(S(57));
        i = parseInt(t[s]),
        t = Mmobay.MConfig.openPurchase ? p.diamond : p.copper;
        O.bag.checkEnough(t, i) && R.reqBuyVit(1)
    }
}
r([n(c.VIT_CHANGE)], Ul.prototype, "updateView", null);
class Hl extends t.hunt.views.menu.VitViewUI {
    onAwake() {
        super.onAwake(),
        this.x -= .5 * Mmobay.adaptOffsetWidth,
        this.updateView(),
        this.on(Laya.Event.CLICK, this, this.doClick)
    }
    onDestroy() {
        super.onDestroy(),
        this.offAll(Laya.Event.CLICK),
        this.m_tick && this.m_tick.dispose()
    }
    updateView() {
        var e = +Data.gameConf.vitCfg.maxVit;
        if (this.m_tick && this.m_tick.dispose(), this.m_txt_Vit.text = R.getVitNum() + "/" + e, this.m_btn_Add.visible = R.getVitNum() < e, this.m_img_Bg.width = 115 * Math.min(1, R.getVitNum() / e), this.m_btn_Add.visible) {
            let e = this.m_tick = Ei.create(R.getNextRecoverVit(), 1e3, this.m_txt_Time);
            e.start(),
            e.onEnd = () => {
                this.updateView()
            }
        }
    }
    onCLickAdd() {
        u(Ul)
    }
    doClick(e) {
        e.target == this.m_btn_Add ? this.onCLickAdd() : R.getVitNum() >= +Data.gameConf.vitCfg.maxVit || (this.m_img_Time.visible = !0, Laya.timer.clearAll(this), Laya.timer.once(2e3, this, () => {
                this.m_img_Time.visible = !1
            }))
    }
}
r([n(c.VIT_CHANGE)], Hl.prototype, "updateView", null);
class Ol extends t.hunt.views.mistery.CityNpcItemUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_img_Bg.skin = `hunt/ui_mistery/npc_${t.name}.png`,
        this.m_txt_Title.text = t.npcTitle
    }
}
class Vl extends t.hunt.views.mistery.ClockClubCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_txt_Rank.visible = 3 < t.rank,
        this.m_img_Rank.visible = t.rank <= 3,
        3 < t.rank ? this.m_txt_Rank.text = t.rank + "" : this.m_img_Rank.skin = `hunt/ui_arena/rank_ico${t.rank}.png`,
        this.m_txt_Name.text = t.name,
        this.m_txt_Num.text = t.population + "",
        this.m_txt_Score.text = t.cup + "",
        t.icon && this.m_view_Head.setData({
            skin: `hunt/ui_club/${Data.getClubIcon(t.icon).icon}.png`,
            lv: t.kingCnt
        })
    }
}
class Fl extends t.hunt.views.mistery.ClockClubDetailCellViewUI {
    dataChanged(e, t) {
        if (t ? this.dataSource = t : t = this.dataSource, t) {
            let e = [];
            for (var i of t.items)
                e.push({
                    itemId: i.id,
                    itemNum: i.count,
                    itemCfg: Data.getItem(i.id),
                    notShowName: !0
                });
            this.m_txt_Name.text = S([2039, 2040, 2041][t.id - 1]),
            this.m_img_Rank.skin = `hunt/ui_club/rank_ico${t.id}.png`,
            this.m_lst_Item.array = e
        }
        this.m_box_Show.visible = !!t,
        this.m_txt_NoRank.visible = !t
    }
}
class Gl extends vo {
    onAwake() {
        super.onAwake()
    }
}
class Wl extends t.hunt.views.mistery.ClockRankDetailCellViewUI {
    dataChanged(t, i) {
        if (i ? this.dataSource = i : i = this.dataSource, this.m_lst_Item.array = [], i) {
            let e = [];
            for (var s of i.items)
                e.push({
                    itemId: s.id,
                    itemNum: s.count,
                    itemCfg: Data.getItem(s.id),
                    notShowName: !0
                });
            var a = i.id <= 3;
            a ? (this.m_txt_Name.text = S([2039, 2040, 2041][t]), this.m_img_Rank.skin = `hunt/ui_club/rank_ico${i.id}.png`) : i.start == i.end ? this.m_txt_Rank.text = S(2042, i.start) : this.m_txt_Rank.text = S(2042, i.start + "~" + i.end),
            this.m_txt_Name.visible = a,
            this.m_txt_Rank.visible = !a,
            this.m_img_Rank.visible = a,
            this.m_lst_Item.array = e
        }
    }
}
class Yl extends t.hunt.views.mistery.EleMisteryItemUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.showUI()
    }
    showUI() {
        let e = this.dataSource;
        var t = Math.floor(e.id / 100),
        i = {
            [_.earth]: "earth",
            [_.fire]: "fire",
            [_.water]: "water",
            [_.wind]: "wind"
        },
        i = (this.m_txt_Star.text = e.star[0] == e.star[1] ? e.star[0] + "" : e.star[0] + " ~ " + e.star[1], this.m_img_Ele.skin = `hunt/ui_card/ele_${i[t]}.png`, this.m_txt_Ele.text = e.eleNeed[0][1] == e.eleNeed[0][2] ? e.eleNeed[0][1] + "" : e.eleNeed[0][1] + " ~ " + e.eleNeed[0][2], e.costItems),
        t = Data.getItem(i[0].id),
        s = O.bag.getItemNum(i[0].id);
        this.m_img_Ticket.skin = `hunt/ui_item/${t.icon}.png`,
        this.m_txt_Num.text = s + "",
        this.m_txt_Need.text = "/" + i[0].count,
        this.m_txt_Num.color = s >= i[0].count ? o.White : o.Red,
        this.m_btn_Battle.visible = s >= i[0].count,
        this.m_btn_Buy.visible = s < i[0].count;
        let a = [];
        (e.showItems || []).forEach(e => {
            a.push({
                itemId: e.id,
                itemCfg: Data.getItem(e.id),
                notShowName: !0
            })
        }),
        a.sort((e, t) => 4 == e.itemId ? -1 : 4 == t.itemId ? 1 : t.itemCfg.quality - e.itemCfg.quality),
        this.m_lst_Item.array = a
    }
    onClickBattle() {
        let e = this.dataSource,
        i = e.costItems;
        if (this.checkEnter()) {
            let t = () => {
                O.tileMap.reqEnterEleMistery(e.id).then(e => {
                    T.end(),
                    me.instance.removeAllPopUp(),
                    B.instance && B.instance.createMap(e)
                })
            };
            var s;
            O.bag.getItemNum(i[0].id) >= i[0].count ? t() : (s = Data.getItemBuy(i[0].id)) && (s = Math.min(Math.floor(+R.copper / s.copper) || 1, 100), u(Xr, {
                    params: [i[0].id, 1, 1, s]
                }).then(e => {
                    e.wait().then(() => {
                        O.bag.getItemNum(i[0].id) >= i[0].count && t()
                    })
                }))
        }
    }
    onClickBuy() {
        var e,
        t = this.dataSource.costItems;
        this.checkEnter() && ((e = Data.getItemBuy(t[0].id)) ? (e = Math.min(Math.floor(+R.copper / e.copper) || 1, 100), u(Xr, {
                    params: [t[0].id, 1, 1, e]
                }).then(e => {})) : Ae({
                button: V.YesNo,
                msg: S(2033)
            }).then(e => {
                e.type == d.Yes && u(fr, {
                    params: [ot.Buy]
                })
            }))
    }
    checkEnter() {
        var e = this.dataSource,
        e = O.hero.getAllHeroEnterLimit(e.eleNeed);
        return e.flag || Ae({
            button: V.Yes,
            msg: e.info
        }),
        e.flag
    }
    getTicketStar(e) {
        e = Data.getItem(e);
        return e.type == m.ticket ? e.quality - 9 : 0
    }
    onSelectItem() {
        var e;
        -1 != this.m_lst_Item.selectedIndex && (e = this.m_lst_Item.getItem(this.m_lst_Item.selectedIndex)) && (u(pa, {
                params: [{
                        itemCfg: Data.getItem(e.itemId),
                        itemId: e.itemId,
                        itemNum: e.itemNum
                    }
                ]
            }), this.m_lst_Item.selectedIndex = -1)
    }
}
class Xl extends t.hunt.views.mistery.ElfBoxCellViewUI {
    onAwake() {
        super.onAwake()
    }
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource;
        var i = t.cost.split(","),
        s = i[1],
        a = O.bag.getItemNum(i[0]);
        this.m_txt_Has.text = a + "",
        this.m_txt_Left.text = S(2029, t.remainder),
        this.m_txt_Need.text = "/" + s,
        this.m_txt_Has.color = a < s ? o.Red : o.White,
        this.m_img_Box.skin = `hunt/ui_comm/box${t.type}.png`,
        this.m_img_Item.skin = `hunt/ui_item/${Data.getItem(i[0]).icon}.png`,
        this.m_img_Bg.skin = `hunt/ui_mistery/img_box_bg${t.type}.png`,
        this.m_box_Hbox.refresh()
    }
}
class jl extends t.hunt.views.pass.PassIconViewUI {
    constructor() {
        super(...arguments),
        this.m_Change = !1
    }
    onAwake() {
        super.onAwake()
    }
    updateView(e) {
        this.m_Change && this.setData(e)
    }
    setData(e) {
        this.m_txt_Lv.text = e + ""
    }
}
r([n(c.PASS_LV_CHANGE)], jl.prototype, "updateView", null);
class Kl extends t.hunt.views.pass.PassItemCellViewUI {
    constructor() {
        super(...arguments),
        this.m_L = !1,
        this.m_R = !1
    }
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_btn_End.enableAnimating = this.m_btn_R.enableAnimating = this.m_btn_L.enableAnimating = !1,
        this.m_pbr_Bar1.value = this.m_pbr_Bar2.value = 0;
        var i = Data.getStarPass(e + 1);
        this.m_starData = i;
        let s = O.pass;
        this.m_img_Lock2.visible = this.m_img_LockL.visible = this.m_img_LockR.visible = !0,
        this.m_img_Lock2.alpha = this.m_img_LockL.alpha = 1,
        this.m_img_Lock2.scaleY = this.m_img_Lock2.scaleX = this.m_img_LockL.scaleX = this.m_img_LockL.scaleY = .6,
        t && i ? (this.m_pbr_Bar1.visible = this.m_pbr_Bar2.visible = !0, this.m_box_Normal.visible = !0, this.m_btn_End.visible = !1, this.m_view_Icon.setData(e + 1), this.m_txt_Need.text = i.total - (Data.getStarPass(e) ? Data.getStarPass(e).total : 0) + "", e = (t = s.passLv) >= i.id, this.m_img_LockL.visible = !s.passBuy || !e, this.m_img_LockR.visible = !e, this.setLData(s.passBuy, i, e), this.setRData(i, e), e = (e = s.getNowExpByLv()) / (e + s.getNextExpByLv(t)), t < i.id ? (this.m_pbr_Bar2.value = 0) == t && 1 == i.id ? this.m_pbr_Bar1.value = e : t == i.id - 1 ? this.m_pbr_Bar1.value = 2 * (e - .5) : this.m_pbr_Bar1.value = 0 : t == i.id ? (this.m_pbr_Bar1.value = 1, this.m_pbr_Bar2.value = 2 * e) : (this.m_pbr_Bar1.value = 1, this.m_pbr_Bar2.value = 1)) : (this.m_box_Normal.visible = !1, this.m_btn_End.visible = !0, t = Data.gameConf.starPassCfg.boxCost, this.m_txt_Exp.text = s.getBoxRewardExp() + "/" + t, this.m_pbr_Bar2.visible = !1, Data.getStarPass(s.passLv + 1) || (this.m_pbr_Bar1.value = 1), this.m_txt_Desc.text = S(1122, t), this.m_img_Lock2.visible = !s.passBuy || !!Data.getStarPass(s.passLv + 1), this.m_img_Gen.visible = this.m_txt_Exp.visible = s.passBuy, this.m_img_End.visible = s.checkBigRed())
    }
    setLData(e, t, i) {
        var s = t.payReward[0];
        this.m_view_L.visible = !!t;
        let a = this.m_view_L,
        r = (s ? (a.visible = !0, a.dataChanged(null, {
                    itemId: s.id,
                    itemCfg: Data.getItem(s.id),
                    itemNum: s.count,
                    notShowName: !0,
                    showAnime: !0
                })) : a.visible = !1, O.pass);
        s = -1 != r.passPayGot.indexOf(t.id);
        this.m_L = !(!s && r.passBuy && i),
        this.m_img_L.visible = !s && i && r.passBuy,
        this.m_img_GouL.visible = this.m_img_MaskL.visible = s && r.passBuy
    }
    setRData(e, t) {
        var i = e.comReward[0];
        let s = this.m_view_R;
        i ? (s.dataChanged(null, {
                itemId: i.id,
                itemCfg: Data.getItem(i.id),
                itemNum: i.count,
                notShowName: !0,
                showAnime: !0
            }), s.visible = !0) : s.visible = !1;
        i = -1 != O.pass.passComGot.indexOf(e.id);
        this.m_view_R.visible = !!e,
        this.m_img_R.visible = !i && t,
        this.m_img_GouR.visible = this.m_img_MaskR.visible = i,
        this.m_R = !(!i && t)
    }
    onClickL() {
        var e;
        this.m_L ? (e = this.m_view_L).dataSource && (e = e.dataSource.itemId, u(pa, {
                params: [{
                        itemCfg: Data.getItem(e),
                        itemId: e
                    }
                ]
            })) : this.getPassReward(1)
    }
    onClickR() {
        var e;
        this.m_R ? (e = this.m_view_R).dataSource && (e = e.dataSource.itemId, u(pa, {
                params: [{
                        itemCfg: Data.getItem(e),
                        itemId: e
                    }
                ]
            })) : this.getPassReward(0)
    }
    getPassReward(e) {
        O.pass.reqPassReward(this.dataSource.id, e).then(e => {
            1 == e.items.length ? Data.getItem(e.items[0].id).type == m.randBox && O.bag.reqUseRandBox(e.items[0].id).then(e => {
                l(_a, {
                    params: [e]
                })
            }) : Et(e.items)
        })
    }
    onClickEnd() {
        let e = O.pass;
        if (e.passBuy && e.getBoxRewardExp() > +Data.gameConf.starPassCfg.boxCost)
            e.reqPassBoxReward().then(e => {
                1 == e.items.length && Data.getItem(e.items[0].id).type == m.randBox && O.bag.reqUseRandBox(e.items[0].id).then(e => {
                    l(_a, {
                        params: [e]
                    })
                })
            });
        else {
            let e = Data.gameConf.starPassCfg.boxItems,
            t = [],
            i = e.split(";");
            for (let e = 0; e < i.length; e++) {
                var s = i[e].split(",");
                t.push([s[0], s[1]])
            }
            u(pa, {
                params: [{
                        itemCfg: Data.getItem(t[0][0]),
                        itemId: t[0][0]
                    }
                ]
            })
        }
    }
    unlock() {
        var e = O.pass.passLv,
        t = e >= this.m_starData.id;
        this.m_starData ? t && this.ani1.play(0, !1) : e == Data.maxStarPasss && this.ani1.play(0, !1)
    }
}
r([n(c.PASS_UNLOCK)], Kl.prototype, "unlock", null);
class zl extends t.hunt.views.remember.GameViewUI {
    onAwake() {
        super.onAwake()
    }
    doWin(e = !1, t, i) {
        this.visible = !0,
        this.m_img_Lose.visible = !e,
        this.m_img_Win.visible = e;
        var s,
        a = O.remember,
        r = !!i && !!i.counts;
        if (this.m_view_Box.visible = e && r, this.m_btn_Click.visible = !e || !r, this.m_btn_Open.visible = e && r, e) {
            I.instance.playMusic(v.BGM_Win, 1);
            let e = r ? this.ani3 : this.ani2;
            this.m_txt_Ftimes.text = t.timeScore + "",
            this.m_txt_Fcombos.text = t.comboScore + "",
            this.m_txt_Fscores.text = t.comboScore + t.timeScore + "",
            e.once(Laya.Event.COMPLETE, this, () => {
                this.showFire(),
                Laya.timer.once(1500, this, () => {
                    this.showFire()
                })
            }),
            e.play(0, !1),
            r && this.m_view_Box.setData(O.remember.getBoxData(i.boxIds), "box3");
            for (s of this.m_img_Win._children.filter(e => "new" == e.name))
                s.visible = t.isNewScore
        } else
            I.instance.playMusic(v.BGM_Lose, 1), this.ani1.play(0, !1), this.m_txt_Score.text = a.comboscore + "";
        this.updateBlockInfo(O.remember.blockId)
    }
    showFire() {
        var e;
        for (e of this.m_box_Fire1._children)
            e.play(0, !1)
    }
    onClickClick() {
        O.event(c.REMEMBER_CLOSE)
    }
    onClickOpen() {
        O.event(c.REMEMBER_OPEN)
    }
    updateBlockInfo(t) {
        O.block.reqBlockInfo(t).then(e => {
            this.destroyed || (this.m_view_Like.visible = !0, this.m_view_Like.setData(t, e), this.m_view_Comment.visible = !0, this.m_view_Comment.setData(t))
        })
    }
}
class $l extends t.hunt.views.remember.RememberDetailCellViewUI {
    dataChanged(e, t) {
        var i;
        t ? this.dataSource = t : t = this.dataSource,
        !t || t && ((i = e <= 2) ? (this.m_txt_Name.text = S([2039, 2040, 2041][e]), this.m_img_Rank.skin = `hunt/ui_club/rank_ico${e+1}.png`) : t[0] == t[1] ? this.m_txt_Rank.text = S(2042, t[0]) : this.m_txt_Rank.text = S(2042, t[0] + "~" + t[1]), this.m_txt_Name.visible = i, this.m_txt_Rank.visible = !i, this.m_img_Rank.visible = i, t = O.remember.getRankDetail()[1], this.m_view_Money.dataChanged(null, {
                itemCfg: Data.getItem(t[0][0]),
                notShowName: !0,
                itemNum: t[e][1],
                itemId: t[0][0]
            }), this.m_img_Bg.visible = !0)
    }
}
class Ql extends t.hunt.views.remember.RememberRankCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        t && (this.m_txt_Rank.visible = 3 < t.rank, this.m_img_Rank.visible = t.rank <= 3, 3 < t.rank ? this.m_txt_Rank.text = t.rank + "" : this.m_img_Rank.skin = `hunt/ui_arena/rank_ico${t.rank}.png`, this.m_txt_Club.text = t.clubName, this.m_txt_Name.text = t.name, this.m_txt_Score.text = S(2061, t.score), this.m_view_Head.setData({
                head: t.icon
            }))
    }
}
class Jl extends t.hunt.views.store.StoreItemUI {
    dataChanged(e, t) {
        if (t ? this.dataSource = t : t = this.dataSource, this.m_ticker && this.m_ticker.dispose(), !t.adCfg)
            return this.m_txt_ADCount.visible = !1, this.m_btn_WatchAD.visible = !1, this.m_btn_Purchase.visible = !0, this.m_img_Icon.skin = `hunt/ui_store/diamond_${t.iconId}.png`, this.m_txt_Num.text = t.diamond + "", void(this.m_btn_Purchase.label = S(t.priceLang, t.price));
        var t = t.adCfg,
        i = (this.m_btn_Purchase.visible = !1, this.m_btn_WatchAD.visible = !0, t.maxCount - t.useCount);
        if (this.m_btn_WatchAD.disabled = i <= 0, this.m_txt_ADCount.visible = !0, this.m_txt_ADCount.text = i + "/" + t.maxCount, this.m_img_Icon.skin = "hunt/ui_store/ico_video.png", this.m_txt_Num.text = t.diamond + "", 0 < i) {
            i = t.leftTime;
            if (this.m_btn_WatchAD.mouseEnabled = i <= 0, 0 < i) {
                this.m_txt_Free.visible = !1,
                this.m_txt_Time.visible = !0;
                let e = this.m_ticker = Ei.create(Date.newDate().getTime() + 1e3 * i, 1e3, this.m_txt_Time, "MM:ss");
                e.start(),
                e.onEnd = () => {
                    O.event(c.UPDATE_STORE_LIST)
                }
            } else
                this.m_txt_Free.visible = !0, this.m_txt_Free.text = S(1167), this.m_txt_Time.visible = !1
        } else
            this.m_txt_Free.visible = !0, this.m_txt_Free.text = S(1168), this.m_txt_Time.visible = !1
    }
    onClickPurchase(e) {
        var t = this.dataSource;
        t && R.requestPay(t.id)
    }
    onClickWatchAD(e) {
        window.mbplatform.watchAD().then(e => {
            var t;
            console.log("watch ad result==>" + JSON.stringify(e)),
            e.success ? (t = this.dataSource.adCfg.id, R.reqWatchAD(t)) : h(S(e.code))
        })
    }
}
class Zl extends t.hunt.views.teamBoss.BossCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_txt_Star.text = t.star + "",
        this.m_lst_Item.array = qt([1101], !0)
    }
}
class eh extends t.hunt.views.teamBoss.GroupCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_txt_Name.text = "",
        this.m_txt_Member.text = ""
    }
}
class th extends t.hunt.views.teamBoss.GroupMemberCellViewUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_img_Fade.visible = !t,
        t && (this.m_txt_Name.text = "", this.m_txt_Club.text = "", this.m_lst_Member.array = [null, null], this.m_btn_Change.visible = !0, this.m_btn_Exit.visible = !1, this.m_img_Fade.offAll(), this.m_img_Fade.on(Laya.Event.CLICK, this, () => {
                console.log("邀请")
            }))
    }
    onClickChange(e) {
        console.log("change")
    }
    onClickExit(e) {
        console.log("exit")
    }
}
class ih extends t.hunt.views.teamBoss.SkinBuffViewUI {
    setData(e) {}
}
class sh extends t.hunt.views.teamBoss.TeamRankDetailItemUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_txt_Guild.text = "",
        this.m_txt_Name.text = "",
        this.m_lst_Hero.array = [],
        this.m_view_Head.setData({
            head: t.showId
        })
    }
}
class ah extends t.hunt.views.teamBoss.TeamRankCellItemUI {
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource,
        this.m_img_Rank.skin = "",
        this.m_txt_Rank.text = "1",
        this.m_txt_Name.text = "ttttt",
        this.m_txt_Time.text = Nt(42e3),
        this.m_view_Head.setData({
            head: t.showId
        })
    }
}
class rh extends t.hunt.views.trade.TradeShareDlgUI {
    constructor(e) {
        super(),
        this.m_good = e
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    updateView() {
        var e = this.m_good.itemId,
        t = Data.getItem(e),
        i = Data.getTrade(e),
        s = this.m_good.itemNum,
        e = (this.m_txt_Num.changeText(s + ""), this.m_view_Detail.setData({
                itemId: e,
                notShowName: !0,
                itemCfg: t,
                itemNum: s
            }), this.m_good.price);
        this.m_view_Price.setData(e * s),
        this.m_view_Rate.setData(O.trade.getRateByPass(i.fee))
    }
    onClickShare() {}
}
class nh extends t.hunt.views.trade.TradeInCellViewUI {
    onAwake() {
        super.onAwake(),
        this.on(Laya.Event.CLICK, this, this.onClickSelf)
    }
    dataChanged(e, t) {
        t ? this.dataSource = t : t = this.dataSource;
        var i = t.itemId,
        s = Data.getItem(i);
        this.m_view_Cost.setData(+t.price * +t.itemNum),
        this.m_view_Item.dataChanged(null, {
            notShowName: !0,
            itemNum: t.itemNum,
            itemCfg: s,
            itemId: i,
            showAnime: !0
        })
    }
    onClickSelf(e) {
        "Share" == e.target.name ? u(rh, {
            params: [this.dataSource]
        }) : u(mn, {
            params: [this.dataSource]
        })
    }
}
class oh extends t.hunt.views.trade.TradeOutCellViewUI {
    dataChanged(e, i) {
        i ? this.dataSource = i : i = this.dataSource;
        var t = Data.getItem(i.id);
        if (this.m_view_Item.dataChanged(null, {
                itemId: i.data,
                itemCfg: t,
                notShowName: !0
            }), t.type == m.equip) {
            let t = [],
            e = Data.getEquip(i.id);
            e.props.forEach(e => {
                t.push({
                    isAdd: !0,
                    propId: e.key,
                    propVal: e.value,
                    color: "#51413B"
                })
            }),
            e.viceProps.forEach(e => {
                t.push({
                    isAdd: !0,
                    propId: e.key,
                    propVal: e.value,
                    color: "#51413B"
                })
            }),
            this.m_lst_Prop.array = t
        } else !m.food && t.type != m.cookFood || (this.m_txt_Exp.text = "EXP+" + Data.getFood(i.id).exp);
        this.m_txt_Num.text = S(2060, i.num),
        this.m_txt_Name.text = S(t.name),
        this.m_lst_Prop.visible = t.type == m.equip,
        this.m_txt_Exp.visible = t.type == m.food || t.type == m.cookFood,
        this.m_box_Vbox.refresh()
    }
}
class lh extends t.hunt.views.trade.TradeDownDlgUI {
    constructor(e, t) {
        super(),
        this.m_good = e,
        this.m_index = t
    }
    onAwake() {
        super.onAwake(),
        this.updateView()
    }
    onDestroy() {
        super.onDestroy(),
        this.m_ticker && this.m_ticker.dispose()
    }
    updateView() {
        var e = Data.getItem(this.m_good.itemId);
        this.m_good.personalKey && (this.m_txt_Key.text = this.m_good.personalKey),
        this.m_view_Detail.setData({
            itemNum: this.m_good.itemNum,
            itemId: this.m_good.itemId,
            itemCfg: e,
            notShowName: !0
        }),
        this.m_ticker && this.m_ticker.dispose(),
        this.m_txt_Desc.text = S(1058);
        let t = this.m_ticker = Ei.create(1e3 * +this.m_good.endTime, 1e3, this.m_txt_Time, "HH:MM:ss");
        t.start(),
        this.m_box_Hbox.refresh(),
        t.onEnd = () => {
            this.closeDialog()
        };
        var e = this.m_good.price,
        i = this.m_good.itemNum,
        e = (this.m_view_Money.setData(e * i), Data.getTrade(this.m_good.itemId));
        this.m_view_Rate.setData(O.trade.getRateByPass(e ? e.fee : 0) * i)
    }
    onClickDown() {
        O.trade.reqCancelGoods(this.m_good.tradeId, this.m_index).then(() => {
            I.instance.playSound(v.SE_PutItem),
            this.closeDialog()
        })
    }
}
class hh extends t.hunt.views.trade.TradeSellCellViewUI {
    constructor() {
        super(...arguments),
        this.m_index = -1,
        this.m_isDown = !1,
        this.m_isGet = !1
    }
    onAwake() {
        super.onAwake(),
        this.m_btn_Copy.enableAnimating = !1,
        this.on(Laya.Event.CLICK, this, this.doClick)
    }
    dataChanged(e, t) {
        var i,
        s;
        this.m_index = e,
        this.m_view_Item.scaleX = 1,
        this.m_view_Item.scaleY = 1,
        t ? this.dataSource = t : t = this.dataSource,
        5 == e && (this.m_img_Lock.visible = !O.pass.passBuy),
        this.m_box_Sale.visible = !!t,
        this.m_txt_Time.visible = !1,
        this.m_view_Money.visible = !1,
        this.m_isDown = this.m_isGet = !1,
        this.m_view_Sold.visible = !1,
        this.m_view_Item.visible = !0,
        this.m_img_Pri.visible = !1,
        this.m_img_Timeout.visible = !1,
        this.m_box_Key.visible = !1,
        t && (i = t.itemId, s = Data.getItem(i), this.m_view_Item.dataChanged(null, {
                notShowName: !0,
                itemNum: t.itemNum,
                itemCfg: s,
                itemId: i,
                showAnime: !0
            }), t.endTime ? (this.m_btn_Share.visible = !0, this.m_isDown = !0, this.m_view_Money.setData(t.price * t.itemNum), this.m_view_Money.visible = !t.personalKey, e == O.trade.ani_index && this.doUpAni(), this.m_box_Key.visible = this.m_img_Pri.visible = !!t.personalKey, this.m_txt_Key.text = t.personalKey, this.m_box_Key.refresh()) : (this.m_btn_Share.visible = !1, t.state == Je.sold ? (this.m_view_Money.setData(t.itemNum), this.m_view_Money.visible = !0, this.m_view_Sold.visible = !0, this.m_view_Item.visible = !1, e = Ft(t.itemNum), this.m_view_Sold.setData(e[0])) : t.state == Je.expire && (this.m_txt_Time.visible = !0, this.m_img_Timeout.visible = !0, this.m_view_Item.dataChanged(null, {
                        itemCfg: s,
                        itemId: i,
                        notShowName: !0
                    })), this.m_isGet = !0))
    }
    doDown(e) {
        this.ani2.once(Laya.Event.COMPLETE, this, () => {
            e.run()
        }),
        this.m_btn_Share.visible = !1,
        this.m_isDown = !1,
        this.m_view_Money.visible = !1,
        this.ani2.play(0, !1)
    }
    doUpAni() {
        O.trade.ani_index = -1,
        this.m_ani_Sum.once(Laya.Event.COMPLETE, this, () => {
            this.m_ani_Sum.visible = !1
        }),
        this.m_ani_Sum.visible = !0,
        this.ani1.play(0, !1),
        this.m_ani_Sum.play(0, !1)
    }
    doClick(e) {
        if (e.target != this.m_btn_Copy)
            if (this.m_img_Lock.visible)
                h(S(2015));
            else if ("Share" == e.target.name)
                this.dataSource && this.dataSource.endTime && u(rh, {
                    params: [this.dataSource]
                });
            else if (this.m_isDown)
                this.dataSource && this.dataSource.endTime && u(lh, {
                    params: [this.dataSource, this.m_index]
                });
            else if (this.m_isGet && this.dataSource) {
                let e = O.trade;
                this.dataSource.state && e.reqRecvReward(this.dataSource.id, this.dataSource.state == Je.expire)
            }
    }
    onClickCopy(e) {
        e.stopPropagation(),
        navigator.clipboard && navigator.clipboard.writeText(this.m_txt_Key.text),
        h(S(1))
    }
}
class mh extends t.hunt.views.trade.TradeSpCellViewUI {}
class ch {
    constructor() {}
    static init() {
        var e = Laya.ClassUtils.regClass;
        e("logic/views/block/CommentView.ts", mo),
        e("logic/views/block/LikeView.ts", co),
        e("logic/views/common/BoxShowView.ts", uo),
        e("logic/base/ui/SuperStack.ts", _o),
        e("logic/views/arena/ArenaExChangeItem.ts", po),
        e("logic/views/common/ItemIcon.ts", lr),
        e("logic/views/fight/ChangeHeroView.ts", go),
        e("logic/views/fight/ChangeHeroCellView.ts", yo),
        e("logic/views/arena/ArenaRankCellView.ts", vo),
        e("logic/views/common/HeadView.ts", ko),
        e("logic/views/arena/ArenaRankDetailCellView.ts", fo),
        e("logic/views/arena/ArenaRecordCellView.ts", Io),
        e("logic/views/equip/EquipSumView.ts", bo),
        e("logic/views/bag/BagFoodCellView.ts", wo),
        e("logic/views/block/AuthorItem.ts", Co),
        e("logic/views/block/AuthorView.ts", xo),
        e("logic/views/common/RewardBoxItem.ts", ua),
        e("logic/views/block/BlockInfoView.ts", Vi),
        e("logic/views/card/HeroCardItem.ts", Ho),
        e("logic/views/common/PropView.ts", Oo),
        e("logic/views/common/SkillView.ts", Fo),
        e("logic/views/card/HeroGrowItem.ts", Go),
        e("logic/views/card/HeroPropUpItem.ts", Wo),
        e("logic/views/card/HeroSkinItem.ts", No),
        e("logic/views/card/SkinEleSmallView.ts", Yo),
        e("logic/views/common/ItemDetailView.ts", Xo),
        e("logic/views/menu/CostView.ts", jo),
        e("logic/views/card/SkinEleBigView.ts", Ko),
        e("logic/views/card/SkinListItem.ts", zo),
        e("logic/views/common/CountView.ts", $o),
        e("logic/views/card/VitCellView.ts", Qo),
        e("logic/views/chat/BubbleItem.ts", Jo),
        e("logic/views/chat/ChatChildView.ts", Ur),
        e("logic/views/chat/ChatView.ts", Hr),
        e("logic/views/club/ClubApplyCellView.ts", Zo),
        e("logic/views/club/ClubPlayerCellView.ts", el),
        e("logic/views/common/SortView.ts", tl),
        e("logic/views/club/ClubHeadView.ts", il),
        e("logic/views/club/ClubHornorView.ts", sl),
        e("logic/views/club/ClubIconCellView.ts", al),
        e("logic/views/club/ClubIntroduceCellView.ts", rl),
        e("logic/views/club/ClubListCellView.ts", nl),
        e("logic/views/club/ClubMainDlg.ts", Wr),
        e("logic/views/common/SortCellView.ts", ol),
        e("logic/views/club/ClubTitleCellView.ts", hl),
        e("logic/views/common/MoneyIcon.ts", ml),
        e("logic/views/common/CostVView.ts", cl),
        e("logic/views/common/LoadingView.ts", Qa),
        e("logic/views/common/NpcTalkSelItem.ts", dl),
        e("logic/views/common/SelectBoxItem.ts", ul),
        e("logic/views/common/SkillTips.ts", Vo),
        e("logic/views/equip/EquipPutCellView.ts", _l),
        e("logic/views/equip/EquipSortCellView.ts", pl),
        e("logic/views/fight/BattleBagView.ts", yl),
        e("logic/views/fight/BattleHurtItem.ts", vl),
        e("logic/views/fight/BattleRankItem.ts", kl),
        e("logic/views/fight/BattleRewardItem.ts", ds),
        e("logic/views/fight/BattleVsBar.ts", fl),
        e("logic/views/fight/PvpBattleView.ts", Da),
        e("logic/views/fight/KillBossGetReward.ts", Il),
        e("logic/views/fight/KillPlayer.ts", bl),
        e("logic/views/fight/RoleHeadItem.ts", wl),
        e("logic/views/fight/CommonBattleView.ts", ls),
        e("logic/views/fight/HeroKillAnime.ts", Cl),
        e("logic/views/fish/FishExCellView.ts", xl),
        e("logic/views/fish/FishHistoryCellView.ts", bn),
        e("logic/views/fish/FishRankCellView.ts", Sl),
        e("logic/views/fish/FishRewardDetailCellView.ts", Al),
        e("logic/views/food/FoodCreateCellView.ts", Dl),
        e("logic/views/food/FoodDelCellView.ts", Ll),
        e("logic/views/food/FoodMakeCellView.ts", Tl),
        e("logic/views/individual/HeadIcoItem.ts", El),
        e("logic/views/invite/InviteCellView.ts", Ml),
        e("logic/views/invite/InviteInfoCellView.ts", Rl),
        e("logic/views/mail/MailCellView.ts", Bl),
        e("logic/views/mail/MailDetailCellView.ts", Nl),
        e("logic/views/menu/MainMenu.ts", an),
        e("logic/views/menu/UserMenu.ts", er),
        e("logic/views/menu/MoneyView.ts", Pl),
        e("logic/views/menu/VitView.ts", Hl),
        e("logic/views/mistery/CityBattleView.ts", rs),
        e("logic/views/mistery/CityNpcItem.ts", Ol),
        e("logic/views/mistery/ClockClubCellView.ts", Vl),
        e("logic/views/mistery/ClockClubDetailCellView.ts", Fl),
        e("logic/views/mistery/ClockRankCellVIew.ts", Gl),
        e("logic/views/mistery/ClockRankDetailCellView.ts", Wl),
        e("logic/views/mistery/EleMisteryItem.ts", Yl),
        e("logic/views/mistery/ElfBoxCellView.ts", Xl),
        e("logic/views/pass/PassIconView.ts", jl),
        e("logic/views/pass/PassItemCellView.ts", Kl),
        e("logic/views/pass/PassView.ts", ss),
        e("logic/views/remember/GameView.ts", zl),
        e("logic/views/remember/RememberDetailCellView.ts", $l),
        e("logic/views/remember/RememberRankCellView.ts", Ql),
        e("logic/views/store/StoreItem.ts", Jl),
        e("logic/views/teamBoss/BossCellView.ts", Zl),
        e("logic/views/teamBoss/GroupCellView.ts", eh),
        e("logic/views/teamBoss/GroupMemberCellView.ts", th),
        e("logic/views/teamBoss/SkinBuffView.ts", ih),
        e("logic/views/teamBoss/TeamRankDetailItem.ts", sh),
        e("logic/views/teamBoss/TeamRankCellItem.ts", ah),
        e("logic/views/trade/TradeInCellView.ts", nh),
        e("logic/views/trade/TradeOutCellView.ts", oh),
        e("logic/views/trade/TradeHorseCellView.ts", Ir),
        e("logic/views/trade/TradeSellCellView.ts", hh),
        e("logic/views/trade/TradeSpCellView.ts", mh)
    }
}
ch.width = 560,
ch.height = 1120,
ch.scaleMode = "showall",
ch.screenMode = "vertical",
ch.alignV = "middle",
ch.alignH = "center",
ch.startScene = "hunt/views/arena/ArenaBoxEnterDlg.scene",
ch.sceneRoot = "",
ch.debug = !1,
ch.stat = !1,
ch.physicsDebug = !1,
ch.exportSceneToJson = !0,
ch.init();
new class {
    constructor() {
        var e;
        this.m_versionUrl = "hunt/version.json?t=",
        this.m_configUrl = "hunt/fileconfig.json",
        this.m_langUrl = "hunt/lang.lang",
        this.m_uiUrl = "hunt/ui.json",
        Mmobay.gameDispatcher.event(Mmobay.MEvent.LOAD_PROGRESS, Mmobay.MConst.LOAD_CFG),
        ch.stat && Laya.Stat.show(),
        Laya.alertGlobalError(!0),
        (e = Laya.ClassUtils.regClass)("Animation", z),
        e("Button", J),
        e("CheckBox", Z),
        e("ComboBox", ee),
        e("HBox", te),
        e("VBox", ie),
        e("Scene", ne),
        e("View", oe),
        e("Dialog", de),
        Mmobay.Utils.isNativeApp() ? this.onVersionLoaded() : (this.m_versionUrl += Date.now(), Laya.ResourceVersion.enable(this.m_versionUrl, Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION))
    }
    onVersionLoaded() {
        Laya.loader.clearRes(this.m_versionUrl),
        Laya.AtlasInfoManager.enable(this.m_configUrl, Laya.Handler.create(this, this.onConfigLoaded))
    }
    onConfigLoaded() {
        this.addGlobalBg(),
        on(),
        Laya.loader.clearRes(this.m_configUrl),
        this.registerFont();
        let e = [];
        if (Mmobay.MConfig.language != Mmobay.MConst.LAN_CN) {
            var t = Object.keys(We),
            i = Mmobay.LocalStorage.get("ttfLan");
            if (i) {
                for (var s of t)
                    if (i == We[s]) {
                        this.m_langUrl = `hunt/lang_${s}.lang`,
                        e.push({
                            url: this.m_langUrl,
                            type: Laya.Loader.TEXT
                        });
                        break
                    }
            } else
                e.push({
                    url: this.m_langUrl,
                    type: Laya.Loader.TEXT
                })
        }
        Mmobay.MConfig.loadUI && e.push({
            url: this.m_uiUrl,
            type: Laya.Loader.PLF
        });
        let a = [{
                url: "hunt/atlas/hunt/ui_block.atlas",
                type: Laya.Loader.ATLAS
            }, {
                url: "hunt/atlas/hunt/ui_comm.atlas",
                type: Laya.Loader.ATLAS
            }, {
                url: "hunt/atlas/hunt/ui_pass.atlas",
                type: Laya.Loader.ATLAS
            }, {
                url: "hunt/atlas/hunt/ui_tilemap.atlas",
                type: Laya.Loader.ATLAS
            }, {
                url: "hunt/ue/21.atlas",
                type: Laya.Loader.ATLAS
            }
        ];
        t = Date.newDate().getHours();
        if (t < 6 || 21 <= t ? (O.tileMap.isNight = !0, a.push({
                    url: "hunt/worldmap/ter_res0_1.atlas",
                    type: Laya.Loader.ATLAS
                }, {
                    url: "hunt/worldmap/ter_res1_1.atlas",
                    type: Laya.Loader.ATLAS
                })) : (O.tileMap.isNight = !1, a.push({
                    url: "hunt/worldmap/ter_res0.atlas",
                    type: Laya.Loader.ATLAS
                }, {
                    url: "hunt/worldmap/ter_res1.atlas",
                    type: Laya.Loader.ATLAS
                })), !(e = e.concat(a)).length)
            return this.onResLoaded(!0);
        Laya.loader.load(e, Laya.Handler.create(this, this.onResLoaded))
    }
    onResLoaded(e) {
        var t = Laya.loader.getRes(this.m_langUrl);
        if (t) {
            var i,
            s = JSON.parse(t);
            let e = {};
            for (i in s)
                e[i.replace(/\\n/gi, "\n")] = s[i];
            Laya.Text.langPacks = e,
            Laya.loader.clearRes(this.m_langUrl)
        }
        Laya.loader.clearRes(this.m_uiUrl),
        ln()
    }
    registerFont() {
        Laya.loader.load("hunt/ui_num/num_res.atlas", Laya.Handler.create(this, e => {
                if (!e)
                    return console.log("register font error!");
                ["1", "2", "3", "10", "11", "12"].forEach(e => {
                    let t = new Laya.BitmapFont;
                    t.loadFont("hunt/ui_num/" + e + ".fnt", Laya.Handler.create(null, () => {
                            Laya.Text.registerBitmapFont(e, t)
                        }))
                })
            }))
    }
    addGlobalBg() {
        let e = new Laya.Image("hunt/ui_bg/default_bg.png");
        e.size(Laya.stage.width, Laya.stage.height),
        e.zOrder = -1,
        Laya.stage.addChild(e)
    }
}
}
();
